import { ParserArrow } from "../shape";
export declare const HeadArrow: ParserArrow<void, (import("../shape").Err & import("../shape").ParseErr) | (import("../shape").Ok<import("../nodes").CallNode | import("../nodes").StringNode | import("../nodes").NumberNode | import("../nodes").ArgReferenceNode | import("../nodes").VarReferenceNode | import("../nodes").ThisReferenceNode | import("../nodes").PathNode> & import("../shape").ParseOk<import("../nodes").CallNode | import("../nodes").StringNode | import("../nodes").NumberNode | import("../nodes").ArgReferenceNode | import("../nodes").VarReferenceNode | import("../nodes").ThisReferenceNode | import("../nodes").PathNode>)>;
export declare const BlockBodyArrow: ParserArrow<void, (import("../nodes").TextNode | import("../nodes").InterpolateNode)[]>;
export declare const BlockArrow: ParserArrow<void, (import("../shape").Err & import("../shape").ParseErr) | (import("../shape").Ok<{
    result: (import("../nodes").TextNode | import("../nodes").InterpolateNode)[];
    token: import("../../read/tokens").StringToken | import("../../read/tokens").NumberToken | import("../../read/tokens").CommentToken | import("../../read/tokens").ArgumentToken | import("../../read/tokens").IdentifierToken | import("../../read/tokens").DotToken | import("../../read/tokens").EqToken | import("../../read/tokens").WSToken | import("../../read/tokens").TextToken | import("../../read/tokens").AttributeNameToken | import("../../read/tokens").SexpToken | import("../../read/tokens").UntrustedInterpolateToken | import("../../read/tokens").TrustedInterpolateToken | import("../../read/tokens").BlockToken | import("../../read/tokens").BlockParamsToken | import("../../read/tokens").OpenBlockToken | import("../../read/tokens").CloseBlockToken | import("../../read/tokens").StartTagToken | import("../../read/tokens").EndTagToken | import("../../read/tokens").ArgNameToken | import("../../read/tokens").StringAttributeValueToken | import("../../read/tokens").InterpolateAttributeValueToken | import("../../read/tokens").ValuedAttributeToken | import("../../read/tokens").StringInterpolationToken;
}> & import("../shape").ParseOk<{
    result: (import("../nodes").TextNode | import("../nodes").InterpolateNode)[];
    token: import("../../read/tokens").StringToken | import("../../read/tokens").NumberToken | import("../../read/tokens").CommentToken | import("../../read/tokens").ArgumentToken | import("../../read/tokens").IdentifierToken | import("../../read/tokens").DotToken | import("../../read/tokens").EqToken | import("../../read/tokens").WSToken | import("../../read/tokens").TextToken | import("../../read/tokens").AttributeNameToken | import("../../read/tokens").SexpToken | import("../../read/tokens").UntrustedInterpolateToken | import("../../read/tokens").TrustedInterpolateToken | import("../../read/tokens").BlockToken | import("../../read/tokens").BlockParamsToken | import("../../read/tokens").OpenBlockToken | import("../../read/tokens").CloseBlockToken | import("../../read/tokens").StartTagToken | import("../../read/tokens").EndTagToken | import("../../read/tokens").ArgNameToken | import("../../read/tokens").StringAttributeValueToken | import("../../read/tokens").InterpolateAttributeValueToken | import("../../read/tokens").ValuedAttributeToken | import("../../read/tokens").StringInterpolationToken;
}>)>;
//# sourceMappingURL=block.d.ts.map