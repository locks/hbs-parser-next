import { ok } from "../snippet";
import { range } from "../span";
import { combinator } from "./combinator";
import { any, pattern, seq, tag } from "./combinators";
import Block from "./combinators/hbs/block";
import Interpolate from "./combinators/hbs/interpolate";
import SomeNumber from "./combinators/hbs/number";
import Sexp from "./combinators/hbs/sexp";
import SimplePath from "./combinators/hbs/simple-path";
import SpacedTokens from "./combinators/hbs/spaced-tokens";
import SomeString from "./combinators/hbs/string";
import SomeToken from "./combinators/hbs/token";
import Wrap from "./combinators/wrap";
import { arg } from "./tokens";
import { map } from "./utils";
import Id from "./combinators/hbs/id";
export const token = (c, type) => new SomeToken(c, type);
export const wrap = (c) => new Wrap(c);
export const WS = token(pattern(/^[\u0009\u000A\u000C\u0020]+/u, "WS"), "WS" /* WS */);
export const STRING = new SomeString();
export const NUMBER = new SomeNumber();
export const SEXP = new Sexp();
const ID_SNIPPET = new Id();
export const ID = token(ID_SNIPPET, "Identifier" /* Identifier */);
export const EQ = token(tag("="), "Eq" /* Eq */);
// eslint-disable-next-line @typescript-eslint/no-use-before-define
export const NAMED = combinator(() => seq("NAMED", ID, EQ, EXPRESSION));
export const SIMPLE_PATH = new SimplePath();
export const SPACED_TOKENS = new SpacedTokens();
export const BLOCK = new Block();
export const INTERPOLATE = new Interpolate();
export const DOT = token(tag("."), "Dot" /* Dot */);
export const ARG = map(seq("@id", tag("@"), ID_SNIPPET), ([at, id]) => ok(arg(range(at, id))));
export const EXPRESSION = combinator(() => any("EXPRESSION", SEXP, SIMPLE_PATH, STRING, NUMBER));
