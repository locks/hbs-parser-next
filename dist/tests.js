/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/.pnpm/registry.npmjs.org/ansi-html/0.0.7/node_modules/ansi-html/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/ansi-html/0.0.7/node_modules/ansi-html/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML; // Reference to https://github.com/sindresorhus/ansi-regex

var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/;
var _defColors = {
  reset: ['fff', '000'],
  // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
};
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
};
var _openTags = {
  '1': 'font-weight:bold',
  // bold
  '2': 'opacity:0.5',
  // dim
  '3': '<i>',
  // italic
  '4': '<u>',
  // underscore
  '8': 'display:none',
  // hidden
  '9': '<del>' // delete

};
var _closeTags = {
  '23': '</i>',
  // reset italic
  '24': '</u>',
  // reset underscore
  '29': '</del>' // reset delete

};
[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>';
});
/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */

function ansiHTML(text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text;
  } // Cache opened sequence.


  var ansiCodes = []; // Replace with markup.

  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq];

    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) {
        // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop();
        return '</span>';
      } // Open tag.


      ansiCodes.push(seq);
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">';
    }

    var ct = _closeTags[seq];

    if (ct) {
      // Pop sequence
      ansiCodes.pop();
      return ct;
    }

    return '';
  }); // Make sure tags are closed.

  var l = ansiCodes.length;
  l > 0 && (ret += Array(l + 1).join('</span>'));
  return ret;
}
/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */


ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.');
  }

  var _finalColors = {};

  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null;

    if (!hex) {
      _finalColors[key] = _defColors[key];
      continue;
    }

    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex];
      }

      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string';
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000');
      }

      var defHexColor = _defColors[key];

      if (!hex[0]) {
        hex[0] = defHexColor[0];
      }

      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]];
        hex.push(defHexColor[1]);
      }

      hex = hex.slice(0, 2);
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000');
    }

    _finalColors[key] = hex;
  }

  _setTags(_finalColors);
};
/**
 * Reset colors.
 */


ansiHTML.reset = function () {
  _setTags(_defColors);
};
/**
 * Expose tags, including open and close.
 * @type {Object}
 */


ansiHTML.tags = {};

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () {
      return _openTags;
    }
  });
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () {
      return _closeTags;
    }
  });
} else {
  ansiHTML.tags.open = _openTags;
  ansiHTML.tags.close = _closeTags;
}

function _setTags(colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]; // inverse

  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]; // dark grey

  _openTags['90'] = 'color:#' + colors.darkgrey;

  for (var code in _styles) {
    var color = _styles[code];
    var oriColor = colors[color] || '000';
    _openTags[code] = 'color:#' + oriColor;
    code = parseInt(code);
    _openTags[(code + 10).toString()] = 'background:#' + oriColor;
  }
}

ansiHTML.reset();

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/ansi-regex/2.1.1/node_modules/ansi-regex/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/ansi-regex/2.1.1/node_modules/ansi-regex/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/events/3.1.0/node_modules/events/events.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/events/3.1.0/node_modules/events/events.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/file-loader/6.0.0_webpack@4.43.0/node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.css":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/file-loader/6.0.0_webpack@4.43.0/node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.css ***!
  \******************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "qunit.css");

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/file-loader/6.0.0_webpack@4.43.0/node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./tests/index.html":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/file-loader/6.0.0_webpack@4.43.0/node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./tests/index.html ***!
  \**********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "index.html");

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/html4-entities.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/html4-entities.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];
var alphaIndex = {};
var numIndex = {};

(function () {
  var i = 0;
  var length = HTML_ALPHA.length;

  while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
  }
})();

var Html4Entities =
/** @class */
function () {
  function Html4Entities() {}

  Html4Entities.prototype.decode = function (str) {
    if (!str || !str.length) {
      return '';
    }

    return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
      var chr;

      if (entity.charAt(0) === "#") {
        var code = entity.charAt(1).toLowerCase() === 'x' ? parseInt(entity.substr(2), 16) : parseInt(entity.substr(1));

        if (!(isNaN(code) || code < -32768 || code > 65535)) {
          chr = String.fromCharCode(code);
        }
      } else {
        chr = alphaIndex[entity];
      }

      return chr || s;
    });
  };

  Html4Entities.decode = function (str) {
    return new Html4Entities().decode(str);
  };

  Html4Entities.prototype.encode = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLength = str.length;
    var result = '';
    var i = 0;

    while (i < strLength) {
      var alpha = numIndex[str.charCodeAt(i)];
      result += alpha ? "&" + alpha + ";" : str.charAt(i);
      i++;
    }

    return result;
  };

  Html4Entities.encode = function (str) {
    return new Html4Entities().encode(str);
  };

  Html4Entities.prototype.encodeNonUTF = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLength = str.length;
    var result = '';
    var i = 0;

    while (i < strLength) {
      var cc = str.charCodeAt(i);
      var alpha = numIndex[cc];

      if (alpha) {
        result += "&" + alpha + ";";
      } else if (cc < 32 || cc > 126) {
        result += "&#" + cc + ";";
      } else {
        result += str.charAt(i);
      }

      i++;
    }

    return result;
  };

  Html4Entities.encodeNonUTF = function (str) {
    return new Html4Entities().encodeNonUTF(str);
  };

  Html4Entities.prototype.encodeNonASCII = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLength = str.length;
    var result = '';
    var i = 0;

    while (i < strLength) {
      var c = str.charCodeAt(i);

      if (c <= 255) {
        result += str[i++];
        continue;
      }

      result += '&#' + c + ';';
      i++;
    }

    return result;
  };

  Html4Entities.encodeNonASCII = function (str) {
    return new Html4Entities().encodeNonASCII(str);
  };

  return Html4Entities;
}();

exports.Html4Entities = Html4Entities;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/html5-entities.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/html5-entities.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];
var alphaIndex = {};
var charIndex = {};
createIndexes(alphaIndex, charIndex);

var Html5Entities =
/** @class */
function () {
  function Html5Entities() {}

  Html5Entities.prototype.decode = function (str) {
    if (!str || !str.length) {
      return '';
    }

    return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
      var chr;

      if (entity.charAt(0) === "#") {
        var code = entity.charAt(1) === 'x' ? parseInt(entity.substr(2).toLowerCase(), 16) : parseInt(entity.substr(1));

        if (!(isNaN(code) || code < -32768 || code > 65535)) {
          chr = String.fromCharCode(code);
        }
      } else {
        chr = alphaIndex[entity];
      }

      return chr || s;
    });
  };

  Html5Entities.decode = function (str) {
    return new Html5Entities().decode(str);
  };

  Html5Entities.prototype.encode = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLength = str.length;
    var result = '';
    var i = 0;

    while (i < strLength) {
      var charInfo = charIndex[str.charCodeAt(i)];

      if (charInfo) {
        var alpha = charInfo[str.charCodeAt(i + 1)];

        if (alpha) {
          i++;
        } else {
          alpha = charInfo[''];
        }

        if (alpha) {
          result += "&" + alpha + ";";
          i++;
          continue;
        }
      }

      result += str.charAt(i);
      i++;
    }

    return result;
  };

  Html5Entities.encode = function (str) {
    return new Html5Entities().encode(str);
  };

  Html5Entities.prototype.encodeNonUTF = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLength = str.length;
    var result = '';
    var i = 0;

    while (i < strLength) {
      var c = str.charCodeAt(i);
      var charInfo = charIndex[c];

      if (charInfo) {
        var alpha = charInfo[str.charCodeAt(i + 1)];

        if (alpha) {
          i++;
        } else {
          alpha = charInfo[''];
        }

        if (alpha) {
          result += "&" + alpha + ";";
          i++;
          continue;
        }
      }

      if (c < 32 || c > 126) {
        result += '&#' + c + ';';
      } else {
        result += str.charAt(i);
      }

      i++;
    }

    return result;
  };

  Html5Entities.encodeNonUTF = function (str) {
    return new Html5Entities().encodeNonUTF(str);
  };

  Html5Entities.prototype.encodeNonASCII = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLength = str.length;
    var result = '';
    var i = 0;

    while (i < strLength) {
      var c = str.charCodeAt(i);

      if (c <= 255) {
        result += str[i++];
        continue;
      }

      result += '&#' + c + ';';
      i++;
    }

    return result;
  };

  Html5Entities.encodeNonASCII = function (str) {
    return new Html5Entities().encodeNonASCII(str);
  };

  return Html5Entities;
}();

exports.Html5Entities = Html5Entities;

function createIndexes(alphaIndex, charIndex) {
  var i = ENTITIES.length;

  while (i--) {
    var e = ENTITIES[i];
    var alpha = e[0];
    var chars = e[1];
    var chr = chars[0];
    var addChar = chr < 32 || chr > 126 || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
    var charInfo = void 0;

    if (addChar) {
      charInfo = charIndex[chr] = charIndex[chr] || {};
    }

    if (chars[1]) {
      var chr2 = chars[1];
      alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
      addChar && (charInfo[chr2] = alpha);
    } else {
      alphaIndex[alpha] = String.fromCharCode(chr);
      addChar && (charInfo[''] = alpha);
    }
  }
}

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/index.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/index.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var xml_entities_1 = __webpack_require__(/*! ./xml-entities */ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/xml-entities.js");

exports.XmlEntities = xml_entities_1.XmlEntities;

var html4_entities_1 = __webpack_require__(/*! ./html4-entities */ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/html4-entities.js");

exports.Html4Entities = html4_entities_1.Html4Entities;

var html5_entities_1 = __webpack_require__(/*! ./html5-entities */ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/html5-entities.js");

exports.Html5Entities = html5_entities_1.Html5Entities;
exports.AllHtmlEntities = html5_entities_1.Html5Entities;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/xml-entities.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/xml-entities.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var ALPHA_INDEX = {
  '&lt': '<',
  '&gt': '>',
  '&quot': '"',
  '&apos': '\'',
  '&amp': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&apos;': '\'',
  '&amp;': '&'
};
var CHAR_INDEX = {
  60: 'lt',
  62: 'gt',
  34: 'quot',
  39: 'apos',
  38: 'amp'
};
var CHAR_S_INDEX = {
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  '\'': '&apos;',
  '&': '&amp;'
};

var XmlEntities =
/** @class */
function () {
  function XmlEntities() {}

  XmlEntities.prototype.encode = function (str) {
    if (!str || !str.length) {
      return '';
    }

    return str.replace(/[<>"'&]/g, function (s) {
      return CHAR_S_INDEX[s];
    });
  };

  XmlEntities.encode = function (str) {
    return new XmlEntities().encode(str);
  };

  XmlEntities.prototype.decode = function (str) {
    if (!str || !str.length) {
      return '';
    }

    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function (s) {
      if (s.charAt(1) === '#') {
        var code = s.charAt(2).toLowerCase() === 'x' ? parseInt(s.substr(3), 16) : parseInt(s.substr(2));

        if (isNaN(code) || code < -32768 || code > 65535) {
          return '';
        }

        return String.fromCharCode(code);
      }

      return ALPHA_INDEX[s] || s;
    });
  };

  XmlEntities.decode = function (str) {
    return new XmlEntities().decode(str);
  };

  XmlEntities.prototype.encodeNonUTF = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLength = str.length;
    var result = '';
    var i = 0;

    while (i < strLength) {
      var c = str.charCodeAt(i);
      var alpha = CHAR_INDEX[c];

      if (alpha) {
        result += "&" + alpha + ";";
        i++;
        continue;
      }

      if (c < 32 || c > 126) {
        result += '&#' + c + ';';
      } else {
        result += str.charAt(i);
      }

      i++;
    }

    return result;
  };

  XmlEntities.encodeNonUTF = function (str) {
    return new XmlEntities().encodeNonUTF(str);
  };

  XmlEntities.prototype.encodeNonASCII = function (str) {
    if (!str || !str.length) {
      return '';
    }

    var strLenght = str.length;
    var result = '';
    var i = 0;

    while (i < strLenght) {
      var c = str.charCodeAt(i);

      if (c <= 255) {
        result += str[i++];
        continue;
      }

      result += '&#' + c + ';';
      i++;
    }

    return result;
  };

  XmlEntities.encodeNonASCII = function (str) {
    return new XmlEntities().encodeNonASCII(str);
  };

  return XmlEntities;
}();

exports.XmlEntities = XmlEntities;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/loglevel/1.6.8/node_modules/loglevel/lib/loglevel.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/loglevel/1.6.8/node_modules/loglevel/lib/loglevel.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
  "use strict";

  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  "use strict"; // Slightly dubious tricks to cut down minimized file size

  var noop = function () {};

  var undefinedType = "undefined";
  var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
  var logMethods = ["trace", "debug", "info", "warn", "error"]; // Cross-browser bind equivalent that works at least back to IE6

  function bindMethod(obj, methodName) {
    var method = obj[methodName];

    if (typeof method.bind === 'function') {
      return method.bind(obj);
    } else {
      try {
        return Function.prototype.bind.call(method, obj);
      } catch (e) {
        // Missing bind shim or IE8 + Modernizr, fallback to wrapping
        return function () {
          return Function.prototype.apply.apply(method, [obj, arguments]);
        };
      }
    }
  } // Trace() doesn't print the message in IE, so for that case we need to wrap it


  function traceForIE() {
    if (console.log) {
      if (console.log.apply) {
        console.log.apply(console, arguments);
      } else {
        // In old IE, native console methods themselves don't have apply().
        Function.prototype.apply.apply(console.log, [console, arguments]);
      }
    }

    if (console.trace) console.trace();
  } // Build the best logging method possible for this env
  // Wherever possible we want to bind, not wrap, to preserve stack traces


  function realMethod(methodName) {
    if (methodName === 'debug') {
      methodName = 'log';
    }

    if (typeof console === undefinedType) {
      return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
    } else if (methodName === 'trace' && isIE) {
      return traceForIE;
    } else if (console[methodName] !== undefined) {
      return bindMethod(console, methodName);
    } else if (console.log !== undefined) {
      return bindMethod(console, 'log');
    } else {
      return noop;
    }
  } // These private functions always need `this` to be set properly


  function replaceLoggingMethods(level, loggerName) {
    /*jshint validthis:true */
    for (var i = 0; i < logMethods.length; i++) {
      var methodName = logMethods[i];
      this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);
    } // Define log.log as an alias for log.debug


    this.log = this.debug;
  } // In old IE versions, the console isn't present until you first open it.
  // We build realMethod() replacements here that regenerate logging methods


  function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
    return function () {
      if (typeof console !== undefinedType) {
        replaceLoggingMethods.call(this, level, loggerName);
        this[methodName].apply(this, arguments);
      }
    };
  } // By default, we use closely bound real methods wherever possible, and
  // otherwise we wait for a console to appear, and then try again.


  function defaultMethodFactory(methodName, level, loggerName) {
    /*jshint validthis:true */
    return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
  }

  function Logger(name, defaultLevel, factory) {
    var self = this;
    var currentLevel;
    var storageKey = "loglevel";

    if (name) {
      storageKey += ":" + name;
    }

    function persistLevelIfPossible(levelNum) {
      var levelName = (logMethods[levelNum] || 'silent').toUpperCase();
      if (typeof window === undefinedType) return; // Use localStorage if available

      try {
        window.localStorage[storageKey] = levelName;
        return;
      } catch (ignore) {} // Use session cookie as fallback


      try {
        window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
      } catch (ignore) {}
    }

    function getPersistedLevel() {
      var storedLevel;
      if (typeof window === undefinedType) return;

      try {
        storedLevel = window.localStorage[storageKey];
      } catch (ignore) {} // Fallback to cookies if local storage gives us nothing


      if (typeof storedLevel === undefinedType) {
        try {
          var cookie = window.document.cookie;
          var location = cookie.indexOf(encodeURIComponent(storageKey) + "=");

          if (location !== -1) {
            storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
          }
        } catch (ignore) {}
      } // If the stored level is not valid, treat it as if nothing was stored.


      if (self.levels[storedLevel] === undefined) {
        storedLevel = undefined;
      }

      return storedLevel;
    }
    /*
     *
     * Public logger API - see https://github.com/pimterry/loglevel for details
     *
     */


    self.name = name;
    self.levels = {
      "TRACE": 0,
      "DEBUG": 1,
      "INFO": 2,
      "WARN": 3,
      "ERROR": 4,
      "SILENT": 5
    };
    self.methodFactory = factory || defaultMethodFactory;

    self.getLevel = function () {
      return currentLevel;
    };

    self.setLevel = function (level, persist) {
      if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
        level = self.levels[level.toUpperCase()];
      }

      if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
        currentLevel = level;

        if (persist !== false) {
          // defaults to true
          persistLevelIfPossible(level);
        }

        replaceLoggingMethods.call(self, level, name);

        if (typeof console === undefinedType && level < self.levels.SILENT) {
          return "No console available for logging";
        }
      } else {
        throw "log.setLevel() called with invalid level: " + level;
      }
    };

    self.setDefaultLevel = function (level) {
      if (!getPersistedLevel()) {
        self.setLevel(level, false);
      }
    };

    self.enableAll = function (persist) {
      self.setLevel(self.levels.TRACE, persist);
    };

    self.disableAll = function (persist) {
      self.setLevel(self.levels.SILENT, persist);
    }; // Initialize with the right level


    var initialLevel = getPersistedLevel();

    if (initialLevel == null) {
      initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
    }

    self.setLevel(initialLevel, false);
  }
  /*
   *
   * Top-level API
   *
   */


  var defaultLogger = new Logger();
  var _loggersByName = {};

  defaultLogger.getLogger = function getLogger(name) {
    if (typeof name !== "string" || name === "") {
      throw new TypeError("You must supply a name when creating a logger.");
    }

    var logger = _loggersByName[name];

    if (!logger) {
      logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);
    }

    return logger;
  }; // Grab the current global log variable in case of overwrite


  var _log = typeof window !== undefinedType ? window.log : undefined;

  defaultLogger.noConflict = function () {
    if (typeof window !== undefinedType && window.log === defaultLogger) {
      window.log = _log;
    }

    return defaultLogger;
  };

  defaultLogger.getLoggers = function getLoggers() {
    return _loggersByName;
  };

  return defaultLogger;
});

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/process/0.11.10/node_modules/process/browser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/process/0.11.10/node_modules/process/browser.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/punycode/1.4.1/node_modules/punycode/punycode.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/punycode/1.4.1/node_modules/punycode/punycode.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;

(function (root) {
  /** Detect free variables */
  var freeExports =  true && exports && !exports.nodeType && exports;
  var freeModule =  true && module && !module.nodeType && module;
  var freeGlobal = typeof global == 'object' && global;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }
  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */


  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647,
      // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
      tMin = 1,
      tMax = 26,
      skew = 38,
      damp = 700,
      initialBias = 72,
      initialN = 128,
      // 0x80
  delimiter = '-',
      // '\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
      regexNonASCII = /[^\x20-\x7E]/,
      // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
      // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
      floor = Math.floor,
      stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
      return output;
    }).join('');
  }
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }

    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }

    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }

    return base;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,

    /** Cached calculation results */
    baseMinusT; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;
      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output

      output.splice(i++, 0, n);
    }

    return ucs2encode(output);
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.4.1',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/module.js */ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../../webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/global.js */ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/decode.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/decode.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
 // If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/encode.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/encode.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }

  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }

  return res;
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/index.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/index.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/encode.js");

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * QUnit 2.9.3
 * https://qunitjs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-10-08T15:49Z
 */
(function (global$1) {
  'use strict';

  global$1 = global$1 && global$1.hasOwnProperty('default') ? global$1['default'] : global$1;
  var window$1 = global$1.window;
  var self$1 = global$1.self;
  var console = global$1.console;
  var setTimeout$1 = global$1.setTimeout;
  var clearTimeout = global$1.clearTimeout;
  var document$1 = window$1 && window$1.document;
  var navigator = window$1 && window$1.navigator;

  var localSessionStorage = function () {
    var x = "qunit-test-string";

    try {
      global$1.sessionStorage.setItem(x, x);
      global$1.sessionStorage.removeItem(x);
      return global$1.sessionStorage;
    } catch (e) {
      return undefined;
    }
  }();
  /**
   * Returns a function that proxies to the given method name on the globals
   * console object. The proxy will also detect if the console doesn't exist and
   * will appropriately no-op. This allows support for IE9, which doesn't have a
   * console if the developer tools are not open.
   */


  function consoleProxy(method) {
    return function () {
      if (console) {
        console[method].apply(console, arguments);
      }
    };
  }

  var Logger = {
    warn: consoleProxy("warn")
  };

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  var toString = Object.prototype.toString;
  var hasOwn = Object.prototype.hasOwnProperty;

  var now = Date.now || function () {
    return new Date().getTime();
  };

  var hasPerformanceApi = detectPerformanceApi();
  var performance = hasPerformanceApi ? window$1.performance : undefined;
  var performanceNow = hasPerformanceApi ? performance.now.bind(performance) : now;

  function detectPerformanceApi() {
    return window$1 && typeof window$1.performance !== "undefined" && typeof window$1.performance.mark === "function" && typeof window$1.performance.measure === "function";
  }

  function measure(comment, startMark, endMark) {
    // `performance.measure` may fail if the mark could not be found.
    // reasons a specific mark could not be found include: outside code invoking `performance.clearMarks()`
    try {
      performance.measure(comment, startMark, endMark);
    } catch (ex) {
      Logger.warn("performance.measure could not be executed because of ", ex.message);
    }
  }

  var defined = {
    document: window$1 && window$1.document !== undefined,
    setTimeout: setTimeout$1 !== undefined
  }; // Returns a new Array with the elements that are in a but not in b

  function diff(a, b) {
    var i,
        j,
        result = a.slice();

    for (i = 0; i < result.length; i++) {
      for (j = 0; j < b.length; j++) {
        if (result[i] === b[j]) {
          result.splice(i, 1);
          i--;
          break;
        }
      }
    }

    return result;
  }
  /**
   * Determines whether an element exists in a given array or not.
   *
   * @method inArray
   * @param {Any} elem
   * @param {Array} array
   * @return {Boolean}
   */


  function inArray(elem, array) {
    return array.indexOf(elem) !== -1;
  }
  /**
   * Makes a clone of an object using only Array or Object as base,
   * and copies over the own enumerable properties.
   *
   * @param {Object} obj
   * @return {Object} New object with only the own properties (recursively).
   */


  function objectValues(obj) {
    var key,
        val,
        vals = is("array", obj) ? [] : {};

    for (key in obj) {
      if (hasOwn.call(obj, key)) {
        val = obj[key];
        vals[key] = val === Object(val) ? objectValues(val) : val;
      }
    }

    return vals;
  }

  function extend(a, b, undefOnly) {
    for (var prop in b) {
      if (hasOwn.call(b, prop)) {
        if (b[prop] === undefined) {
          delete a[prop];
        } else if (!(undefOnly && typeof a[prop] !== "undefined")) {
          a[prop] = b[prop];
        }
      }
    }

    return a;
  }

  function objectType(obj) {
    if (typeof obj === "undefined") {
      return "undefined";
    } // Consider: typeof null === object


    if (obj === null) {
      return "null";
    }

    var match = toString.call(obj).match(/^\[object\s(.*)\]$/),
        type = match && match[1];

    switch (type) {
      case "Number":
        if (isNaN(obj)) {
          return "nan";
        }

        return "number";

      case "String":
      case "Boolean":
      case "Array":
      case "Set":
      case "Map":
      case "Date":
      case "RegExp":
      case "Function":
      case "Symbol":
        return type.toLowerCase();

      default:
        return typeof obj === "undefined" ? "undefined" : _typeof(obj);
    }
  } // Safe object type checking


  function is(type, obj) {
    return objectType(obj) === type;
  } // Based on Java's String.hashCode, a simple but not
  // rigorously collision resistant hashing function


  function generateHash(module, testName) {
    var str = module + "\x1C" + testName;
    var hash = 0;

    for (var i = 0; i < str.length; i++) {
      hash = (hash << 5) - hash + str.charCodeAt(i);
      hash |= 0;
    } // Convert the possibly negative integer hash code into an 8 character hex string, which isn't
    // strictly necessary but increases user understanding that the id is a SHA-like hash


    var hex = (0x100000000 + hash).toString(16);

    if (hex.length < 8) {
      hex = "0000000" + hex;
    }

    return hex.slice(-8);
  } // Test for equality any JavaScript type.
  // Authors: Philippe Rathé <prathe@gmail.com>, David Chan <david@troi.org>


  var equiv = function () {
    // Value pairs queued for comparison. Used for breadth-first processing order, recursion
    // detection and avoiding repeated comparison (see below for details).
    // Elements are { a: val, b: val }.
    var pairs = [];

    var getProto = Object.getPrototypeOf || function (obj) {
      return obj.__proto__;
    };

    function useStrictEquality(a, b) {
      // This only gets called if a and b are not strict equal, and is used to compare on
      // the primitive values inside object wrappers. For example:
      // `var i = 1;`
      // `var j = new Number(1);`
      // Neither a nor b can be null, as a !== b and they have the same type.
      if ((typeof a === "undefined" ? "undefined" : _typeof(a)) === "object") {
        a = a.valueOf();
      }

      if ((typeof b === "undefined" ? "undefined" : _typeof(b)) === "object") {
        b = b.valueOf();
      }

      return a === b;
    }

    function compareConstructors(a, b) {
      var protoA = getProto(a);
      var protoB = getProto(b); // Comparing constructors is more strict than using `instanceof`

      if (a.constructor === b.constructor) {
        return true;
      } // Ref #851
      // If the obj prototype descends from a null constructor, treat it
      // as a null prototype.


      if (protoA && protoA.constructor === null) {
        protoA = null;
      }

      if (protoB && protoB.constructor === null) {
        protoB = null;
      } // Allow objects with no prototype to be equivalent to
      // objects with Object as their constructor.


      if (protoA === null && protoB === Object.prototype || protoB === null && protoA === Object.prototype) {
        return true;
      }

      return false;
    }

    function getRegExpFlags(regexp) {
      return "flags" in regexp ? regexp.flags : regexp.toString().match(/[gimuy]*$/)[0];
    }

    function isContainer(val) {
      return ["object", "array", "map", "set"].indexOf(objectType(val)) !== -1;
    }

    function breadthFirstCompareChild(a, b) {
      // If a is a container not reference-equal to b, postpone the comparison to the
      // end of the pairs queue -- unless (a, b) has been seen before, in which case skip
      // over the pair.
      if (a === b) {
        return true;
      }

      if (!isContainer(a)) {
        return typeEquiv(a, b);
      }

      if (pairs.every(function (pair) {
        return pair.a !== a || pair.b !== b;
      })) {
        // Not yet started comparing this pair
        pairs.push({
          a: a,
          b: b
        });
      }

      return true;
    }

    var callbacks = {
      "string": useStrictEquality,
      "boolean": useStrictEquality,
      "number": useStrictEquality,
      "null": useStrictEquality,
      "undefined": useStrictEquality,
      "symbol": useStrictEquality,
      "date": useStrictEquality,
      "nan": function nan() {
        return true;
      },
      "regexp": function regexp(a, b) {
        return a.source === b.source && // Include flags in the comparison
        getRegExpFlags(a) === getRegExpFlags(b);
      },
      // abort (identical references / instance methods were skipped earlier)
      "function": function _function() {
        return false;
      },
      "array": function array(a, b) {
        var i, len;
        len = a.length;

        if (len !== b.length) {
          // Safe and faster
          return false;
        }

        for (i = 0; i < len; i++) {
          // Compare non-containers; queue non-reference-equal containers
          if (!breadthFirstCompareChild(a[i], b[i])) {
            return false;
          }
        }

        return true;
      },
      // Define sets a and b to be equivalent if for each element aVal in a, there
      // is some element bVal in b such that aVal and bVal are equivalent. Element
      // repetitions are not counted, so these are equivalent:
      // a = new Set( [ {}, [], [] ] );
      // b = new Set( [ {}, {}, [] ] );
      "set": function set$$1(a, b) {
        var innerEq,
            outerEq = true;

        if (a.size !== b.size) {
          // This optimization has certain quirks because of the lack of
          // repetition counting. For instance, adding the same
          // (reference-identical) element to two equivalent sets can
          // make them non-equivalent.
          return false;
        }

        a.forEach(function (aVal) {
          // Short-circuit if the result is already known. (Using for...of
          // with a break clause would be cleaner here, but it would cause
          // a syntax error on older Javascript implementations even if
          // Set is unused)
          if (!outerEq) {
            return;
          }

          innerEq = false;
          b.forEach(function (bVal) {
            var parentPairs; // Likewise, short-circuit if the result is already known

            if (innerEq) {
              return;
            } // Swap out the global pairs list, as the nested call to
            // innerEquiv will clobber its contents


            parentPairs = pairs;

            if (innerEquiv(bVal, aVal)) {
              innerEq = true;
            } // Replace the global pairs list


            pairs = parentPairs;
          });

          if (!innerEq) {
            outerEq = false;
          }
        });
        return outerEq;
      },
      // Define maps a and b to be equivalent if for each key-value pair (aKey, aVal)
      // in a, there is some key-value pair (bKey, bVal) in b such that
      // [ aKey, aVal ] and [ bKey, bVal ] are equivalent. Key repetitions are not
      // counted, so these are equivalent:
      // a = new Map( [ [ {}, 1 ], [ {}, 1 ], [ [], 1 ] ] );
      // b = new Map( [ [ {}, 1 ], [ [], 1 ], [ [], 1 ] ] );
      "map": function map(a, b) {
        var innerEq,
            outerEq = true;

        if (a.size !== b.size) {
          // This optimization has certain quirks because of the lack of
          // repetition counting. For instance, adding the same
          // (reference-identical) key-value pair to two equivalent maps
          // can make them non-equivalent.
          return false;
        }

        a.forEach(function (aVal, aKey) {
          // Short-circuit if the result is already known. (Using for...of
          // with a break clause would be cleaner here, but it would cause
          // a syntax error on older Javascript implementations even if
          // Map is unused)
          if (!outerEq) {
            return;
          }

          innerEq = false;
          b.forEach(function (bVal, bKey) {
            var parentPairs; // Likewise, short-circuit if the result is already known

            if (innerEq) {
              return;
            } // Swap out the global pairs list, as the nested call to
            // innerEquiv will clobber its contents


            parentPairs = pairs;

            if (innerEquiv([bVal, bKey], [aVal, aKey])) {
              innerEq = true;
            } // Replace the global pairs list


            pairs = parentPairs;
          });

          if (!innerEq) {
            outerEq = false;
          }
        });
        return outerEq;
      },
      "object": function object(a, b) {
        var i,
            aProperties = [],
            bProperties = [];

        if (compareConstructors(a, b) === false) {
          return false;
        } // Be strict: don't ensure hasOwnProperty and go deep


        for (i in a) {
          // Collect a's properties
          aProperties.push(i); // Skip OOP methods that look the same

          if (a.constructor !== Object && typeof a.constructor !== "undefined" && typeof a[i] === "function" && typeof b[i] === "function" && a[i].toString() === b[i].toString()) {
            continue;
          } // Compare non-containers; queue non-reference-equal containers


          if (!breadthFirstCompareChild(a[i], b[i])) {
            return false;
          }
        }

        for (i in b) {
          // Collect b's properties
          bProperties.push(i);
        } // Ensures identical properties name


        return typeEquiv(aProperties.sort(), bProperties.sort());
      }
    };

    function typeEquiv(a, b) {
      var type = objectType(a); // Callbacks for containers will append to the pairs queue to achieve breadth-first
      // search order. The pairs queue is also used to avoid reprocessing any pair of
      // containers that are reference-equal to a previously visited pair (a special case
      // this being recursion detection).
      //
      // Because of this approach, once typeEquiv returns a false value, it should not be
      // called again without clearing the pair queue else it may wrongly report a visited
      // pair as being equivalent.

      return objectType(b) === type && callbacks[type](a, b);
    }

    function innerEquiv(a, b) {
      var i, pair; // We're done when there's nothing more to compare

      if (arguments.length < 2) {
        return true;
      } // Clear the global pair queue and add the top-level values being compared


      pairs = [{
        a: a,
        b: b
      }];

      for (i = 0; i < pairs.length; i++) {
        pair = pairs[i]; // Perform type-specific comparison on any pairs that are not strictly
        // equal. For container types, that comparison will postpone comparison
        // of any sub-container pair to the end of the pair queue. This gives
        // breadth-first search order. It also avoids the reprocessing of
        // reference-equal siblings, cousins etc, which can have a significant speed
        // impact when comparing a container of small objects each of which has a
        // reference to the same (singleton) large object.

        if (pair.a !== pair.b && !typeEquiv(pair.a, pair.b)) {
          return false;
        }
      } // ...across all consecutive argument pairs


      return arguments.length === 2 || innerEquiv.apply(this, [].slice.call(arguments, 1));
    }

    return function () {
      var result = innerEquiv.apply(undefined, arguments); // Release any retained objects

      pairs.length = 0;
      return result;
    };
  }();
  /**
   * Config object: Maintain internal state
   * Later exposed as QUnit.config
   * `config` initialized at top of scope
   */


  var config = {
    // The queue of tests to run
    queue: [],
    // Block until document ready
    blocking: true,
    // By default, run previously failed tests first
    // very useful in combination with "Hide passed tests" checked
    reorder: true,
    // By default, modify document.title when suite is done
    altertitle: true,
    // HTML Reporter: collapse every test except the first failing test
    // If false, all failing tests will be expanded
    collapse: true,
    // By default, scroll to top of the page when suite is done
    scrolltop: true,
    // Depth up-to which object will be dumped
    maxDepth: 5,
    // When enabled, all tests must call expect()
    requireExpects: false,
    // Placeholder for user-configurable form-exposed URL parameters
    urlConfig: [],
    // Set of all modules.
    modules: [],
    // The first unnamed module
    currentModule: {
      name: "",
      tests: [],
      childModules: [],
      testsRun: 0,
      unskippedTestsRun: 0,
      hooks: {
        before: [],
        beforeEach: [],
        afterEach: [],
        after: []
      }
    },
    callbacks: {},
    // The storage module to use for reordering tests
    storage: localSessionStorage
  }; // take a predefined QUnit.config and extend the defaults

  var globalConfig = window$1 && window$1.QUnit && window$1.QUnit.config; // only extend the global config if there is no QUnit overload

  if (window$1 && window$1.QUnit && !window$1.QUnit.version) {
    extend(config, globalConfig);
  } // Push a loose unnamed module to the modules collection


  config.modules.push(config.currentModule); // Based on jsDump by Ariel Flesler
  // http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html

  var dump = function () {
    function quote(str) {
      return "\"" + str.toString().replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"";
    }

    function literal(o) {
      return o + "";
    }

    function join(pre, arr, post) {
      var s = dump.separator(),
          base = dump.indent(),
          inner = dump.indent(1);

      if (arr.join) {
        arr = arr.join("," + s + inner);
      }

      if (!arr) {
        return pre + post;
      }

      return [pre, inner + arr, base + post].join(s);
    }

    function array(arr, stack) {
      var i = arr.length,
          ret = new Array(i);

      if (dump.maxDepth && dump.depth > dump.maxDepth) {
        return "[object Array]";
      }

      this.up();

      while (i--) {
        ret[i] = this.parse(arr[i], undefined, stack);
      }

      this.down();
      return join("[", ret, "]");
    }

    function isArray(obj) {
      return (//Native Arrays
        toString.call(obj) === "[object Array]" || // NodeList objects
        typeof obj.length === "number" && obj.item !== undefined && (obj.length ? obj.item(0) === obj[0] : obj.item(0) === null && obj[0] === undefined)
      );
    }

    var reName = /^function (\w+)/,
        dump = {
      // The objType is used mostly internally, you can fix a (custom) type in advance
      parse: function parse(obj, objType, stack) {
        stack = stack || [];
        var res,
            parser,
            parserType,
            objIndex = stack.indexOf(obj);

        if (objIndex !== -1) {
          return "recursion(" + (objIndex - stack.length) + ")";
        }

        objType = objType || this.typeOf(obj);
        parser = this.parsers[objType];
        parserType = typeof parser === "undefined" ? "undefined" : _typeof(parser);

        if (parserType === "function") {
          stack.push(obj);
          res = parser.call(this, obj, stack);
          stack.pop();
          return res;
        }

        return parserType === "string" ? parser : this.parsers.error;
      },
      typeOf: function typeOf(obj) {
        var type;

        if (obj === null) {
          type = "null";
        } else if (typeof obj === "undefined") {
          type = "undefined";
        } else if (is("regexp", obj)) {
          type = "regexp";
        } else if (is("date", obj)) {
          type = "date";
        } else if (is("function", obj)) {
          type = "function";
        } else if (obj.setInterval !== undefined && obj.document !== undefined && obj.nodeType === undefined) {
          type = "window";
        } else if (obj.nodeType === 9) {
          type = "document";
        } else if (obj.nodeType) {
          type = "node";
        } else if (isArray(obj)) {
          type = "array";
        } else if (obj.constructor === Error.prototype.constructor) {
          type = "error";
        } else {
          type = typeof obj === "undefined" ? "undefined" : _typeof(obj);
        }

        return type;
      },
      separator: function separator() {
        if (this.multiline) {
          return this.HTML ? "<br />" : "\n";
        } else {
          return this.HTML ? "&#160;" : " ";
        }
      },
      // Extra can be a number, shortcut for increasing-calling-decreasing
      indent: function indent(extra) {
        if (!this.multiline) {
          return "";
        }

        var chr = this.indentChar;

        if (this.HTML) {
          chr = chr.replace(/\t/g, "   ").replace(/ /g, "&#160;");
        }

        return new Array(this.depth + (extra || 0)).join(chr);
      },
      up: function up(a) {
        this.depth += a || 1;
      },
      down: function down(a) {
        this.depth -= a || 1;
      },
      setParser: function setParser(name, parser) {
        this.parsers[name] = parser;
      },
      // The next 3 are exposed so you can use them
      quote: quote,
      literal: literal,
      join: join,
      depth: 1,
      maxDepth: config.maxDepth,
      // This is the list of parsers, to modify them, use dump.setParser
      parsers: {
        window: "[Window]",
        document: "[Document]",
        error: function error(_error) {
          return "Error(\"" + _error.message + "\")";
        },
        unknown: "[Unknown]",
        "null": "null",
        "undefined": "undefined",
        "function": function _function(fn) {
          var ret = "function",
              // Functions never have name in IE
          name = "name" in fn ? fn.name : (reName.exec(fn) || [])[1];

          if (name) {
            ret += " " + name;
          }

          ret += "(";
          ret = [ret, dump.parse(fn, "functionArgs"), "){"].join("");
          return join(ret, dump.parse(fn, "functionCode"), "}");
        },
        array: array,
        nodelist: array,
        "arguments": array,
        object: function object(map, stack) {
          var keys,
              key,
              val,
              i,
              nonEnumerableProperties,
              ret = [];

          if (dump.maxDepth && dump.depth > dump.maxDepth) {
            return "[object Object]";
          }

          dump.up();
          keys = [];

          for (key in map) {
            keys.push(key);
          } // Some properties are not always enumerable on Error objects.


          nonEnumerableProperties = ["message", "name"];

          for (i in nonEnumerableProperties) {
            key = nonEnumerableProperties[i];

            if (key in map && !inArray(key, keys)) {
              keys.push(key);
            }
          }

          keys.sort();

          for (i = 0; i < keys.length; i++) {
            key = keys[i];
            val = map[key];
            ret.push(dump.parse(key, "key") + ": " + dump.parse(val, undefined, stack));
          }

          dump.down();
          return join("{", ret, "}");
        },
        node: function node(_node) {
          var len,
              i,
              val,
              open = dump.HTML ? "&lt;" : "<",
              close = dump.HTML ? "&gt;" : ">",
              tag = _node.nodeName.toLowerCase(),
              ret = open + tag,
              attrs = _node.attributes;

          if (attrs) {
            for (i = 0, len = attrs.length; i < len; i++) {
              val = attrs[i].nodeValue; // IE6 includes all attributes in .attributes, even ones not explicitly
              // set. Those have values like undefined, null, 0, false, "" or
              // "inherit".

              if (val && val !== "inherit") {
                ret += " " + attrs[i].nodeName + "=" + dump.parse(val, "attribute");
              }
            }
          }

          ret += close; // Show content of TextNode or CDATASection

          if (_node.nodeType === 3 || _node.nodeType === 4) {
            ret += _node.nodeValue;
          }

          return ret + open + "/" + tag + close;
        },
        // Function calls it internally, it's the arguments part of the function
        functionArgs: function functionArgs(fn) {
          var args,
              l = fn.length;

          if (!l) {
            return "";
          }

          args = new Array(l);

          while (l--) {
            // 97 is 'a'
            args[l] = String.fromCharCode(97 + l);
          }

          return " " + args.join(", ") + " ";
        },
        // Object calls it internally, the key part of an item in a map
        key: quote,
        // Function calls it internally, it's the content of the function
        functionCode: "[code]",
        // Node calls it internally, it's a html attribute value
        attribute: quote,
        string: quote,
        date: quote,
        regexp: literal,
        number: literal,
        "boolean": literal,
        symbol: function symbol(sym) {
          return sym.toString();
        }
      },
      // If true, entities are escaped ( <, >, \t, space and \n )
      HTML: false,
      // Indentation unit
      indentChar: "  ",
      // If true, items in a collection, are separated by a \n, else just a space.
      multiline: true
    };
    return dump;
  }();

  var SuiteReport = function () {
    function SuiteReport(name, parentSuite) {
      classCallCheck(this, SuiteReport);
      this.name = name;
      this.fullName = parentSuite ? parentSuite.fullName.concat(name) : [];
      this.tests = [];
      this.childSuites = [];

      if (parentSuite) {
        parentSuite.pushChildSuite(this);
      }
    }

    createClass(SuiteReport, [{
      key: "start",
      value: function start(recordTime) {
        if (recordTime) {
          this._startTime = performanceNow();

          if (performance) {
            var suiteLevel = this.fullName.length;
            performance.mark("qunit_suite_" + suiteLevel + "_start");
          }
        }

        return {
          name: this.name,
          fullName: this.fullName.slice(),
          tests: this.tests.map(function (test) {
            return test.start();
          }),
          childSuites: this.childSuites.map(function (suite) {
            return suite.start();
          }),
          testCounts: {
            total: this.getTestCounts().total
          }
        };
      }
    }, {
      key: "end",
      value: function end(recordTime) {
        if (recordTime) {
          this._endTime = performanceNow();

          if (performance) {
            var suiteLevel = this.fullName.length;
            performance.mark("qunit_suite_" + suiteLevel + "_end");
            var suiteName = this.fullName.join(" – ");
            measure(suiteLevel === 0 ? "QUnit Test Run" : "QUnit Test Suite: " + suiteName, "qunit_suite_" + suiteLevel + "_start", "qunit_suite_" + suiteLevel + "_end");
          }
        }

        return {
          name: this.name,
          fullName: this.fullName.slice(),
          tests: this.tests.map(function (test) {
            return test.end();
          }),
          childSuites: this.childSuites.map(function (suite) {
            return suite.end();
          }),
          testCounts: this.getTestCounts(),
          runtime: this.getRuntime(),
          status: this.getStatus()
        };
      }
    }, {
      key: "pushChildSuite",
      value: function pushChildSuite(suite) {
        this.childSuites.push(suite);
      }
    }, {
      key: "pushTest",
      value: function pushTest(test) {
        this.tests.push(test);
      }
    }, {
      key: "getRuntime",
      value: function getRuntime() {
        return this._endTime - this._startTime;
      }
    }, {
      key: "getTestCounts",
      value: function getTestCounts() {
        var counts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          passed: 0,
          failed: 0,
          skipped: 0,
          todo: 0,
          total: 0
        };
        counts = this.tests.reduce(function (counts, test) {
          if (test.valid) {
            counts[test.getStatus()]++;
            counts.total++;
          }

          return counts;
        }, counts);
        return this.childSuites.reduce(function (counts, suite) {
          return suite.getTestCounts(counts);
        }, counts);
      }
    }, {
      key: "getStatus",
      value: function getStatus() {
        var _getTestCounts = this.getTestCounts(),
            total = _getTestCounts.total,
            failed = _getTestCounts.failed,
            skipped = _getTestCounts.skipped,
            todo = _getTestCounts.todo;

        if (failed) {
          return "failed";
        } else {
          if (skipped === total) {
            return "skipped";
          } else if (todo === total) {
            return "todo";
          } else {
            return "passed";
          }
        }
      }
    }]);
    return SuiteReport;
  }();

  var focused = false;
  var moduleStack = [];

  function createModule(name, testEnvironment, modifiers) {
    var parentModule = moduleStack.length ? moduleStack.slice(-1)[0] : null;
    var moduleName = parentModule !== null ? [parentModule.name, name].join(" > ") : name;
    var parentSuite = parentModule ? parentModule.suiteReport : globalSuite;
    var skip = parentModule !== null && parentModule.skip || modifiers.skip;
    var todo = parentModule !== null && parentModule.todo || modifiers.todo;
    var module = {
      name: moduleName,
      parentModule: parentModule,
      tests: [],
      moduleId: generateHash(moduleName),
      testsRun: 0,
      unskippedTestsRun: 0,
      childModules: [],
      suiteReport: new SuiteReport(name, parentSuite),
      // Pass along `skip` and `todo` properties from parent module, in case
      // there is one, to childs. And use own otherwise.
      // This property will be used to mark own tests and tests of child suites
      // as either `skipped` or `todo`.
      skip: skip,
      todo: skip ? false : todo
    };
    var env = {};

    if (parentModule) {
      parentModule.childModules.push(module);
      extend(env, parentModule.testEnvironment);
    }

    extend(env, testEnvironment);
    module.testEnvironment = env;
    config.modules.push(module);
    return module;
  }

  function processModule(name, options, executeNow) {
    var modifiers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    if (objectType(options) === "function") {
      executeNow = options;
      options = undefined;
    }

    var module = createModule(name, options, modifiers); // Move any hooks to a 'hooks' object

    var testEnvironment = module.testEnvironment;
    var hooks = module.hooks = {};
    setHookFromEnvironment(hooks, testEnvironment, "before");
    setHookFromEnvironment(hooks, testEnvironment, "beforeEach");
    setHookFromEnvironment(hooks, testEnvironment, "afterEach");
    setHookFromEnvironment(hooks, testEnvironment, "after");
    var moduleFns = {
      before: setHookFunction(module, "before"),
      beforeEach: setHookFunction(module, "beforeEach"),
      afterEach: setHookFunction(module, "afterEach"),
      after: setHookFunction(module, "after")
    };
    var currentModule = config.currentModule;

    if (objectType(executeNow) === "function") {
      moduleStack.push(module);
      config.currentModule = module;
      executeNow.call(module.testEnvironment, moduleFns);
      moduleStack.pop();
      module = module.parentModule || currentModule;
    }

    config.currentModule = module;

    function setHookFromEnvironment(hooks, environment, name) {
      var potentialHook = environment[name];
      hooks[name] = typeof potentialHook === "function" ? [potentialHook] : [];
      delete environment[name];
    }

    function setHookFunction(module, hookName) {
      return function setHook(callback) {
        module.hooks[hookName].push(callback);
      };
    }
  }

  function module$1(name, options, executeNow) {
    if (focused) {
      return;
    }

    processModule(name, options, executeNow);
  }

  module$1.only = function () {
    if (focused) {
      return;
    }

    config.modules.length = 0;
    config.queue.length = 0;
    module$1.apply(undefined, arguments);
    focused = true;
  };

  module$1.skip = function (name, options, executeNow) {
    if (focused) {
      return;
    }

    processModule(name, options, executeNow, {
      skip: true
    });
  };

  module$1.todo = function (name, options, executeNow) {
    if (focused) {
      return;
    }

    processModule(name, options, executeNow, {
      todo: true
    });
  };

  var LISTENERS = Object.create(null);
  var SUPPORTED_EVENTS = ["runStart", "suiteStart", "testStart", "assertion", "testEnd", "suiteEnd", "runEnd"];
  /**
   * Emits an event with the specified data to all currently registered listeners.
   * Callbacks will fire in the order in which they are registered (FIFO). This
   * function is not exposed publicly; it is used by QUnit internals to emit
   * logging events.
   *
   * @private
   * @method emit
   * @param {String} eventName
   * @param {Object} data
   * @return {Void}
   */

  function emit(eventName, data) {
    if (objectType(eventName) !== "string") {
      throw new TypeError("eventName must be a string when emitting an event");
    } // Clone the callbacks in case one of them registers a new callback


    var originalCallbacks = LISTENERS[eventName];
    var callbacks = originalCallbacks ? [].concat(toConsumableArray(originalCallbacks)) : [];

    for (var i = 0; i < callbacks.length; i++) {
      callbacks[i](data);
    }
  }
  /**
   * Registers a callback as a listener to the specified event.
   *
   * @public
   * @method on
   * @param {String} eventName
   * @param {Function} callback
   * @return {Void}
   */


  function on(eventName, callback) {
    if (objectType(eventName) !== "string") {
      throw new TypeError("eventName must be a string when registering a listener");
    } else if (!inArray(eventName, SUPPORTED_EVENTS)) {
      var events = SUPPORTED_EVENTS.join(", ");
      throw new Error("\"" + eventName + "\" is not a valid event; must be one of: " + events + ".");
    } else if (objectType(callback) !== "function") {
      throw new TypeError("callback must be a function when registering a listener");
    }

    if (!LISTENERS[eventName]) {
      LISTENERS[eventName] = [];
    } // Don't register the same callback more than once


    if (!inArray(callback, LISTENERS[eventName])) {
      LISTENERS[eventName].push(callback);
    }
  }

  function objectOrFunction(x) {
    var type = typeof x === 'undefined' ? 'undefined' : _typeof(x);
    return x !== null && (type === 'object' || type === 'function');
  }

  function isFunction(x) {
    return typeof x === 'function';
  }

  var _isArray = void 0;

  if (Array.isArray) {
    _isArray = Array.isArray;
  } else {
    _isArray = function _isArray(x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  }

  var isArray = _isArray;
  var len = 0;
  var vertxNext = void 0;
  var customSchedulerFn = void 0;

  var asap = function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;

    if (len === 2) {
      // If len is 2, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      if (customSchedulerFn) {
        customSchedulerFn(flush);
      } else {
        scheduleFlush();
      }
    }
  };

  function setScheduler(scheduleFn) {
    customSchedulerFn = scheduleFn;
  }

  function setAsap(asapFn) {
    asap = asapFn;
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]'; // test for web worker but not in IE10

  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined'; // node

  function useNextTick() {
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // see https://github.com/cujojs/when/issues/410 for details
    return function () {
      return process.nextTick(flush);
    };
  } // vertx


  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }

    return useSetTimeout();
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, {
      characterData: true
    });
    return function () {
      node.data = iterations = ++iterations % 2;
    };
  } // web worker


  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      return channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    // Store setTimeout reference so es6-promise will be unaffected by
    // other code modifying setTimeout (like sinon.useFakeTimers())
    var globalSetTimeout = setTimeout;
    return function () {
      return globalSetTimeout(flush, 1);
    };
  }

  var queue = new Array(1000);

  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];
      callback(arg);
      queue[i] = undefined;
      queue[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertx() {
    try {
      var vertx = Function('return this')().require('vertx');

      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush = void 0; // Decide what async method to use to triggering processing of queued callbacks:

  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && "function" === 'function') {
    scheduleFlush = attemptVertx();
  } else {
    scheduleFlush = useSetTimeout();
  }

  function then(onFulfillment, onRejection) {
    var parent = this;
    var child = new this.constructor(noop);

    if (child[PROMISE_ID] === undefined) {
      makePromise(child);
    }

    var _state = parent._state;

    if (_state) {
      var callback = arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    } else {
      subscribe(parent, child, onFulfillment, onRejection);
    }

    return child;
  }
  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
     ```javascript
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
     promise.then(function(value){
      // value === 1
    });
    ```
     Instead of writing the above, your code now simply becomes the following:
     ```javascript
    let promise = Promise.resolve(1);
     promise.then(function(value){
      // value === 1
    });
    ```
     @method resolve
    @static
    @param {Any} value value that the returned promise will be resolved with
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */


  function resolve$1(object) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(noop);
    resolve(promise, object);
    return promise;
  }

  var PROMISE_ID = Math.random().toString(36).substring(2);

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  function selfFulfillment() {
    return new TypeError("You cannot resolve a promise with itself");
  }

  function cannotReturnOwn() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function handleForeignThenable(promise, thenable, then$$1) {
    asap(function (promise) {
      var sealed = false;
      var error = tryThen(then$$1, thenable, function (value) {
        if (sealed) {
          return;
        }

        sealed = true;

        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }

        sealed = true;
        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        return resolve(promise, value);
      }, function (reason) {
        return reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
      handleOwnThenable(promise, maybeThenable);
    } else {
      if (then$$1 === undefined) {
        fulfill(promise, maybeThenable);
      } else if (isFunction(then$$1)) {
        handleForeignThenable(promise, maybeThenable, then$$1);
      } else {
        fulfill(promise, maybeThenable);
      }
    }
  }

  function resolve(promise, value) {
    if (promise === value) {
      reject(promise, selfFulfillment());
    } else if (objectOrFunction(value)) {
      var then$$1 = void 0;

      try {
        then$$1 = value.then;
      } catch (error) {
        reject(promise, error);
        return;
      }

      handleMaybeThenable(promise, value, then$$1);
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length !== 0) {
      asap(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._state = REJECTED;
    promise._result = reason;
    asap(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var _subscribers = parent._subscribers;
    var length = _subscribers.length;
    parent._onerror = null;
    _subscribers[length] = child;
    _subscribers[length + FULFILLED] = onFulfillment;
    _subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      asap(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (subscribers.length === 0) {
      return;
    }

    var child = void 0,
        callback = void 0,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function invokeCallback(settled, promise, callback, detail) {
    var hasCallback = isFunction(callback),
        value = void 0,
        error = void 0,
        succeeded = true;

    if (hasCallback) {
      try {
        value = callback(detail);
      } catch (e) {
        succeeded = false;
        error = e;
      }

      if (promise === value) {
        reject(promise, cannotReturnOwn());
        return;
      }
    } else {
      value = detail;
    }

    if (promise._state !== PENDING) {// noop
    } else if (hasCallback && succeeded) {
      resolve(promise, value);
    } else if (succeeded === false) {
      reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        resolve(promise, value);
      }, function rejectPromise(reason) {
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  var id = 0;

  function nextId() {
    return id++;
  }

  function makePromise(promise) {
    promise[PROMISE_ID] = id++;
    promise._state = undefined;
    promise._result = undefined;
    promise._subscribers = [];
  }

  function validationError() {
    return new Error('Array Methods must be provided an Array');
  }

  var Enumerator = function () {
    function Enumerator(Constructor, input) {
      classCallCheck(this, Enumerator);
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop);

      if (!this.promise[PROMISE_ID]) {
        makePromise(this.promise);
      }

      if (isArray(input)) {
        this.length = input.length;
        this._remaining = input.length;
        this._result = new Array(this.length);

        if (this.length === 0) {
          fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;

          this._enumerate(input);

          if (this._remaining === 0) {
            fulfill(this.promise, this._result);
          }
        }
      } else {
        reject(this.promise, validationError());
      }
    }

    createClass(Enumerator, [{
      key: '_enumerate',
      value: function _enumerate(input) {
        for (var i = 0; this._state === PENDING && i < input.length; i++) {
          this._eachEntry(input[i], i);
        }
      }
    }, {
      key: '_eachEntry',
      value: function _eachEntry(entry, i) {
        var c = this._instanceConstructor;
        var resolve$$1 = c.resolve;

        if (resolve$$1 === resolve$1) {
          var _then = void 0;

          var error = void 0;
          var didError = false;

          try {
            _then = entry.then;
          } catch (e) {
            didError = true;
            error = e;
          }

          if (_then === then && entry._state !== PENDING) {
            this._settledAt(entry._state, i, entry._result);
          } else if (typeof _then !== 'function') {
            this._remaining--;
            this._result[i] = entry;
          } else if (c === Promise$2) {
            var promise = new c(noop);

            if (didError) {
              reject(promise, error);
            } else {
              handleMaybeThenable(promise, entry, _then);
            }

            this._willSettleAt(promise, i);
          } else {
            this._willSettleAt(new c(function (resolve$$1) {
              return resolve$$1(entry);
            }), i);
          }
        } else {
          this._willSettleAt(resolve$$1(entry), i);
        }
      }
    }, {
      key: '_settledAt',
      value: function _settledAt(state, i, value) {
        var promise = this.promise;

        if (promise._state === PENDING) {
          this._remaining--;

          if (state === REJECTED) {
            reject(promise, value);
          } else {
            this._result[i] = value;
          }
        }

        if (this._remaining === 0) {
          fulfill(promise, this._result);
        }
      }
    }, {
      key: '_willSettleAt',
      value: function _willSettleAt(promise, i) {
        var enumerator = this;
        subscribe(promise, undefined, function (value) {
          return enumerator._settledAt(FULFILLED, i, value);
        }, function (reason) {
          return enumerator._settledAt(REJECTED, i, reason);
        });
      }
    }]);
    return Enumerator;
  }();
  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
     Example:
     ```javascript
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
     Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
     If any of the `promises` given to `all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
     Example:
     ```javascript
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
     Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
     @method all
    @static
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */


  function all(entries) {
    return new Enumerator(this, entries).promise;
  }
  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
     Example:
     ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
     let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
     Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
     `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
     ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
     let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
     Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
     An example real-world use case is implementing timeouts:
     ```javascript
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
     @method race
    @static
    @param {Array} promises array of promises to observe
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */


  function race(entries) {
    /*jshint validthis:true */
    var Constructor = this;

    if (!isArray(entries)) {
      return new Constructor(function (_, reject) {
        return reject(new TypeError('You must pass an array to race.'));
      });
    } else {
      return new Constructor(function (resolve, reject) {
        var length = entries.length;

        for (var i = 0; i < length; i++) {
          Constructor.resolve(entries[i]).then(resolve, reject);
        }
      });
    }
  }
  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
     ```javascript
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
     promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
     Instead of writing the above, your code now simply becomes the following:
     ```javascript
    let promise = Promise.reject(new Error('WHOOPS'));
     promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
     @method reject
    @static
    @param {Any} reason value that the returned promise will be rejected with.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */


  function reject$1(reason) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop);
    reject(promise, reason);
    return promise;
  }

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }
  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise's eventual value or the reason
    why the promise cannot be fulfilled.
     Terminology
    -----------
     - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
     A promise can be in one of three states: pending, fulfilled, or rejected.
     Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
     Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
      Basic Usage:
    ------------
     ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
       // on failure
      reject(reason);
    });
     promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
     Advanced Usage:
    ---------------
     Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
     ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
         xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
         function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
     getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
     Unlike callbacks, promises are great composable primitives.
     ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
       return values;
    });
    ```
     @class Promise
    @param {Function} resolver
    Useful for tooling.
    @constructor
  */


  var Promise$2 = function () {
    function Promise(resolver) {
      classCallCheck(this, Promise);
      this[PROMISE_ID] = nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }
    /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
     ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
     Chaining
    --------
     The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
     ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
     findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
     ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
     Assimilation
    ------------
     Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
     If the assimliated promise rejects, then the downstream promise will also reject.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
     Simple Example
    --------------
     Synchronous Example
     ```javascript
    let result;
     try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
     Advanced Example
    --------------
     Synchronous Example
     ```javascript
    let author, books;
     try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
     function foundBooks(books) {
     }
     function failure(reason) {
     }
     findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
     @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
    */

    /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
    ```js
    function findAuthor(){
    throw new Error('couldn't find that author');
    }
    // synchronous
    try {
    findAuthor();
    } catch(reason) {
    // something went wrong
    }
    // async with promises
    findAuthor().catch(function(reason){
    // something went wrong
    });
    ```
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
    */


    createClass(Promise, [{
      key: 'catch',
      value: function _catch(onRejection) {
        return this.then(null, onRejection);
      }
      /**
        `finally` will be invoked regardless of the promise's fate just as native
        try/catch/finally behaves
      
        Synchronous example:
      
        ```js
        findAuthor() {
          if (Math.random() > 0.5) {
            throw new Error();
          }
          return new Author();
        }
      
        try {
          return findAuthor(); // succeed or fail
        } catch(error) {
          return findOtherAuther();
        } finally {
          // always runs
          // doesn't affect the return value
        }
        ```
      
        Asynchronous example:
      
        ```js
        findAuthor().catch(function(reason){
          return findOtherAuther();
        }).finally(function(){
          // author was either found, or not
        });
        ```
      
        @method finally
        @param {Function} callback
        @return {Promise}
      */

    }, {
      key: 'finally',
      value: function _finally(callback) {
        var promise = this;
        var constructor = promise.constructor;

        if (isFunction(callback)) {
          return promise.then(function (value) {
            return constructor.resolve(callback()).then(function () {
              return value;
            });
          }, function (reason) {
            return constructor.resolve(callback()).then(function () {
              throw reason;
            });
          });
        }

        return promise.then(callback, callback);
      }
    }]);
    return Promise;
  }();

  Promise$2.prototype.then = then;
  Promise$2.all = all;
  Promise$2.race = race;
  Promise$2.resolve = resolve$1;
  Promise$2.reject = reject$1;
  Promise$2._setScheduler = setScheduler;
  Promise$2._setAsap = setAsap;
  Promise$2._asap = asap;
  /*global self*/

  function polyfill() {
    var local = void 0;

    if (typeof global !== 'undefined') {
      local = global;
    } else if (typeof self !== 'undefined') {
      local = self;
    } else {
      try {
        local = Function('return this')();
      } catch (e) {
        throw new Error('polyfill failed because global object is unavailable in this environment');
      }
    }

    var P = local.Promise;

    if (P) {
      var promiseToString = null;

      try {
        promiseToString = Object.prototype.toString.call(P.resolve());
      } catch (e) {// silently ignored
      }

      if (promiseToString === '[object Promise]' && !P.cast) {
        return;
      }
    }

    local.Promise = Promise$2;
  } // Strange compat..


  Promise$2.polyfill = polyfill;
  Promise$2.Promise = Promise$2;
  var Promise$1 = typeof Promise !== "undefined" ? Promise : Promise$2; // Register logging callbacks

  function registerLoggingCallbacks(obj) {
    var i,
        l,
        key,
        callbackNames = ["begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone"];

    function registerLoggingCallback(key) {
      var loggingCallback = function loggingCallback(callback) {
        if (objectType(callback) !== "function") {
          throw new Error("QUnit logging methods require a callback function as their first parameters.");
        }

        config.callbacks[key].push(callback);
      };

      return loggingCallback;
    }

    for (i = 0, l = callbackNames.length; i < l; i++) {
      key = callbackNames[i]; // Initialize key collection of logging callback

      if (objectType(config.callbacks[key]) === "undefined") {
        config.callbacks[key] = [];
      }

      obj[key] = registerLoggingCallback(key);
    }
  }

  function runLoggingCallbacks(key, args) {
    var callbacks = config.callbacks[key]; // Handling 'log' callbacks separately. Unlike the other callbacks,
    // the log callback is not controlled by the processing queue,
    // but rather used by asserts. Hence to promisfy the 'log' callback
    // would mean promisfying each step of a test

    if (key === "log") {
      callbacks.map(function (callback) {
        return callback(args);
      });
      return;
    } // ensure that each callback is executed serially


    return callbacks.reduce(function (promiseChain, callback) {
      return promiseChain.then(function () {
        return Promise$1.resolve(callback(args));
      });
    }, Promise$1.resolve([]));
  } // Doesn't support IE9, it will return undefined on these browsers
  // See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack


  var fileName = (sourceFromStacktrace(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, "");

  function extractStacktrace(e, offset) {
    offset = offset === undefined ? 4 : offset;
    var stack, include, i;

    if (e && e.stack) {
      stack = e.stack.split("\n");

      if (/^error$/i.test(stack[0])) {
        stack.shift();
      }

      if (fileName) {
        include = [];

        for (i = offset; i < stack.length; i++) {
          if (stack[i].indexOf(fileName) !== -1) {
            break;
          }

          include.push(stack[i]);
        }

        if (include.length) {
          return include.join("\n");
        }
      }

      return stack[offset];
    }
  }

  function sourceFromStacktrace(offset) {
    var error = new Error(); // Support: Safari <=7 only, IE <=10 - 11 only
    // Not all browsers generate the `stack` property for `new Error()`, see also #636

    if (!error.stack) {
      try {
        throw error;
      } catch (err) {
        error = err;
      }
    }

    return extractStacktrace(error, offset);
  }

  var priorityCount = 0;
  var unitSampler = void 0; // This is a queue of functions that are tasks within a single test.
  // After tests are dequeued from config.queue they are expanded into
  // a set of tasks in this queue.

  var taskQueue = [];
  /**
   * Advances the taskQueue to the next task. If the taskQueue is empty,
   * process the testQueue
   */

  function advance() {
    advanceTaskQueue();

    if (!taskQueue.length && !config.blocking && !config.current) {
      advanceTestQueue();
    }
  }
  /**
   * Advances the taskQueue with an increased depth
   */


  function advanceTaskQueue() {
    var start = now();
    config.depth = (config.depth || 0) + 1;
    processTaskQueue(start);
    config.depth--;
  }
  /**
   * Process the first task on the taskQueue as a promise.
   * Each task is a function returned by https://github.com/qunitjs/qunit/blob/master/src/test.js#L381
   */


  function processTaskQueue(start) {
    if (taskQueue.length && !config.blocking) {
      var elapsedTime = now() - start;

      if (!defined.setTimeout || config.updateRate <= 0 || elapsedTime < config.updateRate) {
        var task = taskQueue.shift();
        Promise$1.resolve(task()).then(function () {
          if (!taskQueue.length) {
            advance();
          } else {
            processTaskQueue(start);
          }
        });
      } else {
        setTimeout$1(advance);
      }
    }
  }
  /**
   * Advance the testQueue to the next test to process. Call done() if testQueue completes.
   */


  function advanceTestQueue() {
    if (!config.blocking && !config.queue.length && config.depth === 0) {
      done();
      return;
    }

    var testTasks = config.queue.shift();
    addToTaskQueue(testTasks());

    if (priorityCount > 0) {
      priorityCount--;
    }

    advance();
  }
  /**
   * Enqueue the tasks for a test into the task queue.
   * @param {Array} tasksArray
   */


  function addToTaskQueue(tasksArray) {
    taskQueue.push.apply(taskQueue, toConsumableArray(tasksArray));
  }
  /**
   * Return the number of tasks remaining in the task queue to be processed.
   * @return {Number}
   */


  function taskQueueLength() {
    return taskQueue.length;
  }
  /**
   * Adds a test to the TestQueue for execution.
   * @param {Function} testTasksFunc
   * @param {Boolean} prioritize
   * @param {String} seed
   */


  function addToTestQueue(testTasksFunc, prioritize, seed) {
    if (prioritize) {
      config.queue.splice(priorityCount++, 0, testTasksFunc);
    } else if (seed) {
      if (!unitSampler) {
        unitSampler = unitSamplerGenerator(seed);
      } // Insert into a random position after all prioritized items


      var index = Math.floor(unitSampler() * (config.queue.length - priorityCount + 1));
      config.queue.splice(priorityCount + index, 0, testTasksFunc);
    } else {
      config.queue.push(testTasksFunc);
    }
  }
  /**
   * Creates a seeded "sample" generator which is used for randomizing tests.
   */


  function unitSamplerGenerator(seed) {
    // 32-bit xorshift, requires only a nonzero seed
    // http://excamera.com/sphinx/article-xorshift.html
    var sample = parseInt(generateHash(seed), 16) || -1;
    return function () {
      sample ^= sample << 13;
      sample ^= sample >>> 17;
      sample ^= sample << 5; // ECMAScript has no unsigned number type

      if (sample < 0) {
        sample += 0x100000000;
      }

      return sample / 0x100000000;
    };
  }
  /**
   * This function is called when the ProcessingQueue is done processing all
   * items. It handles emitting the final run events.
   */


  function done() {
    var storage = config.storage;
    ProcessingQueue.finished = true;
    var runtime = now() - config.started;
    var passed = config.stats.all - config.stats.bad;

    if (config.stats.all === 0) {
      if (config.filter && config.filter.length) {
        throw new Error("No tests matched the filter \"" + config.filter + "\".");
      }

      if (config.module && config.module.length) {
        throw new Error("No tests matched the module \"" + config.module + "\".");
      }

      if (config.moduleId && config.moduleId.length) {
        throw new Error("No tests matched the moduleId \"" + config.moduleId + "\".");
      }

      if (config.testId && config.testId.length) {
        throw new Error("No tests matched the testId \"" + config.testId + "\".");
      }

      throw new Error("No tests were run.");
    }

    emit("runEnd", globalSuite.end(true));
    runLoggingCallbacks("done", {
      passed: passed,
      failed: config.stats.bad,
      total: config.stats.all,
      runtime: runtime
    }).then(function () {
      // Clear own storage items if all tests passed
      if (storage && config.stats.bad === 0) {
        for (var i = storage.length - 1; i >= 0; i--) {
          var key = storage.key(i);

          if (key.indexOf("qunit-test-") === 0) {
            storage.removeItem(key);
          }
        }
      }
    });
  }

  var ProcessingQueue = {
    finished: false,
    add: addToTestQueue,
    advance: advance,
    taskCount: taskQueueLength
  };

  var TestReport = function () {
    function TestReport(name, suite, options) {
      classCallCheck(this, TestReport);
      this.name = name;
      this.suiteName = suite.name;
      this.fullName = suite.fullName.concat(name);
      this.runtime = 0;
      this.assertions = [];
      this.skipped = !!options.skip;
      this.todo = !!options.todo;
      this.valid = options.valid;
      this._startTime = 0;
      this._endTime = 0;
      suite.pushTest(this);
    }

    createClass(TestReport, [{
      key: "start",
      value: function start(recordTime) {
        if (recordTime) {
          this._startTime = performanceNow();

          if (performance) {
            performance.mark("qunit_test_start");
          }
        }

        return {
          name: this.name,
          suiteName: this.suiteName,
          fullName: this.fullName.slice()
        };
      }
    }, {
      key: "end",
      value: function end(recordTime) {
        if (recordTime) {
          this._endTime = performanceNow();

          if (performance) {
            performance.mark("qunit_test_end");
            var testName = this.fullName.join(" – ");
            measure("QUnit Test: " + testName, "qunit_test_start", "qunit_test_end");
          }
        }

        return extend(this.start(), {
          runtime: this.getRuntime(),
          status: this.getStatus(),
          errors: this.getFailedAssertions(),
          assertions: this.getAssertions()
        });
      }
    }, {
      key: "pushAssertion",
      value: function pushAssertion(assertion) {
        this.assertions.push(assertion);
      }
    }, {
      key: "getRuntime",
      value: function getRuntime() {
        return this._endTime - this._startTime;
      }
    }, {
      key: "getStatus",
      value: function getStatus() {
        if (this.skipped) {
          return "skipped";
        }

        var testPassed = this.getFailedAssertions().length > 0 ? this.todo : !this.todo;

        if (!testPassed) {
          return "failed";
        } else if (this.todo) {
          return "todo";
        } else {
          return "passed";
        }
      }
    }, {
      key: "getFailedAssertions",
      value: function getFailedAssertions() {
        return this.assertions.filter(function (assertion) {
          return !assertion.passed;
        });
      }
    }, {
      key: "getAssertions",
      value: function getAssertions() {
        return this.assertions.slice();
      } // Remove actual and expected values from assertions. This is to prevent
      // leaking memory throughout a test suite.

    }, {
      key: "slimAssertions",
      value: function slimAssertions() {
        this.assertions = this.assertions.map(function (assertion) {
          delete assertion.actual;
          delete assertion.expected;
          return assertion;
        });
      }
    }]);
    return TestReport;
  }();

  var focused$1 = false;

  function Test(settings) {
    var i, l;
    ++Test.count;
    this.expected = null;
    this.assertions = [];
    this.semaphore = 0;
    this.module = config.currentModule;
    this.steps = [];
    this.timeout = undefined;
    this.errorForStack = new Error(); // If a module is skipped, all its tests and the tests of the child suites
    // should be treated as skipped even if they are defined as `only` or `todo`.
    // As for `todo` module, all its tests will be treated as `todo` except for
    // tests defined as `skip` which will be left intact.
    //
    // So, if a test is defined as `todo` and is inside a skipped module, we should
    // then treat that test as if was defined as `skip`.

    if (this.module.skip) {
      settings.skip = true;
      settings.todo = false; // Skipped tests should be left intact
    } else if (this.module.todo && !settings.skip) {
      settings.todo = true;
    }

    extend(this, settings);
    this.testReport = new TestReport(settings.testName, this.module.suiteReport, {
      todo: settings.todo,
      skip: settings.skip,
      valid: this.valid()
    }); // Register unique strings

    for (i = 0, l = this.module.tests; i < l.length; i++) {
      if (this.module.tests[i].name === this.testName) {
        this.testName += " ";
      }
    }

    this.testId = generateHash(this.module.name, this.testName);
    this.module.tests.push({
      name: this.testName,
      testId: this.testId,
      skip: !!settings.skip
    });

    if (settings.skip) {
      // Skipped tests will fully ignore any sent callback
      this.callback = function () {};

      this.async = false;
      this.expected = 0;
    } else {
      if (typeof this.callback !== "function") {
        var method = this.todo ? "todo" : "test"; // eslint-disable-next-line max-len

        throw new TypeError("You must provide a function as a test callback to QUnit." + method + "(\"" + settings.testName + "\")");
      }

      this.assert = new Assert(this);
    }
  }

  Test.count = 0;

  function getNotStartedModules(startModule) {
    var module = startModule,
        modules = [];

    while (module && module.testsRun === 0) {
      modules.push(module);
      module = module.parentModule;
    } // The above push modules from the child to the parent
    // return a reversed order with the top being the top most parent module


    return modules.reverse();
  }

  Test.prototype = {
    // generating a stack trace can be expensive, so using a getter defers this until we need it
    get stack() {
      return extractStacktrace(this.errorForStack, 2);
    },

    before: function before() {
      var _this = this;

      var module = this.module,
          notStartedModules = getNotStartedModules(module); // ensure the callbacks are executed serially for each module

      var callbackPromises = notStartedModules.reduce(function (promiseChain, startModule) {
        return promiseChain.then(function () {
          startModule.stats = {
            all: 0,
            bad: 0,
            started: now()
          };
          emit("suiteStart", startModule.suiteReport.start(true));
          return runLoggingCallbacks("moduleStart", {
            name: startModule.name,
            tests: startModule.tests
          });
        });
      }, Promise$1.resolve([]));
      return callbackPromises.then(function () {
        config.current = _this;
        _this.testEnvironment = extend({}, module.testEnvironment);
        _this.started = now();
        emit("testStart", _this.testReport.start(true));
        return runLoggingCallbacks("testStart", {
          name: _this.testName,
          module: module.name,
          testId: _this.testId,
          previousFailure: _this.previousFailure
        }).then(function () {
          if (!config.pollution) {
            saveGlobal();
          }
        });
      });
    },
    run: function run() {
      var promise;
      config.current = this;
      this.callbackStarted = now();

      if (config.notrycatch) {
        runTest(this);
        return;
      }

      try {
        runTest(this);
      } catch (e) {
        this.pushFailure("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (e.message || e), extractStacktrace(e, 0)); // Else next test will carry the responsibility

        saveGlobal(); // Restart the tests if they're blocking

        if (config.blocking) {
          internalRecover(this);
        }
      }

      function runTest(test) {
        promise = test.callback.call(test.testEnvironment, test.assert);
        test.resolvePromise(promise); // If the test has a "lock" on it, but the timeout is 0, then we push a
        // failure as the test should be synchronous.

        if (test.timeout === 0 && test.semaphore !== 0) {
          pushFailure("Test did not finish synchronously even though assert.timeout( 0 ) was used.", sourceFromStacktrace(2));
        }
      }
    },
    after: function after() {
      checkPollution();
    },
    queueHook: function queueHook(hook, hookName, hookOwner) {
      var _this2 = this;

      var callHook = function callHook() {
        var promise = hook.call(_this2.testEnvironment, _this2.assert);

        _this2.resolvePromise(promise, hookName);
      };

      var runHook = function runHook() {
        if (hookName === "before") {
          if (hookOwner.unskippedTestsRun !== 0) {
            return;
          }

          _this2.preserveEnvironment = true;
        } // The 'after' hook should only execute when there are not tests left and
        // when the 'after' and 'finish' tasks are the only tasks left to process


        if (hookName === "after" && hookOwner.unskippedTestsRun !== numberOfUnskippedTests(hookOwner) - 1 && (config.queue.length > 0 || ProcessingQueue.taskCount() > 2)) {
          return;
        }

        config.current = _this2;

        if (config.notrycatch) {
          callHook();
          return;
        }

        try {
          callHook();
        } catch (error) {
          _this2.pushFailure(hookName + " failed on " + _this2.testName + ": " + (error.message || error), extractStacktrace(error, 0));
        }
      };

      return runHook;
    },
    // Currently only used for module level hooks, can be used to add global level ones
    hooks: function hooks(handler) {
      var hooks = [];

      function processHooks(test, module) {
        if (module.parentModule) {
          processHooks(test, module.parentModule);
        }

        if (module.hooks[handler].length) {
          for (var i = 0; i < module.hooks[handler].length; i++) {
            hooks.push(test.queueHook(module.hooks[handler][i], handler, module));
          }
        }
      } // Hooks are ignored on skipped tests


      if (!this.skip) {
        processHooks(this, this.module);
      }

      return hooks;
    },
    finish: function finish() {
      config.current = this; // Release the test callback to ensure that anything referenced has been
      // released to be garbage collected.

      this.callback = undefined;

      if (this.steps.length) {
        var stepsList = this.steps.join(", ");
        this.pushFailure("Expected assert.verifySteps() to be called before end of test " + ("after using assert.step(). Unverified steps: " + stepsList), this.stack);
      }

      if (config.requireExpects && this.expected === null) {
        this.pushFailure("Expected number of assertions to be defined, but expect() was " + "not called.", this.stack);
      } else if (this.expected !== null && this.expected !== this.assertions.length) {
        this.pushFailure("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run", this.stack);
      } else if (this.expected === null && !this.assertions.length) {
        this.pushFailure("Expected at least one assertion, but none were run - call " + "expect(0) to accept zero assertions.", this.stack);
      }

      var i,
          module = this.module,
          moduleName = module.name,
          testName = this.testName,
          skipped = !!this.skip,
          todo = !!this.todo,
          bad = 0,
          storage = config.storage;
      this.runtime = now() - this.started;
      config.stats.all += this.assertions.length;
      module.stats.all += this.assertions.length;

      for (i = 0; i < this.assertions.length; i++) {
        if (!this.assertions[i].result) {
          bad++;
          config.stats.bad++;
          module.stats.bad++;
        }
      }

      notifyTestsRan(module, skipped); // Store result when possible

      if (storage) {
        if (bad) {
          storage.setItem("qunit-test-" + moduleName + "-" + testName, bad);
        } else {
          storage.removeItem("qunit-test-" + moduleName + "-" + testName);
        }
      } // After emitting the js-reporters event we cleanup the assertion data to
      // avoid leaking it. It is not used by the legacy testDone callbacks.


      emit("testEnd", this.testReport.end(true));
      this.testReport.slimAssertions();
      var test = this;
      return runLoggingCallbacks("testDone", {
        name: testName,
        module: moduleName,
        skipped: skipped,
        todo: todo,
        failed: bad,
        passed: this.assertions.length - bad,
        total: this.assertions.length,
        runtime: skipped ? 0 : this.runtime,
        // HTML Reporter use
        assertions: this.assertions,
        testId: this.testId,

        // Source of Test
        // generating stack trace is expensive, so using a getter will help defer this until we need it
        get source() {
          return test.stack;
        }

      }).then(function () {
        if (module.testsRun === numberOfTests(module)) {
          var completedModules = [module]; // Check if the parent modules, iteratively, are done. If that the case,
          // we emit the `suiteEnd` event and trigger `moduleDone` callback.

          var parent = module.parentModule;

          while (parent && parent.testsRun === numberOfTests(parent)) {
            completedModules.push(parent);
            parent = parent.parentModule;
          }

          return completedModules.reduce(function (promiseChain, completedModule) {
            return promiseChain.then(function () {
              return logSuiteEnd(completedModule);
            });
          }, Promise$1.resolve([]));
        }
      }).then(function () {
        config.current = undefined;
      });

      function logSuiteEnd(module) {
        // Reset `module.hooks` to ensure that anything referenced in these hooks
        // has been released to be garbage collected.
        module.hooks = {};
        emit("suiteEnd", module.suiteReport.end(true));
        return runLoggingCallbacks("moduleDone", {
          name: module.name,
          tests: module.tests,
          failed: module.stats.bad,
          passed: module.stats.all - module.stats.bad,
          total: module.stats.all,
          runtime: now() - module.stats.started
        });
      }
    },
    preserveTestEnvironment: function preserveTestEnvironment() {
      if (this.preserveEnvironment) {
        this.module.testEnvironment = this.testEnvironment;
        this.testEnvironment = extend({}, this.module.testEnvironment);
      }
    },
    queue: function queue() {
      var test = this;

      if (!this.valid()) {
        return;
      }

      function runTest() {
        return [function () {
          return test.before();
        }].concat(toConsumableArray(test.hooks("before")), [function () {
          test.preserveTestEnvironment();
        }], toConsumableArray(test.hooks("beforeEach")), [function () {
          test.run();
        }], toConsumableArray(test.hooks("afterEach").reverse()), toConsumableArray(test.hooks("after").reverse()), [function () {
          test.after();
        }, function () {
          return test.finish();
        }]);
      }

      var previousFailCount = config.storage && +config.storage.getItem("qunit-test-" + this.module.name + "-" + this.testName); // Prioritize previously failed tests, detected from storage

      var prioritize = config.reorder && !!previousFailCount;
      this.previousFailure = !!previousFailCount;
      ProcessingQueue.add(runTest, prioritize, config.seed); // If the queue has already finished, we manually process the new test

      if (ProcessingQueue.finished) {
        ProcessingQueue.advance();
      }
    },
    pushResult: function pushResult(resultInfo) {
      if (this !== config.current) {
        throw new Error("Assertion occurred after test had finished.");
      } // Destructure of resultInfo = { result, actual, expected, message, negative }


      var source,
          details = {
        module: this.module.name,
        name: this.testName,
        result: resultInfo.result,
        message: resultInfo.message,
        actual: resultInfo.actual,
        testId: this.testId,
        negative: resultInfo.negative || false,
        runtime: now() - this.started,
        todo: !!this.todo
      };

      if (hasOwn.call(resultInfo, "expected")) {
        details.expected = resultInfo.expected;
      }

      if (!resultInfo.result) {
        source = resultInfo.source || sourceFromStacktrace();

        if (source) {
          details.source = source;
        }
      }

      this.logAssertion(details);
      this.assertions.push({
        result: !!resultInfo.result,
        message: resultInfo.message
      });
    },
    pushFailure: function pushFailure(message, source, actual) {
      if (!(this instanceof Test)) {
        throw new Error("pushFailure() assertion outside test context, was " + sourceFromStacktrace(2));
      }

      this.pushResult({
        result: false,
        message: message || "error",
        actual: actual || null,
        source: source
      });
    },

    /**
     * Log assertion details using both the old QUnit.log interface and
     * QUnit.on( "assertion" ) interface.
     *
     * @private
     */
    logAssertion: function logAssertion(details) {
      runLoggingCallbacks("log", details);
      var assertion = {
        passed: details.result,
        actual: details.actual,
        expected: details.expected,
        message: details.message,
        stack: details.source,
        todo: details.todo
      };
      this.testReport.pushAssertion(assertion);
      emit("assertion", assertion);
    },
    resolvePromise: function resolvePromise(promise, phase) {
      var then,
          resume,
          message,
          test = this;

      if (promise != null) {
        then = promise.then;

        if (objectType(then) === "function") {
          resume = internalStop(test);

          if (config.notrycatch) {
            then.call(promise, function () {
              resume();
            });
          } else {
            then.call(promise, function () {
              resume();
            }, function (error) {
              message = "Promise rejected " + (!phase ? "during" : phase.replace(/Each$/, "")) + " \"" + test.testName + "\": " + (error && error.message || error);
              test.pushFailure(message, extractStacktrace(error, 0)); // Else next test will carry the responsibility

              saveGlobal(); // Unblock

              internalRecover(test);
            });
          }
        }
      }
    },
    valid: function valid() {
      var filter = config.filter,
          regexFilter = /^(!?)\/([\w\W]*)\/(i?$)/.exec(filter),
          module = config.module && config.module.toLowerCase(),
          fullName = this.module.name + ": " + this.testName;

      function moduleChainNameMatch(testModule) {
        var testModuleName = testModule.name ? testModule.name.toLowerCase() : null;

        if (testModuleName === module) {
          return true;
        } else if (testModule.parentModule) {
          return moduleChainNameMatch(testModule.parentModule);
        } else {
          return false;
        }
      }

      function moduleChainIdMatch(testModule) {
        return inArray(testModule.moduleId, config.moduleId) || testModule.parentModule && moduleChainIdMatch(testModule.parentModule);
      } // Internally-generated tests are always valid


      if (this.callback && this.callback.validTest) {
        return true;
      }

      if (config.moduleId && config.moduleId.length > 0 && !moduleChainIdMatch(this.module)) {
        return false;
      }

      if (config.testId && config.testId.length > 0 && !inArray(this.testId, config.testId)) {
        return false;
      }

      if (module && !moduleChainNameMatch(this.module)) {
        return false;
      }

      if (!filter) {
        return true;
      }

      return regexFilter ? this.regexFilter(!!regexFilter[1], regexFilter[2], regexFilter[3], fullName) : this.stringFilter(filter, fullName);
    },
    regexFilter: function regexFilter(exclude, pattern, flags, fullName) {
      var regex = new RegExp(pattern, flags);
      var match = regex.test(fullName);
      return match !== exclude;
    },
    stringFilter: function stringFilter(filter, fullName) {
      filter = filter.toLowerCase();
      fullName = fullName.toLowerCase();
      var include = filter.charAt(0) !== "!";

      if (!include) {
        filter = filter.slice(1);
      } // If the filter matches, we need to honour include


      if (fullName.indexOf(filter) !== -1) {
        return include;
      } // Otherwise, do the opposite


      return !include;
    }
  };

  function pushFailure() {
    if (!config.current) {
      throw new Error("pushFailure() assertion outside test context, in " + sourceFromStacktrace(2));
    } // Gets current test obj


    var currentTest = config.current;
    return currentTest.pushFailure.apply(currentTest, arguments);
  }

  function saveGlobal() {
    config.pollution = [];

    if (config.noglobals) {
      for (var key in global$1) {
        if (hasOwn.call(global$1, key)) {
          // In Opera sometimes DOM element ids show up here, ignore them
          if (/^qunit-test-output/.test(key)) {
            continue;
          }

          config.pollution.push(key);
        }
      }
    }
  }

  function checkPollution() {
    var newGlobals,
        deletedGlobals,
        old = config.pollution;
    saveGlobal();
    newGlobals = diff(config.pollution, old);

    if (newGlobals.length > 0) {
      pushFailure("Introduced global variable(s): " + newGlobals.join(", "));
    }

    deletedGlobals = diff(old, config.pollution);

    if (deletedGlobals.length > 0) {
      pushFailure("Deleted global variable(s): " + deletedGlobals.join(", "));
    }
  } // Will be exposed as QUnit.test


  function test(testName, callback) {
    if (focused$1) {
      return;
    }

    var newTest = new Test({
      testName: testName,
      callback: callback
    });
    newTest.queue();
  }

  function todo(testName, callback) {
    if (focused$1) {
      return;
    }

    var newTest = new Test({
      testName: testName,
      callback: callback,
      todo: true
    });
    newTest.queue();
  } // Will be exposed as QUnit.skip


  function skip(testName) {
    if (focused$1) {
      return;
    }

    var test = new Test({
      testName: testName,
      skip: true
    });
    test.queue();
  } // Will be exposed as QUnit.only


  function only(testName, callback) {
    if (focused$1) {
      return;
    }

    config.queue.length = 0;
    focused$1 = true;
    var newTest = new Test({
      testName: testName,
      callback: callback
    });
    newTest.queue();
  } // Resets config.timeout with a new timeout duration.


  function resetTestTimeout(timeoutDuration) {
    clearTimeout(config.timeout);
    config.timeout = setTimeout$1(config.timeoutHandler(timeoutDuration), timeoutDuration);
  } // Put a hold on processing and return a function that will release it.


  function internalStop(test) {
    var released = false;
    test.semaphore += 1;
    config.blocking = true; // Set a recovery timeout, if so configured.

    if (defined.setTimeout) {
      var timeoutDuration = void 0;

      if (typeof test.timeout === "number") {
        timeoutDuration = test.timeout;
      } else if (typeof config.testTimeout === "number") {
        timeoutDuration = config.testTimeout;
      }

      if (typeof timeoutDuration === "number" && timeoutDuration > 0) {
        clearTimeout(config.timeout);

        config.timeoutHandler = function (timeout) {
          return function () {
            pushFailure("Test took longer than " + timeout + "ms; test timed out.", sourceFromStacktrace(2));
            released = true;
            internalRecover(test);
          };
        };

        config.timeout = setTimeout$1(config.timeoutHandler(timeoutDuration), timeoutDuration);
      }
    }

    return function resume() {
      if (released) {
        return;
      }

      released = true;
      test.semaphore -= 1;
      internalStart(test);
    };
  } // Forcefully release all processing holds.


  function internalRecover(test) {
    test.semaphore = 0;
    internalStart(test);
  } // Release a processing hold, scheduling a resumption attempt if no holds remain.


  function internalStart(test) {
    // If semaphore is non-numeric, throw error
    if (isNaN(test.semaphore)) {
      test.semaphore = 0;
      pushFailure("Invalid value on test.semaphore", sourceFromStacktrace(2));
      return;
    } // Don't start until equal number of stop-calls


    if (test.semaphore > 0) {
      return;
    } // Throw an Error if start is called more often than stop


    if (test.semaphore < 0) {
      test.semaphore = 0;
      pushFailure("Tried to restart test while already started (test's semaphore was 0 already)", sourceFromStacktrace(2));
      return;
    } // Add a slight delay to allow more assertions etc.


    if (defined.setTimeout) {
      if (config.timeout) {
        clearTimeout(config.timeout);
      }

      config.timeout = setTimeout$1(function () {
        if (test.semaphore > 0) {
          return;
        }

        if (config.timeout) {
          clearTimeout(config.timeout);
        }

        begin();
      });
    } else {
      begin();
    }
  }

  function collectTests(module) {
    var tests = [].concat(module.tests);
    var modules = [].concat(toConsumableArray(module.childModules)); // Do a breadth-first traversal of the child modules

    while (modules.length) {
      var nextModule = modules.shift();
      tests.push.apply(tests, nextModule.tests);
      modules.push.apply(modules, toConsumableArray(nextModule.childModules));
    }

    return tests;
  }

  function numberOfTests(module) {
    return collectTests(module).length;
  }

  function numberOfUnskippedTests(module) {
    return collectTests(module).filter(function (test) {
      return !test.skip;
    }).length;
  }

  function notifyTestsRan(module, skipped) {
    module.testsRun++;

    if (!skipped) {
      module.unskippedTestsRun++;
    }

    while (module = module.parentModule) {
      module.testsRun++;

      if (!skipped) {
        module.unskippedTestsRun++;
      }
    }
  }

  var Assert = function () {
    function Assert(testContext) {
      classCallCheck(this, Assert);
      this.test = testContext;
    } // Assert helpers


    createClass(Assert, [{
      key: "timeout",
      value: function timeout(duration) {
        if (typeof duration !== "number") {
          throw new Error("You must pass a number as the duration to assert.timeout");
        }

        this.test.timeout = duration; // If a timeout has been set, clear it and reset with the new duration

        if (config.timeout) {
          clearTimeout(config.timeout);

          if (config.timeoutHandler && this.test.timeout > 0) {
            resetTestTimeout(this.test.timeout);
          }
        }
      } // Documents a "step", which is a string value, in a test as a passing assertion

    }, {
      key: "step",
      value: function step(message) {
        var assertionMessage = message;
        var result = !!message;
        this.test.steps.push(message);

        if (objectType(message) === "undefined" || message === "") {
          assertionMessage = "You must provide a message to assert.step";
        } else if (objectType(message) !== "string") {
          assertionMessage = "You must provide a string value to assert.step";
          result = false;
        }

        this.pushResult({
          result: result,
          message: assertionMessage
        });
      } // Verifies the steps in a test match a given array of string values

    }, {
      key: "verifySteps",
      value: function verifySteps(steps, message) {
        // Since the steps array is just string values, we can clone with slice
        var actualStepsClone = this.test.steps.slice();
        this.deepEqual(actualStepsClone, steps, message);
        this.test.steps.length = 0;
      } // Specify the number of expected assertions to guarantee that failed test
      // (no assertions are run at all) don't slip through.

    }, {
      key: "expect",
      value: function expect(asserts) {
        if (arguments.length === 1) {
          this.test.expected = asserts;
        } else {
          return this.test.expected;
        }
      } // Put a hold on processing and return a function that will release it a maximum of once.

    }, {
      key: "async",
      value: function async(count) {
        var test$$1 = this.test;
        var popped = false,
            acceptCallCount = count;

        if (typeof acceptCallCount === "undefined") {
          acceptCallCount = 1;
        }

        var resume = internalStop(test$$1);
        return function done() {
          if (config.current !== test$$1) {
            throw Error("assert.async callback called after test finished.");
          }

          if (popped) {
            test$$1.pushFailure("Too many calls to the `assert.async` callback", sourceFromStacktrace(2));
            return;
          }

          acceptCallCount -= 1;

          if (acceptCallCount > 0) {
            return;
          }

          popped = true;
          resume();
        };
      } // Exports test.push() to the user API
      // Alias of pushResult.

    }, {
      key: "push",
      value: function push(result, actual, expected, message, negative) {
        Logger.warn("assert.push is deprecated and will be removed in QUnit 3.0." + " Please use assert.pushResult instead (https://api.qunitjs.com/assert/pushResult).");
        var currentAssert = this instanceof Assert ? this : config.current.assert;
        return currentAssert.pushResult({
          result: result,
          actual: actual,
          expected: expected,
          message: message,
          negative: negative
        });
      }
    }, {
      key: "pushResult",
      value: function pushResult(resultInfo) {
        // Destructure of resultInfo = { result, actual, expected, message, negative }
        var assert = this;
        var currentTest = assert instanceof Assert && assert.test || config.current; // Backwards compatibility fix.
        // Allows the direct use of global exported assertions and QUnit.assert.*
        // Although, it's use is not recommended as it can leak assertions
        // to other tests from async tests, because we only get a reference to the current test,
        // not exactly the test where assertion were intended to be called.

        if (!currentTest) {
          throw new Error("assertion outside test context, in " + sourceFromStacktrace(2));
        }

        if (!(assert instanceof Assert)) {
          assert = currentTest.assert;
        }

        return assert.test.pushResult(resultInfo);
      }
    }, {
      key: "ok",
      value: function ok(result, message) {
        if (!message) {
          message = result ? "okay" : "failed, expected argument to be truthy, was: " + dump.parse(result);
        }

        this.pushResult({
          result: !!result,
          actual: result,
          expected: true,
          message: message
        });
      }
    }, {
      key: "notOk",
      value: function notOk(result, message) {
        if (!message) {
          message = !result ? "okay" : "failed, expected argument to be falsy, was: " + dump.parse(result);
        }

        this.pushResult({
          result: !result,
          actual: result,
          expected: false,
          message: message
        });
      }
    }, {
      key: "equal",
      value: function equal(actual, expected, message) {
        // eslint-disable-next-line eqeqeq
        var result = expected == actual;
        this.pushResult({
          result: result,
          actual: actual,
          expected: expected,
          message: message
        });
      }
    }, {
      key: "notEqual",
      value: function notEqual(actual, expected, message) {
        // eslint-disable-next-line eqeqeq
        var result = expected != actual;
        this.pushResult({
          result: result,
          actual: actual,
          expected: expected,
          message: message,
          negative: true
        });
      }
    }, {
      key: "propEqual",
      value: function propEqual(actual, expected, message) {
        actual = objectValues(actual);
        expected = objectValues(expected);
        this.pushResult({
          result: equiv(actual, expected),
          actual: actual,
          expected: expected,
          message: message
        });
      }
    }, {
      key: "notPropEqual",
      value: function notPropEqual(actual, expected, message) {
        actual = objectValues(actual);
        expected = objectValues(expected);
        this.pushResult({
          result: !equiv(actual, expected),
          actual: actual,
          expected: expected,
          message: message,
          negative: true
        });
      }
    }, {
      key: "deepEqual",
      value: function deepEqual(actual, expected, message) {
        this.pushResult({
          result: equiv(actual, expected),
          actual: actual,
          expected: expected,
          message: message
        });
      }
    }, {
      key: "notDeepEqual",
      value: function notDeepEqual(actual, expected, message) {
        this.pushResult({
          result: !equiv(actual, expected),
          actual: actual,
          expected: expected,
          message: message,
          negative: true
        });
      }
    }, {
      key: "strictEqual",
      value: function strictEqual(actual, expected, message) {
        this.pushResult({
          result: expected === actual,
          actual: actual,
          expected: expected,
          message: message
        });
      }
    }, {
      key: "notStrictEqual",
      value: function notStrictEqual(actual, expected, message) {
        this.pushResult({
          result: expected !== actual,
          actual: actual,
          expected: expected,
          message: message,
          negative: true
        });
      }
    }, {
      key: "throws",
      value: function throws(block, expected, message) {
        var actual = void 0,
            result = false;
        var currentTest = this instanceof Assert && this.test || config.current; // 'expected' is optional unless doing string comparison

        if (objectType(expected) === "string") {
          if (message == null) {
            message = expected;
            expected = null;
          } else {
            throw new Error("throws/raises does not accept a string value for the expected argument.\n" + "Use a non-string object value (e.g. regExp) instead if it's necessary.");
          }
        }

        currentTest.ignoreGlobalErrors = true;

        try {
          block.call(currentTest.testEnvironment);
        } catch (e) {
          actual = e;
        }

        currentTest.ignoreGlobalErrors = false;

        if (actual) {
          var expectedType = objectType(expected); // We don't want to validate thrown error

          if (!expected) {
            result = true; // Expected is a regexp
          } else if (expectedType === "regexp") {
            result = expected.test(errorString(actual)); // Log the string form of the regexp

            expected = String(expected); // Expected is a constructor, maybe an Error constructor
          } else if (expectedType === "function" && actual instanceof expected) {
            result = true; // Expected is an Error object
          } else if (expectedType === "object") {
            result = actual instanceof expected.constructor && actual.name === expected.name && actual.message === expected.message; // Log the string form of the Error object

            expected = errorString(expected); // Expected is a validation function which returns true if validation passed
          } else if (expectedType === "function" && expected.call({}, actual) === true) {
            expected = null;
            result = true;
          }
        }

        currentTest.assert.pushResult({
          result: result,
          // undefined if it didn't throw
          actual: actual && errorString(actual),
          expected: expected,
          message: message
        });
      }
    }, {
      key: "rejects",
      value: function rejects(promise, expected, message) {
        var result = false;
        var currentTest = this instanceof Assert && this.test || config.current; // 'expected' is optional unless doing string comparison

        if (objectType(expected) === "string") {
          if (message === undefined) {
            message = expected;
            expected = undefined;
          } else {
            message = "assert.rejects does not accept a string value for the expected " + "argument.\nUse a non-string object value (e.g. validator function) instead " + "if necessary.";
            currentTest.assert.pushResult({
              result: false,
              message: message
            });
            return;
          }
        }

        var then = promise && promise.then;

        if (objectType(then) !== "function") {
          var _message = "The value provided to `assert.rejects` in " + "\"" + currentTest.testName + "\" was not a promise.";

          currentTest.assert.pushResult({
            result: false,
            message: _message,
            actual: promise
          });
          return;
        }

        var done = this.async();
        return then.call(promise, function handleFulfillment() {
          var message = "The promise returned by the `assert.rejects` callback in " + "\"" + currentTest.testName + "\" did not reject.";
          currentTest.assert.pushResult({
            result: false,
            message: message,
            actual: promise
          });
          done();
        }, function handleRejection(actual) {
          var expectedType = objectType(expected); // We don't want to validate

          if (expected === undefined) {
            result = true; // Expected is a regexp
          } else if (expectedType === "regexp") {
            result = expected.test(errorString(actual)); // Log the string form of the regexp

            expected = String(expected); // Expected is a constructor, maybe an Error constructor
          } else if (expectedType === "function" && actual instanceof expected) {
            result = true; // Expected is an Error object
          } else if (expectedType === "object") {
            result = actual instanceof expected.constructor && actual.name === expected.name && actual.message === expected.message; // Log the string form of the Error object

            expected = errorString(expected); // Expected is a validation function which returns true if validation passed
          } else {
            if (expectedType === "function") {
              result = expected.call({}, actual) === true;
              expected = null; // Expected is some other invalid type
            } else {
              result = false;
              message = "invalid expected value provided to `assert.rejects` " + "callback in \"" + currentTest.testName + "\": " + expectedType + ".";
            }
          }

          currentTest.assert.pushResult({
            result: result,
            // leave rejection value of undefined as-is
            actual: actual && errorString(actual),
            expected: expected,
            message: message
          });
          done();
        });
      }
    }]);
    return Assert;
  }(); // Provide an alternative to assert.throws(), for environments that consider throws a reserved word
  // Known to us are: Closure Compiler, Narwhal
  // eslint-disable-next-line dot-notation


  Assert.prototype.raises = Assert.prototype["throws"];
  /**
   * Converts an error into a simple string for comparisons.
   *
   * @param {Error|Object} error
   * @return {String}
   */

  function errorString(error) {
    var resultErrorString = error.toString(); // If the error wasn't a subclass of Error but something like
    // an object literal with name and message properties...

    if (resultErrorString.substring(0, 7) === "[object") {
      var name = error.name ? error.name.toString() : "Error";
      var message = error.message ? error.message.toString() : "";

      if (name && message) {
        return name + ": " + message;
      } else if (name) {
        return name;
      } else if (message) {
        return message;
      } else {
        return "Error";
      }
    } else {
      return resultErrorString;
    }
  }
  /* global module, exports, define */


  function exportQUnit(QUnit) {
    if (defined.document) {
      // QUnit may be defined when it is preconfigured but then only QUnit and QUnit.config may be defined.
      if (window$1.QUnit && window$1.QUnit.version) {
        throw new Error("QUnit has already been defined.");
      }

      window$1.QUnit = QUnit;
    } // For nodejs


    if ( true && module && module.exports) {
      module.exports = QUnit; // For consistency with CommonJS environments' exports

      module.exports.QUnit = QUnit;
    } // For CommonJS with exports, but without module.exports, like Rhino


    if ( true && exports) {
      exports.QUnit = QUnit;
    }

    if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return QUnit;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
      QUnit.config.autostart = false;
    } // For Web/Service Workers


    if (self$1 && self$1.WorkerGlobalScope && self$1 instanceof self$1.WorkerGlobalScope) {
      self$1.QUnit = QUnit;
    }
  } // Handle an unhandled exception. By convention, returns true if further
  // error handling should be suppressed and false otherwise.
  // In this case, we will only suppress further error handling if the
  // "ignoreGlobalErrors" configuration option is enabled.


  function onError(error) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (config.current) {
      if (config.current.ignoreGlobalErrors) {
        return true;
      }

      pushFailure.apply(undefined, [error.message, error.stacktrace || error.fileName + ":" + error.lineNumber].concat(args));
    } else {
      test("global failure", extend(function () {
        pushFailure.apply(undefined, [error.message, error.stacktrace || error.fileName + ":" + error.lineNumber].concat(args));
      }, {
        validTest: true
      }));
    }

    return false;
  } // Handle an unhandled rejection


  function onUnhandledRejection(reason) {
    var resultInfo = {
      result: false,
      message: reason.message || "error",
      actual: reason,
      source: reason.stack || sourceFromStacktrace(3)
    };
    var currentTest = config.current;

    if (currentTest) {
      currentTest.assert.pushResult(resultInfo);
    } else {
      test("global failure", extend(function (assert) {
        assert.pushResult(resultInfo);
      }, {
        validTest: true
      }));
    }
  }

  var QUnit = {};
  var globalSuite = new SuiteReport(); // The initial "currentModule" represents the global (or top-level) module that
  // is not explicitly defined by the user, therefore we add the "globalSuite" to
  // it since each module has a suiteReport associated with it.

  config.currentModule.suiteReport = globalSuite;
  var globalStartCalled = false;
  var runStarted = false; // Figure out if we're running the tests from a server or not

  QUnit.isLocal = !(defined.document && window$1.location.protocol !== "file:"); // Expose the current QUnit version

  QUnit.version = "2.9.3";
  extend(QUnit, {
    on: on,
    module: module$1,
    test: test,
    todo: todo,
    skip: skip,
    only: only,
    start: function start(count) {
      var globalStartAlreadyCalled = globalStartCalled;

      if (!config.current) {
        globalStartCalled = true;

        if (runStarted) {
          throw new Error("Called start() while test already started running");
        } else if (globalStartAlreadyCalled || count > 1) {
          throw new Error("Called start() outside of a test context too many times");
        } else if (config.autostart) {
          throw new Error("Called start() outside of a test context when " + "QUnit.config.autostart was true");
        } else if (!config.pageLoaded) {
          // The page isn't completely loaded yet, so we set autostart and then
          // load if we're in Node or wait for the browser's load event.
          config.autostart = true; // Starts from Node even if .load was not previously called. We still return
          // early otherwise we'll wind up "beginning" twice.

          if (!defined.document) {
            QUnit.load();
          }

          return;
        }
      } else {
        throw new Error("QUnit.start cannot be called inside a test context.");
      }

      scheduleBegin();
    },
    config: config,
    is: is,
    objectType: objectType,
    extend: extend,
    load: function load() {
      config.pageLoaded = true; // Initialize the configuration options

      extend(config, {
        stats: {
          all: 0,
          bad: 0
        },
        started: 0,
        updateRate: 1000,
        autostart: true,
        filter: ""
      }, true);

      if (!runStarted) {
        config.blocking = false;

        if (config.autostart) {
          scheduleBegin();
        }
      }
    },
    stack: function stack(offset) {
      offset = (offset || 0) + 2;
      return sourceFromStacktrace(offset);
    },
    onError: onError,
    onUnhandledRejection: onUnhandledRejection
  });
  QUnit.pushFailure = pushFailure;
  QUnit.assert = Assert.prototype;
  QUnit.equiv = equiv;
  QUnit.dump = dump;
  registerLoggingCallbacks(QUnit);

  function scheduleBegin() {
    runStarted = true; // Add a slight delay to allow definition of more modules and tests.

    if (defined.setTimeout) {
      setTimeout$1(function () {
        begin();
      });
    } else {
      begin();
    }
  }

  function unblockAndAdvanceQueue() {
    config.blocking = false;
    ProcessingQueue.advance();
  }

  function begin() {
    var i,
        l,
        modulesLog = []; // If the test run hasn't officially begun yet

    if (!config.started) {
      // Record the time of the test run's beginning
      config.started = now(); // Delete the loose unnamed module if unused.

      if (config.modules[0].name === "" && config.modules[0].tests.length === 0) {
        config.modules.shift();
      } // Avoid unnecessary information by not logging modules' test environments


      for (i = 0, l = config.modules.length; i < l; i++) {
        modulesLog.push({
          name: config.modules[i].name,
          tests: config.modules[i].tests
        });
      } // The test run is officially beginning now


      emit("runStart", globalSuite.start(true));
      runLoggingCallbacks("begin", {
        totalTests: Test.count,
        modules: modulesLog
      }).then(unblockAndAdvanceQueue);
    } else {
      unblockAndAdvanceQueue();
    }
  }

  exportQUnit(QUnit);

  (function () {
    if (typeof window$1 === "undefined" || typeof document$1 === "undefined") {
      return;
    }

    var config = QUnit.config,
        hasOwn = Object.prototype.hasOwnProperty; // Stores fixture HTML for resetting later

    function storeFixture() {
      // Avoid overwriting user-defined values
      if (hasOwn.call(config, "fixture")) {
        return;
      }

      var fixture = document$1.getElementById("qunit-fixture");

      if (fixture) {
        config.fixture = fixture.cloneNode(true);
      }
    }

    QUnit.begin(storeFixture); // Resets the fixture DOM element if available.

    function resetFixture() {
      if (config.fixture == null) {
        return;
      }

      var fixture = document$1.getElementById("qunit-fixture");

      var resetFixtureType = _typeof(config.fixture);

      if (resetFixtureType === "string") {
        // support user defined values for `config.fixture`
        var newFixture = document$1.createElement("div");
        newFixture.setAttribute("id", "qunit-fixture");
        newFixture.innerHTML = config.fixture;
        fixture.parentNode.replaceChild(newFixture, fixture);
      } else {
        var clonedFixture = config.fixture.cloneNode(true);
        fixture.parentNode.replaceChild(clonedFixture, fixture);
      }
    }

    QUnit.testStart(resetFixture);
  })();

  (function () {
    // Only interact with URLs via window.location
    var location = typeof window$1 !== "undefined" && window$1.location;

    if (!location) {
      return;
    }

    var urlParams = getUrlParams();
    QUnit.urlParams = urlParams; // Match module/test by inclusion in an array

    QUnit.config.moduleId = [].concat(urlParams.moduleId || []);
    QUnit.config.testId = [].concat(urlParams.testId || []); // Exact case-insensitive match of the module name

    QUnit.config.module = urlParams.module; // Regular expression or case-insenstive substring match against "moduleName: testName"

    QUnit.config.filter = urlParams.filter; // Test order randomization

    if (urlParams.seed === true) {
      // Generate a random seed if the option is specified without a value
      QUnit.config.seed = Math.random().toString(36).slice(2);
    } else if (urlParams.seed) {
      QUnit.config.seed = urlParams.seed;
    } // Add URL-parameter-mapped config values with UI form rendering data


    QUnit.config.urlConfig.push({
      id: "hidepassed",
      label: "Hide passed tests",
      tooltip: "Only show tests and assertions that fail. Stored as query-strings."
    }, {
      id: "noglobals",
      label: "Check for Globals",
      tooltip: "Enabling this will test if any test introduces new properties on the " + "global object (`window` in Browsers). Stored as query-strings."
    }, {
      id: "notrycatch",
      label: "No try-catch",
      tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging " + "exceptions in IE reasonable. Stored as query-strings."
    });
    QUnit.begin(function () {
      var i,
          option,
          urlConfig = QUnit.config.urlConfig;

      for (i = 0; i < urlConfig.length; i++) {
        // Options can be either strings or objects with nonempty "id" properties
        option = QUnit.config.urlConfig[i];

        if (typeof option !== "string") {
          option = option.id;
        }

        if (QUnit.config[option] === undefined) {
          QUnit.config[option] = urlParams[option];
        }
      }
    });

    function getUrlParams() {
      var i, param, name, value;
      var urlParams = Object.create(null);
      var params = location.search.slice(1).split("&");
      var length = params.length;

      for (i = 0; i < length; i++) {
        if (params[i]) {
          param = params[i].split("=");
          name = decodeQueryParam(param[0]); // Allow just a key to turn on a flag, e.g., test.html?noglobals

          value = param.length === 1 || decodeQueryParam(param.slice(1).join("="));

          if (name in urlParams) {
            urlParams[name] = [].concat(urlParams[name], value);
          } else {
            urlParams[name] = value;
          }
        }
      }

      return urlParams;
    }

    function decodeQueryParam(param) {
      return decodeURIComponent(param.replace(/\+/g, "%20"));
    }
  })();

  var stats = {
    passedTests: 0,
    failedTests: 0,
    skippedTests: 0,
    todoTests: 0
  }; // Escape text for attribute or text content.

  function escapeText(s) {
    if (!s) {
      return "";
    }

    s = s + ""; // Both single quotes and double quotes (for attributes)

    return s.replace(/['"<>&]/g, function (s) {
      switch (s) {
        case "'":
          return "&#039;";

        case "\"":
          return "&quot;";

        case "<":
          return "&lt;";

        case ">":
          return "&gt;";

        case "&":
          return "&amp;";
      }
    });
  }

  (function () {
    // Don't load the HTML Reporter on non-browser environments
    if (typeof window$1 === "undefined" || !window$1.document) {
      return;
    }

    var config = QUnit.config,
        hiddenTests = [],
        document = window$1.document,
        collapseNext = false,
        hasOwn$$1 = Object.prototype.hasOwnProperty,
        unfilteredUrl = setUrl({
      filter: undefined,
      module: undefined,
      moduleId: undefined,
      testId: undefined
    }),
        modulesList = [];

    function addEvent(elem, type, fn) {
      elem.addEventListener(type, fn, false);
    }

    function removeEvent(elem, type, fn) {
      elem.removeEventListener(type, fn, false);
    }

    function addEvents(elems, type, fn) {
      var i = elems.length;

      while (i--) {
        addEvent(elems[i], type, fn);
      }
    }

    function hasClass(elem, name) {
      return (" " + elem.className + " ").indexOf(" " + name + " ") >= 0;
    }

    function addClass(elem, name) {
      if (!hasClass(elem, name)) {
        elem.className += (elem.className ? " " : "") + name;
      }
    }

    function toggleClass(elem, name, force) {
      if (force || typeof force === "undefined" && !hasClass(elem, name)) {
        addClass(elem, name);
      } else {
        removeClass(elem, name);
      }
    }

    function removeClass(elem, name) {
      var set = " " + elem.className + " "; // Class name may appear multiple times

      while (set.indexOf(" " + name + " ") >= 0) {
        set = set.replace(" " + name + " ", " ");
      } // Trim for prettiness


      elem.className = typeof set.trim === "function" ? set.trim() : set.replace(/^\s+|\s+$/g, "");
    }

    function id(name) {
      return document.getElementById && document.getElementById(name);
    }

    function abortTests() {
      var abortButton = id("qunit-abort-tests-button");

      if (abortButton) {
        abortButton.disabled = true;
        abortButton.innerHTML = "Aborting...";
      }

      QUnit.config.queue.length = 0;
      return false;
    }

    function interceptNavigation(ev) {
      applyUrlParams();

      if (ev && ev.preventDefault) {
        ev.preventDefault();
      }

      return false;
    }

    function getUrlConfigHtml() {
      var i,
          j,
          val,
          escaped,
          escapedTooltip,
          selection = false,
          urlConfig = config.urlConfig,
          urlConfigHtml = "";

      for (i = 0; i < urlConfig.length; i++) {
        // Options can be either strings or objects with nonempty "id" properties
        val = config.urlConfig[i];

        if (typeof val === "string") {
          val = {
            id: val,
            label: val
          };
        }

        escaped = escapeText(val.id);
        escapedTooltip = escapeText(val.tooltip);

        if (!val.value || typeof val.value === "string") {
          urlConfigHtml += "<label for='qunit-urlconfig-" + escaped + "' title='" + escapedTooltip + "'><input id='qunit-urlconfig-" + escaped + "' name='" + escaped + "' type='checkbox'" + (val.value ? " value='" + escapeText(val.value) + "'" : "") + (config[val.id] ? " checked='checked'" : "") + " title='" + escapedTooltip + "' />" + escapeText(val.label) + "</label>";
        } else {
          urlConfigHtml += "<label for='qunit-urlconfig-" + escaped + "' title='" + escapedTooltip + "'>" + val.label + ": </label><select id='qunit-urlconfig-" + escaped + "' name='" + escaped + "' title='" + escapedTooltip + "'><option></option>";

          if (QUnit.is("array", val.value)) {
            for (j = 0; j < val.value.length; j++) {
              escaped = escapeText(val.value[j]);
              urlConfigHtml += "<option value='" + escaped + "'" + (config[val.id] === val.value[j] ? (selection = true) && " selected='selected'" : "") + ">" + escaped + "</option>";
            }
          } else {
            for (j in val.value) {
              if (hasOwn$$1.call(val.value, j)) {
                urlConfigHtml += "<option value='" + escapeText(j) + "'" + (config[val.id] === j ? (selection = true) && " selected='selected'" : "") + ">" + escapeText(val.value[j]) + "</option>";
              }
            }
          }

          if (config[val.id] && !selection) {
            escaped = escapeText(config[val.id]);
            urlConfigHtml += "<option value='" + escaped + "' selected='selected' disabled='disabled'>" + escaped + "</option>";
          }

          urlConfigHtml += "</select>";
        }
      }

      return urlConfigHtml;
    } // Handle "click" events on toolbar checkboxes and "change" for select menus.
    // Updates the URL with the new state of `config.urlConfig` values.


    function toolbarChanged() {
      var updatedUrl,
          value,
          tests,
          field = this,
          params = {}; // Detect if field is a select menu or a checkbox

      if ("selectedIndex" in field) {
        value = field.options[field.selectedIndex].value || undefined;
      } else {
        value = field.checked ? field.defaultValue || true : undefined;
      }

      params[field.name] = value;
      updatedUrl = setUrl(params); // Check if we can apply the change without a page refresh

      if ("hidepassed" === field.name && "replaceState" in window$1.history) {
        QUnit.urlParams[field.name] = value;
        config[field.name] = value || false;
        tests = id("qunit-tests");

        if (tests) {
          var length = tests.children.length;
          var children = tests.children;

          if (field.checked) {
            for (var i = 0; i < length; i++) {
              var test$$1 = children[i];

              if (test$$1 && test$$1.className.indexOf("pass") > -1) {
                hiddenTests.push(test$$1);
              }
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = hiddenTests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var hiddenTest = _step.value;
                tests.removeChild(hiddenTest);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          } else {
            while ((test$$1 = hiddenTests.pop()) != null) {
              tests.appendChild(test$$1);
            }
          }
        }

        window$1.history.replaceState(null, "", updatedUrl);
      } else {
        window$1.location = updatedUrl;
      }
    }

    function setUrl(params) {
      var key,
          arrValue,
          i,
          querystring = "?",
          location = window$1.location;
      params = QUnit.extend(QUnit.extend({}, QUnit.urlParams), params);

      for (key in params) {
        // Skip inherited or undefined properties
        if (hasOwn$$1.call(params, key) && params[key] !== undefined) {
          // Output a parameter for each value of this key
          // (but usually just one)
          arrValue = [].concat(params[key]);

          for (i = 0; i < arrValue.length; i++) {
            querystring += encodeURIComponent(key);

            if (arrValue[i] !== true) {
              querystring += "=" + encodeURIComponent(arrValue[i]);
            }

            querystring += "&";
          }
        }
      }

      return location.protocol + "//" + location.host + location.pathname + querystring.slice(0, -1);
    }

    function applyUrlParams() {
      var i,
          selectedModules = [],
          modulesList = id("qunit-modulefilter-dropdown-list").getElementsByTagName("input"),
          filter = id("qunit-filter-input").value;

      for (i = 0; i < modulesList.length; i++) {
        if (modulesList[i].checked) {
          selectedModules.push(modulesList[i].value);
        }
      }

      window$1.location = setUrl({
        filter: filter === "" ? undefined : filter,
        moduleId: selectedModules.length === 0 ? undefined : selectedModules,
        // Remove module and testId filter
        module: undefined,
        testId: undefined
      });
    }

    function toolbarUrlConfigContainer() {
      var urlConfigContainer = document.createElement("span");
      urlConfigContainer.innerHTML = getUrlConfigHtml();
      addClass(urlConfigContainer, "qunit-url-config");
      addEvents(urlConfigContainer.getElementsByTagName("input"), "change", toolbarChanged);
      addEvents(urlConfigContainer.getElementsByTagName("select"), "change", toolbarChanged);
      return urlConfigContainer;
    }

    function abortTestsButton() {
      var button = document.createElement("button");
      button.id = "qunit-abort-tests-button";
      button.innerHTML = "Abort";
      addEvent(button, "click", abortTests);
      return button;
    }

    function toolbarLooseFilter() {
      var filter = document.createElement("form"),
          label = document.createElement("label"),
          input = document.createElement("input"),
          button = document.createElement("button");
      addClass(filter, "qunit-filter");
      label.innerHTML = "Filter: ";
      input.type = "text";
      input.value = config.filter || "";
      input.name = "filter";
      input.id = "qunit-filter-input";
      button.innerHTML = "Go";
      label.appendChild(input);
      filter.appendChild(label);
      filter.appendChild(document.createTextNode(" "));
      filter.appendChild(button);
      addEvent(filter, "submit", interceptNavigation);
      return filter;
    }

    function moduleListHtml() {
      var i,
          checked,
          html = "";

      for (i = 0; i < config.modules.length; i++) {
        if (config.modules[i].name !== "") {
          checked = config.moduleId.indexOf(config.modules[i].moduleId) > -1;
          html += "<li><label class='clickable" + (checked ? " checked" : "") + "'><input type='checkbox' " + "value='" + config.modules[i].moduleId + "'" + (checked ? " checked='checked'" : "") + " />" + escapeText(config.modules[i].name) + "</label></li>";
        }
      }

      return html;
    }

    function toolbarModuleFilter() {
      var commit,
          reset,
          moduleFilter = document.createElement("form"),
          label = document.createElement("label"),
          moduleSearch = document.createElement("input"),
          dropDown = document.createElement("div"),
          actions = document.createElement("span"),
          applyButton = document.createElement("button"),
          resetButton = document.createElement("button"),
          allModulesLabel = document.createElement("label"),
          allCheckbox = document.createElement("input"),
          dropDownList = document.createElement("ul"),
          dirty = false;
      moduleSearch.id = "qunit-modulefilter-search";
      moduleSearch.autocomplete = "off";
      addEvent(moduleSearch, "input", searchInput);
      addEvent(moduleSearch, "input", searchFocus);
      addEvent(moduleSearch, "focus", searchFocus);
      addEvent(moduleSearch, "click", searchFocus);
      label.id = "qunit-modulefilter-search-container";
      label.innerHTML = "Module: ";
      label.appendChild(moduleSearch);
      applyButton.textContent = "Apply";
      applyButton.style.display = "none";
      resetButton.textContent = "Reset";
      resetButton.type = "reset";
      resetButton.style.display = "none";
      allCheckbox.type = "checkbox";
      allCheckbox.checked = config.moduleId.length === 0;
      allModulesLabel.className = "clickable";

      if (config.moduleId.length) {
        allModulesLabel.className = "checked";
      }

      allModulesLabel.appendChild(allCheckbox);
      allModulesLabel.appendChild(document.createTextNode("All modules"));
      actions.id = "qunit-modulefilter-actions";
      actions.appendChild(applyButton);
      actions.appendChild(resetButton);
      actions.appendChild(allModulesLabel);
      commit = actions.firstChild;
      reset = commit.nextSibling;
      addEvent(commit, "click", applyUrlParams);
      dropDownList.id = "qunit-modulefilter-dropdown-list";
      dropDownList.innerHTML = moduleListHtml();
      dropDown.id = "qunit-modulefilter-dropdown";
      dropDown.style.display = "none";
      dropDown.appendChild(actions);
      dropDown.appendChild(dropDownList);
      addEvent(dropDown, "change", selectionChange);
      selectionChange();
      moduleFilter.id = "qunit-modulefilter";
      moduleFilter.appendChild(label);
      moduleFilter.appendChild(dropDown);
      addEvent(moduleFilter, "submit", interceptNavigation);
      addEvent(moduleFilter, "reset", function () {
        // Let the reset happen, then update styles
        window$1.setTimeout(selectionChange);
      }); // Enables show/hide for the dropdown

      function searchFocus() {
        if (dropDown.style.display !== "none") {
          return;
        }

        dropDown.style.display = "block";
        addEvent(document, "click", hideHandler);
        addEvent(document, "keydown", hideHandler); // Hide on Escape keydown or outside-container click

        function hideHandler(e) {
          var inContainer = moduleFilter.contains(e.target);

          if (e.keyCode === 27 || !inContainer) {
            if (e.keyCode === 27 && inContainer) {
              moduleSearch.focus();
            }

            dropDown.style.display = "none";
            removeEvent(document, "click", hideHandler);
            removeEvent(document, "keydown", hideHandler);
            moduleSearch.value = "";
            searchInput();
          }
        }
      } // Processes module search box input


      function searchInput() {
        var i,
            item,
            searchText = moduleSearch.value.toLowerCase(),
            listItems = dropDownList.children;

        for (i = 0; i < listItems.length; i++) {
          item = listItems[i];

          if (!searchText || item.textContent.toLowerCase().indexOf(searchText) > -1) {
            item.style.display = "";
          } else {
            item.style.display = "none";
          }
        }
      } // Processes selection changes


      function selectionChange(evt) {
        var i,
            item,
            checkbox = evt && evt.target || allCheckbox,
            modulesList = dropDownList.getElementsByTagName("input"),
            selectedNames = [];
        toggleClass(checkbox.parentNode, "checked", checkbox.checked);
        dirty = false;

        if (checkbox.checked && checkbox !== allCheckbox) {
          allCheckbox.checked = false;
          removeClass(allCheckbox.parentNode, "checked");
        }

        for (i = 0; i < modulesList.length; i++) {
          item = modulesList[i];

          if (!evt) {
            toggleClass(item.parentNode, "checked", item.checked);
          } else if (checkbox === allCheckbox && checkbox.checked) {
            item.checked = false;
            removeClass(item.parentNode, "checked");
          }

          dirty = dirty || item.checked !== item.defaultChecked;

          if (item.checked) {
            selectedNames.push(item.parentNode.textContent);
          }
        }

        commit.style.display = reset.style.display = dirty ? "" : "none";
        moduleSearch.placeholder = selectedNames.join(", ") || allCheckbox.parentNode.textContent;
        moduleSearch.title = "Type to filter list. Current selection:\n" + (selectedNames.join("\n") || allCheckbox.parentNode.textContent);
      }

      return moduleFilter;
    }

    function appendToolbar() {
      var toolbar = id("qunit-testrunner-toolbar");

      if (toolbar) {
        toolbar.appendChild(toolbarUrlConfigContainer());
        toolbar.appendChild(toolbarModuleFilter());
        toolbar.appendChild(toolbarLooseFilter());
        toolbar.appendChild(document.createElement("div")).className = "clearfix";
      }
    }

    function appendHeader() {
      var header = id("qunit-header");

      if (header) {
        header.innerHTML = "<a href='" + escapeText(unfilteredUrl) + "'>" + header.innerHTML + "</a> ";
      }
    }

    function appendBanner() {
      var banner = id("qunit-banner");

      if (banner) {
        banner.className = "";
      }
    }

    function appendTestResults() {
      var tests = id("qunit-tests"),
          result = id("qunit-testresult"),
          controls;

      if (result) {
        result.parentNode.removeChild(result);
      }

      if (tests) {
        tests.innerHTML = "";
        result = document.createElement("p");
        result.id = "qunit-testresult";
        result.className = "result";
        tests.parentNode.insertBefore(result, tests);
        result.innerHTML = "<div id=\"qunit-testresult-display\">Running...<br />&#160;</div>" + "<div id=\"qunit-testresult-controls\"></div>" + "<div class=\"clearfix\"></div>";
        controls = id("qunit-testresult-controls");
      }

      if (controls) {
        controls.appendChild(abortTestsButton());
      }
    }

    function appendFilteredTest() {
      var testId = QUnit.config.testId;

      if (!testId || testId.length <= 0) {
        return "";
      }

      return "<div id='qunit-filteredTest'>Rerunning selected tests: " + escapeText(testId.join(", ")) + " <a id='qunit-clearFilter' href='" + escapeText(unfilteredUrl) + "'>Run all tests</a></div>";
    }

    function appendUserAgent() {
      var userAgent = id("qunit-userAgent");

      if (userAgent) {
        userAgent.innerHTML = "";
        userAgent.appendChild(document.createTextNode("QUnit " + QUnit.version + "; " + navigator.userAgent));
      }
    }

    function appendInterface() {
      var qunit = id("qunit");

      if (qunit) {
        qunit.innerHTML = "<h1 id='qunit-header'>" + escapeText(document.title) + "</h1>" + "<h2 id='qunit-banner'></h2>" + "<div id='qunit-testrunner-toolbar'></div>" + appendFilteredTest() + "<h2 id='qunit-userAgent'></h2>" + "<ol id='qunit-tests'></ol>";
      }

      appendHeader();
      appendBanner();
      appendTestResults();
      appendUserAgent();
      appendToolbar();
    }

    function appendTest(name, testId, moduleName) {
      var title,
          rerunTrigger,
          testBlock,
          assertList,
          tests = id("qunit-tests");

      if (!tests) {
        return;
      }

      title = document.createElement("strong");
      title.innerHTML = getNameHtml(name, moduleName);
      rerunTrigger = document.createElement("a");
      rerunTrigger.innerHTML = "Rerun";
      rerunTrigger.href = setUrl({
        testId: testId
      });
      testBlock = document.createElement("li");
      testBlock.appendChild(title);
      testBlock.appendChild(rerunTrigger);
      testBlock.id = "qunit-test-output-" + testId;
      assertList = document.createElement("ol");
      assertList.className = "qunit-assert-list";
      testBlock.appendChild(assertList);
      tests.appendChild(testBlock);
    } // HTML Reporter initialization and load


    QUnit.begin(function (details) {
      var i, moduleObj; // Sort modules by name for the picker

      for (i = 0; i < details.modules.length; i++) {
        moduleObj = details.modules[i];

        if (moduleObj.name) {
          modulesList.push(moduleObj.name);
        }
      }

      modulesList.sort(function (a, b) {
        return a.localeCompare(b);
      }); // Initialize QUnit elements

      appendInterface();
    });
    QUnit.done(function (details) {
      var banner = id("qunit-banner"),
          tests = id("qunit-tests"),
          abortButton = id("qunit-abort-tests-button"),
          totalTests = stats.passedTests + stats.skippedTests + stats.todoTests + stats.failedTests,
          html = [totalTests, " tests completed in ", details.runtime, " milliseconds, with ", stats.failedTests, " failed, ", stats.skippedTests, " skipped, and ", stats.todoTests, " todo.<br />", "<span class='passed'>", details.passed, "</span> assertions of <span class='total'>", details.total, "</span> passed, <span class='failed'>", details.failed, "</span> failed."].join(""),
          test$$1,
          assertLi,
          assertList; // Update remaining tests to aborted

      if (abortButton && abortButton.disabled) {
        html = "Tests aborted after " + details.runtime + " milliseconds.";

        for (var i = 0; i < tests.children.length; i++) {
          test$$1 = tests.children[i];

          if (test$$1.className === "" || test$$1.className === "running") {
            test$$1.className = "aborted";
            assertList = test$$1.getElementsByTagName("ol")[0];
            assertLi = document.createElement("li");
            assertLi.className = "fail";
            assertLi.innerHTML = "Test aborted.";
            assertList.appendChild(assertLi);
          }
        }
      }

      if (banner && (!abortButton || abortButton.disabled === false)) {
        banner.className = stats.failedTests ? "qunit-fail" : "qunit-pass";
      }

      if (abortButton) {
        abortButton.parentNode.removeChild(abortButton);
      }

      if (tests) {
        id("qunit-testresult-display").innerHTML = html;
      }

      if (config.altertitle && document.title) {
        // Show ✖ for good, ✔ for bad suite result in title
        // use escape sequences in case file gets loaded with non-utf-8
        // charset
        document.title = [stats.failedTests ? "\u2716" : "\u2714", document.title.replace(/^[\u2714\u2716] /i, "")].join(" ");
      } // Scroll back to top to show results


      if (config.scrolltop && window$1.scrollTo) {
        window$1.scrollTo(0, 0);
      }
    });

    function getNameHtml(name, module) {
      var nameHtml = "";

      if (module) {
        nameHtml = "<span class='module-name'>" + escapeText(module) + "</span>: ";
      }

      nameHtml += "<span class='test-name'>" + escapeText(name) + "</span>";
      return nameHtml;
    }

    function getProgressHtml(runtime, stats, total) {
      var completed = stats.passedTests + stats.skippedTests + stats.todoTests + stats.failedTests;
      return ["<br />", completed, " / ", total, " tests completed in ", runtime, " milliseconds, with ", stats.failedTests, " failed, ", stats.skippedTests, " skipped, and ", stats.todoTests, " todo."].join("");
    }

    QUnit.testStart(function (details) {
      var running, bad;
      appendTest(details.name, details.testId, details.module);
      running = id("qunit-testresult-display");

      if (running) {
        addClass(running, "running");
        bad = QUnit.config.reorder && details.previousFailure;
        running.innerHTML = [bad ? "Rerunning previously failed test: <br />" : "Running: <br />", getNameHtml(details.name, details.module), getProgressHtml(now() - config.started, stats, Test.count)].join("");
      }
    });

    function stripHtml(string) {
      // Strip tags, html entity and whitespaces
      return string.replace(/<\/?[^>]+(>|$)/g, "").replace(/&quot;/g, "").replace(/\s+/g, "");
    }

    QUnit.log(function (details) {
      var assertList,
          assertLi,
          message,
          expected,
          actual,
          diff$$1,
          showDiff = false,
          testItem = id("qunit-test-output-" + details.testId);

      if (!testItem) {
        return;
      }

      message = escapeText(details.message) || (details.result ? "okay" : "failed");
      message = "<span class='test-message'>" + message + "</span>";
      message += "<span class='runtime'>@ " + details.runtime + " ms</span>"; // The pushFailure doesn't provide details.expected
      // when it calls, it's implicit to also not show expected and diff stuff
      // Also, we need to check details.expected existence, as it can exist and be undefined

      if (!details.result && hasOwn$$1.call(details, "expected")) {
        if (details.negative) {
          expected = "NOT " + QUnit.dump.parse(details.expected);
        } else {
          expected = QUnit.dump.parse(details.expected);
        }

        actual = QUnit.dump.parse(details.actual);
        message += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + escapeText(expected) + "</pre></td></tr>";

        if (actual !== expected) {
          message += "<tr class='test-actual'><th>Result: </th><td><pre>" + escapeText(actual) + "</pre></td></tr>";

          if (typeof details.actual === "number" && typeof details.expected === "number") {
            if (!isNaN(details.actual) && !isNaN(details.expected)) {
              showDiff = true;
              diff$$1 = details.actual - details.expected;
              diff$$1 = (diff$$1 > 0 ? "+" : "") + diff$$1;
            }
          } else if (typeof details.actual !== "boolean" && typeof details.expected !== "boolean") {
            diff$$1 = QUnit.diff(expected, actual); // don't show diff if there is zero overlap

            showDiff = stripHtml(diff$$1).length !== stripHtml(expected).length + stripHtml(actual).length;
          }

          if (showDiff) {
            message += "<tr class='test-diff'><th>Diff: </th><td><pre>" + diff$$1 + "</pre></td></tr>";
          }
        } else if (expected.indexOf("[object Array]") !== -1 || expected.indexOf("[object Object]") !== -1) {
          message += "<tr class='test-message'><th>Message: </th><td>" + "Diff suppressed as the depth of object is more than current max depth (" + QUnit.config.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to " + " run with a higher max depth or <a href='" + escapeText(setUrl({
            maxDepth: -1
          })) + "'>" + "Rerun</a> without max depth.</p></td></tr>";
        } else {
          message += "<tr class='test-message'><th>Message: </th><td>" + "Diff suppressed as the expected and actual results have an equivalent" + " serialization</td></tr>";
        }

        if (details.source) {
          message += "<tr class='test-source'><th>Source: </th><td><pre>" + escapeText(details.source) + "</pre></td></tr>";
        }

        message += "</table>"; // This occurs when pushFailure is set and we have an extracted stack trace
      } else if (!details.result && details.source) {
        message += "<table>" + "<tr class='test-source'><th>Source: </th><td><pre>" + escapeText(details.source) + "</pre></td></tr>" + "</table>";
      }

      assertList = testItem.getElementsByTagName("ol")[0];
      assertLi = document.createElement("li");
      assertLi.className = details.result ? "pass" : "fail";
      assertLi.innerHTML = message;
      assertList.appendChild(assertLi);
    });
    QUnit.testDone(function (details) {
      var testTitle,
          time,
          testItem,
          assertList,
          status,
          good,
          bad,
          testCounts,
          skipped,
          sourceName,
          tests = id("qunit-tests");

      if (!tests) {
        return;
      }

      testItem = id("qunit-test-output-" + details.testId);
      removeClass(testItem, "running");

      if (details.failed > 0) {
        status = "failed";
      } else if (details.todo) {
        status = "todo";
      } else {
        status = details.skipped ? "skipped" : "passed";
      }

      assertList = testItem.getElementsByTagName("ol")[0];
      good = details.passed;
      bad = details.failed; // This test passed if it has no unexpected failed assertions

      var testPassed = details.failed > 0 ? details.todo : !details.todo;

      if (testPassed) {
        // Collapse the passing tests
        addClass(assertList, "qunit-collapsed");
      } else if (config.collapse) {
        if (!collapseNext) {
          // Skip collapsing the first failing test
          collapseNext = true;
        } else {
          // Collapse remaining tests
          addClass(assertList, "qunit-collapsed");
        }
      } // The testItem.firstChild is the test name


      testTitle = testItem.firstChild;
      testCounts = bad ? "<b class='failed'>" + bad + "</b>, " + "<b class='passed'>" + good + "</b>, " : "";
      testTitle.innerHTML += " <b class='counts'>(" + testCounts + details.assertions.length + ")</b>";

      if (details.skipped) {
        stats.skippedTests++;
        testItem.className = "skipped";
        skipped = document.createElement("em");
        skipped.className = "qunit-skipped-label";
        skipped.innerHTML = "skipped";
        testItem.insertBefore(skipped, testTitle);
      } else {
        addEvent(testTitle, "click", function () {
          toggleClass(assertList, "qunit-collapsed");
        });
        testItem.className = testPassed ? "pass" : "fail";

        if (details.todo) {
          var todoLabel = document.createElement("em");
          todoLabel.className = "qunit-todo-label";
          todoLabel.innerHTML = "todo";
          testItem.className += " todo";
          testItem.insertBefore(todoLabel, testTitle);
        }

        time = document.createElement("span");
        time.className = "runtime";
        time.innerHTML = details.runtime + " ms";
        testItem.insertBefore(time, assertList);

        if (!testPassed) {
          stats.failedTests++;
        } else if (details.todo) {
          stats.todoTests++;
        } else {
          stats.passedTests++;
        }
      } // Show the source of the test when showing assertions


      if (details.source) {
        sourceName = document.createElement("p");
        sourceName.innerHTML = "<strong>Source: </strong>" + escapeText(details.source);
        addClass(sourceName, "qunit-source");

        if (testPassed) {
          addClass(sourceName, "qunit-collapsed");
        }

        addEvent(testTitle, "click", function () {
          toggleClass(sourceName, "qunit-collapsed");
        });
        testItem.appendChild(sourceName);
      }

      if (config.hidepassed && status === "passed") {
        // use removeChild instead of remove because of support
        hiddenTests.push(testItem);
        tests.removeChild(testItem);
      }
    }); // Avoid readyState issue with phantomjs
    // Ref: #818

    var notPhantom = function (p) {
      return !(p && p.version && p.version.major > 0);
    }(window$1.phantom);

    if (notPhantom && document.readyState === "complete") {
      QUnit.load();
    } else {
      addEvent(window$1, "load", QUnit.load);
    } // Wrap window.onerror. We will call the original window.onerror to see if
    // the existing handler fully handles the error; if not, we will call the
    // QUnit.onError function.


    var originalWindowOnError = window$1.onerror; // Cover uncaught exceptions
    // Returning true will suppress the default browser handler,
    // returning false will let it run.

    window$1.onerror = function (message, fileName, lineNumber, columnNumber, errorObj) {
      var ret = false;

      if (originalWindowOnError) {
        for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
          args[_key - 5] = arguments[_key];
        }

        ret = originalWindowOnError.call.apply(originalWindowOnError, [this, message, fileName, lineNumber, columnNumber, errorObj].concat(args));
      } // Treat return value as window.onerror itself does,
      // Only do our handling if not suppressed.


      if (ret !== true) {
        var error = {
          message: message,
          fileName: fileName,
          lineNumber: lineNumber
        }; // According to
        // https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror,
        // most modern browsers support an errorObj argument; use that to
        // get a full stack trace if it's available.

        if (errorObj && errorObj.stack) {
          error.stacktrace = extractStacktrace(errorObj, 0);
        }

        ret = QUnit.onError(error);
      }

      return ret;
    }; // Listen for unhandled rejections, and call QUnit.onUnhandledRejection


    window$1.addEventListener("unhandledrejection", function (event) {
      QUnit.onUnhandledRejection(event.reason);
    });
  })();
  /*
   * This file is a modified version of google-diff-match-patch's JavaScript implementation
   * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),
   * modifications are licensed as more fully set forth in LICENSE.txt.
   *
   * The original source of google-diff-match-patch is attributable and licensed as follows:
   *
   * Copyright 2006 Google Inc.
   * https://code.google.com/p/google-diff-match-patch/
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * https://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * More Info:
   *  https://code.google.com/p/google-diff-match-patch/
   *
   * Usage: QUnit.diff(expected, actual)
   *
   */


  QUnit.diff = function () {
    function DiffMatchPatch() {} //  DIFF FUNCTIONS

    /**
     * The data structure representing a diff is an array of tuples:
     * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
     * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
     */


    var DIFF_DELETE = -1,
        DIFF_INSERT = 1,
        DIFF_EQUAL = 0;
    /**
     * Find the differences between two texts.  Simplifies the problem by stripping
     * any common prefix or suffix off the texts before diffing.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {boolean=} optChecklines Optional speedup flag. If present and false,
     *     then don't run a line-level diff first to identify the changed areas.
     *     Defaults to true, which does a faster, slightly less optimal diff.
     * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.
     */

    DiffMatchPatch.prototype.DiffMain = function (text1, text2, optChecklines) {
      var deadline, checklines, commonlength, commonprefix, commonsuffix, diffs; // The diff must be complete in up to 1 second.

      deadline = new Date().getTime() + 1000; // Check for null inputs.

      if (text1 === null || text2 === null) {
        throw new Error("Null input. (DiffMain)");
      } // Check for equality (speedup).


      if (text1 === text2) {
        if (text1) {
          return [[DIFF_EQUAL, text1]];
        }

        return [];
      }

      if (typeof optChecklines === "undefined") {
        optChecklines = true;
      }

      checklines = optChecklines; // Trim off common prefix (speedup).

      commonlength = this.diffCommonPrefix(text1, text2);
      commonprefix = text1.substring(0, commonlength);
      text1 = text1.substring(commonlength);
      text2 = text2.substring(commonlength); // Trim off common suffix (speedup).

      commonlength = this.diffCommonSuffix(text1, text2);
      commonsuffix = text1.substring(text1.length - commonlength);
      text1 = text1.substring(0, text1.length - commonlength);
      text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.

      diffs = this.diffCompute(text1, text2, checklines, deadline); // Restore the prefix and suffix.

      if (commonprefix) {
        diffs.unshift([DIFF_EQUAL, commonprefix]);
      }

      if (commonsuffix) {
        diffs.push([DIFF_EQUAL, commonsuffix]);
      }

      this.diffCleanupMerge(diffs);
      return diffs;
    };
    /**
     * Reduce the number of edits by eliminating operationally trivial equalities.
     * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.
     */


    DiffMatchPatch.prototype.diffCleanupEfficiency = function (diffs) {
      var changes, equalities, equalitiesLength, lastequality, pointer, preIns, preDel, postIns, postDel;
      changes = false;
      equalities = []; // Stack of indices where equalities are found.

      equalitiesLength = 0; // Keeping our own length var is faster in JS.

      /** @type {?string} */

      lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]

      pointer = 0; // Index of current position.
      // Is there an insertion operation before the last equality.

      preIns = false; // Is there a deletion operation before the last equality.

      preDel = false; // Is there an insertion operation after the last equality.

      postIns = false; // Is there a deletion operation after the last equality.

      postDel = false;

      while (pointer < diffs.length) {
        // Equality found.
        if (diffs[pointer][0] === DIFF_EQUAL) {
          if (diffs[pointer][1].length < 4 && (postIns || postDel)) {
            // Candidate found.
            equalities[equalitiesLength++] = pointer;
            preIns = postIns;
            preDel = postDel;
            lastequality = diffs[pointer][1];
          } else {
            // Not a candidate, and can never become one.
            equalitiesLength = 0;
            lastequality = null;
          }

          postIns = postDel = false; // An insertion or deletion.
        } else {
          if (diffs[pointer][0] === DIFF_DELETE) {
            postDel = true;
          } else {
            postIns = true;
          }
          /*
           * Five types to be split:
           * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
           * <ins>A</ins>X<ins>C</ins><del>D</del>
           * <ins>A</ins><del>B</del>X<ins>C</ins>
           * <ins>A</del>X<ins>C</ins><del>D</del>
           * <ins>A</ins><del>B</del>X<del>C</del>
           */


          if (lastequality && (preIns && preDel && postIns && postDel || lastequality.length < 2 && preIns + preDel + postIns + postDel === 3)) {
            // Duplicate record.
            diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.

            diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
            equalitiesLength--; // Throw away the equality we just deleted;

            lastequality = null;

            if (preIns && preDel) {
              // No changes made which could affect previous entry, keep going.
              postIns = postDel = true;
              equalitiesLength = 0;
            } else {
              equalitiesLength--; // Throw away the previous equality.

              pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
              postIns = postDel = false;
            }

            changes = true;
          }
        }

        pointer++;
      }

      if (changes) {
        this.diffCleanupMerge(diffs);
      }
    };
    /**
     * Convert a diff array into a pretty HTML report.
     * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.
     * @param {integer} string to be beautified.
     * @return {string} HTML representation.
     */


    DiffMatchPatch.prototype.diffPrettyHtml = function (diffs) {
      var op,
          data,
          x,
          html = [];

      for (x = 0; x < diffs.length; x++) {
        op = diffs[x][0]; // Operation (insert, delete, equal)

        data = diffs[x][1]; // Text of change.

        switch (op) {
          case DIFF_INSERT:
            html[x] = "<ins>" + escapeText(data) + "</ins>";
            break;

          case DIFF_DELETE:
            html[x] = "<del>" + escapeText(data) + "</del>";
            break;

          case DIFF_EQUAL:
            html[x] = "<span>" + escapeText(data) + "</span>";
            break;
        }
      }

      return html.join("");
    };
    /**
     * Determine the common prefix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the start of each
     *     string.
     */


    DiffMatchPatch.prototype.diffCommonPrefix = function (text1, text2) {
      var pointermid, pointermax, pointermin, pointerstart; // Quick check for common null cases.

      if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
        return 0;
      } // Binary search.
      // Performance analysis: https://neil.fraser.name/news/2007/10/09/


      pointermin = 0;
      pointermax = Math.min(text1.length, text2.length);
      pointermid = pointermax;
      pointerstart = 0;

      while (pointermin < pointermid) {
        if (text1.substring(pointerstart, pointermid) === text2.substring(pointerstart, pointermid)) {
          pointermin = pointermid;
          pointerstart = pointermin;
        } else {
          pointermax = pointermid;
        }

        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      return pointermid;
    };
    /**
     * Determine the common suffix of two strings.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the end of each string.
     */


    DiffMatchPatch.prototype.diffCommonSuffix = function (text1, text2) {
      var pointermid, pointermax, pointermin, pointerend; // Quick check for common null cases.

      if (!text1 || !text2 || text1.charAt(text1.length - 1) !== text2.charAt(text2.length - 1)) {
        return 0;
      } // Binary search.
      // Performance analysis: https://neil.fraser.name/news/2007/10/09/


      pointermin = 0;
      pointermax = Math.min(text1.length, text2.length);
      pointermid = pointermax;
      pointerend = 0;

      while (pointermin < pointermid) {
        if (text1.substring(text1.length - pointermid, text1.length - pointerend) === text2.substring(text2.length - pointermid, text2.length - pointerend)) {
          pointermin = pointermid;
          pointerend = pointermin;
        } else {
          pointermax = pointermid;
        }

        pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
      }

      return pointermid;
    };
    /**
     * Find the differences between two texts.  Assumes that the texts do not
     * have any common prefix or suffix.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {boolean} checklines Speedup flag.  If false, then don't run a
     *     line-level diff first to identify the changed areas.
     *     If true, then run a faster, slightly less optimal diff.
     * @param {number} deadline Time when the diff should be complete by.
     * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.
     * @private
     */


    DiffMatchPatch.prototype.diffCompute = function (text1, text2, checklines, deadline) {
      var diffs, longtext, shorttext, i, hm, text1A, text2A, text1B, text2B, midCommon, diffsA, diffsB;

      if (!text1) {
        // Just add some text (speedup).
        return [[DIFF_INSERT, text2]];
      }

      if (!text2) {
        // Just delete some text (speedup).
        return [[DIFF_DELETE, text1]];
      }

      longtext = text1.length > text2.length ? text1 : text2;
      shorttext = text1.length > text2.length ? text2 : text1;
      i = longtext.indexOf(shorttext);

      if (i !== -1) {
        // Shorter text is inside the longer text (speedup).
        diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]]; // Swap insertions for deletions if diff is reversed.

        if (text1.length > text2.length) {
          diffs[0][0] = diffs[2][0] = DIFF_DELETE;
        }

        return diffs;
      }

      if (shorttext.length === 1) {
        // Single character string.
        // After the previous speedup, the character can't be an equality.
        return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
      } // Check to see if the problem can be split in two.


      hm = this.diffHalfMatch(text1, text2);

      if (hm) {
        // A half-match was found, sort out the return data.
        text1A = hm[0];
        text1B = hm[1];
        text2A = hm[2];
        text2B = hm[3];
        midCommon = hm[4]; // Send both pairs off for separate processing.

        diffsA = this.DiffMain(text1A, text2A, checklines, deadline);
        diffsB = this.DiffMain(text1B, text2B, checklines, deadline); // Merge the results.

        return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);
      }

      if (checklines && text1.length > 100 && text2.length > 100) {
        return this.diffLineMode(text1, text2, deadline);
      }

      return this.diffBisect(text1, text2, deadline);
    };
    /**
     * Do the two texts share a substring which is at least half the length of the
     * longer text?
     * This speedup can produce non-minimal diffs.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     text1, the suffix of text1, the prefix of text2, the suffix of
     *     text2 and the common middle.  Or null if there was no match.
     * @private
     */


    DiffMatchPatch.prototype.diffHalfMatch = function (text1, text2) {
      var longtext, shorttext, dmp, text1A, text2B, text2A, text1B, midCommon, hm1, hm2, hm;
      longtext = text1.length > text2.length ? text1 : text2;
      shorttext = text1.length > text2.length ? text2 : text1;

      if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
        return null; // Pointless.
      }

      dmp = this; // 'this' becomes 'window' in a closure.

      /**
       * Does a substring of shorttext exist within longtext such that the substring
       * is at least half the length of longtext?
       * Closure, but does not reference any external variables.
       * @param {string} longtext Longer string.
       * @param {string} shorttext Shorter string.
       * @param {number} i Start index of quarter length substring within longtext.
       * @return {Array.<string>} Five element Array, containing the prefix of
       *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
       *     of shorttext and the common middle.  Or null if there was no match.
       * @private
       */

      function diffHalfMatchI(longtext, shorttext, i) {
        var seed, j, bestCommon, prefixLength, suffixLength, bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB; // Start with a 1/4 length substring at position i as a seed.

        seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
        j = -1;
        bestCommon = "";

        while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {
          prefixLength = dmp.diffCommonPrefix(longtext.substring(i), shorttext.substring(j));
          suffixLength = dmp.diffCommonSuffix(longtext.substring(0, i), shorttext.substring(0, j));

          if (bestCommon.length < suffixLength + prefixLength) {
            bestCommon = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
            bestLongtextA = longtext.substring(0, i - suffixLength);
            bestLongtextB = longtext.substring(i + prefixLength);
            bestShorttextA = shorttext.substring(0, j - suffixLength);
            bestShorttextB = shorttext.substring(j + prefixLength);
          }
        }

        if (bestCommon.length * 2 >= longtext.length) {
          return [bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB, bestCommon];
        } else {
          return null;
        }
      } // First check if the second quarter is the seed for a half-match.


      hm1 = diffHalfMatchI(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.

      hm2 = diffHalfMatchI(longtext, shorttext, Math.ceil(longtext.length / 2));

      if (!hm1 && !hm2) {
        return null;
      } else if (!hm2) {
        hm = hm1;
      } else if (!hm1) {
        hm = hm2;
      } else {
        // Both matched.  Select the longest.
        hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
      } // A half-match was found, sort out the return data.


      if (text1.length > text2.length) {
        text1A = hm[0];
        text1B = hm[1];
        text2A = hm[2];
        text2B = hm[3];
      } else {
        text2A = hm[0];
        text2B = hm[1];
        text1A = hm[2];
        text1B = hm[3];
      }

      midCommon = hm[4];
      return [text1A, text1B, text2A, text2B, midCommon];
    };
    /**
     * Do a quick line-level diff on both strings, then rediff the parts for
     * greater accuracy.
     * This speedup can produce non-minimal diffs.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {number} deadline Time when the diff should be complete by.
     * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.
     * @private
     */


    DiffMatchPatch.prototype.diffLineMode = function (text1, text2, deadline) {
      var a, diffs, linearray, pointer, countInsert, countDelete, textInsert, textDelete, j; // Scan the text on a line-by-line basis first.

      a = this.diffLinesToChars(text1, text2);
      text1 = a.chars1;
      text2 = a.chars2;
      linearray = a.lineArray;
      diffs = this.DiffMain(text1, text2, false, deadline); // Convert the diff back to original text.

      this.diffCharsToLines(diffs, linearray); // Eliminate freak matches (e.g. blank lines)

      this.diffCleanupSemantic(diffs); // Rediff any replacement blocks, this time character-by-character.
      // Add a dummy entry at the end.

      diffs.push([DIFF_EQUAL, ""]);
      pointer = 0;
      countDelete = 0;
      countInsert = 0;
      textDelete = "";
      textInsert = "";

      while (pointer < diffs.length) {
        switch (diffs[pointer][0]) {
          case DIFF_INSERT:
            countInsert++;
            textInsert += diffs[pointer][1];
            break;

          case DIFF_DELETE:
            countDelete++;
            textDelete += diffs[pointer][1];
            break;

          case DIFF_EQUAL:
            // Upon reaching an equality, check for prior redundancies.
            if (countDelete >= 1 && countInsert >= 1) {
              // Delete the offending records and add the merged ones.
              diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);
              pointer = pointer - countDelete - countInsert;
              a = this.DiffMain(textDelete, textInsert, false, deadline);

              for (j = a.length - 1; j >= 0; j--) {
                diffs.splice(pointer, 0, a[j]);
              }

              pointer = pointer + a.length;
            }

            countInsert = 0;
            countDelete = 0;
            textDelete = "";
            textInsert = "";
            break;
        }

        pointer++;
      }

      diffs.pop(); // Remove the dummy entry at the end.

      return diffs;
    };
    /**
     * Find the 'middle snake' of a diff, split the problem in two
     * and return the recursively constructed diff.
     * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {number} deadline Time at which to bail if not yet complete.
     * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.
     * @private
     */


    DiffMatchPatch.prototype.diffBisect = function (text1, text2, deadline) {
      var text1Length, text2Length, maxD, vOffset, vLength, v1, v2, x, delta, front, k1start, k1end, k2start, k2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2; // Cache the text lengths to prevent multiple calls.

      text1Length = text1.length;
      text2Length = text2.length;
      maxD = Math.ceil((text1Length + text2Length) / 2);
      vOffset = maxD;
      vLength = 2 * maxD;
      v1 = new Array(vLength);
      v2 = new Array(vLength); // Setting all elements to -1 is faster in Chrome & Firefox than mixing
      // integers and undefined.

      for (x = 0; x < vLength; x++) {
        v1[x] = -1;
        v2[x] = -1;
      }

      v1[vOffset + 1] = 0;
      v2[vOffset + 1] = 0;
      delta = text1Length - text2Length; // If the total number of characters is odd, then the front path will collide
      // with the reverse path.

      front = delta % 2 !== 0; // Offsets for start and end of k loop.
      // Prevents mapping of space beyond the grid.

      k1start = 0;
      k1end = 0;
      k2start = 0;
      k2end = 0;

      for (d = 0; d < maxD; d++) {
        // Bail out if deadline is reached.
        if (new Date().getTime() > deadline) {
          break;
        } // Walk the front path one step.


        for (k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
          k1Offset = vOffset + k1;

          if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {
            x1 = v1[k1Offset + 1];
          } else {
            x1 = v1[k1Offset - 1] + 1;
          }

          y1 = x1 - k1;

          while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {
            x1++;
            y1++;
          }

          v1[k1Offset] = x1;

          if (x1 > text1Length) {
            // Ran off the right of the graph.
            k1end += 2;
          } else if (y1 > text2Length) {
            // Ran off the bottom of the graph.
            k1start += 2;
          } else if (front) {
            k2Offset = vOffset + delta - k1;

            if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {
              // Mirror x2 onto top-left coordinate system.
              x2 = text1Length - v2[k2Offset];

              if (x1 >= x2) {
                // Overlap detected.
                return this.diffBisectSplit(text1, text2, x1, y1, deadline);
              }
            }
          }
        } // Walk the reverse path one step.


        for (k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
          k2Offset = vOffset + k2;

          if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {
            x2 = v2[k2Offset + 1];
          } else {
            x2 = v2[k2Offset - 1] + 1;
          }

          y2 = x2 - k2;

          while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {
            x2++;
            y2++;
          }

          v2[k2Offset] = x2;

          if (x2 > text1Length) {
            // Ran off the left of the graph.
            k2end += 2;
          } else if (y2 > text2Length) {
            // Ran off the top of the graph.
            k2start += 2;
          } else if (!front) {
            k1Offset = vOffset + delta - k2;

            if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {
              x1 = v1[k1Offset];
              y1 = vOffset + x1 - k1Offset; // Mirror x2 onto top-left coordinate system.

              x2 = text1Length - x2;

              if (x1 >= x2) {
                // Overlap detected.
                return this.diffBisectSplit(text1, text2, x1, y1, deadline);
              }
            }
          }
        }
      } // Diff took too long and hit the deadline or
      // number of diffs equals number of characters, no commonality at all.


      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    };
    /**
     * Given the location of the 'middle snake', split the diff in two parts
     * and recurse.
     * @param {string} text1 Old string to be diffed.
     * @param {string} text2 New string to be diffed.
     * @param {number} x Index of split point in text1.
     * @param {number} y Index of split point in text2.
     * @param {number} deadline Time at which to bail if not yet complete.
     * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.
     * @private
     */


    DiffMatchPatch.prototype.diffBisectSplit = function (text1, text2, x, y, deadline) {
      var text1a, text1b, text2a, text2b, diffs, diffsb;
      text1a = text1.substring(0, x);
      text2a = text2.substring(0, y);
      text1b = text1.substring(x);
      text2b = text2.substring(y); // Compute both diffs serially.

      diffs = this.DiffMain(text1a, text2a, false, deadline);
      diffsb = this.DiffMain(text1b, text2b, false, deadline);
      return diffs.concat(diffsb);
    };
    /**
     * Reduce the number of edits by eliminating semantically trivial equalities.
     * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.
     */


    DiffMatchPatch.prototype.diffCleanupSemantic = function (diffs) {
      var changes, equalities, equalitiesLength, lastequality, pointer, lengthInsertions2, lengthDeletions2, lengthInsertions1, lengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;
      changes = false;
      equalities = []; // Stack of indices where equalities are found.

      equalitiesLength = 0; // Keeping our own length var is faster in JS.

      /** @type {?string} */

      lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]

      pointer = 0; // Index of current position.
      // Number of characters that changed prior to the equality.

      lengthInsertions1 = 0;
      lengthDeletions1 = 0; // Number of characters that changed after the equality.

      lengthInsertions2 = 0;
      lengthDeletions2 = 0;

      while (pointer < diffs.length) {
        if (diffs[pointer][0] === DIFF_EQUAL) {
          // Equality found.
          equalities[equalitiesLength++] = pointer;
          lengthInsertions1 = lengthInsertions2;
          lengthDeletions1 = lengthDeletions2;
          lengthInsertions2 = 0;
          lengthDeletions2 = 0;
          lastequality = diffs[pointer][1];
        } else {
          // An insertion or deletion.
          if (diffs[pointer][0] === DIFF_INSERT) {
            lengthInsertions2 += diffs[pointer][1].length;
          } else {
            lengthDeletions2 += diffs[pointer][1].length;
          } // Eliminate an equality that is smaller or equal to the edits on both
          // sides of it.


          if (lastequality && lastequality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastequality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {
            // Duplicate record.
            diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.

            diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT; // Throw away the equality we just deleted.

            equalitiesLength--; // Throw away the previous equality (it needs to be reevaluated).

            equalitiesLength--;
            pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1; // Reset the counters.

            lengthInsertions1 = 0;
            lengthDeletions1 = 0;
            lengthInsertions2 = 0;
            lengthDeletions2 = 0;
            lastequality = null;
            changes = true;
          }
        }

        pointer++;
      } // Normalize the diff.


      if (changes) {
        this.diffCleanupMerge(diffs);
      } // Find any overlaps between deletions and insertions.
      // e.g: <del>abcxxx</del><ins>xxxdef</ins>
      //   -> <del>abc</del>xxx<ins>def</ins>
      // e.g: <del>xxxabc</del><ins>defxxx</ins>
      //   -> <ins>def</ins>xxx<del>abc</del>
      // Only extract an overlap if it is as big as the edit ahead or behind it.


      pointer = 1;

      while (pointer < diffs.length) {
        if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {
          deletion = diffs[pointer - 1][1];
          insertion = diffs[pointer][1];
          overlapLength1 = this.diffCommonOverlap(deletion, insertion);
          overlapLength2 = this.diffCommonOverlap(insertion, deletion);

          if (overlapLength1 >= overlapLength2) {
            if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {
              // Overlap found.  Insert an equality and trim the surrounding edits.
              diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);
              diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);
              diffs[pointer + 1][1] = insertion.substring(overlapLength1);
              pointer++;
            }
          } else {
            if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {
              // Reverse overlap found.
              // Insert an equality and swap and trim the surrounding edits.
              diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);
              diffs[pointer - 1][0] = DIFF_INSERT;
              diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);
              diffs[pointer + 1][0] = DIFF_DELETE;
              diffs[pointer + 1][1] = deletion.substring(overlapLength2);
              pointer++;
            }
          }

          pointer++;
        }

        pointer++;
      }
    };
    /**
     * Determine if the suffix of one string is the prefix of another.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {number} The number of characters common to the end of the first
     *     string and the start of the second string.
     * @private
     */


    DiffMatchPatch.prototype.diffCommonOverlap = function (text1, text2) {
      var text1Length, text2Length, textLength, best, length, pattern, found; // Cache the text lengths to prevent multiple calls.

      text1Length = text1.length;
      text2Length = text2.length; // Eliminate the null case.

      if (text1Length === 0 || text2Length === 0) {
        return 0;
      } // Truncate the longer string.


      if (text1Length > text2Length) {
        text1 = text1.substring(text1Length - text2Length);
      } else if (text1Length < text2Length) {
        text2 = text2.substring(0, text1Length);
      }

      textLength = Math.min(text1Length, text2Length); // Quick check for the worst case.

      if (text1 === text2) {
        return textLength;
      } // Start by looking for a single character match
      // and increase length until no match is found.
      // Performance analysis: https://neil.fraser.name/news/2010/11/04/


      best = 0;
      length = 1;

      while (true) {
        pattern = text1.substring(textLength - length);
        found = text2.indexOf(pattern);

        if (found === -1) {
          return best;
        }

        length += found;

        if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {
          best = length;
          length++;
        }
      }
    };
    /**
     * Split two texts into an array of strings.  Reduce the texts to a string of
     * hashes where each Unicode character represents one line.
     * @param {string} text1 First string.
     * @param {string} text2 Second string.
     * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
     *     An object containing the encoded text1, the encoded text2 and
     *     the array of unique strings.
     *     The zeroth element of the array of unique strings is intentionally blank.
     * @private
     */


    DiffMatchPatch.prototype.diffLinesToChars = function (text1, text2) {
      var lineArray, lineHash, chars1, chars2;
      lineArray = []; // E.g. lineArray[4] === 'Hello\n'

      lineHash = {}; // E.g. lineHash['Hello\n'] === 4
      // '\x00' is a valid character, but various debuggers don't like it.
      // So we'll insert a junk entry to avoid generating a null character.

      lineArray[0] = "";
      /**
       * Split a text into an array of strings.  Reduce the texts to a string of
       * hashes where each Unicode character represents one line.
       * Modifies linearray and linehash through being a closure.
       * @param {string} text String to encode.
       * @return {string} Encoded string.
       * @private
       */

      function diffLinesToCharsMunge(text) {
        var chars, lineStart, lineEnd, lineArrayLength, line;
        chars = ""; // Walk the text, pulling out a substring for each line.
        // text.split('\n') would would temporarily double our memory footprint.
        // Modifying text would create many large strings to garbage collect.

        lineStart = 0;
        lineEnd = -1; // Keeping our own length variable is faster than looking it up.

        lineArrayLength = lineArray.length;

        while (lineEnd < text.length - 1) {
          lineEnd = text.indexOf("\n", lineStart);

          if (lineEnd === -1) {
            lineEnd = text.length - 1;
          }

          line = text.substring(lineStart, lineEnd + 1);
          lineStart = lineEnd + 1;
          var lineHashExists = lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined;

          if (lineHashExists) {
            chars += String.fromCharCode(lineHash[line]);
          } else {
            chars += String.fromCharCode(lineArrayLength);
            lineHash[line] = lineArrayLength;
            lineArray[lineArrayLength++] = line;
          }
        }

        return chars;
      }

      chars1 = diffLinesToCharsMunge(text1);
      chars2 = diffLinesToCharsMunge(text2);
      return {
        chars1: chars1,
        chars2: chars2,
        lineArray: lineArray
      };
    };
    /**
     * Rehydrate the text in a diff from a string of line hashes to real lines of
     * text.
     * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.
     * @param {!Array.<string>} lineArray Array of unique strings.
     * @private
     */


    DiffMatchPatch.prototype.diffCharsToLines = function (diffs, lineArray) {
      var x, chars, text, y;

      for (x = 0; x < diffs.length; x++) {
        chars = diffs[x][1];
        text = [];

        for (y = 0; y < chars.length; y++) {
          text[y] = lineArray[chars.charCodeAt(y)];
        }

        diffs[x][1] = text.join("");
      }
    };
    /**
     * Reorder and merge like edit sections.  Merge equalities.
     * Any edit section can move as long as it doesn't cross an equality.
     * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.
     */


    DiffMatchPatch.prototype.diffCleanupMerge = function (diffs) {
      var pointer, countDelete, countInsert, textInsert, textDelete, commonlength, changes, diffPointer, position;
      diffs.push([DIFF_EQUAL, ""]); // Add a dummy entry at the end.

      pointer = 0;
      countDelete = 0;
      countInsert = 0;
      textDelete = "";
      textInsert = "";

      while (pointer < diffs.length) {
        switch (diffs[pointer][0]) {
          case DIFF_INSERT:
            countInsert++;
            textInsert += diffs[pointer][1];
            pointer++;
            break;

          case DIFF_DELETE:
            countDelete++;
            textDelete += diffs[pointer][1];
            pointer++;
            break;

          case DIFF_EQUAL:
            // Upon reaching an equality, check for prior redundancies.
            if (countDelete + countInsert > 1) {
              if (countDelete !== 0 && countInsert !== 0) {
                // Factor out any common prefixes.
                commonlength = this.diffCommonPrefix(textInsert, textDelete);

                if (commonlength !== 0) {
                  if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {
                    diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);
                  } else {
                    diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);
                    pointer++;
                  }

                  textInsert = textInsert.substring(commonlength);
                  textDelete = textDelete.substring(commonlength);
                } // Factor out any common suffixies.


                commonlength = this.diffCommonSuffix(textInsert, textDelete);

                if (commonlength !== 0) {
                  diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];
                  textInsert = textInsert.substring(0, textInsert.length - commonlength);
                  textDelete = textDelete.substring(0, textDelete.length - commonlength);
                }
              } // Delete the offending records and add the merged ones.


              if (countDelete === 0) {
                diffs.splice(pointer - countInsert, countDelete + countInsert, [DIFF_INSERT, textInsert]);
              } else if (countInsert === 0) {
                diffs.splice(pointer - countDelete, countDelete + countInsert, [DIFF_DELETE, textDelete]);
              } else {
                diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert, [DIFF_DELETE, textDelete], [DIFF_INSERT, textInsert]);
              }

              pointer = pointer - countDelete - countInsert + (countDelete ? 1 : 0) + (countInsert ? 1 : 0) + 1;
            } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {
              // Merge this equality with the previous one.
              diffs[pointer - 1][1] += diffs[pointer][1];
              diffs.splice(pointer, 1);
            } else {
              pointer++;
            }

            countInsert = 0;
            countDelete = 0;
            textDelete = "";
            textInsert = "";
            break;
        }
      }

      if (diffs[diffs.length - 1][1] === "") {
        diffs.pop(); // Remove the dummy entry at the end.
      } // Second pass: look for single edits surrounded on both sides by equalities
      // which can be shifted sideways to eliminate an equality.
      // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC


      changes = false;
      pointer = 1; // Intentionally ignore the first and last element (don't need checking).

      while (pointer < diffs.length - 1) {
        if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {
          diffPointer = diffs[pointer][1];
          position = diffPointer.substring(diffPointer.length - diffs[pointer - 1][1].length); // This is a single edit surrounded by equalities.

          if (position === diffs[pointer - 1][1]) {
            // Shift the edit over the previous equality.
            diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
            diffs.splice(pointer - 1, 1);
            changes = true;
          } else if (diffPointer.substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {
            // Shift the edit over the next equality.
            diffs[pointer - 1][1] += diffs[pointer + 1][1];
            diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
            diffs.splice(pointer + 1, 1);
            changes = true;
          }
        }

        pointer++;
      } // If shifts were made, the diff needs reordering and another shift sweep.


      if (changes) {
        this.diffCleanupMerge(diffs);
      }
    };

    return function (o, n) {
      var diff, output, text;
      diff = new DiffMatchPatch();
      output = diff.DiffMain(o, n);
      diff.diffCleanupEfficiency(output);
      text = diff.diffPrettyHtml(output);
      return text;
    };
  }();
})(function () {
  return this;
}());
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../process/0.11.10/node_modules/process/browser.js */ "./node_modules/.pnpm/registry.npmjs.org/process/0.11.10/node_modules/process/browser.js"), __webpack_require__(/*! ./../../../../../webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/global.js */ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../../../webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/module.js */ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/sockjs-client/1.4.0/node_modules/sockjs-client/dist/sockjs.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/sockjs-client/1.4.0/node_modules/sockjs-client/dist/sockjs.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.4.0 | http://sockjs.org | MIT license */
(function (f) {
  if (true) {
    module.exports = f();
  } else { var g; }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return require(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var transportList = require('./transport-list');

        module.exports = require('./main')(transportList); // TODO can't get rid of this until all servers do

        if ('_sockjs_onload' in global) {
          setTimeout(global._sockjs_onload, 1);
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./main": 14,
      "./transport-list": 16
    }],
    2: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          Event = require('./event');

      function CloseEvent() {
        Event.call(this);
        this.initEvent('close', false, false);
        this.wasClean = false;
        this.code = 0;
        this.reason = '';
      }

      inherits(CloseEvent, Event);
      module.exports = CloseEvent;
    }, {
      "./event": 4,
      "inherits": 57
    }],
    3: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          EventTarget = require('./eventtarget');

      function EventEmitter() {
        EventTarget.call(this);
      }

      inherits(EventEmitter, EventTarget);

      EventEmitter.prototype.removeAllListeners = function (type) {
        if (type) {
          delete this._listeners[type];
        } else {
          this._listeners = {};
        }
      };

      EventEmitter.prototype.once = function (type, listener) {
        var self = this,
            fired = false;

        function g() {
          self.removeListener(type, g);

          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }

        this.on(type, g);
      };

      EventEmitter.prototype.emit = function () {
        var type = arguments[0];
        var listeners = this._listeners[type];

        if (!listeners) {
          return;
        } // equivalent of Array.prototype.slice.call(arguments, 1);


        var l = arguments.length;
        var args = new Array(l - 1);

        for (var ai = 1; ai < l; ai++) {
          args[ai - 1] = arguments[ai];
        }

        for (var i = 0; i < listeners.length; i++) {
          listeners[i].apply(this, args);
        }
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
      EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;
      module.exports.EventEmitter = EventEmitter;
    }, {
      "./eventtarget": 5,
      "inherits": 57
    }],
    4: [function (require, module, exports) {
      'use strict';

      function Event(eventType) {
        this.type = eventType;
      }

      Event.prototype.initEvent = function (eventType, canBubble, cancelable) {
        this.type = eventType;
        this.bubbles = canBubble;
        this.cancelable = cancelable;
        this.timeStamp = +new Date();
        return this;
      };

      Event.prototype.stopPropagation = function () {};

      Event.prototype.preventDefault = function () {};

      Event.CAPTURING_PHASE = 1;
      Event.AT_TARGET = 2;
      Event.BUBBLING_PHASE = 3;
      module.exports = Event;
    }, {}],
    5: [function (require, module, exports) {
      'use strict';
      /* Simplified implementation of DOM2 EventTarget.
       *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
       */

      function EventTarget() {
        this._listeners = {};
      }

      EventTarget.prototype.addEventListener = function (eventType, listener) {
        if (!(eventType in this._listeners)) {
          this._listeners[eventType] = [];
        }

        var arr = this._listeners[eventType]; // #4

        if (arr.indexOf(listener) === -1) {
          // Make a copy so as not to interfere with a current dispatchEvent.
          arr = arr.concat([listener]);
        }

        this._listeners[eventType] = arr;
      };

      EventTarget.prototype.removeEventListener = function (eventType, listener) {
        var arr = this._listeners[eventType];

        if (!arr) {
          return;
        }

        var idx = arr.indexOf(listener);

        if (idx !== -1) {
          if (arr.length > 1) {
            // Make a copy so as not to interfere with a current dispatchEvent.
            this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
          } else {
            delete this._listeners[eventType];
          }

          return;
        }
      };

      EventTarget.prototype.dispatchEvent = function () {
        var event = arguments[0];
        var t = event.type; // equivalent of Array.prototype.slice.call(arguments, 0);

        var args = arguments.length === 1 ? [event] : Array.apply(null, arguments); // TODO: This doesn't match the real behavior; per spec, onfoo get
        // their place in line from the /first/ time they're set from
        // non-null. Although WebKit bumps it to the end every time it's
        // set.

        if (this['on' + t]) {
          this['on' + t].apply(this, args);
        }

        if (t in this._listeners) {
          // Grab a reference to the listeners list. removeEventListener may alter the list.
          var listeners = this._listeners[t];

          for (var i = 0; i < listeners.length; i++) {
            listeners[i].apply(this, args);
          }
        }
      };

      module.exports = EventTarget;
    }, {}],
    6: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          Event = require('./event');

      function TransportMessageEvent(data) {
        Event.call(this);
        this.initEvent('message', false, false);
        this.data = data;
      }

      inherits(TransportMessageEvent, Event);
      module.exports = TransportMessageEvent;
    }, {
      "./event": 4,
      "inherits": 57
    }],
    7: [function (require, module, exports) {
      'use strict';

      var JSON3 = require('json3'),
          iframeUtils = require('./utils/iframe');

      function FacadeJS(transport) {
        this._transport = transport;
        transport.on('message', this._transportMessage.bind(this));
        transport.on('close', this._transportClose.bind(this));
      }

      FacadeJS.prototype._transportClose = function (code, reason) {
        iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
      };

      FacadeJS.prototype._transportMessage = function (frame) {
        iframeUtils.postMessage('t', frame);
      };

      FacadeJS.prototype._send = function (data) {
        this._transport.send(data);
      };

      FacadeJS.prototype._close = function () {
        this._transport.close();

        this._transport.removeAllListeners();
      };

      module.exports = FacadeJS;
    }, {
      "./utils/iframe": 47,
      "json3": 58
    }],
    8: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var urlUtils = require('./utils/url'),
            eventUtils = require('./utils/event'),
            JSON3 = require('json3'),
            FacadeJS = require('./facade'),
            InfoIframeReceiver = require('./info-iframe-receiver'),
            iframeUtils = require('./utils/iframe'),
            loc = require('./location');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:iframe-bootstrap');
        }

        module.exports = function (SockJS, availableTransports) {
          var transportMap = {};
          availableTransports.forEach(function (at) {
            if (at.facadeTransport) {
              transportMap[at.facadeTransport.transportName] = at.facadeTransport;
            }
          }); // hard-coded for the info iframe
          // TODO see if we can make this more dynamic

          transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
          var parentOrigin;
          /* eslint-disable camelcase */

          SockJS.bootstrap_iframe = function () {
            /* eslint-enable camelcase */
            var facade;
            iframeUtils.currentWindowId = loc.hash.slice(1);

            var onMessage = function (e) {
              if (e.source !== parent) {
                return;
              }

              if (typeof parentOrigin === 'undefined') {
                parentOrigin = e.origin;
              }

              if (e.origin !== parentOrigin) {
                return;
              }

              var iframeMessage;

              try {
                iframeMessage = JSON3.parse(e.data);
              } catch (ignored) {
                debug('bad json', e.data);
                return;
              }

              if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
                return;
              }

              switch (iframeMessage.type) {
                case 's':
                  var p;

                  try {
                    p = JSON3.parse(iframeMessage.data);
                  } catch (ignored) {
                    debug('bad json', iframeMessage.data);
                    break;
                  }

                  var version = p[0];
                  var transport = p[1];
                  var transUrl = p[2];
                  var baseUrl = p[3];
                  debug(version, transport, transUrl, baseUrl); // change this to semver logic

                  if (version !== SockJS.version) {
                    throw new Error('Incompatible SockJS! Main site uses:' + ' "' + version + '", the iframe:' + ' "' + SockJS.version + '".');
                  }

                  if (!urlUtils.isOriginEqual(transUrl, loc.href) || !urlUtils.isOriginEqual(baseUrl, loc.href)) {
                    throw new Error('Can\'t connect to different domain from within an ' + 'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
                  }

                  facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
                  break;

                case 'm':
                  facade._send(iframeMessage.data);

                  break;

                case 'c':
                  if (facade) {
                    facade._close();
                  }

                  facade = null;
                  break;
              }
            };

            eventUtils.attachEvent('message', onMessage); // Start

            iframeUtils.postMessage('s');
          };
        };
      }).call(this, {
        env: {}
      });
    }, {
      "./facade": 7,
      "./info-iframe-receiver": 10,
      "./location": 13,
      "./utils/event": 46,
      "./utils/iframe": 47,
      "./utils/url": 52,
      "debug": 55,
      "json3": 58
    }],
    9: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            JSON3 = require('json3'),
            objectUtils = require('./utils/object');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:info-ajax');
        }

        function InfoAjax(url, AjaxObject) {
          EventEmitter.call(this);
          var self = this;
          var t0 = +new Date();
          this.xo = new AjaxObject('GET', url);
          this.xo.once('finish', function (status, text) {
            var info, rtt;

            if (status === 200) {
              rtt = +new Date() - t0;

              if (text) {
                try {
                  info = JSON3.parse(text);
                } catch (e) {
                  debug('bad json', text);
                }
              }

              if (!objectUtils.isObject(info)) {
                info = {};
              }
            }

            self.emit('finish', info, rtt);
            self.removeAllListeners();
          });
        }

        inherits(InfoAjax, EventEmitter);

        InfoAjax.prototype.close = function () {
          this.removeAllListeners();
          this.xo.close();
        };

        module.exports = InfoAjax;
      }).call(this, {
        env: {}
      });
    }, {
      "./utils/object": 49,
      "debug": 55,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    10: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          EventEmitter = require('events').EventEmitter,
          JSON3 = require('json3'),
          XHRLocalObject = require('./transport/sender/xhr-local'),
          InfoAjax = require('./info-ajax');

      function InfoReceiverIframe(transUrl) {
        var self = this;
        EventEmitter.call(this);
        this.ir = new InfoAjax(transUrl, XHRLocalObject);
        this.ir.once('finish', function (info, rtt) {
          self.ir = null;
          self.emit('message', JSON3.stringify([info, rtt]));
        });
      }

      inherits(InfoReceiverIframe, EventEmitter);
      InfoReceiverIframe.transportName = 'iframe-info-receiver';

      InfoReceiverIframe.prototype.close = function () {
        if (this.ir) {
          this.ir.close();
          this.ir = null;
        }

        this.removeAllListeners();
      };

      module.exports = InfoReceiverIframe;
    }, {
      "./info-ajax": 9,
      "./transport/sender/xhr-local": 37,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    11: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            JSON3 = require('json3'),
            utils = require('./utils/event'),
            IframeTransport = require('./transport/iframe'),
            InfoReceiverIframe = require('./info-iframe-receiver');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:info-iframe');
        }

        function InfoIframe(baseUrl, url) {
          var self = this;
          EventEmitter.call(this);

          var go = function () {
            var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);
            ifr.once('message', function (msg) {
              if (msg) {
                var d;

                try {
                  d = JSON3.parse(msg);
                } catch (e) {
                  debug('bad json', msg);
                  self.emit('finish');
                  self.close();
                  return;
                }

                var info = d[0],
                    rtt = d[1];
                self.emit('finish', info, rtt);
              }

              self.close();
            });
            ifr.once('close', function () {
              self.emit('finish');
              self.close();
            });
          }; // TODO this seems the same as the 'needBody' from transports


          if (!global.document.body) {
            utils.attachEvent('load', go);
          } else {
            go();
          }
        }

        inherits(InfoIframe, EventEmitter);

        InfoIframe.enabled = function () {
          return IframeTransport.enabled();
        };

        InfoIframe.prototype.close = function () {
          if (this.ifr) {
            this.ifr.close();
          }

          this.removeAllListeners();
          this.ifr = null;
        };

        module.exports = InfoIframe;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./info-iframe-receiver": 10,
      "./transport/iframe": 22,
      "./utils/event": 46,
      "debug": 55,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    12: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            urlUtils = require('./utils/url'),
            XDR = require('./transport/sender/xdr'),
            XHRCors = require('./transport/sender/xhr-cors'),
            XHRLocal = require('./transport/sender/xhr-local'),
            XHRFake = require('./transport/sender/xhr-fake'),
            InfoIframe = require('./info-iframe'),
            InfoAjax = require('./info-ajax');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:info-receiver');
        }

        function InfoReceiver(baseUrl, urlInfo) {
          debug(baseUrl);
          var self = this;
          EventEmitter.call(this);
          setTimeout(function () {
            self.doXhr(baseUrl, urlInfo);
          }, 0);
        }

        inherits(InfoReceiver, EventEmitter); // TODO this is currently ignoring the list of available transports and the whitelist

        InfoReceiver._getReceiver = function (baseUrl, url, urlInfo) {
          // determine method of CORS support (if needed)
          if (urlInfo.sameOrigin) {
            return new InfoAjax(url, XHRLocal);
          }

          if (XHRCors.enabled) {
            return new InfoAjax(url, XHRCors);
          }

          if (XDR.enabled && urlInfo.sameScheme) {
            return new InfoAjax(url, XDR);
          }

          if (InfoIframe.enabled()) {
            return new InfoIframe(baseUrl, url);
          }

          return new InfoAjax(url, XHRFake);
        };

        InfoReceiver.prototype.doXhr = function (baseUrl, urlInfo) {
          var self = this,
              url = urlUtils.addPath(baseUrl, '/info');
          debug('doXhr', url);
          this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);
          this.timeoutRef = setTimeout(function () {
            debug('timeout');

            self._cleanup(false);

            self.emit('finish');
          }, InfoReceiver.timeout);
          this.xo.once('finish', function (info, rtt) {
            debug('finish', info, rtt);

            self._cleanup(true);

            self.emit('finish', info, rtt);
          });
        };

        InfoReceiver.prototype._cleanup = function (wasClean) {
          debug('_cleanup');
          clearTimeout(this.timeoutRef);
          this.timeoutRef = null;

          if (!wasClean && this.xo) {
            this.xo.close();
          }

          this.xo = null;
        };

        InfoReceiver.prototype.close = function () {
          debug('close');
          this.removeAllListeners();

          this._cleanup(false);
        };

        InfoReceiver.timeout = 8000;
        module.exports = InfoReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "./info-ajax": 9,
      "./info-iframe": 11,
      "./transport/sender/xdr": 34,
      "./transport/sender/xhr-cors": 35,
      "./transport/sender/xhr-fake": 36,
      "./transport/sender/xhr-local": 37,
      "./utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    13: [function (require, module, exports) {
      (function (global) {
        'use strict';

        module.exports = global.location || {
          origin: 'http://localhost:80',
          protocol: 'http:',
          host: 'localhost',
          port: 80,
          href: 'http://localhost/',
          hash: ''
        };
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    14: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        require('./shims');

        var URL = require('url-parse'),
            inherits = require('inherits'),
            JSON3 = require('json3'),
            random = require('./utils/random'),
            escape = require('./utils/escape'),
            urlUtils = require('./utils/url'),
            eventUtils = require('./utils/event'),
            transport = require('./utils/transport'),
            objectUtils = require('./utils/object'),
            browser = require('./utils/browser'),
            log = require('./utils/log'),
            Event = require('./event/event'),
            EventTarget = require('./event/eventtarget'),
            loc = require('./location'),
            CloseEvent = require('./event/close'),
            TransportMessageEvent = require('./event/trans-message'),
            InfoReceiver = require('./info-receiver');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:main');
        }

        var transports; // follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface

        function SockJS(url, protocols, options) {
          if (!(this instanceof SockJS)) {
            return new SockJS(url, protocols, options);
          }

          if (arguments.length < 1) {
            throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
          }

          EventTarget.call(this);
          this.readyState = SockJS.CONNECTING;
          this.extensions = '';
          this.protocol = ''; // non-standard extension

          options = options || {};

          if (options.protocols_whitelist) {
            log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
          }

          this._transportsWhitelist = options.transports;
          this._transportOptions = options.transportOptions || {};
          this._timeout = options.timeout || 0;
          var sessionId = options.sessionId || 8;

          if (typeof sessionId === 'function') {
            this._generateSessionId = sessionId;
          } else if (typeof sessionId === 'number') {
            this._generateSessionId = function () {
              return random.string(sessionId);
            };
          } else {
            throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
          }

          this._server = options.server || random.numberString(1000); // Step 1 of WS spec - parse and validate the url. Issue #8

          var parsedUrl = new URL(url);

          if (!parsedUrl.host || !parsedUrl.protocol) {
            throw new SyntaxError("The URL '" + url + "' is invalid");
          } else if (parsedUrl.hash) {
            throw new SyntaxError('The URL must not contain a fragment');
          } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
            throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
          }

          var secure = parsedUrl.protocol === 'https:'; // Step 2 - don't allow secure origin with an insecure protocol

          if (loc.protocol === 'https:' && !secure) {
            throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
          } // Step 3 - check port access - no need here
          // Step 4 - parse protocols argument


          if (!protocols) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            protocols = [protocols];
          } // Step 5 - check protocols argument


          var sortedProtocols = protocols.sort();
          sortedProtocols.forEach(function (proto, i) {
            if (!proto) {
              throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
            }

            if (i < sortedProtocols.length - 1 && proto === sortedProtocols[i + 1]) {
              throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
            }
          }); // Step 6 - convert origin

          var o = urlUtils.getOrigin(loc.href);
          this._origin = o ? o.toLowerCase() : null; // remove the trailing slash

          parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, '')); // store the sanitized url

          this.url = parsedUrl.href;
          debug('using url', this.url); // Step 7 - start connection in background
          // obtain server info
          // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26

          this._urlInfo = {
            nullOrigin: !browser.hasDomain(),
            sameOrigin: urlUtils.isOriginEqual(this.url, loc.href),
            sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
          };
          this._ir = new InfoReceiver(this.url, this._urlInfo);

          this._ir.once('finish', this._receiveInfo.bind(this));
        }

        inherits(SockJS, EventTarget);

        function userSetCode(code) {
          return code === 1000 || code >= 3000 && code <= 4999;
        }

        SockJS.prototype.close = function (code, reason) {
          // Step 1
          if (code && !userSetCode(code)) {
            throw new Error('InvalidAccessError: Invalid code');
          } // Step 2.4 states the max is 123 bytes, but we are just checking length


          if (reason && reason.length > 123) {
            throw new SyntaxError('reason argument has an invalid length');
          } // Step 3.1


          if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
            return;
          } // TODO look at docs to determine how to set this


          var wasClean = true;

          this._close(code || 1000, reason || 'Normal closure', wasClean);
        };

        SockJS.prototype.send = function (data) {
          // #13 - convert anything non-string to string
          // TODO this currently turns objects into [object Object]
          if (typeof data !== 'string') {
            data = '' + data;
          }

          if (this.readyState === SockJS.CONNECTING) {
            throw new Error('InvalidStateError: The connection has not been established yet');
          }

          if (this.readyState !== SockJS.OPEN) {
            return;
          }

          this._transport.send(escape.quote(data));
        };

        SockJS.version = require('./version');
        SockJS.CONNECTING = 0;
        SockJS.OPEN = 1;
        SockJS.CLOSING = 2;
        SockJS.CLOSED = 3;

        SockJS.prototype._receiveInfo = function (info, rtt) {
          debug('_receiveInfo', rtt);
          this._ir = null;

          if (!info) {
            this._close(1002, 'Cannot connect to server');

            return;
          } // establish a round-trip timeout (RTO) based on the
          // round-trip time (RTT)


          this._rto = this.countRTO(rtt); // allow server to override url used for the actual transport

          this._transUrl = info.base_url ? info.base_url : this.url;
          info = objectUtils.extend(info, this._urlInfo);
          debug('info', info); // determine list of desired and supported transports

          var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
          this._transports = enabledTransports.main;
          debug(this._transports.length + ' enabled transports');

          this._connect();
        };

        SockJS.prototype._connect = function () {
          for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
            debug('attempt', Transport.transportName);

            if (Transport.needBody) {
              if (!global.document.body || typeof global.document.readyState !== 'undefined' && global.document.readyState !== 'complete' && global.document.readyState !== 'interactive') {
                debug('waiting for body');

                this._transports.unshift(Transport);

                eventUtils.attachEvent('load', this._connect.bind(this));
                return;
              }
            } // calculate timeout based on RTO and round trips. Default to 5s


            var timeoutMs = Math.max(this._timeout, this._rto * Transport.roundTrips || 5000);
            this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
            debug('using timeout', timeoutMs);
            var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
            var options = this._transportOptions[Transport.transportName];
            debug('transport url', transportUrl);
            var transportObj = new Transport(transportUrl, this._transUrl, options);
            transportObj.on('message', this._transportMessage.bind(this));
            transportObj.once('close', this._transportClose.bind(this));
            transportObj.transportName = Transport.transportName;
            this._transport = transportObj;
            return;
          }

          this._close(2000, 'All transports failed', false);
        };

        SockJS.prototype._transportTimeout = function () {
          debug('_transportTimeout');

          if (this.readyState === SockJS.CONNECTING) {
            if (this._transport) {
              this._transport.close();
            }

            this._transportClose(2007, 'Transport timed out');
          }
        };

        SockJS.prototype._transportMessage = function (msg) {
          debug('_transportMessage', msg);
          var self = this,
              type = msg.slice(0, 1),
              content = msg.slice(1),
              payload; // first check for messages that don't need a payload

          switch (type) {
            case 'o':
              this._open();

              return;

            case 'h':
              this.dispatchEvent(new Event('heartbeat'));
              debug('heartbeat', this.transport);
              return;
          }

          if (content) {
            try {
              payload = JSON3.parse(content);
            } catch (e) {
              debug('bad json', content);
            }
          }

          if (typeof payload === 'undefined') {
            debug('empty payload', content);
            return;
          }

          switch (type) {
            case 'a':
              if (Array.isArray(payload)) {
                payload.forEach(function (p) {
                  debug('message', self.transport, p);
                  self.dispatchEvent(new TransportMessageEvent(p));
                });
              }

              break;

            case 'm':
              debug('message', this.transport, payload);
              this.dispatchEvent(new TransportMessageEvent(payload));
              break;

            case 'c':
              if (Array.isArray(payload) && payload.length === 2) {
                this._close(payload[0], payload[1], true);
              }

              break;
          }
        };

        SockJS.prototype._transportClose = function (code, reason) {
          debug('_transportClose', this.transport, code, reason);

          if (this._transport) {
            this._transport.removeAllListeners();

            this._transport = null;
            this.transport = null;
          }

          if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
            this._connect();

            return;
          }

          this._close(code, reason);
        };

        SockJS.prototype._open = function () {
          debug('_open', this._transport && this._transport.transportName, this.readyState);

          if (this.readyState === SockJS.CONNECTING) {
            if (this._transportTimeoutId) {
              clearTimeout(this._transportTimeoutId);
              this._transportTimeoutId = null;
            }

            this.readyState = SockJS.OPEN;
            this.transport = this._transport.transportName;
            this.dispatchEvent(new Event('open'));
            debug('connected', this.transport);
          } else {
            // The server might have been restarted, and lost track of our
            // connection.
            this._close(1006, 'Server lost session');
          }
        };

        SockJS.prototype._close = function (code, reason, wasClean) {
          debug('_close', this.transport, code, reason, wasClean, this.readyState);
          var forceFail = false;

          if (this._ir) {
            forceFail = true;

            this._ir.close();

            this._ir = null;
          }

          if (this._transport) {
            this._transport.close();

            this._transport = null;
            this.transport = null;
          }

          if (this.readyState === SockJS.CLOSED) {
            throw new Error('InvalidStateError: SockJS has already been closed');
          }

          this.readyState = SockJS.CLOSING;
          setTimeout(function () {
            this.readyState = SockJS.CLOSED;

            if (forceFail) {
              this.dispatchEvent(new Event('error'));
            }

            var e = new CloseEvent('close');
            e.wasClean = wasClean || false;
            e.code = code || 1000;
            e.reason = reason;
            this.dispatchEvent(e);
            this.onmessage = this.onclose = this.onerror = null;
            debug('disconnected');
          }.bind(this), 0);
        }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
        // and RFC 2988.


        SockJS.prototype.countRTO = function (rtt) {
          // In a local environment, when using IE8/9 and the `jsonp-polling`
          // transport the time needed to establish a connection (the time that pass
          // from the opening of the transport to the call of `_dispatchOpen`) is
          // around 200msec (the lower bound used in the article above) and this
          // causes spurious timeouts. For this reason we calculate a value slightly
          // larger than that used in the article.
          if (rtt > 100) {
            return 4 * rtt; // rto > 400msec
          }

          return 300 + rtt; // 300msec < rto <= 400msec
        };

        module.exports = function (availableTransports) {
          transports = transport(availableTransports);

          require('./iframe-bootstrap')(SockJS, availableTransports);

          return SockJS;
        };
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./event/close": 2,
      "./event/event": 4,
      "./event/eventtarget": 5,
      "./event/trans-message": 6,
      "./iframe-bootstrap": 8,
      "./info-receiver": 12,
      "./location": 13,
      "./shims": 15,
      "./utils/browser": 44,
      "./utils/escape": 45,
      "./utils/event": 46,
      "./utils/log": 48,
      "./utils/object": 49,
      "./utils/random": 50,
      "./utils/transport": 51,
      "./utils/url": 52,
      "./version": 53,
      "debug": 55,
      "inherits": 57,
      "json3": 58,
      "url-parse": 61
    }],
    15: [function (require, module, exports) {
      /* eslint-disable */

      /* jscs: disable */
      'use strict'; // pulled specific shims from https://github.com/es-shims/es5-shim

      var ArrayPrototype = Array.prototype;
      var ObjectPrototype = Object.prototype;
      var FunctionPrototype = Function.prototype;
      var StringPrototype = String.prototype;
      var array_slice = ArrayPrototype.slice;
      var _toString = ObjectPrototype.toString;

      var isFunction = function (val) {
        return ObjectPrototype.toString.call(val) === '[object Function]';
      };

      var isArray = function isArray(obj) {
        return _toString.call(obj) === '[object Array]';
      };

      var isString = function isString(obj) {
        return _toString.call(obj) === '[object String]';
      };

      var supportsDescriptors = Object.defineProperty && function () {
        try {
          Object.defineProperty({}, 'x', {});
          return true;
        } catch (e) {
          /* this is ES3 */
          return false;
        }
      }(); // Define configurable, writable and non-enumerable props
      // if they don't exist.


      var defineProperty;

      if (supportsDescriptors) {
        defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && name in object) {
            return;
          }

          Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
          });
        };
      } else {
        defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && name in object) {
            return;
          }

          object[name] = method;
        };
      }

      var defineProperties = function (object, map, forceAssign) {
        for (var name in map) {
          if (ObjectPrototype.hasOwnProperty.call(map, name)) {
            defineProperty(object, name, map[name], forceAssign);
          }
        }
      };

      var toObject = function (o) {
        if (o == null) {
          // this matches both null and undefined
          throw new TypeError("can't convert " + o + ' to object');
        }

        return Object(o);
      }; //
      // Util
      // ======
      //
      // ES5 9.4
      // http://es5.github.com/#x9.4
      // http://jsperf.com/to-integer


      function toInteger(num) {
        var n = +num;

        if (n !== n) {
          // isNaN
          n = 0;
        } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {
          n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }

        return n;
      }

      function ToUint32(x) {
        return x >>> 0;
      } //
      // Function
      // ========
      //
      // ES-5 15.3.4.5
      // http://es5.github.com/#x15.3.4.5


      function Empty() {}

      defineProperties(FunctionPrototype, {
        bind: function bind(that) {
          // .length is 1
          // 1. Let Target be the this value.
          var target = this; // 2. If IsCallable(Target) is false, throw a TypeError exception.

          if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
          } // 3. Let A be a new (possibly empty) internal list of all of the
          //   argument values provided after thisArg (arg1, arg2 etc), in order.
          // XXX slicedArgs will stand in for "A" if used


          var args = array_slice.call(arguments, 1); // for normal call
          // 4. Let F be a new native ECMAScript object.
          // 11. Set the [[Prototype]] internal property of F to the standard
          //   built-in Function prototype object as specified in 15.3.3.1.
          // 12. Set the [[Call]] internal property of F as described in
          //   15.3.4.5.1.
          // 13. Set the [[Construct]] internal property of F as described in
          //   15.3.4.5.2.
          // 14. Set the [[HasInstance]] internal property of F as described in
          //   15.3.4.5.3.

          var binder = function () {
            if (this instanceof bound) {
              // 15.3.4.5.2 [[Construct]]
              // When the [[Construct]] internal method of a function object,
              // F that was created using the bind function is called with a
              // list of arguments ExtraArgs, the following steps are taken:
              // 1. Let target be the value of F's [[TargetFunction]]
              //   internal property.
              // 2. If target has no [[Construct]] internal method, a
              //   TypeError exception is thrown.
              // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
              //   property.
              // 4. Let args be a new list containing the same values as the
              //   list boundArgs in the same order followed by the same
              //   values as the list ExtraArgs in the same order.
              // 5. Return the result of calling the [[Construct]] internal
              //   method of target providing args as the arguments.
              var result = target.apply(this, args.concat(array_slice.call(arguments)));

              if (Object(result) === result) {
                return result;
              }

              return this;
            } else {
              // 15.3.4.5.1 [[Call]]
              // When the [[Call]] internal method of a function object, F,
              // which was created using the bind function is called with a
              // this value and a list of arguments ExtraArgs, the following
              // steps are taken:
              // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
              //   property.
              // 2. Let boundThis be the value of F's [[BoundThis]] internal
              //   property.
              // 3. Let target be the value of F's [[TargetFunction]] internal
              //   property.
              // 4. Let args be a new list containing the same values as the
              //   list boundArgs in the same order followed by the same
              //   values as the list ExtraArgs in the same order.
              // 5. Return the result of calling the [[Call]] internal method
              //   of target providing boundThis as the this value and
              //   providing args as the arguments.
              // equiv: target.call(this, ...boundArgs, ...args)
              return target.apply(that, args.concat(array_slice.call(arguments)));
            }
          }; // 15. If the [[Class]] internal property of Target is "Function", then
          //     a. Let L be the length property of Target minus the length of A.
          //     b. Set the length own property of F to either 0 or L, whichever is
          //       larger.
          // 16. Else set the length own property of F to 0.


          var boundLength = Math.max(0, target.length - args.length); // 17. Set the attributes of the length own property of F to the values
          //   specified in 15.3.5.1.

          var boundArgs = [];

          for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
          } // XXX Build a dynamic function with desired amount of arguments is the only
          // way to set the length property of a function.
          // In environments where Content Security Policies enabled (Chrome extensions,
          // for ex.) all use of eval or Function costructor throws an exception.
          // However in all of these environments Function.prototype.bind exists
          // and so this code will never be executed.


          var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

          if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty(); // Clean up dangling references.

            Empty.prototype = null;
          } // TODO
          // 18. Set the [[Extensible]] internal property of F to true.
          // TODO
          // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
          // 20. Call the [[DefineOwnProperty]] internal method of F with
          //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
          //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
          //   false.
          // 21. Call the [[DefineOwnProperty]] internal method of F with
          //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
          //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
          //   and false.
          // TODO
          // NOTE Function objects created using Function.prototype.bind do not
          // have a prototype property or the [[Code]], [[FormalParameters]], and
          // [[Scope]] internal properties.
          // XXX can't delete prototype in pure-js.
          // 22. Return F.


          return bound;
        }
      }); //
      // Array
      // =====
      //
      // ES5 15.4.3.2
      // http://es5.github.com/#x15.4.3.2
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray

      defineProperties(Array, {
        isArray: isArray
      });
      var boxedString = Object('a');
      var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

      var properlyBoxesContext = function properlyBoxed(method) {
        // Check node 0.6.21 bug where third parameter is not boxed
        var properlyBoxesNonStrict = true;
        var properlyBoxesStrict = true;

        if (method) {
          method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') {
              properlyBoxesNonStrict = false;
            }
          });
          method.call([1], function () {
            'use strict';

            properlyBoxesStrict = typeof this === 'string';
          }, 'x');
        }

        return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
      };

      defineProperties(ArrayPrototype, {
        forEach: function forEach(fun
        /*, thisp*/
        ) {
          var object = toObject(this),
              self = splitString && isString(this) ? this.split('') : object,
              thisp = arguments[1],
              i = -1,
              length = self.length >>> 0; // If no callback function or if callback is not a callable function

          if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
          }

          while (++i < length) {
            if (i in self) {
              // Invoke the callback function with call, passing arguments:
              // context, property value, property key, thisArg object
              // context
              fun.call(thisp, self[i], i, object);
            }
          }
        }
      }, !properlyBoxesContext(ArrayPrototype.forEach)); // ES5 15.4.4.14
      // http://es5.github.com/#x15.4.4.14
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf

      var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
      defineProperties(ArrayPrototype, {
        indexOf: function indexOf(sought
        /*, fromIndex */
        ) {
          var self = splitString && isString(this) ? this.split('') : toObject(this),
              length = self.length >>> 0;

          if (!length) {
            return -1;
          }

          var i = 0;

          if (arguments.length > 1) {
            i = toInteger(arguments[1]);
          } // handle negative indices


          i = i >= 0 ? i : Math.max(0, length + i);

          for (; i < length; i++) {
            if (i in self && self[i] === sought) {
              return i;
            }
          }

          return -1;
        }
      }, hasFirefox2IndexOfBug); //
      // String
      // ======
      //
      // ES5 15.5.4.14
      // http://es5.github.com/#x15.5.4.14
      // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
      // Many browsers do not split properly with regular expressions or they
      // do not perform the split correctly under obscure conditions.
      // See http://blog.stevenlevithan.com/archives/cross-browser-split
      // I've tested in many browsers and this seems to cover the deviant ones:
      //    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
      //    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
      //    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
      //       [undefined, "t", undefined, "e", ...]
      //    ''.split(/.?/) should be [], not [""]
      //    '.'.split(/()()/) should be ["."], not ["", "", "."]

      var string_split = StringPrototype.split;

      if ('ab'.split(/(?:ab)*/).length !== 2 || '.'.split(/(.?)(.?)/).length !== 4 || 'tesst'.split(/(s)*/)[1] === 't' || 'test'.split(/(?:)/, -1).length !== 4 || ''.split(/.?/).length || '.'.split(/()()/).length > 1) {
        (function () {
          var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

          StringPrototype.split = function (separator, limit) {
            var string = this;

            if (separator === void 0 && limit === 0) {
              return [];
            } // If `separator` is not a regex, use native split


            if (_toString.call(separator) !== '[object RegExp]') {
              return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.extended ? 'x' : '') + ( // Proposed for ES6
            separator.sticky ? 'y' : ''),
                // Firefox 3+
            lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
            separator2,
                match,
                lastIndex,
                lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert

            if (!compliantExecNpcg) {
              // Doesn't need flags gy, but they don't hurt
              separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */


            limit = limit === void 0 ? -1 >>> 0 : // Math.pow(2, 32) - 1
            ToUint32(limit);

            while (match = separator.exec(string)) {
              // `separator.lastIndex` is not reliable cross-browser
              lastIndex = match.index + match[0].length;

              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index)); // Fix browsers whose `exec` methods don't consistently return `undefined` for
                // nonparticipating capturing groups

                if (!compliantExecNpcg && match.length > 1) {
                  match[0].replace(separator2, function () {
                    for (var i = 1; i < arguments.length - 2; i++) {
                      if (arguments[i] === void 0) {
                        match[i] = void 0;
                      }
                    }
                  });
                }

                if (match.length > 1 && match.index < string.length) {
                  ArrayPrototype.push.apply(output, match.slice(1));
                }

                lastLength = match[0].length;
                lastLastIndex = lastIndex;

                if (output.length >= limit) {
                  break;
                }
              }

              if (separator.lastIndex === match.index) {
                separator.lastIndex++; // Avoid an infinite loop
              }
            }

            if (lastLastIndex === string.length) {
              if (lastLength || !separator.test('')) {
                output.push('');
              }
            } else {
              output.push(string.slice(lastLastIndex));
            }

            return output.length > limit ? output.slice(0, limit) : output;
          };
        })(); // [bugfix, chrome]
        // If separator is undefined, then the result array contains just one String,
        // which is the this value (converted to a String). If limit is not undefined,
        // then the output array is truncated so that it contains no more than limit
        // elements.
        // "0".split(undefined, 0) -> []

      } else if ('0'.split(void 0, 0).length) {
        StringPrototype.split = function split(separator, limit) {
          if (separator === void 0 && limit === 0) {
            return [];
          }

          return string_split.call(this, separator, limit);
        };
      } // ECMA-262, 3rd B.2.3
      // Not an ECMAScript standard, although ECMAScript 3rd Edition has a
      // non-normative section suggesting uniform semantics and it should be
      // normalized across all browsers
      // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE


      var string_substr = StringPrototype.substr;
      var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
      defineProperties(StringPrototype, {
        substr: function substr(start, length) {
          return string_substr.call(this, start < 0 ? (start = this.length + start) < 0 ? 0 : start : start, length);
        }
      }, hasNegativeSubstrBug);
    }, {}],
    16: [function (require, module, exports) {
      'use strict';

      module.exports = [// streaming transports
      require('./transport/websocket'), require('./transport/xhr-streaming'), require('./transport/xdr-streaming'), require('./transport/eventsource'), require('./transport/lib/iframe-wrap')(require('./transport/eventsource')) // polling transports
      , require('./transport/htmlfile'), require('./transport/lib/iframe-wrap')(require('./transport/htmlfile')), require('./transport/xhr-polling'), require('./transport/xdr-polling'), require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling')), require('./transport/jsonp-polling')];
    }, {
      "./transport/eventsource": 20,
      "./transport/htmlfile": 21,
      "./transport/jsonp-polling": 23,
      "./transport/lib/iframe-wrap": 26,
      "./transport/websocket": 38,
      "./transport/xdr-polling": 39,
      "./transport/xdr-streaming": 40,
      "./transport/xhr-polling": 41,
      "./transport/xhr-streaming": 42
    }],
    17: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            utils = require('../../utils/event'),
            urlUtils = require('../../utils/url'),
            XHR = global.XMLHttpRequest;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:browser:xhr');
        }

        function AbstractXHRObject(method, url, payload, opts) {
          debug(method, url);
          var self = this;
          EventEmitter.call(this);
          setTimeout(function () {
            self._start(method, url, payload, opts);
          }, 0);
        }

        inherits(AbstractXHRObject, EventEmitter);

        AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
          var self = this;

          try {
            this.xhr = new XHR();
          } catch (x) {// intentionally empty
          }

          if (!this.xhr) {
            debug('no xhr');
            this.emit('finish', 0, 'no xhr support');

            this._cleanup();

            return;
          } // several browsers cache POSTs


          url = urlUtils.addQuery(url, 't=' + +new Date()); // Explorer tends to keep connection open, even after the
          // tab gets closed: http://bugs.jquery.com/ticket/5280

          this.unloadRef = utils.unloadAdd(function () {
            debug('unload cleanup');

            self._cleanup(true);
          });

          try {
            this.xhr.open(method, url, true);

            if (this.timeout && 'timeout' in this.xhr) {
              this.xhr.timeout = this.timeout;

              this.xhr.ontimeout = function () {
                debug('xhr timeout');
                self.emit('finish', 0, '');

                self._cleanup(false);
              };
            }
          } catch (e) {
            debug('exception', e); // IE raises an exception on wrong port.

            this.emit('finish', 0, '');

            this._cleanup(false);

            return;
          }

          if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
            debug('withCredentials'); // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
            // "This never affects same-site requests."

            this.xhr.withCredentials = true;
          }

          if (opts && opts.headers) {
            for (var key in opts.headers) {
              this.xhr.setRequestHeader(key, opts.headers[key]);
            }
          }

          this.xhr.onreadystatechange = function () {
            if (self.xhr) {
              var x = self.xhr;
              var text, status;
              debug('readyState', x.readyState);

              switch (x.readyState) {
                case 3:
                  // IE doesn't like peeking into responseText or status
                  // on Microsoft.XMLHTTP and readystate=3
                  try {
                    status = x.status;
                    text = x.responseText;
                  } catch (e) {// intentionally empty
                  }

                  debug('status', status); // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                  if (status === 1223) {
                    status = 204;
                  } // IE does return readystate == 3 for 404 answers.


                  if (status === 200 && text && text.length > 0) {
                    debug('chunk');
                    self.emit('chunk', status, text);
                  }

                  break;

                case 4:
                  status = x.status;
                  debug('status', status); // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                  if (status === 1223) {
                    status = 204;
                  } // IE returns this for a bad port
                  // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx


                  if (status === 12005 || status === 12029) {
                    status = 0;
                  }

                  debug('finish', status, x.responseText);
                  self.emit('finish', status, x.responseText);

                  self._cleanup(false);

                  break;
              }
            }
          };

          try {
            self.xhr.send(payload);
          } catch (e) {
            self.emit('finish', 0, '');

            self._cleanup(false);
          }
        };

        AbstractXHRObject.prototype._cleanup = function (abort) {
          debug('cleanup');

          if (!this.xhr) {
            return;
          }

          this.removeAllListeners();
          utils.unloadDel(this.unloadRef); // IE needs this field to be a function

          this.xhr.onreadystatechange = function () {};

          if (this.xhr.ontimeout) {
            this.xhr.ontimeout = null;
          }

          if (abort) {
            try {
              this.xhr.abort();
            } catch (x) {// intentionally empty
            }
          }

          this.unloadRef = this.xhr = null;
        };

        AbstractXHRObject.prototype.close = function () {
          debug('close');

          this._cleanup(true);
        };

        AbstractXHRObject.enabled = !!XHR; // override XMLHttpRequest for IE6/7
        // obfuscate to avoid firewalls

        var axo = ['Active'].concat('Object').join('X');

        if (!AbstractXHRObject.enabled && axo in global) {
          debug('overriding xmlhttprequest');

          XHR = function () {
            try {
              return new global[axo]('Microsoft.XMLHTTP');
            } catch (e) {
              return null;
            }
          };

          AbstractXHRObject.enabled = !!new XHR();
        }

        var cors = false;

        try {
          cors = 'withCredentials' in new XHR();
        } catch (ignored) {// intentionally empty
        }

        AbstractXHRObject.supportsCORS = cors;
        module.exports = AbstractXHRObject;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/event": 46,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    18: [function (require, module, exports) {
      (function (global) {
        module.exports = global.EventSource;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    19: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var Driver = global.WebSocket || global.MozWebSocket;

        if (Driver) {
          module.exports = function WebSocketBrowserDriver(url) {
            return new Driver(url);
          };
        } else {
          module.exports = undefined;
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    20: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          EventSourceReceiver = require('./receiver/eventsource'),
          XHRCorsObject = require('./sender/xhr-cors'),
          EventSourceDriver = require('eventsource');

      function EventSourceTransport(transUrl) {
        if (!EventSourceTransport.enabled()) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
      }

      inherits(EventSourceTransport, AjaxBasedTransport);

      EventSourceTransport.enabled = function () {
        return !!EventSourceDriver;
      };

      EventSourceTransport.transportName = 'eventsource';
      EventSourceTransport.roundTrips = 2;
      module.exports = EventSourceTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/eventsource": 29,
      "./sender/xhr-cors": 35,
      "eventsource": 18,
      "inherits": 57
    }],
    21: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          HtmlfileReceiver = require('./receiver/htmlfile'),
          XHRLocalObject = require('./sender/xhr-local'),
          AjaxBasedTransport = require('./lib/ajax-based');

      function HtmlFileTransport(transUrl) {
        if (!HtmlfileReceiver.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
      }

      inherits(HtmlFileTransport, AjaxBasedTransport);

      HtmlFileTransport.enabled = function (info) {
        return HtmlfileReceiver.enabled && info.sameOrigin;
      };

      HtmlFileTransport.transportName = 'htmlfile';
      HtmlFileTransport.roundTrips = 2;
      module.exports = HtmlFileTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/htmlfile": 30,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    22: [function (require, module, exports) {
      (function (process) {
        'use strict'; // Few cool transports do work only for same-origin. In order to make
        // them work cross-domain we shall use iframe, served from the
        // remote domain. New browsers have capabilities to communicate with
        // cross domain iframe using postMessage(). In IE it was implemented
        // from IE 8+, but of course, IE got some details wrong:
        //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
        //    http://stevesouders.com/misc/test-postmessage.php

        var inherits = require('inherits'),
            JSON3 = require('json3'),
            EventEmitter = require('events').EventEmitter,
            version = require('../version'),
            urlUtils = require('../utils/url'),
            iframeUtils = require('../utils/iframe'),
            eventUtils = require('../utils/event'),
            random = require('../utils/random');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:transport:iframe');
        }

        function IframeTransport(transport, transUrl, baseUrl) {
          if (!IframeTransport.enabled()) {
            throw new Error('Transport created when disabled');
          }

          EventEmitter.call(this);
          var self = this;
          this.origin = urlUtils.getOrigin(baseUrl);
          this.baseUrl = baseUrl;
          this.transUrl = transUrl;
          this.transport = transport;
          this.windowId = random.string(8);
          var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
          debug(transport, transUrl, iframeUrl);
          this.iframeObj = iframeUtils.createIframe(iframeUrl, function (r) {
            debug('err callback');
            self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
            self.close();
          });
          this.onmessageCallback = this._message.bind(this);
          eventUtils.attachEvent('message', this.onmessageCallback);
        }

        inherits(IframeTransport, EventEmitter);

        IframeTransport.prototype.close = function () {
          debug('close');
          this.removeAllListeners();

          if (this.iframeObj) {
            eventUtils.detachEvent('message', this.onmessageCallback);

            try {
              // When the iframe is not loaded, IE raises an exception
              // on 'contentWindow'.
              this.postMessage('c');
            } catch (x) {// intentionally empty
            }

            this.iframeObj.cleanup();
            this.iframeObj = null;
            this.onmessageCallback = this.iframeObj = null;
          }
        };

        IframeTransport.prototype._message = function (e) {
          debug('message', e.data);

          if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
            debug('not same origin', e.origin, this.origin);
            return;
          }

          var iframeMessage;

          try {
            iframeMessage = JSON3.parse(e.data);
          } catch (ignored) {
            debug('bad json', e.data);
            return;
          }

          if (iframeMessage.windowId !== this.windowId) {
            debug('mismatched window id', iframeMessage.windowId, this.windowId);
            return;
          }

          switch (iframeMessage.type) {
            case 's':
              this.iframeObj.loaded(); // window global dependency

              this.postMessage('s', JSON3.stringify([version, this.transport, this.transUrl, this.baseUrl]));
              break;

            case 't':
              this.emit('message', iframeMessage.data);
              break;

            case 'c':
              var cdata;

              try {
                cdata = JSON3.parse(iframeMessage.data);
              } catch (ignored) {
                debug('bad json', iframeMessage.data);
                return;
              }

              this.emit('close', cdata[0], cdata[1]);
              this.close();
              break;
          }
        };

        IframeTransport.prototype.postMessage = function (type, data) {
          debug('postMessage', type, data);
          this.iframeObj.post(JSON3.stringify({
            windowId: this.windowId,
            type: type,
            data: data || ''
          }), this.origin);
        };

        IframeTransport.prototype.send = function (message) {
          debug('send', message);
          this.postMessage('m', message);
        };

        IframeTransport.enabled = function () {
          return iframeUtils.iframeEnabled;
        };

        IframeTransport.transportName = 'iframe';
        IframeTransport.roundTrips = 2;
        module.exports = IframeTransport;
      }).call(this, {
        env: {}
      });
    }, {
      "../utils/event": 46,
      "../utils/iframe": 47,
      "../utils/random": 50,
      "../utils/url": 52,
      "../version": 53,
      "debug": 55,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    23: [function (require, module, exports) {
      (function (global) {
        'use strict'; // The simplest and most robust transport, using the well-know cross
        // domain hack - JSONP. This transport is quite inefficient - one
        // message could use up to one http request. But at least it works almost
        // everywhere.
        // Known limitations:
        //   o you will get a spinning cursor
        //   o for Konqueror a dumb timer is needed to detect errors

        var inherits = require('inherits'),
            SenderReceiver = require('./lib/sender-receiver'),
            JsonpReceiver = require('./receiver/jsonp'),
            jsonpSender = require('./sender/jsonp');

        function JsonPTransport(transUrl) {
          if (!JsonPTransport.enabled()) {
            throw new Error('Transport created when disabled');
          }

          SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
        }

        inherits(JsonPTransport, SenderReceiver);

        JsonPTransport.enabled = function () {
          return !!global.document;
        };

        JsonPTransport.transportName = 'jsonp-polling';
        JsonPTransport.roundTrips = 1;
        JsonPTransport.needBody = true;
        module.exports = JsonPTransport;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./lib/sender-receiver": 28,
      "./receiver/jsonp": 31,
      "./sender/jsonp": 33,
      "inherits": 57
    }],
    24: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            urlUtils = require('../../utils/url'),
            SenderReceiver = require('./sender-receiver');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:ajax-based');
        }

        function createAjaxSender(AjaxObject) {
          return function (url, payload, callback) {
            debug('create ajax sender', url, payload);
            var opt = {};

            if (typeof payload === 'string') {
              opt.headers = {
                'Content-type': 'text/plain'
              };
            }

            var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
            var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
            xo.once('finish', function (status) {
              debug('finish', status);
              xo = null;

              if (status !== 200 && status !== 204) {
                return callback(new Error('http status ' + status));
              }

              callback();
            });
            return function () {
              debug('abort');
              xo.close();
              xo = null;
              var err = new Error('Aborted');
              err.code = 1000;
              callback(err);
            };
          };
        }

        function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
          SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
        }

        inherits(AjaxBasedTransport, SenderReceiver);
        module.exports = AjaxBasedTransport;
      }).call(this, {
        env: {}
      });
    }, {
      "../../utils/url": 52,
      "./sender-receiver": 28,
      "debug": 55,
      "inherits": 57
    }],
    25: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:buffered-sender');
        }

        function BufferedSender(url, sender) {
          debug(url);
          EventEmitter.call(this);
          this.sendBuffer = [];
          this.sender = sender;
          this.url = url;
        }

        inherits(BufferedSender, EventEmitter);

        BufferedSender.prototype.send = function (message) {
          debug('send', message);
          this.sendBuffer.push(message);

          if (!this.sendStop) {
            this.sendSchedule();
          }
        }; // For polling transports in a situation when in the message callback,
        // new message is being send. If the sending connection was started
        // before receiving one, it is possible to saturate the network and
        // timeout due to the lack of receiving socket. To avoid that we delay
        // sending messages by some small time, in order to let receiving
        // connection be started beforehand. This is only a halfmeasure and
        // does not fix the big problem, but it does make the tests go more
        // stable on slow networks.


        BufferedSender.prototype.sendScheduleWait = function () {
          debug('sendScheduleWait');
          var self = this;
          var tref;

          this.sendStop = function () {
            debug('sendStop');
            self.sendStop = null;
            clearTimeout(tref);
          };

          tref = setTimeout(function () {
            debug('timeout');
            self.sendStop = null;
            self.sendSchedule();
          }, 25);
        };

        BufferedSender.prototype.sendSchedule = function () {
          debug('sendSchedule', this.sendBuffer.length);
          var self = this;

          if (this.sendBuffer.length > 0) {
            var payload = '[' + this.sendBuffer.join(',') + ']';
            this.sendStop = this.sender(this.url, payload, function (err) {
              self.sendStop = null;

              if (err) {
                debug('error', err);
                self.emit('close', err.code || 1006, 'Sending error: ' + err);
                self.close();
              } else {
                self.sendScheduleWait();
              }
            });
            this.sendBuffer = [];
          }
        };

        BufferedSender.prototype._cleanup = function () {
          debug('_cleanup');
          this.removeAllListeners();
        };

        BufferedSender.prototype.close = function () {
          debug('close');

          this._cleanup();

          if (this.sendStop) {
            this.sendStop();
            this.sendStop = null;
          }
        };

        module.exports = BufferedSender;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    26: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var inherits = require('inherits'),
            IframeTransport = require('../iframe'),
            objectUtils = require('../../utils/object');

        module.exports = function (transport) {
          function IframeWrapTransport(transUrl, baseUrl) {
            IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
          }

          inherits(IframeWrapTransport, IframeTransport);

          IframeWrapTransport.enabled = function (url, info) {
            if (!global.document) {
              return false;
            }

            var iframeInfo = objectUtils.extend({}, info);
            iframeInfo.sameOrigin = true;
            return transport.enabled(iframeInfo) && IframeTransport.enabled();
          };

          IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
          IframeWrapTransport.needBody = true;
          IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

          IframeWrapTransport.facadeTransport = transport;
          return IframeWrapTransport;
        };
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/object": 49,
      "../iframe": 22,
      "inherits": 57
    }],
    27: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:polling');
        }

        function Polling(Receiver, receiveUrl, AjaxObject) {
          debug(receiveUrl);
          EventEmitter.call(this);
          this.Receiver = Receiver;
          this.receiveUrl = receiveUrl;
          this.AjaxObject = AjaxObject;

          this._scheduleReceiver();
        }

        inherits(Polling, EventEmitter);

        Polling.prototype._scheduleReceiver = function () {
          debug('_scheduleReceiver');
          var self = this;
          var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);
          poll.on('message', function (msg) {
            debug('message', msg);
            self.emit('message', msg);
          });
          poll.once('close', function (code, reason) {
            debug('close', code, reason, self.pollIsClosing);
            self.poll = poll = null;

            if (!self.pollIsClosing) {
              if (reason === 'network') {
                self._scheduleReceiver();
              } else {
                self.emit('close', code || 1006, reason);
                self.removeAllListeners();
              }
            }
          });
        };

        Polling.prototype.abort = function () {
          debug('abort');
          this.removeAllListeners();
          this.pollIsClosing = true;

          if (this.poll) {
            this.poll.abort();
          }
        };

        module.exports = Polling;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    28: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            urlUtils = require('../../utils/url'),
            BufferedSender = require('./buffered-sender'),
            Polling = require('./polling');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:sender-receiver');
        }

        function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
          var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
          debug(pollUrl);
          var self = this;
          BufferedSender.call(this, transUrl, senderFunc);
          this.poll = new Polling(Receiver, pollUrl, AjaxObject);
          this.poll.on('message', function (msg) {
            debug('poll message', msg);
            self.emit('message', msg);
          });
          this.poll.once('close', function (code, reason) {
            debug('poll close', code, reason);
            self.poll = null;
            self.emit('close', code, reason);
            self.close();
          });
        }

        inherits(SenderReceiver, BufferedSender);

        SenderReceiver.prototype.close = function () {
          BufferedSender.prototype.close.call(this);
          debug('close');
          this.removeAllListeners();

          if (this.poll) {
            this.poll.abort();
            this.poll = null;
          }
        };

        module.exports = SenderReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "../../utils/url": 52,
      "./buffered-sender": 25,
      "./polling": 27,
      "debug": 55,
      "inherits": 57
    }],
    29: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter,
            EventSourceDriver = require('eventsource');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:eventsource');
        }

        function EventSourceReceiver(url) {
          debug(url);
          EventEmitter.call(this);
          var self = this;
          var es = this.es = new EventSourceDriver(url);

          es.onmessage = function (e) {
            debug('message', e.data);
            self.emit('message', decodeURI(e.data));
          };

          es.onerror = function (e) {
            debug('error', es.readyState, e); // ES on reconnection has readyState = 0 or 1.
            // on network error it's CLOSED = 2

            var reason = es.readyState !== 2 ? 'network' : 'permanent';

            self._cleanup();

            self._close(reason);
          };
        }

        inherits(EventSourceReceiver, EventEmitter);

        EventSourceReceiver.prototype.abort = function () {
          debug('abort');

          this._cleanup();

          this._close('user');
        };

        EventSourceReceiver.prototype._cleanup = function () {
          debug('cleanup');
          var es = this.es;

          if (es) {
            es.onmessage = es.onerror = null;
            es.close();
            this.es = null;
          }
        };

        EventSourceReceiver.prototype._close = function (reason) {
          debug('close', reason);
          var self = this; // Safari and chrome < 15 crash if we close window before
          // waiting for ES cleanup. See:
          // https://code.google.com/p/chromium/issues/detail?id=89155

          setTimeout(function () {
            self.emit('close', null, reason);
            self.removeAllListeners();
          }, 200);
        };

        module.exports = EventSourceReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "eventsource": 18,
      "inherits": 57
    }],
    30: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var inherits = require('inherits'),
            iframeUtils = require('../../utils/iframe'),
            urlUtils = require('../../utils/url'),
            EventEmitter = require('events').EventEmitter,
            random = require('../../utils/random');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:htmlfile');
        }

        function HtmlfileReceiver(url) {
          debug(url);
          EventEmitter.call(this);
          var self = this;
          iframeUtils.polluteGlobalNamespace();
          this.id = 'a' + random.string(6);
          url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));
          debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
          var constructFunc = HtmlfileReceiver.htmlfileEnabled ? iframeUtils.createHtmlfile : iframeUtils.createIframe;
          global[iframeUtils.WPrefix][this.id] = {
            start: function () {
              debug('start');
              self.iframeObj.loaded();
            },
            message: function (data) {
              debug('message', data);
              self.emit('message', data);
            },
            stop: function () {
              debug('stop');

              self._cleanup();

              self._close('network');
            }
          };
          this.iframeObj = constructFunc(url, function () {
            debug('callback');

            self._cleanup();

            self._close('permanent');
          });
        }

        inherits(HtmlfileReceiver, EventEmitter);

        HtmlfileReceiver.prototype.abort = function () {
          debug('abort');

          this._cleanup();

          this._close('user');
        };

        HtmlfileReceiver.prototype._cleanup = function () {
          debug('_cleanup');

          if (this.iframeObj) {
            this.iframeObj.cleanup();
            this.iframeObj = null;
          }

          delete global[iframeUtils.WPrefix][this.id];
        };

        HtmlfileReceiver.prototype._close = function (reason) {
          debug('_close', reason);
          this.emit('close', null, reason);
          this.removeAllListeners();
        };

        HtmlfileReceiver.htmlfileEnabled = false; // obfuscate to avoid firewalls

        var axo = ['Active'].concat('Object').join('X');

        if (axo in global) {
          try {
            HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
          } catch (x) {// intentionally empty
          }
        }

        HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;
        module.exports = HtmlfileReceiver;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/iframe": 47,
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    31: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var utils = require('../../utils/iframe'),
            random = require('../../utils/random'),
            browser = require('../../utils/browser'),
            urlUtils = require('../../utils/url'),
            inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:jsonp');
        }

        function JsonpReceiver(url) {
          debug(url);
          var self = this;
          EventEmitter.call(this);
          utils.polluteGlobalNamespace();
          this.id = 'a' + random.string(6);
          var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));
          global[utils.WPrefix][this.id] = this._callback.bind(this);

          this._createScript(urlWithId); // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.


          this.timeoutId = setTimeout(function () {
            debug('timeout');

            self._abort(new Error('JSONP script loaded abnormally (timeout)'));
          }, JsonpReceiver.timeout);
        }

        inherits(JsonpReceiver, EventEmitter);

        JsonpReceiver.prototype.abort = function () {
          debug('abort');

          if (global[utils.WPrefix][this.id]) {
            var err = new Error('JSONP user aborted read');
            err.code = 1000;

            this._abort(err);
          }
        };

        JsonpReceiver.timeout = 35000;
        JsonpReceiver.scriptErrorTimeout = 1000;

        JsonpReceiver.prototype._callback = function (data) {
          debug('_callback', data);

          this._cleanup();

          if (this.aborting) {
            return;
          }

          if (data) {
            debug('message', data);
            this.emit('message', data);
          }

          this.emit('close', null, 'network');
          this.removeAllListeners();
        };

        JsonpReceiver.prototype._abort = function (err) {
          debug('_abort', err);

          this._cleanup();

          this.aborting = true;
          this.emit('close', err.code, err.message);
          this.removeAllListeners();
        };

        JsonpReceiver.prototype._cleanup = function () {
          debug('_cleanup');
          clearTimeout(this.timeoutId);

          if (this.script2) {
            this.script2.parentNode.removeChild(this.script2);
            this.script2 = null;
          }

          if (this.script) {
            var script = this.script; // Unfortunately, you can't really abort script loading of
            // the script.

            script.parentNode.removeChild(script);
            script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
            this.script = null;
          }

          delete global[utils.WPrefix][this.id];
        };

        JsonpReceiver.prototype._scriptError = function () {
          debug('_scriptError');
          var self = this;

          if (this.errorTimer) {
            return;
          }

          this.errorTimer = setTimeout(function () {
            if (!self.loadedOkay) {
              self._abort(new Error('JSONP script loaded abnormally (onerror)'));
            }
          }, JsonpReceiver.scriptErrorTimeout);
        };

        JsonpReceiver.prototype._createScript = function (url) {
          debug('_createScript', url);
          var self = this;
          var script = this.script = global.document.createElement('script');
          var script2; // Opera synchronous load trick.

          script.id = 'a' + random.string(8);
          script.src = url;
          script.type = 'text/javascript';
          script.charset = 'UTF-8';
          script.onerror = this._scriptError.bind(this);

          script.onload = function () {
            debug('onload');

            self._abort(new Error('JSONP script loaded abnormally (onload)'));
          }; // IE9 fires 'error' event after onreadystatechange or before, in random order.
          // Use loadedOkay to determine if actually errored


          script.onreadystatechange = function () {
            debug('onreadystatechange', script.readyState);

            if (/loaded|closed/.test(script.readyState)) {
              if (script && script.htmlFor && script.onclick) {
                self.loadedOkay = true;

                try {
                  // In IE, actually execute the script.
                  script.onclick();
                } catch (x) {// intentionally empty
                }
              }

              if (script) {
                self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
              }
            }
          }; // IE: event/htmlFor/onclick trick.
          // One can't rely on proper order for onreadystatechange. In order to
          // make sure, set a 'htmlFor' and 'event' properties, so that
          // script code will be installed as 'onclick' handler for the
          // script object. Later, onreadystatechange, manually execute this
          // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
          // set. For reference see:
          //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
          // Also, read on that about script ordering:
          //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order


          if (typeof script.async === 'undefined' && global.document.attachEvent) {
            // According to mozilla docs, in recent browsers script.async defaults
            // to 'true', so we may use it to detect a good browser:
            // https://developer.mozilla.org/en/HTML/Element/script
            if (!browser.isOpera()) {
              // Naively assume we're in IE
              try {
                script.htmlFor = script.id;
                script.event = 'onclick';
              } catch (x) {// intentionally empty
              }

              script.async = true;
            } else {
              // Opera, second sync script hack
              script2 = this.script2 = global.document.createElement('script');
              script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
              script.async = script2.async = false;
            }
          }

          if (typeof script.async !== 'undefined') {
            script.async = true;
          }

          var head = global.document.getElementsByTagName('head')[0];
          head.insertBefore(script, head.firstChild);

          if (script2) {
            head.insertBefore(script2, head.firstChild);
          }
        };

        module.exports = JsonpReceiver;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/browser": 44,
      "../../utils/iframe": 47,
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    32: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:xhr');
        }

        function XhrReceiver(url, AjaxObject) {
          debug(url);
          EventEmitter.call(this);
          var self = this;
          this.bufferPosition = 0;
          this.xo = new AjaxObject('POST', url, null);
          this.xo.on('chunk', this._chunkHandler.bind(this));
          this.xo.once('finish', function (status, text) {
            debug('finish', status, text);

            self._chunkHandler(status, text);

            self.xo = null;
            var reason = status === 200 ? 'network' : 'permanent';
            debug('close', reason);
            self.emit('close', null, reason);

            self._cleanup();
          });
        }

        inherits(XhrReceiver, EventEmitter);

        XhrReceiver.prototype._chunkHandler = function (status, text) {
          debug('_chunkHandler', status);

          if (status !== 200 || !text) {
            return;
          }

          for (var idx = -1;; this.bufferPosition += idx + 1) {
            var buf = text.slice(this.bufferPosition);
            idx = buf.indexOf('\n');

            if (idx === -1) {
              break;
            }

            var msg = buf.slice(0, idx);

            if (msg) {
              debug('message', msg);
              this.emit('message', msg);
            }
          }
        };

        XhrReceiver.prototype._cleanup = function () {
          debug('_cleanup');
          this.removeAllListeners();
        };

        XhrReceiver.prototype.abort = function () {
          debug('abort');

          if (this.xo) {
            this.xo.close();
            debug('close');
            this.emit('close', null, 'user');
            this.xo = null;
          }

          this._cleanup();
        };

        module.exports = XhrReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    33: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var random = require('../../utils/random'),
            urlUtils = require('../../utils/url');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:sender:jsonp');
        }

        var form, area;

        function createIframe(id) {
          debug('createIframe', id);

          try {
            // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
            return global.document.createElement('<iframe name="' + id + '">');
          } catch (x) {
            var iframe = global.document.createElement('iframe');
            iframe.name = id;
            return iframe;
          }
        }

        function createForm() {
          debug('createForm');
          form = global.document.createElement('form');
          form.style.display = 'none';
          form.style.position = 'absolute';
          form.method = 'POST';
          form.enctype = 'application/x-www-form-urlencoded';
          form.acceptCharset = 'UTF-8';
          area = global.document.createElement('textarea');
          area.name = 'd';
          form.appendChild(area);
          global.document.body.appendChild(form);
        }

        module.exports = function (url, payload, callback) {
          debug(url, payload);

          if (!form) {
            createForm();
          }

          var id = 'a' + random.string(8);
          form.target = id;
          form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);
          var iframe = createIframe(id);
          iframe.id = id;
          iframe.style.display = 'none';
          form.appendChild(iframe);

          try {
            area.value = payload;
          } catch (e) {// seriously broken browsers get here
          }

          form.submit();

          var completed = function (err) {
            debug('completed', id, err);

            if (!iframe.onerror) {
              return;
            }

            iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
            // immediately, thus this timeout.

            setTimeout(function () {
              debug('cleaning up', id);
              iframe.parentNode.removeChild(iframe);
              iframe = null;
            }, 500);
            area.value = ''; // It is not possible to detect if the iframe succeeded or
            // failed to submit our form.

            callback(err);
          };

          iframe.onerror = function () {
            debug('onerror', id);
            completed();
          };

          iframe.onload = function () {
            debug('onload', id);
            completed();
          };

          iframe.onreadystatechange = function (e) {
            debug('onreadystatechange', id, iframe.readyState, e);

            if (iframe.readyState === 'complete') {
              completed();
            }
          };

          return function () {
            debug('aborted', id);
            completed(new Error('Aborted'));
          };
        };
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55
    }],
    34: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            eventUtils = require('../../utils/event'),
            browser = require('../../utils/browser'),
            urlUtils = require('../../utils/url');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:sender:xdr');
        } // References:
        //   http://ajaxian.com/archives/100-line-ajax-wrapper
        //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx


        function XDRObject(method, url, payload) {
          debug(method, url);
          var self = this;
          EventEmitter.call(this);
          setTimeout(function () {
            self._start(method, url, payload);
          }, 0);
        }

        inherits(XDRObject, EventEmitter);

        XDRObject.prototype._start = function (method, url, payload) {
          debug('_start');
          var self = this;
          var xdr = new global.XDomainRequest(); // IE caches even POSTs

          url = urlUtils.addQuery(url, 't=' + +new Date());

          xdr.onerror = function () {
            debug('onerror');

            self._error();
          };

          xdr.ontimeout = function () {
            debug('ontimeout');

            self._error();
          };

          xdr.onprogress = function () {
            debug('progress', xdr.responseText);
            self.emit('chunk', 200, xdr.responseText);
          };

          xdr.onload = function () {
            debug('load');
            self.emit('finish', 200, xdr.responseText);

            self._cleanup(false);
          };

          this.xdr = xdr;
          this.unloadRef = eventUtils.unloadAdd(function () {
            self._cleanup(true);
          });

          try {
            // Fails with AccessDenied if port number is bogus
            this.xdr.open(method, url);

            if (this.timeout) {
              this.xdr.timeout = this.timeout;
            }

            this.xdr.send(payload);
          } catch (x) {
            this._error();
          }
        };

        XDRObject.prototype._error = function () {
          this.emit('finish', 0, '');

          this._cleanup(false);
        };

        XDRObject.prototype._cleanup = function (abort) {
          debug('cleanup', abort);

          if (!this.xdr) {
            return;
          }

          this.removeAllListeners();
          eventUtils.unloadDel(this.unloadRef);
          this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;

          if (abort) {
            try {
              this.xdr.abort();
            } catch (x) {// intentionally empty
            }
          }

          this.unloadRef = this.xdr = null;
        };

        XDRObject.prototype.close = function () {
          debug('close');

          this._cleanup(true);
        }; // IE 8/9 if the request target uses the same scheme - #79


        XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());
        module.exports = XDRObject;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/browser": 44,
      "../../utils/event": 46,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    35: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          XhrDriver = require('../driver/xhr');

      function XHRCorsObject(method, url, payload, opts) {
        XhrDriver.call(this, method, url, payload, opts);
      }

      inherits(XHRCorsObject, XhrDriver);
      XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;
      module.exports = XHRCorsObject;
    }, {
      "../driver/xhr": 17,
      "inherits": 57
    }],
    36: [function (require, module, exports) {
      'use strict';

      var EventEmitter = require('events').EventEmitter,
          inherits = require('inherits');

      function XHRFake()
      /* method, url, payload, opts */
      {
        var self = this;
        EventEmitter.call(this);
        this.to = setTimeout(function () {
          self.emit('finish', 200, '{}');
        }, XHRFake.timeout);
      }

      inherits(XHRFake, EventEmitter);

      XHRFake.prototype.close = function () {
        clearTimeout(this.to);
      };

      XHRFake.timeout = 2000;
      module.exports = XHRFake;
    }, {
      "events": 3,
      "inherits": 57
    }],
    37: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          XhrDriver = require('../driver/xhr');

      function XHRLocalObject(method, url, payload
      /*, opts */
      ) {
        XhrDriver.call(this, method, url, payload, {
          noCredentials: true
        });
      }

      inherits(XHRLocalObject, XhrDriver);
      XHRLocalObject.enabled = XhrDriver.enabled;
      module.exports = XHRLocalObject;
    }, {
      "../driver/xhr": 17,
      "inherits": 57
    }],
    38: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var utils = require('../utils/event'),
            urlUtils = require('../utils/url'),
            inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter,
            WebsocketDriver = require('./driver/websocket');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:websocket');
        }

        function WebSocketTransport(transUrl, ignore, options) {
          if (!WebSocketTransport.enabled()) {
            throw new Error('Transport created when disabled');
          }

          EventEmitter.call(this);
          debug('constructor', transUrl);
          var self = this;
          var url = urlUtils.addPath(transUrl, '/websocket');

          if (url.slice(0, 5) === 'https') {
            url = 'wss' + url.slice(5);
          } else {
            url = 'ws' + url.slice(4);
          }

          this.url = url;
          this.ws = new WebsocketDriver(this.url, [], options);

          this.ws.onmessage = function (e) {
            debug('message event', e.data);
            self.emit('message', e.data);
          }; // Firefox has an interesting bug. If a websocket connection is
          // created after onunload, it stays alive even when user
          // navigates away from the page. In such situation let's lie -
          // let's not open the ws connection at all. See:
          // https://github.com/sockjs/sockjs-client/issues/28
          // https://bugzilla.mozilla.org/show_bug.cgi?id=696085


          this.unloadRef = utils.unloadAdd(function () {
            debug('unload');
            self.ws.close();
          });

          this.ws.onclose = function (e) {
            debug('close event', e.code, e.reason);
            self.emit('close', e.code, e.reason);

            self._cleanup();
          };

          this.ws.onerror = function (e) {
            debug('error event', e);
            self.emit('close', 1006, 'WebSocket connection broken');

            self._cleanup();
          };
        }

        inherits(WebSocketTransport, EventEmitter);

        WebSocketTransport.prototype.send = function (data) {
          var msg = '[' + data + ']';
          debug('send', msg);
          this.ws.send(msg);
        };

        WebSocketTransport.prototype.close = function () {
          debug('close');
          var ws = this.ws;

          this._cleanup();

          if (ws) {
            ws.close();
          }
        };

        WebSocketTransport.prototype._cleanup = function () {
          debug('_cleanup');
          var ws = this.ws;

          if (ws) {
            ws.onmessage = ws.onclose = ws.onerror = null;
          }

          utils.unloadDel(this.unloadRef);
          this.unloadRef = this.ws = null;
          this.removeAllListeners();
        };

        WebSocketTransport.enabled = function () {
          debug('enabled');
          return !!WebsocketDriver;
        };

        WebSocketTransport.transportName = 'websocket'; // In theory, ws should require 1 round trip. But in chrome, this is
        // not very stable over SSL. Most likely a ws connection requires a
        // separate SSL connection, in which case 2 round trips are an
        // absolute minumum.

        WebSocketTransport.roundTrips = 2;
        module.exports = WebSocketTransport;
      }).call(this, {
        env: {}
      });
    }, {
      "../utils/event": 46,
      "../utils/url": 52,
      "./driver/websocket": 19,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    39: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          XdrStreamingTransport = require('./xdr-streaming'),
          XhrReceiver = require('./receiver/xhr'),
          XDRObject = require('./sender/xdr');

      function XdrPollingTransport(transUrl) {
        if (!XDRObject.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
      }

      inherits(XdrPollingTransport, AjaxBasedTransport);
      XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
      XdrPollingTransport.transportName = 'xdr-polling';
      XdrPollingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XdrPollingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xdr": 34,
      "./xdr-streaming": 40,
      "inherits": 57
    }],
    40: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          XhrReceiver = require('./receiver/xhr'),
          XDRObject = require('./sender/xdr'); // According to:
      //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
      //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/


      function XdrStreamingTransport(transUrl) {
        if (!XDRObject.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
      }

      inherits(XdrStreamingTransport, AjaxBasedTransport);

      XdrStreamingTransport.enabled = function (info) {
        if (info.cookie_needed || info.nullOrigin) {
          return false;
        }

        return XDRObject.enabled && info.sameScheme;
      };

      XdrStreamingTransport.transportName = 'xdr-streaming';
      XdrStreamingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XdrStreamingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xdr": 34,
      "inherits": 57
    }],
    41: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          XhrReceiver = require('./receiver/xhr'),
          XHRCorsObject = require('./sender/xhr-cors'),
          XHRLocalObject = require('./sender/xhr-local');

      function XhrPollingTransport(transUrl) {
        if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
      }

      inherits(XhrPollingTransport, AjaxBasedTransport);

      XhrPollingTransport.enabled = function (info) {
        if (info.nullOrigin) {
          return false;
        }

        if (XHRLocalObject.enabled && info.sameOrigin) {
          return true;
        }

        return XHRCorsObject.enabled;
      };

      XhrPollingTransport.transportName = 'xhr-polling';
      XhrPollingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XhrPollingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xhr-cors": 35,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    42: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var inherits = require('inherits'),
            AjaxBasedTransport = require('./lib/ajax-based'),
            XhrReceiver = require('./receiver/xhr'),
            XHRCorsObject = require('./sender/xhr-cors'),
            XHRLocalObject = require('./sender/xhr-local'),
            browser = require('../utils/browser');

        function XhrStreamingTransport(transUrl) {
          if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
            throw new Error('Transport created when disabled');
          }

          AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
        }

        inherits(XhrStreamingTransport, AjaxBasedTransport);

        XhrStreamingTransport.enabled = function (info) {
          if (info.nullOrigin) {
            return false;
          } // Opera doesn't support xhr-streaming #60
          // But it might be able to #92


          if (browser.isOpera()) {
            return false;
          }

          return XHRCorsObject.enabled;
        };

        XhrStreamingTransport.transportName = 'xhr-streaming';
        XhrStreamingTransport.roundTrips = 2; // preflight, ajax
        // Safari gets confused when a streaming ajax request is started
        // before onload. This causes the load indicator to spin indefinetely.
        // Only require body when used in a browser

        XhrStreamingTransport.needBody = !!global.document;
        module.exports = XhrStreamingTransport;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../utils/browser": 44,
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xhr-cors": 35,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    43: [function (require, module, exports) {
      (function (global) {
        'use strict';

        if (global.crypto && global.crypto.getRandomValues) {
          module.exports.randomBytes = function (length) {
            var bytes = new Uint8Array(length);
            global.crypto.getRandomValues(bytes);
            return bytes;
          };
        } else {
          module.exports.randomBytes = function (length) {
            var bytes = new Array(length);

            for (var i = 0; i < length; i++) {
              bytes[i] = Math.floor(Math.random() * 256);
            }

            return bytes;
          };
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    44: [function (require, module, exports) {
      (function (global) {
        'use strict';

        module.exports = {
          isOpera: function () {
            return global.navigator && /opera/i.test(global.navigator.userAgent);
          },
          isKonqueror: function () {
            return global.navigator && /konqueror/i.test(global.navigator.userAgent);
          } // #187 wrap document.domain in try/catch because of WP8 from file:///
          ,
          hasDomain: function () {
            // non-browser client always has a domain
            if (!global.document) {
              return true;
            }

            try {
              return !!global.document.domain;
            } catch (e) {
              return false;
            }
          }
        };
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    45: [function (require, module, exports) {
      'use strict';

      var JSON3 = require('json3'); // Some extra characters that Chrome gets wrong, and substitutes with
      // something else on the wire.
      // eslint-disable-next-line no-control-regex


      var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
          extraLookup; // This may be quite slow, so let's delay until user actually uses bad
      // characters.

      var unrollLookup = function (escapable) {
        var i;
        var unrolled = {};
        var c = [];

        for (i = 0; i < 65536; i++) {
          c.push(String.fromCharCode(i));
        }

        escapable.lastIndex = 0;
        c.join('').replace(escapable, function (a) {
          unrolled[a] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          return '';
        });
        escapable.lastIndex = 0;
        return unrolled;
      }; // Quote string, also taking care of unicode characters that browsers
      // often break. Especially, take care of unicode surrogates:
      // http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates


      module.exports = {
        quote: function (string) {
          var quoted = JSON3.stringify(string); // In most cases this should be very fast and good enough.

          extraEscapable.lastIndex = 0;

          if (!extraEscapable.test(quoted)) {
            return quoted;
          }

          if (!extraLookup) {
            extraLookup = unrollLookup(extraEscapable);
          }

          return quoted.replace(extraEscapable, function (a) {
            return extraLookup[a];
          });
        }
      };
    }, {
      "json3": 58
    }],
    46: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var random = require('./random');

        var onUnload = {},
            afterUnload = false // detect google chrome packaged apps because they don't allow the 'unload' event
        ,
            isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime;
        module.exports = {
          attachEvent: function (event, listener) {
            if (typeof global.addEventListener !== 'undefined') {
              global.addEventListener(event, listener, false);
            } else if (global.document && global.attachEvent) {
              // IE quirks.
              // According to: http://stevesouders.com/misc/test-postmessage.php
              // the message gets delivered only to 'document', not 'window'.
              global.document.attachEvent('on' + event, listener); // I get 'window' for ie8.

              global.attachEvent('on' + event, listener);
            }
          },
          detachEvent: function (event, listener) {
            if (typeof global.addEventListener !== 'undefined') {
              global.removeEventListener(event, listener, false);
            } else if (global.document && global.detachEvent) {
              global.document.detachEvent('on' + event, listener);
              global.detachEvent('on' + event, listener);
            }
          },
          unloadAdd: function (listener) {
            if (isChromePackagedApp) {
              return null;
            }

            var ref = random.string(8);
            onUnload[ref] = listener;

            if (afterUnload) {
              setTimeout(this.triggerUnloadCallbacks, 0);
            }

            return ref;
          },
          unloadDel: function (ref) {
            if (ref in onUnload) {
              delete onUnload[ref];
            }
          },
          triggerUnloadCallbacks: function () {
            for (var ref in onUnload) {
              onUnload[ref]();
              delete onUnload[ref];
            }
          }
        };

        var unloadTriggered = function () {
          if (afterUnload) {
            return;
          }

          afterUnload = true;
          module.exports.triggerUnloadCallbacks();
        }; // 'unload' alone is not reliable in opera within an iframe, but we
        // can't use `beforeunload` as IE fires it on javascript: links.


        if (!isChromePackagedApp) {
          module.exports.attachEvent('unload', unloadTriggered);
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./random": 50
    }],
    47: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var eventUtils = require('./event'),
            JSON3 = require('json3'),
            browser = require('./browser');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:utils:iframe');
        }

        module.exports = {
          WPrefix: '_jp',
          currentWindowId: null,
          polluteGlobalNamespace: function () {
            if (!(module.exports.WPrefix in global)) {
              global[module.exports.WPrefix] = {};
            }
          },
          postMessage: function (type, data) {
            if (global.parent !== global) {
              global.parent.postMessage(JSON3.stringify({
                windowId: module.exports.currentWindowId,
                type: type,
                data: data || ''
              }), '*');
            } else {
              debug('Cannot postMessage, no parent window.', type, data);
            }
          },
          createIframe: function (iframeUrl, errorCallback) {
            var iframe = global.document.createElement('iframe');
            var tref, unloadRef;

            var unattach = function () {
              debug('unattach');
              clearTimeout(tref); // Explorer had problems with that.

              try {
                iframe.onload = null;
              } catch (x) {// intentionally empty
              }

              iframe.onerror = null;
            };

            var cleanup = function () {
              debug('cleanup');

              if (iframe) {
                unattach(); // This timeout makes chrome fire onbeforeunload event
                // within iframe. Without the timeout it goes straight to
                // onunload.

                setTimeout(function () {
                  if (iframe) {
                    iframe.parentNode.removeChild(iframe);
                  }

                  iframe = null;
                }, 0);
                eventUtils.unloadDel(unloadRef);
              }
            };

            var onerror = function (err) {
              debug('onerror', err);

              if (iframe) {
                cleanup();
                errorCallback(err);
              }
            };

            var post = function (msg, origin) {
              debug('post', msg, origin);
              setTimeout(function () {
                try {
                  // When the iframe is not loaded, IE raises an exception
                  // on 'contentWindow'.
                  if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.postMessage(msg, origin);
                  }
                } catch (x) {// intentionally empty
                }
              }, 0);
            };

            iframe.src = iframeUrl;
            iframe.style.display = 'none';
            iframe.style.position = 'absolute';

            iframe.onerror = function () {
              onerror('onerror');
            };

            iframe.onload = function () {
              debug('onload'); // `onload` is triggered before scripts on the iframe are
              // executed. Give it few seconds to actually load stuff.

              clearTimeout(tref);
              tref = setTimeout(function () {
                onerror('onload timeout');
              }, 2000);
            };

            global.document.body.appendChild(iframe);
            tref = setTimeout(function () {
              onerror('timeout');
            }, 15000);
            unloadRef = eventUtils.unloadAdd(cleanup);
            return {
              post: post,
              cleanup: cleanup,
              loaded: unattach
            };
          }
          /* eslint no-undef: "off", new-cap: "off" */
          ,
          createHtmlfile: function (iframeUrl, errorCallback) {
            var axo = ['Active'].concat('Object').join('X');
            var doc = new global[axo]('htmlfile');
            var tref, unloadRef;
            var iframe;

            var unattach = function () {
              clearTimeout(tref);
              iframe.onerror = null;
            };

            var cleanup = function () {
              if (doc) {
                unattach();
                eventUtils.unloadDel(unloadRef);
                iframe.parentNode.removeChild(iframe);
                iframe = doc = null;
                CollectGarbage();
              }
            };

            var onerror = function (r) {
              debug('onerror', r);

              if (doc) {
                cleanup();
                errorCallback(r);
              }
            };

            var post = function (msg, origin) {
              try {
                // When the iframe is not loaded, IE raises an exception
                // on 'contentWindow'.
                setTimeout(function () {
                  if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.postMessage(msg, origin);
                  }
                }, 0);
              } catch (x) {// intentionally empty
              }
            };

            doc.open();
            doc.write('<html><s' + 'cript>' + 'document.domain="' + global.document.domain + '";' + '</s' + 'cript></html>');
            doc.close();
            doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
            var c = doc.createElement('div');
            doc.body.appendChild(c);
            iframe = doc.createElement('iframe');
            c.appendChild(iframe);
            iframe.src = iframeUrl;

            iframe.onerror = function () {
              onerror('onerror');
            };

            tref = setTimeout(function () {
              onerror('timeout');
            }, 15000);
            unloadRef = eventUtils.unloadAdd(cleanup);
            return {
              post: post,
              cleanup: cleanup,
              loaded: unattach
            };
          }
        };
        module.exports.iframeEnabled = false;

        if (global.document) {
          // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
          // huge delay, or not at all.
          module.exports.iframeEnabled = (typeof global.postMessage === 'function' || typeof global.postMessage === 'object') && !browser.isKonqueror();
        }
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./browser": 44,
      "./event": 46,
      "debug": 55,
      "json3": 58
    }],
    48: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var logObject = {};
        ['log', 'debug', 'warn'].forEach(function (level) {
          var levelExists;

          try {
            levelExists = global.console && global.console[level] && global.console[level].apply;
          } catch (e) {// do nothing
          }

          logObject[level] = levelExists ? function () {
            return global.console[level].apply(global.console, arguments);
          } : level === 'log' ? function () {} : logObject.log;
        });
        module.exports = logObject;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    49: [function (require, module, exports) {
      'use strict';

      module.exports = {
        isObject: function (obj) {
          var type = typeof obj;
          return type === 'function' || type === 'object' && !!obj;
        },
        extend: function (obj) {
          if (!this.isObject(obj)) {
            return obj;
          }

          var source, prop;

          for (var i = 1, length = arguments.length; i < length; i++) {
            source = arguments[i];

            for (prop in source) {
              if (Object.prototype.hasOwnProperty.call(source, prop)) {
                obj[prop] = source[prop];
              }
            }
          }

          return obj;
        }
      };
    }, {}],
    50: [function (require, module, exports) {
      'use strict';
      /* global crypto:true */

      var crypto = require('crypto'); // This string has length 32, a power of 2, so the modulus doesn't introduce a
      // bias.


      var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
      module.exports = {
        string: function (length) {
          var max = _randomStringChars.length;
          var bytes = crypto.randomBytes(length);
          var ret = [];

          for (var i = 0; i < length; i++) {
            ret.push(_randomStringChars.substr(bytes[i] % max, 1));
          }

          return ret.join('');
        },
        number: function (max) {
          return Math.floor(Math.random() * max);
        },
        numberString: function (max) {
          var t = ('' + (max - 1)).length;
          var p = new Array(t + 1).join('0');
          return (p + this.number(max)).slice(-t);
        }
      };
    }, {
      "crypto": 43
    }],
    51: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:utils:transport');
        }

        module.exports = function (availableTransports) {
          return {
            filterToEnabled: function (transportsWhitelist, info) {
              var transports = {
                main: [],
                facade: []
              };

              if (!transportsWhitelist) {
                transportsWhitelist = [];
              } else if (typeof transportsWhitelist === 'string') {
                transportsWhitelist = [transportsWhitelist];
              }

              availableTransports.forEach(function (trans) {
                if (!trans) {
                  return;
                }

                if (trans.transportName === 'websocket' && info.websocket === false) {
                  debug('disabled from server', 'websocket');
                  return;
                }

                if (transportsWhitelist.length && transportsWhitelist.indexOf(trans.transportName) === -1) {
                  debug('not in whitelist', trans.transportName);
                  return;
                }

                if (trans.enabled(info)) {
                  debug('enabled', trans.transportName);
                  transports.main.push(trans);

                  if (trans.facadeTransport) {
                    transports.facade.push(trans.facadeTransport);
                  }
                } else {
                  debug('disabled', trans.transportName);
                }
              });
              return transports;
            }
          };
        };
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55
    }],
    52: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var URL = require('url-parse');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:utils:url');
        }

        module.exports = {
          getOrigin: function (url) {
            if (!url) {
              return null;
            }

            var p = new URL(url);

            if (p.protocol === 'file:') {
              return null;
            }

            var port = p.port;

            if (!port) {
              port = p.protocol === 'https:' ? '443' : '80';
            }

            return p.protocol + '//' + p.hostname + ':' + port;
          },
          isOriginEqual: function (a, b) {
            var res = this.getOrigin(a) === this.getOrigin(b);
            debug('same', a, b, res);
            return res;
          },
          isSchemeEqual: function (a, b) {
            return a.split(':')[0] === b.split(':')[0];
          },
          addPath: function (url, path) {
            var qs = url.split('?');
            return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
          },
          addQuery: function (url, q) {
            return url + (url.indexOf('?') === -1 ? '?' + q : '&' + q);
          }
        };
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "url-parse": 61
    }],
    53: [function (require, module, exports) {
      module.exports = '1.4.0';
    }, {}],
    54: [function (require, module, exports) {
      /**
       * Helpers.
       */
      var s = 1000;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var w = d * 7;
      var y = d * 365.25;
      /**
       * Parse or format the given `val`.
       *
       * Options:
       *
       *  - `long` verbose formatting [false]
       *
       * @param {String|Number} val
       * @param {Object} [options]
       * @throws {Error} throw an error if val is not a non-empty string or a number
       * @return {String|Number}
       * @api public
       */

      module.exports = function (val, options) {
        options = options || {};
        var type = typeof val;

        if (type === 'string' && val.length > 0) {
          return parse(val);
        } else if (type === 'number' && isNaN(val) === false) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }

        throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
      };
      /**
       * Parse the given `str` and return milliseconds.
       *
       * @param {String} str
       * @return {Number}
       * @api private
       */


      function parse(str) {
        str = String(str);

        if (str.length > 100) {
          return;
        }

        var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

        if (!match) {
          return;
        }

        var n = parseFloat(match[1]);
        var type = (match[2] || 'ms').toLowerCase();

        switch (type) {
          case 'years':
          case 'year':
          case 'yrs':
          case 'yr':
          case 'y':
            return n * y;

          case 'weeks':
          case 'week':
          case 'w':
            return n * w;

          case 'days':
          case 'day':
          case 'd':
            return n * d;

          case 'hours':
          case 'hour':
          case 'hrs':
          case 'hr':
          case 'h':
            return n * h;

          case 'minutes':
          case 'minute':
          case 'mins':
          case 'min':
          case 'm':
            return n * m;

          case 'seconds':
          case 'second':
          case 'secs':
          case 'sec':
          case 's':
            return n * s;

          case 'milliseconds':
          case 'millisecond':
          case 'msecs':
          case 'msec':
          case 'ms':
            return n;

          default:
            return undefined;
        }
      }
      /**
       * Short format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */


      function fmtShort(ms) {
        var msAbs = Math.abs(ms);

        if (msAbs >= d) {
          return Math.round(ms / d) + 'd';
        }

        if (msAbs >= h) {
          return Math.round(ms / h) + 'h';
        }

        if (msAbs >= m) {
          return Math.round(ms / m) + 'm';
        }

        if (msAbs >= s) {
          return Math.round(ms / s) + 's';
        }

        return ms + 'ms';
      }
      /**
       * Long format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */


      function fmtLong(ms) {
        var msAbs = Math.abs(ms);

        if (msAbs >= d) {
          return plural(ms, msAbs, d, 'day');
        }

        if (msAbs >= h) {
          return plural(ms, msAbs, h, 'hour');
        }

        if (msAbs >= m) {
          return plural(ms, msAbs, m, 'minute');
        }

        if (msAbs >= s) {
          return plural(ms, msAbs, s, 'second');
        }

        return ms + ' ms';
      }
      /**
       * Pluralization helper.
       */


      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
      }
    }, {}],
    55: [function (require, module, exports) {
      (function (process) {
        "use strict";

        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }
        /* eslint-env browser */

        /**
         * This is the web browser implementation of `debug()`.
         */


        exports.log = log;
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = localstorage();
        /**
         * Colors.
         */

        exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
        /**
         * Currently only WebKit-based Web Inspectors, Firefox >= v31,
         * and the Firebug extension (any Firefox version) are known
         * to support "%c" CSS customizations.
         *
         * TODO: add a `localStorage` variable to explicitly enable/disable colors
         */
        // eslint-disable-next-line complexity

        function useColors() {
          // NB: In an Electron preload script, document will be defined but not fully
          // initialized. Since we know we're in Chrome, we'll just detect this case
          // explicitly
          if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
            return true;
          } // Internet Explorer and Edge do not support colors.


          if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          } // Is webkit? http://stackoverflow.com/a/16459606/376773
          // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


          return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
          typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        /**
         * Colorize log arguments if enabled.
         *
         * @api public
         */


        function formatArgs(args) {
          args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

          if (!this.useColors) {
            return;
          }

          var c = 'color: ' + this.color;
          args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
          // arguments passed either before or after the %c, so we need to
          // figure out the correct index to insert the CSS into

          var index = 0;
          var lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, function (match) {
            if (match === '%%') {
              return;
            }

            index++;

            if (match === '%c') {
              // We only are interested in the *last* %c
              // (the user may have provided their own)
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        /**
         * Invokes `console.log()` when available.
         * No-op when `console.log` is not a "function".
         *
         * @api public
         */


        function log() {
          var _console; // This hackery is required for IE8/9, where
          // the `console.log` function doesn't have 'apply'


          return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
        }
        /**
         * Save `namespaces`.
         *
         * @param {String} namespaces
         * @api private
         */


        function save(namespaces) {
          try {
            if (namespaces) {
              exports.storage.setItem('debug', namespaces);
            } else {
              exports.storage.removeItem('debug');
            }
          } catch (error) {// Swallow
            // XXX (@Qix-) should we be logging these?
          }
        }
        /**
         * Load `namespaces`.
         *
         * @return {String} returns the previously persisted debug modes
         * @api private
         */


        function load() {
          var r;

          try {
            r = exports.storage.getItem('debug');
          } catch (error) {} // Swallow
          // XXX (@Qix-) should we be logging these?
          // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


          if (!r && typeof process !== 'undefined' && 'env' in process) {
            r = process.env.DEBUG;
          }

          return r;
        }
        /**
         * Localstorage attempts to return the localstorage.
         *
         * This is necessary because safari throws
         * when a user disables cookies/localstorage
         * and you attempt to access it.
         *
         * @return {LocalStorage}
         * @api private
         */


        function localstorage() {
          try {
            // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
            // The Browser also has localStorage in the global context.
            return localStorage;
          } catch (error) {// Swallow
            // XXX (@Qix-) should we be logging these?
          }
        }

        module.exports = require('./common')(exports);
        var formatters = module.exports.formatters;
        /**
         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
         */

        formatters.j = function (v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return '[UnexpectedJSONParseError]: ' + error.message;
          }
        };
      }).call(this, {
        env: {}
      });
    }, {
      "./common": 56
    }],
    56: [function (require, module, exports) {
      "use strict";
      /**
       * This is the common logic for both the Node.js and web browser
       * implementations of `debug()`.
       */

      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require('ms');
        Object.keys(env).forEach(function (key) {
          createDebug[key] = env[key];
        });
        /**
        * Active `debug` instances.
        */

        createDebug.instances = [];
        /**
        * The currently active debug mode names, and names to skip.
        */

        createDebug.names = [];
        createDebug.skips = [];
        /**
        * Map of special "%n" handling functions, for the debug "format" argument.
        *
        * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
        */

        createDebug.formatters = {};
        /**
        * Selects a color for a debug namespace
        * @param {String} namespace The namespace string for the for the debug instance to be colored
        * @return {Number|String} An ANSI color code for the given namespace
        * @api private
        */

        function selectColor(namespace) {
          var hash = 0;

          for (var i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
          }

          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }

        createDebug.selectColor = selectColor;
        /**
        * Create a debugger with the given `namespace`.
        *
        * @param {String} namespace
        * @return {Function}
        * @api public
        */

        function createDebug(namespace) {
          var prevTime;

          function debug() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            } // Disabled?


            if (!debug.enabled) {
              return;
            }

            var self = debug; // Set `diff` timestamp

            var curr = Number(new Date());
            var ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);

            if (typeof args[0] !== 'string') {
              // Anything else let's inspect with %O
              args.unshift('%O');
            } // Apply any `formatters` transformations


            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
              // If we encounter an escaped % then don't increase the array index
              if (match === '%%') {
                return match;
              }

              index++;
              var formatter = createDebug.formatters[format];

              if (typeof formatter === 'function') {
                var val = args[index];
                match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

                args.splice(index, 1);
                index--;
              }

              return match;
            }); // Apply env-specific formatting (colors, etc.)

            createDebug.formatArgs.call(self, args);
            var logFn = self.log || createDebug.log;
            logFn.apply(self, args);
          }

          debug.namespace = namespace;
          debug.enabled = createDebug.enabled(namespace);
          debug.useColors = createDebug.useColors();
          debug.color = selectColor(namespace);
          debug.destroy = destroy;
          debug.extend = extend; // Debug.formatArgs = formatArgs;
          // debug.rawLog = rawLog;
          // env-specific initialization logic for debug instances

          if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
          }

          createDebug.instances.push(debug);
          return debug;
        }

        function destroy() {
          var index = createDebug.instances.indexOf(this);

          if (index !== -1) {
            createDebug.instances.splice(index, 1);
            return true;
          }

          return false;
        }

        function extend(namespace, delimiter) {
          return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        }
        /**
        * Enables a debug mode by namespaces. This can include modes
        * separated by a colon and wildcards.
        *
        * @param {String} namespaces
        * @api public
        */


        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.names = [];
          createDebug.skips = [];
          var i;
          var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
          var len = split.length;

          for (i = 0; i < len; i++) {
            if (!split[i]) {
              // ignore empty strings
              continue;
            }

            namespaces = split[i].replace(/\*/g, '.*?');

            if (namespaces[0] === '-') {
              createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
            } else {
              createDebug.names.push(new RegExp('^' + namespaces + '$'));
            }
          }

          for (i = 0; i < createDebug.instances.length; i++) {
            var instance = createDebug.instances[i];
            instance.enabled = createDebug.enabled(instance.namespace);
          }
        }
        /**
        * Disable debug output.
        *
        * @api public
        */


        function disable() {
          createDebug.enable('');
        }
        /**
        * Returns true if the given mode name is enabled, false otherwise.
        *
        * @param {String} name
        * @return {Boolean}
        * @api public
        */


        function enabled(name) {
          if (name[name.length - 1] === '*') {
            return true;
          }

          var i;
          var len;

          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }

          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }

          return false;
        }
        /**
        * Coerce `val`.
        *
        * @param {Mixed} val
        * @return {Mixed}
        * @api private
        */


        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }

          return val;
        }

        createDebug.enable(createDebug.load());
        return createDebug;
      }

      module.exports = setup;
    }, {
      "ms": 54
    }],
    57: [function (require, module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function () {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
    }, {}],
    58: [function (require, module, exports) {
      (function (global) {
        /*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
        ;
        (function () {
          // Detect the `define` function exposed by asynchronous module loaders. The
          // strict `define` check is necessary for compatibility with `r.js`.
          var isLoader = typeof define === "function" && define.amd; // A set of types used to distinguish objects from primitives.

          var objectTypes = {
            "function": true,
            "object": true
          }; // Detect the `exports` object exposed by CommonJS implementations.

          var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports; // Use the `global` object exposed by Node (including Browserify via
          // `insert-module-globals`), Narwhal, and Ringo as the default context,
          // and the `window` object in browsers. Rhino exports a `global` function
          // instead.

          var root = objectTypes[typeof window] && window || this,
              freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

          if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
            root = freeGlobal;
          } // Public: Initializes JSON 3 using the given `context` object, attaching the
          // `stringify` and `parse` functions to the specified `exports` object.


          function runInContext(context, exports) {
            context || (context = root["Object"]());
            exports || (exports = root["Object"]()); // Native constructor aliases.

            var Number = context["Number"] || root["Number"],
                String = context["String"] || root["String"],
                Object = context["Object"] || root["Object"],
                Date = context["Date"] || root["Date"],
                SyntaxError = context["SyntaxError"] || root["SyntaxError"],
                TypeError = context["TypeError"] || root["TypeError"],
                Math = context["Math"] || root["Math"],
                nativeJSON = context["JSON"] || root["JSON"]; // Delegate to the native `stringify` and `parse` implementations.

            if (typeof nativeJSON == "object" && nativeJSON) {
              exports.stringify = nativeJSON.stringify;
              exports.parse = nativeJSON.parse;
            } // Convenience aliases.


            var objectProto = Object.prototype,
                getClass = objectProto.toString,
                isProperty,
                forEach,
                undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.

            var isExtended = new Date(-3509827334573292);

            try {
              // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
              // results for certain dates in Opera >= 10.53.
              isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,
              // but clips the values returned by the date methods to the range of
              // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
              isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
            } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`
            // implementations are spec-compliant. Based on work by Ken Snyder.


            function has(name) {
              if (has[name] !== undef) {
                // Return cached feature test result.
                return has[name];
              }

              var isSupported;

              if (name == "bug-string-char-index") {
                // IE <= 7 doesn't support accessing string characters using square
                // bracket notation. IE 8 only supports this for primitives.
                isSupported = "a"[0] != "a";
              } else if (name == "json") {
                // Indicates whether both `JSON.stringify` and `JSON.parse` are
                // supported.
                isSupported = has("json-stringify") && has("json-parse");
              } else {
                var value,
                    serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

                if (name == "json-stringify") {
                  var stringify = exports.stringify,
                      stringifySupported = typeof stringify == "function" && isExtended;

                  if (stringifySupported) {
                    // A test function object with a custom `toJSON` method.
                    (value = function () {
                      return 1;
                    }).toJSON = value;

                    try {
                      stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
                      // primitives as object literals.
                      stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                      // literals.
                      stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                      // does not define a canonical JSON representation (this applies to
                      // objects with `toJSON` properties as well, *unless* they are nested
                      // within an object or array).
                      stringify(getClass) === undef && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                      // FF 3.1b3 pass this test.
                      stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                      // respectively, if the value is omitted entirely.
                      stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,
                      // string, array, object, Boolean, or `null` literal. This applies to
                      // objects with custom `toJSON` methods as well, unless they are nested
                      // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                      // methods entirely.
                      stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                      // `"[null]"`.
                      stringify([undef]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
                      stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
                      // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                      // elides non-JSON values from objects and arrays, unless they
                      // define custom `toJSON` methods.
                      stringify([undef, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                      // where character escape codes are expected (e.g., `\b` => `\u0008`).
                      stringify({
                        "a": [value, true, false, null, "\x00\b\n\f\r\t"]
                      }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                      stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                      // serialize extended years.
                      stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
                      stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                      // four-digit years instead of six-digit years. Credits: @Yaffle.
                      stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                      // values less than 1000. Credits: @Yaffle.
                      stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
                    } catch (exception) {
                      stringifySupported = false;
                    }
                  }

                  isSupported = stringifySupported;
                } // Test `JSON.parse`.


                if (name == "json-parse") {
                  var parse = exports.parse;

                  if (typeof parse == "function") {
                    try {
                      // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                      // Conforming implementations should also coerce the initial argument to
                      // a string prior to parsing.
                      if (parse("0") === 0 && !parse(false)) {
                        // Simple parsing test.
                        value = parse(serialized);
                        var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                        if (parseSupported) {
                          try {
                            // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                            parseSupported = !parse('"\t"');
                          } catch (exception) {}

                          if (parseSupported) {
                            try {
                              // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                              // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                              // certain octal literals.
                              parseSupported = parse("01") !== 1;
                            } catch (exception) {}
                          }

                          if (parseSupported) {
                            try {
                              // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                              // points. These environments, along with FF 3.1b1 and 2,
                              // also allow trailing commas in JSON objects and arrays.
                              parseSupported = parse("1.") !== 1;
                            } catch (exception) {}
                          }
                        }
                      }
                    } catch (exception) {
                      parseSupported = false;
                    }
                  }

                  isSupported = parseSupported;
                }
              }

              return has[name] = !!isSupported;
            }

            if (!has("json")) {
              // Common `[[Class]]` name aliases.
              var functionClass = "[object Function]",
                  dateClass = "[object Date]",
                  numberClass = "[object Number]",
                  stringClass = "[object String]",
                  arrayClass = "[object Array]",
                  booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

              var charIndexBuggy = has("bug-string-char-index"); // Define additional utility methods if the `Date` methods are buggy.

              if (!isExtended) {
                var floor = Math.floor; // A mapping between the months of the year and the number of days between
                // January 1st and the first of the respective month.

                var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
                // first day of the given month.

                var getDay = function (year, month) {
                  return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
                };
              } // Internal: Determines if a property is a direct property of the given
              // object. Delegates to the native `Object#hasOwnProperty` method.


              if (!(isProperty = objectProto.hasOwnProperty)) {
                isProperty = function (property) {
                  var members = {},
                      constructor;

                  if ((members.__proto__ = null, members.__proto__ = {
                    // The *proto* property cannot be set multiple times in recent
                    // versions of Firefox and SeaMonkey.
                    "toString": 1
                  }, members).toString != getClass) {
                    // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
                    // supports the mutable *proto* property.
                    isProperty = function (property) {
                      // Capture and break the object's prototype chain (see section 8.6.2
                      // of the ES 5.1 spec). The parenthesized expression prevents an
                      // unsafe transformation by the Closure Compiler.
                      var original = this.__proto__,
                          result = (property in (this.__proto__ = null, this)); // Restore the original prototype chain.

                      this.__proto__ = original;
                      return result;
                    };
                  } else {
                    // Capture a reference to the top-level `Object` constructor.
                    constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in
                    // other environments.

                    isProperty = function (property) {
                      var parent = (this.constructor || constructor).prototype;
                      return property in this && !(property in parent && this[property] === parent[property]);
                    };
                  }

                  members = null;
                  return isProperty.call(this, property);
                };
              } // Internal: Normalizes the `for...in` iteration algorithm across
              // environments. Each enumerated key is yielded to a `callback` function.


              forEach = function (object, callback) {
                var size = 0,
                    Properties,
                    members,
                    property; // Tests for bugs in the current environment's `for...in` algorithm. The
                // `valueOf` property inherits the non-enumerable flag from
                // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

                (Properties = function () {
                  this.valueOf = 0;
                }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

                members = new Properties();

                for (property in members) {
                  // Ignore all properties inherited from `Object.prototype`.
                  if (isProperty.call(members, property)) {
                    size++;
                  }
                }

                Properties = members = null; // Normalize the iteration algorithm.

                if (!size) {
                  // A list of non-enumerable properties inherited from `Object.prototype`.
                  members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
                  // properties.

                  forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        length;
                    var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;

                    for (property in object) {
                      // Gecko <= 1.0 enumerates the `prototype` property of functions under
                      // certain conditions; IE does not.
                      if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                        callback(property);
                      }
                    } // Manually invoke the callback for each non-enumerable property.


                    for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
                  };
                } else if (size == 2) {
                  // Safari <= 2.0.4 enumerates shadowed properties twice.
                  forEach = function (object, callback) {
                    // Create a set of iterated properties.
                    var members = {},
                        isFunction = getClass.call(object) == functionClass,
                        property;

                    for (property in object) {
                      // Store each property name to prevent double enumeration. The
                      // `prototype` property of functions is not enumerated due to cross-
                      // environment inconsistencies.
                      if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                        callback(property);
                      }
                    }
                  };
                } else {
                  // No bugs detected; use the standard `for...in` algorithm.
                  forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        isConstructor;

                    for (property in object) {
                      if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                        callback(property);
                      }
                    } // Manually invoke the callback for the `constructor` property due to
                    // cross-environment inconsistencies.


                    if (isConstructor || isProperty.call(object, property = "constructor")) {
                      callback(property);
                    }
                  };
                }

                return forEach(object, callback);
              }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
              // `filter` argument may specify either a function that alters how object and
              // array members are serialized, or an array of strings and numbers that
              // indicates which properties should be serialized. The optional `width`
              // argument may be either a string or number that specifies the indentation
              // level of the output.


              if (!has("json-stringify")) {
                // Internal: A map of control characters and their escaped equivalents.
                var Escapes = {
                  92: "\\\\",
                  34: '\\"',
                  8: "\\b",
                  12: "\\f",
                  10: "\\n",
                  13: "\\r",
                  9: "\\t"
                }; // Internal: Converts `value` into a zero-padded string such that its
                // length is at least equal to `width`. The `width` must be <= 6.

                var leadingZeroes = "000000";

                var toPaddedString = function (width, value) {
                  // The `|| 0` expression is necessary to work around a bug in
                  // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
                  return (leadingZeroes + (value || 0)).slice(-width);
                }; // Internal: Double-quotes a string `value`, replacing all ASCII control
                // characters (characters with code unit values between 0 and 31) with
                // their escaped equivalents. This is an implementation of the
                // `Quote(value)` operation defined in ES 5.1 section 15.12.3.


                var unicodePrefix = "\\u00";

                var quote = function (value) {
                  var result = '"',
                      index = 0,
                      length = value.length,
                      useCharIndex = !charIndexBuggy || length > 10;
                  var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

                  for (; index < length; index++) {
                    var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or
                    // shorthand escape sequence; otherwise, append the character as-is.

                    switch (charCode) {
                      case 8:
                      case 9:
                      case 10:
                      case 12:
                      case 13:
                      case 34:
                      case 92:
                        result += Escapes[charCode];
                        break;

                      default:
                        if (charCode < 32) {
                          result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                          break;
                        }

                        result += useCharIndex ? symbols[index] : value.charAt(index);
                    }
                  }

                  return result + '"';
                }; // Internal: Recursively serializes an object. Implements the
                // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


                var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
                  var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

                  try {
                    // Necessary for host object support.
                    value = object[property];
                  } catch (exception) {}

                  if (typeof value == "object" && value) {
                    className = getClass.call(value);

                    if (className == dateClass && !isProperty.call(value, "toJSON")) {
                      if (value > -1 / 0 && value < 1 / 0) {
                        // Dates are serialized according to the `Date#toJSON` method
                        // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                        // for the ISO 8601 date time string format.
                        if (getDay) {
                          // Manually compute the year, month, date, hours, minutes,
                          // seconds, and milliseconds if the `getUTC*` methods are
                          // buggy. Adapted from @Yaffle's `date-shim` project.
                          date = floor(value / 864e5);

                          for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);

                          for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);

                          date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
                          // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                          // to compute `A modulo B`, as the `%` operator does not
                          // correspond to the `modulo` operation for negative numbers.

                          time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
                          // decomposing the time within the day. See section 15.9.1.10.

                          hours = floor(time / 36e5) % 24;
                          minutes = floor(time / 6e4) % 60;
                          seconds = floor(time / 1e3) % 60;
                          milliseconds = time % 1e3;
                        } else {
                          year = value.getUTCFullYear();
                          month = value.getUTCMonth();
                          date = value.getUTCDate();
                          hours = value.getUTCHours();
                          minutes = value.getUTCMinutes();
                          seconds = value.getUTCSeconds();
                          milliseconds = value.getUTCMilliseconds();
                        } // Serialize extended years correctly.


                        value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
                        // digits; milliseconds should have three.
                        "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
                        "." + toPaddedString(3, milliseconds) + "Z";
                      } else {
                        value = null;
                      }
                    } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, "toJSON"))) {
                      // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
                      // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
                      // ignores all `toJSON` methods on these objects unless they are
                      // defined directly on an instance.
                      value = value.toJSON(property);
                    }
                  }

                  if (callback) {
                    // If a replacement function was provided, call it to obtain the value
                    // for serialization.
                    value = callback.call(object, property, value);
                  }

                  if (value === null) {
                    return "null";
                  }

                  className = getClass.call(value);

                  if (className == booleanClass) {
                    // Booleans are represented literally.
                    return "" + value;
                  } else if (className == numberClass) {
                    // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
                    // `"null"`.
                    return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
                  } else if (className == stringClass) {
                    // Strings are double-quoted and escaped.
                    return quote("" + value);
                  } // Recursively serialize objects and arrays.


                  if (typeof value == "object") {
                    // Check for cyclic structures. This is a linear search; performance
                    // is inversely proportional to the number of unique nested objects.
                    for (length = stack.length; length--;) {
                      if (stack[length] === value) {
                        // Cyclic structures cannot be serialized by `JSON.stringify`.
                        throw TypeError();
                      }
                    } // Add the object to the stack of traversed objects.


                    stack.push(value);
                    results = []; // Save the current indentation level and indent one additional level.

                    prefix = indentation;
                    indentation += whitespace;

                    if (className == arrayClass) {
                      // Recursively serialize array elements.
                      for (index = 0, length = value.length; index < length; index++) {
                        element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                        results.push(element === undef ? "null" : element);
                      }

                      result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
                    } else {
                      // Recursively serialize object members. Members are selected from
                      // either a user-specified list of property names, or the object
                      // itself.
                      forEach(properties || value, function (property) {
                        var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                        if (element !== undef) {
                          // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                          // is not the empty string, let `member` {quote(property) + ":"}
                          // be the concatenation of `member` and the `space` character."
                          // The "`space` character" refers to the literal space
                          // character, not the `space` {width} argument provided to
                          // `JSON.stringify`.
                          results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                        }
                      });
                      result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
                    } // Remove the object from the traversed object stack.


                    stack.pop();
                    return result;
                  }
                }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


                exports.stringify = function (source, filter, width) {
                  var whitespace, callback, properties, className;

                  if (objectTypes[typeof filter] && filter) {
                    if ((className = getClass.call(filter)) == functionClass) {
                      callback = filter;
                    } else if (className == arrayClass) {
                      // Convert the property names array into a makeshift set.
                      properties = {};

                      for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));
                    }
                  }

                  if (width) {
                    if ((className = getClass.call(width)) == numberClass) {
                      // Convert the `width` to an integer and create a string containing
                      // `width` number of space characters.
                      if ((width -= width % 1) > 0) {
                        for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
                      }
                    } else if (className == stringClass) {
                      whitespace = width.length <= 10 ? width : width.slice(0, 10);
                    }
                  } // Opera <= 7.54u2 discards the values associated with empty string keys
                  // (`""`) only if they are used directly within an object member list
                  // (e.g., `!("" in { "": 1})`).


                  return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
                };
              } // Public: Parses a JSON source string.


              if (!has("json-parse")) {
                var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
                // equivalents.

                var Unescapes = {
                  92: "\\",
                  34: '"',
                  47: "/",
                  98: "\b",
                  116: "\t",
                  110: "\n",
                  102: "\f",
                  114: "\r"
                }; // Internal: Stores the parser state.

                var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

                var abort = function () {
                  Index = Source = null;
                  throw SyntaxError();
                }; // Internal: Returns the next token, or `"$"` if the parser has reached
                // the end of the source string. A token may be a string, number, `null`
                // literal, or Boolean literal.


                var lex = function () {
                  var source = Source,
                      length = source.length,
                      value,
                      begin,
                      position,
                      isSigned,
                      charCode;

                  while (Index < length) {
                    charCode = source.charCodeAt(Index);

                    switch (charCode) {
                      case 9:
                      case 10:
                      case 13:
                      case 32:
                        // Skip whitespace tokens, including tabs, carriage returns, line
                        // feeds, and space characters.
                        Index++;
                        break;

                      case 123:
                      case 125:
                      case 91:
                      case 93:
                      case 58:
                      case 44:
                        // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                        // the current position.
                        value = charIndexBuggy ? source.charAt(Index) : source[Index];
                        Index++;
                        return value;

                      case 34:
                        // `"` delimits a JSON string; advance to the next character and
                        // begin parsing the string. String tokens are prefixed with the
                        // sentinel `@` character to distinguish them from punctuators and
                        // end-of-string tokens.
                        for (value = "@", Index++; Index < length;) {
                          charCode = source.charCodeAt(Index);

                          if (charCode < 32) {
                            // Unescaped ASCII control characters (those with a code unit
                            // less than the space character) are not permitted.
                            abort();
                          } else if (charCode == 92) {
                            // A reverse solidus (`\`) marks the beginning of an escaped
                            // control character (including `"`, `\`, and `/`) or Unicode
                            // escape sequence.
                            charCode = source.charCodeAt(++Index);

                            switch (charCode) {
                              case 92:
                              case 34:
                              case 47:
                              case 98:
                              case 116:
                              case 110:
                              case 102:
                              case 114:
                                // Revive escaped control characters.
                                value += Unescapes[charCode];
                                Index++;
                                break;

                              case 117:
                                // `\u` marks the beginning of a Unicode escape sequence.
                                // Advance to the first character and validate the
                                // four-digit code point.
                                begin = ++Index;

                                for (position = Index + 4; Index < position; Index++) {
                                  charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                                  // insensitive) that form a single hexadecimal value.

                                  if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                                    // Invalid Unicode escape sequence.
                                    abort();
                                  }
                                } // Revive the escaped character.


                                value += fromCharCode("0x" + source.slice(begin, Index));
                                break;

                              default:
                                // Invalid escape sequence.
                                abort();
                            }
                          } else {
                            if (charCode == 34) {
                              // An unescaped double-quote character marks the end of the
                              // string.
                              break;
                            }

                            charCode = source.charCodeAt(Index);
                            begin = Index; // Optimize for the common case where a string is valid.

                            while (charCode >= 32 && charCode != 92 && charCode != 34) {
                              charCode = source.charCodeAt(++Index);
                            } // Append the string as-is.


                            value += source.slice(begin, Index);
                          }
                        }

                        if (source.charCodeAt(Index) == 34) {
                          // Advance to the next character and return the revived string.
                          Index++;
                          return value;
                        } // Unterminated string.


                        abort();

                      default:
                        // Parse numbers and literals.
                        begin = Index; // Advance past the negative sign, if one is specified.

                        if (charCode == 45) {
                          isSigned = true;
                          charCode = source.charCodeAt(++Index);
                        } // Parse an integer or floating-point value.


                        if (charCode >= 48 && charCode <= 57) {
                          // Leading zeroes are interpreted as octal literals.
                          if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                            // Illegal octal literal.
                            abort();
                          }

                          isSigned = false; // Parse the integer component.

                          for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++); // Floats cannot contain a leading decimal point; however, this
                          // case is already accounted for by the parser.


                          if (source.charCodeAt(Index) == 46) {
                            position = ++Index; // Parse the decimal component.

                            for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);

                            if (position == Index) {
                              // Illegal trailing decimal.
                              abort();
                            }

                            Index = position;
                          } // Parse exponents. The `e` denoting the exponent is
                          // case-insensitive.


                          charCode = source.charCodeAt(Index);

                          if (charCode == 101 || charCode == 69) {
                            charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                            // specified.

                            if (charCode == 43 || charCode == 45) {
                              Index++;
                            } // Parse the exponential component.


                            for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);

                            if (position == Index) {
                              // Illegal empty exponent.
                              abort();
                            }

                            Index = position;
                          } // Coerce the parsed value to a JavaScript number.


                          return +source.slice(begin, Index);
                        } // A negative sign may only precede numbers.


                        if (isSigned) {
                          abort();
                        } // `true`, `false`, and `null` literals.


                        if (source.slice(Index, Index + 4) == "true") {
                          Index += 4;
                          return true;
                        } else if (source.slice(Index, Index + 5) == "false") {
                          Index += 5;
                          return false;
                        } else if (source.slice(Index, Index + 4) == "null") {
                          Index += 4;
                          return null;
                        } // Unrecognized token.


                        abort();
                    }
                  } // Return the sentinel `$` character if the parser has reached the end
                  // of the source string.


                  return "$";
                }; // Internal: Parses a JSON `value` token.


                var get = function (value) {
                  var results, hasMembers;

                  if (value == "$") {
                    // Unexpected end of input.
                    abort();
                  }

                  if (typeof value == "string") {
                    if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                      // Remove the sentinel `@` character.
                      return value.slice(1);
                    } // Parse object and array literals.


                    if (value == "[") {
                      // Parses a JSON array, returning a new JavaScript array.
                      results = [];

                      for (;; hasMembers || (hasMembers = true)) {
                        value = lex(); // A closing square bracket marks the end of the array literal.

                        if (value == "]") {
                          break;
                        } // If the array literal contains elements, the current token
                        // should be a comma separating the previous element from the
                        // next.


                        if (hasMembers) {
                          if (value == ",") {
                            value = lex();

                            if (value == "]") {
                              // Unexpected trailing `,` in array literal.
                              abort();
                            }
                          } else {
                            // A `,` must separate each array element.
                            abort();
                          }
                        } // Elisions and leading commas are not permitted.


                        if (value == ",") {
                          abort();
                        }

                        results.push(get(value));
                      }

                      return results;
                    } else if (value == "{") {
                      // Parses a JSON object, returning a new JavaScript object.
                      results = {};

                      for (;; hasMembers || (hasMembers = true)) {
                        value = lex(); // A closing curly brace marks the end of the object literal.

                        if (value == "}") {
                          break;
                        } // If the object literal contains members, the current token
                        // should be a comma separator.


                        if (hasMembers) {
                          if (value == ",") {
                            value = lex();

                            if (value == "}") {
                              // Unexpected trailing `,` in object literal.
                              abort();
                            }
                          } else {
                            // A `,` must separate each object member.
                            abort();
                          }
                        } // Leading commas are not permitted, object property names must be
                        // double-quoted strings, and a `:` must separate each property
                        // name and value.


                        if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                          abort();
                        }

                        results[value.slice(1)] = get(lex());
                      }

                      return results;
                    } // Unexpected token encountered.


                    abort();
                  }

                  return value;
                }; // Internal: Updates a traversed object member.


                var update = function (source, property, callback) {
                  var element = walk(source, property, callback);

                  if (element === undef) {
                    delete source[property];
                  } else {
                    source[property] = element;
                  }
                }; // Internal: Recursively traverses a parsed JSON object, invoking the
                // `callback` function for each value. This is an implementation of the
                // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


                var walk = function (source, property, callback) {
                  var value = source[property],
                      length;

                  if (typeof value == "object" && value) {
                    // `forEach` can't be used to traverse an array in Opera <= 8.54
                    // because its `Object#hasOwnProperty` implementation returns `false`
                    // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
                    if (getClass.call(value) == arrayClass) {
                      for (length = value.length; length--;) {
                        update(value, length, callback);
                      }
                    } else {
                      forEach(value, function (property) {
                        update(value, property, callback);
                      });
                    }
                  }

                  return callback.call(source, property, value);
                }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


                exports.parse = function (source, callback) {
                  var result, value;
                  Index = 0;
                  Source = "" + source;
                  result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

                  if (lex() != "$") {
                    abort();
                  } // Reset the parser state.


                  Index = Source = null;
                  return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
                };
              }
            }

            exports["runInContext"] = runInContext;
            return exports;
          }

          if (freeExports && !isLoader) {
            // Export for CommonJS environments.
            runInContext(root, freeExports);
          } else {
            // Export for web browsers and JavaScript engines.
            var nativeJSON = root.JSON,
                previousJSON = root["JSON3"],
                isRestored = false;
            var JSON3 = runInContext(root, root["JSON3"] = {
              // Public: Restores the original value of the global `JSON` object and
              // returns a reference to the `JSON3` object.
              "noConflict": function () {
                if (!isRestored) {
                  isRestored = true;
                  root.JSON = nativeJSON;
                  root["JSON3"] = previousJSON;
                  nativeJSON = previousJSON = null;
                }

                return JSON3;
              }
            });
            root.JSON = {
              "parse": JSON3.parse,
              "stringify": JSON3.stringify
            };
          } // Export for asynchronous module loaders.


          if (isLoader) {
            define(function () {
              return JSON3;
            });
          }
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    59: [function (require, module, exports) {
      'use strict';

      var has = Object.prototype.hasOwnProperty;
      /**
       * Decode a URI encoded string.
       *
       * @param {String} input The URI encoded string.
       * @returns {String} The decoded string.
       * @api private
       */

      function decode(input) {
        return decodeURIComponent(input.replace(/\+/g, ' '));
      }
      /**
       * Simple query string parser.
       *
       * @param {String} query The query string that needs to be parsed.
       * @returns {Object}
       * @api public
       */


      function querystring(query) {
        var parser = /([^=?&]+)=?([^&]*)/g,
            result = {},
            part;

        while (part = parser.exec(query)) {
          var key = decode(part[1]),
              value = decode(part[2]); //
          // Prevent overriding of existing properties. This ensures that build-in
          // methods like `toString` or __proto__ are not overriden by malicious
          // querystrings.
          //

          if (key in result) continue;
          result[key] = value;
        }

        return result;
      }
      /**
       * Transform a query string to an object.
       *
       * @param {Object} obj Object that should be transformed.
       * @param {String} prefix Optional prefix.
       * @returns {String}
       * @api public
       */


      function querystringify(obj, prefix) {
        prefix = prefix || '';
        var pairs = []; //
        // Optionally prefix with a '?' if needed
        //

        if ('string' !== typeof prefix) prefix = '?';

        for (var key in obj) {
          if (has.call(obj, key)) {
            pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));
          }
        }

        return pairs.length ? prefix + pairs.join('&') : '';
      } //
      // Expose the module.
      //


      exports.stringify = querystringify;
      exports.parse = querystring;
    }, {}],
    60: [function (require, module, exports) {
      'use strict';
      /**
       * Check if we're required to add a port number.
       *
       * @see https://url.spec.whatwg.org/#default-port
       * @param {Number|String} port Port number we need to check
       * @param {String} protocol Protocol we need to check against.
       * @returns {Boolean} Is it a default port for the given protocol
       * @api private
       */

      module.exports = function required(port, protocol) {
        protocol = protocol.split(':')[0];
        port = +port;
        if (!port) return false;

        switch (protocol) {
          case 'http':
          case 'ws':
            return port !== 80;

          case 'https':
          case 'wss':
            return port !== 443;

          case 'ftp':
            return port !== 21;

          case 'gopher':
            return port !== 70;

          case 'file':
            return false;
        }

        return port !== 0;
      };
    }, {}],
    61: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var required = require('requires-port'),
            qs = require('querystringify'),
            protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,
            slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
        /**
         * These are the parse rules for the URL parser, it informs the parser
         * about:
         *
         * 0. The char it Needs to parse, if it's a string it should be done using
         *    indexOf, RegExp using exec and NaN means set as current value.
         * 1. The property we should set when parsing this value.
         * 2. Indication if it's backwards or forward parsing, when set as number it's
         *    the value of extra chars that should be split off.
         * 3. Inherit from location if non existing in the parser.
         * 4. `toLowerCase` the resulting value.
         */


        var rules = [['#', 'hash'], // Extract from the back.
        ['?', 'query'], // Extract from the back.
        function sanitize(address) {
          // Sanitize what is left of the address
          return address.replace('\\', '/');
        }, ['/', 'pathname'], // Extract from the back.
        ['@', 'auth', 1], // Extract from the front.
        [NaN, 'host', undefined, 1, 1], // Set left over value.
        [/:(\d+)$/, 'port', undefined, 1], // RegExp the back.
        [NaN, 'hostname', undefined, 1, 1] // Set left over.
        ];
        /**
         * These properties should not be copied or inherited from. This is only needed
         * for all non blob URL's as a blob URL does not include a hash, only the
         * origin.
         *
         * @type {Object}
         * @private
         */

        var ignore = {
          hash: 1,
          query: 1
        };
        /**
         * The location object differs when your code is loaded through a normal page,
         * Worker or through a worker using a blob. And with the blobble begins the
         * trouble as the location object will contain the URL of the blob, not the
         * location of the page where our code is loaded in. The actual origin is
         * encoded in the `pathname` so we can thankfully generate a good "default"
         * location from it so we can generate proper relative URL's again.
         *
         * @param {Object|String} loc Optional default location object.
         * @returns {Object} lolcation object.
         * @public
         */

        function lolcation(loc) {
          var location = global && global.location || {};
          loc = loc || location;
          var finaldestination = {},
              type = typeof loc,
              key;

          if ('blob:' === loc.protocol) {
            finaldestination = new Url(unescape(loc.pathname), {});
          } else if ('string' === type) {
            finaldestination = new Url(loc, {});

            for (key in ignore) delete finaldestination[key];
          } else if ('object' === type) {
            for (key in loc) {
              if (key in ignore) continue;
              finaldestination[key] = loc[key];
            }

            if (finaldestination.slashes === undefined) {
              finaldestination.slashes = slashes.test(loc.href);
            }
          }

          return finaldestination;
        }
        /**
         * @typedef ProtocolExtract
         * @type Object
         * @property {String} protocol Protocol matched in the URL, in lowercase.
         * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
         * @property {String} rest Rest of the URL that is not part of the protocol.
         */

        /**
         * Extract protocol information from a URL with/without double slash ("//").
         *
         * @param {String} address URL we want to extract from.
         * @return {ProtocolExtract} Extracted information.
         * @private
         */


        function extractProtocol(address) {
          var match = protocolre.exec(address);
          return {
            protocol: match[1] ? match[1].toLowerCase() : '',
            slashes: !!match[2],
            rest: match[3]
          };
        }
        /**
         * Resolve a relative URL pathname against a base URL pathname.
         *
         * @param {String} relative Pathname of the relative URL.
         * @param {String} base Pathname of the base URL.
         * @return {String} Resolved pathname.
         * @private
         */


        function resolve(relative, base) {
          var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
              i = path.length,
              last = path[i - 1],
              unshift = false,
              up = 0;

          while (i--) {
            if (path[i] === '.') {
              path.splice(i, 1);
            } else if (path[i] === '..') {
              path.splice(i, 1);
              up++;
            } else if (up) {
              if (i === 0) unshift = true;
              path.splice(i, 1);
              up--;
            }
          }

          if (unshift) path.unshift('');
          if (last === '.' || last === '..') path.push('');
          return path.join('/');
        }
        /**
         * The actual URL instance. Instead of returning an object we've opted-in to
         * create an actual constructor as it's much more memory efficient and
         * faster and it pleases my OCD.
         *
         * It is worth noting that we should not use `URL` as class name to prevent
         * clashes with the global URL instance that got introduced in browsers.
         *
         * @constructor
         * @param {String} address URL we want to parse.
         * @param {Object|String} location Location defaults for relative paths.
         * @param {Boolean|Function} parser Parser for the query string.
         * @private
         */


        function Url(address, location, parser) {
          if (!(this instanceof Url)) {
            return new Url(address, location, parser);
          }

          var relative,
              extracted,
              parse,
              instruction,
              index,
              key,
              instructions = rules.slice(),
              type = typeof location,
              url = this,
              i = 0; //
          // The following if statements allows this module two have compatibility with
          // 2 different API:
          //
          // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
          //    where the boolean indicates that the query string should also be parsed.
          //
          // 2. The `URL` interface of the browser which accepts a URL, object as
          //    arguments. The supplied object will be used as default values / fall-back
          //    for relative paths.
          //

          if ('object' !== type && 'string' !== type) {
            parser = location;
            location = null;
          }

          if (parser && 'function' !== typeof parser) parser = qs.parse;
          location = lolcation(location); //
          // Extract protocol information before running the instructions.
          //

          extracted = extractProtocol(address || '');
          relative = !extracted.protocol && !extracted.slashes;
          url.slashes = extracted.slashes || relative && location.slashes;
          url.protocol = extracted.protocol || location.protocol || '';
          address = extracted.rest; //
          // When the authority component is absent the URL starts with a path
          // component.
          //

          if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

          for (; i < instructions.length; i++) {
            instruction = instructions[i];

            if (typeof instruction === 'function') {
              address = instruction(address);
              continue;
            }

            parse = instruction[0];
            key = instruction[1];

            if (parse !== parse) {
              url[key] = address;
            } else if ('string' === typeof parse) {
              if (~(index = address.indexOf(parse))) {
                if ('number' === typeof instruction[2]) {
                  url[key] = address.slice(0, index);
                  address = address.slice(index + instruction[2]);
                } else {
                  url[key] = address.slice(index);
                  address = address.slice(0, index);
                }
              }
            } else if (index = parse.exec(address)) {
              url[key] = index[1];
              address = address.slice(0, index.index);
            }

            url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //
            // Hostname, host and protocol should be lowercased so they can be used to
            // create a proper `origin`.
            //

            if (instruction[4]) url[key] = url[key].toLowerCase();
          } //
          // Also parse the supplied query string in to an object. If we're supplied
          // with a custom parser as function use that instead of the default build-in
          // parser.
          //


          if (parser) url.query = parser(url.query); //
          // If the URL is relative, resolve the pathname against the base URL.
          //

          if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
            url.pathname = resolve(url.pathname, location.pathname);
          } //
          // We should not add port numbers if they are already the default port number
          // for a given protocol. As the host also contains the port number we're going
          // override it with the hostname which contains no port number.
          //


          if (!required(url.port, url.protocol)) {
            url.host = url.hostname;
            url.port = '';
          } //
          // Parse down the `auth` for the username and password.
          //


          url.username = url.password = '';

          if (url.auth) {
            instruction = url.auth.split(':');
            url.username = instruction[0] || '';
            url.password = instruction[1] || '';
          }

          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //
          // The href is just the compiled result.
          //

          url.href = url.toString();
        }
        /**
         * This is convenience method for changing properties in the URL instance to
         * insure that they all propagate correctly.
         *
         * @param {String} part          Property we need to adjust.
         * @param {Mixed} value          The newly assigned value.
         * @param {Boolean|Function} fn  When setting the query, it will be the function
         *                               used to parse the query.
         *                               When setting the protocol, double slash will be
         *                               removed from the final url if it is true.
         * @returns {URL} URL instance for chaining.
         * @public
         */


        function set(part, value, fn) {
          var url = this;

          switch (part) {
            case 'query':
              if ('string' === typeof value && value.length) {
                value = (fn || qs.parse)(value);
              }

              url[part] = value;
              break;

            case 'port':
              url[part] = value;

              if (!required(value, url.protocol)) {
                url.host = url.hostname;
                url[part] = '';
              } else if (value) {
                url.host = url.hostname + ':' + value;
              }

              break;

            case 'hostname':
              url[part] = value;
              if (url.port) value += ':' + url.port;
              url.host = value;
              break;

            case 'host':
              url[part] = value;

              if (/:\d+$/.test(value)) {
                value = value.split(':');
                url.port = value.pop();
                url.hostname = value.join(':');
              } else {
                url.hostname = value;
                url.port = '';
              }

              break;

            case 'protocol':
              url.protocol = value.toLowerCase();
              url.slashes = !fn;
              break;

            case 'pathname':
            case 'hash':
              if (value) {
                var char = part === 'pathname' ? '/' : '#';
                url[part] = value.charAt(0) !== char ? char + value : value;
              } else {
                url[part] = value;
              }

              break;

            default:
              url[part] = value;
          }

          for (var i = 0; i < rules.length; i++) {
            var ins = rules[i];
            if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
          }

          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
          url.href = url.toString();
          return url;
        }
        /**
         * Transform the properties back in to a valid and full URL string.
         *
         * @param {Function} stringify Optional query stringify function.
         * @returns {String} Compiled version of the URL.
         * @public
         */


        function toString(stringify) {
          if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
          var query,
              url = this,
              protocol = url.protocol;
          if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
          var result = protocol + (url.slashes ? '//' : '');

          if (url.username) {
            result += url.username;
            if (url.password) result += ':' + url.password;
            result += '@';
          }

          result += url.host + url.pathname;
          query = 'object' === typeof url.query ? stringify(url.query) : url.query;
          if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
          if (url.hash) result += url.hash;
          return result;
        }

        Url.prototype = {
          set: set,
          toString: toString
        }; //
        // Expose the URL parser and some additional properties that might be useful for
        // others or testing.
        //

        Url.extractProtocol = extractProtocol;
        Url.location = lolcation;
        Url.qs = qs;
        module.exports = Url;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "querystringify": 59,
      "requires-port": 60
    }]
  }, {}, [1])(1);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/global.js */ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/strip-ansi/3.0.1/node_modules/strip-ansi/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/strip-ansi/3.0.1/node_modules/strip-ansi/index.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/.pnpm/registry.npmjs.org/ansi-regex/2.1.1/node_modules/ansi-regex/index.js")();

module.exports = function (str) {
  return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/url.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/url.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var punycode = __webpack_require__(/*! punycode */ "./node_modules/.pnpm/registry.npmjs.org/punycode/1.4.1/node_modules/punycode/punycode.js");

var util = __webpack_require__(/*! ./util */ "./node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.


var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__(/*! querystring */ "./node_modules/.pnpm/registry.npmjs.org/querystring-es3/0.2.1/node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];

      if (simplePath[2]) {
        this.search = simplePath[2];

        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }

      return this;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    this.parseHost(); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);

      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);

    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }

  if (rest) this.pathname = rest;

  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  } //to support http.request


  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  this.href = this.format();
  return this;
}; // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift()));

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      this.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) this.hostname = host;
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/util.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/util.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function (arg) {
    return typeof arg === 'string';
  },
  isObject: function (arg) {
    return typeof arg === 'object' && arg !== null;
  },
  isNull: function (arg) {
    return arg === null;
  },
  isNullOrUndefined: function (arg) {
    return arg == null;
  }
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/BaseClient.js ***!
  \***********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = /*#__PURE__*/function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }

  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);

  return BaseClient;
}();

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/SockJSClient.js ***!
  \*************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/.pnpm/registry.npmjs.org/sockjs-client/1.4.0/node_modules/sockjs-client/dist/sockjs.js");

var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/BaseClient.js");

module.exports = /*#__PURE__*/function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);

  function SockJSClient(url) {
    var _this;

    _classCallCheck(this, SockJSClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SockJSClient).call(this));
    _this.sock = new SockJS(url);

    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };

    return _this;
  }

  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);

  return SockJSClient;
}(BaseClient);

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/index.js?http://localhost:9000":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client?http://localhost:9000 ***!
  \***********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {
/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/.pnpm/registry.npmjs.org/strip-ansi/3.0.1/node_modules/strip-ansi/index.js");

var socket = __webpack_require__(/*! ./socket */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/socket.js");

var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/overlay.js");

var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log,
    setLogLevel = _require.setLogLevel;

var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/sendMessage.js");

var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/reloadApp.js");

var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/createSocketUrl.js");

var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});

if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}

var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack/hot sync ^\\.\\/log$");

    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }

    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }

    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');

    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });

    sendMessage('Warnings', strippedWarnings);

    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }

    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');

    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });

    sendMessage('Errors', strippedErrors);

    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }

    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }

    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
/* WEBPACK VAR INJECTION */}.call(this, "?http://localhost:9000"))

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/overlay.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/overlay.js ***!
  \************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

var ansiHTML = __webpack_require__(/*! ansi-html */ "./node_modules/.pnpm/registry.npmjs.org/ansi-html/0.0.7/node_modules/ansi-html/index.js");

var _require = __webpack_require__(/*! html-entities */ "./node_modules/.pnpm/registry.npmjs.org/html-entities/1.3.1/node_modules/html-entities/lib/index.js"),
    AllHtmlEntities = _require.AllHtmlEntities;

var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.


  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.


  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.


function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).


function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}

module.exports = {
  clear: clear,
  showMessage: showMessage
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/socket.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/socket.js ***!
  \***********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_dev_server_client__) {
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};

module.exports = socket;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/SockJSClient.js */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/clients/SockJSClient.js")))

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/createSocketUrl.js ***!
  \**************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global self */

var url = __webpack_require__(/*! url */ "./node_modules/.pnpm/registry.npmjs.org/url/0.11.0/node_modules/url/url.js");

var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

function createSocketUrl(resourceQuery, currentLocation) {
  var urlParts;

  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    // format is like `?http://0.0.0.0:8096&sockPort=8097&sockHost=localhost`
    urlParts = url.parse(resourceQuery // strip leading `?` from query string to get a valid URL
    .substr(1) // replace first `&` with `?` to have a valid query string
    .replace('&', '?'), true);
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();
    urlParts = url.parse(scriptHost || '/', true, true);
  } // Use parameter to allow passing location in unit tests


  if (typeof currentLocation === 'string' && currentLocation !== '') {
    currentLocation = url.parse(currentLocation);
  } else {
    currentLocation = self.location;
  }

  return getSocketUrl(urlParts, currentLocation);
}
/*
 * Gets socket URL based on Script Source/Location
 * (scriptSrc: URL, location: URL) -> URL
 */


function getSocketUrl(urlParts, loc) {
  var auth = urlParts.auth,
      query = urlParts.query;
  var hostname = urlParts.hostname,
      protocol = urlParts.protocol,
      port = urlParts.port;

  if (!port || port === '0') {
    port = loc.port;
  } // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384


  if ((hostname === '0.0.0.0' || hostname === '::') && loc.hostname && loc.protocol.indexOf('http') === 0) {
    hostname = loc.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.


  if (hostname && hostname !== '127.0.0.1' && (loc.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = loc.protocol;
  } // all of these sock url params are optionally passed in through
  // resourceQuery, so we need to fall back to the default if
  // they are not provided


  var sockHost = query.sockHost || hostname;
  var sockPath = query.sockPath || '/sockjs-node';
  var sockPort = query.sockPort || port;

  if (sockPort === 'location') {
    sockPort = loc.port;
  }

  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}

module.exports = createSocketUrl;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
  \*********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.


  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];

  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.


  throw new Error('[WDS] Failed to get current script source.');
}

module.exports = getCurrentScriptSource;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/log.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/log.js ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var log = __webpack_require__(/*! loglevel */ "./node_modules/.pnpm/registry.npmjs.org/loglevel/1.6.8/node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');

var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);

function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;

    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}

module.exports = {
  log: log,
  setLogLevel: setLogLevel
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
  \********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global WorkerGlobalScope self */

var _require = __webpack_require__(/*! ./log */ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log;

function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
      hot = _ref.hot,
      liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
      currentHash = _ref2.currentHash;

  if (isUnloading || !hotReload) {
    return;
  }

  if (hot) {
    log.info('[WDS] App hot update...');

    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/hot/emitter.js");

    hotEmitter.emit('webpackHotUpdate', currentHash);

    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

      var intervalId = self.setInterval(function () {
        if (rootWindow.location.protocol !== 'about:') {
          // reload immediately if protocol is valid
          applyReload(rootWindow, intervalId);
        } else {
          rootWindow = rootWindow.parent;

          if (rootWindow.parent === rootWindow) {
            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
            applyReload(rootWindow, intervalId);
          }
        }
      });
    }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

module.exports = reloadApp;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \**********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.

function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}

module.exports = sendMsg;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack/hot sync ^\\.\\/log$":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack/hot sync nonrecursive ^\.\/log$ ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/hot/emitter.js":
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/.pnpm/registry.npmjs.org/events/3.1.0/node_modules/events/events.js");

module.exports = new EventEmitter();

/***/ }),

/***/ "./node_modules/.pnpm/registry.npmjs.org/webpack/4.43.0_webpack@4.43.0/node_modules/webpack/hot/log.js":
/*!****************************!*\
  !*** (webpack)/hot/log.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
  var shouldLog = logLevel === "info" && level === "info" || ["info", "warning"].indexOf(logLevel) >= 0 && level === "warning" || ["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error";
  return shouldLog;
}

function logGroup(logFn) {
  return function (level, msg) {
    if (shouldLog(level)) {
      logFn(msg);
    }
  };
}

module.exports = function (level, msg) {
  if (shouldLog(level)) {
    if (level === "info") {
      console.log(msg);
    } else if (level === "warning") {
      console.warn(msg);
    } else if (level === "error") {
      console.error(msg);
    }
  }
};
/* eslint-disable node/no-unsupported-features/node-builtins */


var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);
module.exports.groupCollapsed = logGroup(groupCollapsed);
module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function (level) {
  logLevel = level;
};

module.exports.formatError = function (err) {
  var message = err.message;
  var stack = err.stack;

  if (!stack) {
    return message;
  } else if (stack.indexOf(message) < 0) {
    return message + "\n" + stack;
  } else {
    return stack;
  }
};

/***/ }),

/***/ "./src/debug.ts":
/*!**********************!*\
  !*** ./src/debug.ts ***!
  \**********************/
/*! exports provided: FORMAT, SNAPSHOT, hasFormat, snapshot, formatUnknown, formatFormattable, formatFormatted */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FORMAT", function() { return FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SNAPSHOT", function() { return SNAPSHOT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasFormat", function() { return hasFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snapshot", function() { return snapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatUnknown", function() { return formatUnknown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatFormattable", function() { return formatFormattable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatFormatted", function() { return formatFormatted; });
const FORMAT = Symbol("FORMAT");
const SNAPSHOT = Symbol("CLONE");
function hasFormat(input) {
  return input !== null && typeof input === "object" && FORMAT in input;
}
function snapshot(value) {
  if (hasFormat(value)) {
    return value[SNAPSHOT]();
  } else {
    let clone = JSON.parse(JSON.stringify(value));
    return {
      [FORMAT]() {
        return {
          type: "json",
          value: clone
        };
      },

      [SNAPSHOT]() {
        return this;
      }

    };
  }
}
function formatUnknown(value) {
  if (hasFormat(value)) {
    let result = value[FORMAT]();
    return formatFormatted(result);
  } else {
    return formatJSON(value);
  }
}
function formatFormattable(formattable) {
  if (typeof formattable === "string") {
    return formattable;
  } else {
    let result = formattable[FORMAT]();

    if (result.type === "raw") {
      return result.value;
    } else {
      return formatJSON(result.value);
    }
  }
}
function formatFormatted(value) {
  if (value.type === "json") {
    return formatJSON(value.value);
  } else {
    return value.value;
  }
}

function formatJSON(input) {
  if (input === null || input === undefined) {
    return JSON.stringify(input);
  } else {
    return JSON.stringify(input).replace(/\\?"/g, "'").replace(/'(<.*?>)'/, "$1");
  }
}

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: FORMAT, SNAPSHOT, hasFormat, snapshot, formatUnknown, formatFormattable, formatFormatted, parse, baseErr, isBaseErr, isBaseOk, isBaseResult, baseOk, parseErr, parseOk, PureEvaluatorImpl, StatefulEvaluatorImpl, IteratorEvaluator, printAST, toIndented, trunc, formatDebuggable, WS, STRING, NUMBER, SEXP, EQ, NAMED, SPACED_TOKENS, INTERPOLATE, EXPRESSION, Logger, LoggingType, CONTENT, TOP_LEVEL, read, serializeRoot, serializeNode, Snippet, ok, err, fatalError, span, range, isSpan, getSpan, slice, combinators, multi, tokens, ast, r, a, utils, ops */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _parser_ast_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/ast-builder */ "./src/parser/ast-builder.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _parser_ast_builder__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _parser_node_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser/node-types */ "./src/parser/node-types.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "ast", function() { return _parser_node_types__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _parser_shapes_core_operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser/shapes/core-operations */ "./src/parser/shapes/core-operations.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "ops", function() { return _parser_shapes_core_operations__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _read_combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./read/combinators */ "./src/read/combinators.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "combinators", function() { return _read_combinators__WEBPACK_IMPORTED_MODULE_3__; });
/* harmony import */ var _read_multi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./read/multi */ "./src/read/multi.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "multi", function() { return _read_multi__WEBPACK_IMPORTED_MODULE_4__; });
/* harmony import */ var _read_token_builder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./read/token-builder */ "./src/read/token-builder.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "r", function() { return _read_token_builder__WEBPACK_IMPORTED_MODULE_5__; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./read/tokens */ "./src/read/tokens.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "tokens", function() { return _read_tokens__WEBPACK_IMPORTED_MODULE_6__; });
/* harmony import */ var _read_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./read/utils */ "./src/read/utils.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "utils", function() { return _read_utils__WEBPACK_IMPORTED_MODULE_7__; });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./debug */ "./src/debug.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FORMAT", function() { return _debug__WEBPACK_IMPORTED_MODULE_8__["FORMAT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SNAPSHOT", function() { return _debug__WEBPACK_IMPORTED_MODULE_8__["SNAPSHOT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasFormat", function() { return _debug__WEBPACK_IMPORTED_MODULE_8__["hasFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "snapshot", function() { return _debug__WEBPACK_IMPORTED_MODULE_8__["snapshot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatUnknown", function() { return _debug__WEBPACK_IMPORTED_MODULE_8__["formatUnknown"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatFormattable", function() { return _debug__WEBPACK_IMPORTED_MODULE_8__["formatFormattable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatFormatted", function() { return _debug__WEBPACK_IMPORTED_MODULE_8__["formatFormatted"]; });

/* harmony import */ var _parser_parse__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parser/parse */ "./src/parser/parse.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _parser_parse__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _parser_shape__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parser/shape */ "./src/parser/shape.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "baseErr", function() { return _parser_shape__WEBPACK_IMPORTED_MODULE_10__["err"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isBaseErr", function() { return _parser_shape__WEBPACK_IMPORTED_MODULE_10__["isErr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isBaseOk", function() { return _parser_shape__WEBPACK_IMPORTED_MODULE_10__["isOk"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isBaseResult", function() { return _parser_shape__WEBPACK_IMPORTED_MODULE_10__["isResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "baseOk", function() { return _parser_shape__WEBPACK_IMPORTED_MODULE_10__["ok"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseErr", function() { return _parser_shape__WEBPACK_IMPORTED_MODULE_10__["parseErr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseOk", function() { return _parser_shape__WEBPACK_IMPORTED_MODULE_10__["parseOk"]; });

/* harmony import */ var _parser_shapes_iterator_evaluator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parser/shapes/iterator-evaluator */ "./src/parser/shapes/iterator-evaluator.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PureEvaluatorImpl", function() { return _parser_shapes_iterator_evaluator__WEBPACK_IMPORTED_MODULE_11__["PureEvaluatorImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StatefulEvaluatorImpl", function() { return _parser_shapes_iterator_evaluator__WEBPACK_IMPORTED_MODULE_11__["StatefulEvaluatorImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IteratorEvaluator", function() { return _parser_shapes_iterator_evaluator__WEBPACK_IMPORTED_MODULE_11__["IteratorEvaluator"]; });

/* harmony import */ var _parser_shapes_print__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parser/shapes/print */ "./src/parser/shapes/print.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "printAST", function() { return _parser_shapes_print__WEBPACK_IMPORTED_MODULE_12__["printAST"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toIndented", function() { return _parser_shapes_print__WEBPACK_IMPORTED_MODULE_12__["toIndented"]; });

/* harmony import */ var _read_debug__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./read/debug */ "./src/read/debug.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trunc", function() { return _read_debug__WEBPACK_IMPORTED_MODULE_13__["trunc"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatDebuggable", function() { return _read_debug__WEBPACK_IMPORTED_MODULE_13__["formatDebuggable"]; });

/* harmony import */ var _read_hbs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./read/hbs */ "./src/read/hbs.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WS", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["WS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "STRING", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["STRING"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NUMBER", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["NUMBER"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SEXP", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["SEXP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EQ", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["EQ"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NAMED", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["NAMED"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SPACED_TOKENS", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["SPACED_TOKENS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "INTERPOLATE", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["INTERPOLATE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EXPRESSION", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_14__["EXPRESSION"]; });

/* harmony import */ var _read_logger__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./read/logger */ "./src/read/logger.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return _read_logger__WEBPACK_IMPORTED_MODULE_15__["Logger"]; });

/* harmony import */ var _read_read__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./read/read */ "./src/read/read.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LoggingType", function() { return _read_read__WEBPACK_IMPORTED_MODULE_16__["LoggingType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CONTENT", function() { return _read_read__WEBPACK_IMPORTED_MODULE_16__["CONTENT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TOP_LEVEL", function() { return _read_read__WEBPACK_IMPORTED_MODULE_16__["TOP_LEVEL"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "read", function() { return _read_read__WEBPACK_IMPORTED_MODULE_16__["read"]; });

/* harmony import */ var _read_serialize__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./read/serialize */ "./src/read/serialize.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeRoot", function() { return _read_serialize__WEBPACK_IMPORTED_MODULE_17__["serializeRoot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeNode", function() { return _read_serialize__WEBPACK_IMPORTED_MODULE_17__["serializeNode"]; });

/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./snippet */ "./src/snippet.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Snippet", function() { return _snippet__WEBPACK_IMPORTED_MODULE_18__["Snippet"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ok", function() { return _snippet__WEBPACK_IMPORTED_MODULE_18__["ok"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "err", function() { return _snippet__WEBPACK_IMPORTED_MODULE_18__["err"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fatalError", function() { return _snippet__WEBPACK_IMPORTED_MODULE_18__["fatalError"]; });

/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./span */ "./src/span.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "span", function() { return _span__WEBPACK_IMPORTED_MODULE_19__["span"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _span__WEBPACK_IMPORTED_MODULE_19__["range"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSpan", function() { return _span__WEBPACK_IMPORTED_MODULE_19__["isSpan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSpan", function() { return _span__WEBPACK_IMPORTED_MODULE_19__["getSpan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return _span__WEBPACK_IMPORTED_MODULE_19__["slice"]; });






























/***/ }),

/***/ "./src/parser/ast-builder.ts":
/*!***********************************!*\
  !*** ./src/parser/ast-builder.ts ***!
  \***********************************/
/*! exports provided: default, text, block, interpolate, call, ref, path, member, str, int, decimal, root */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AstBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "call", function() { return call; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ref", function() { return ref; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "path", function() { return path; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "member", function() { return member; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int", function() { return int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decimal", function() { return decimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-node */ "./src/parser/create-node.ts");
/* harmony import */ var _read_token_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../read/token-builder */ "./src/read/token-builder.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../span */ "./src/span.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class AstBuilder {
  constructor(pos = 0) {
    _defineProperty(this, "output", "");

    _defineProperty(this, "tokenBuilder", new _read_token_builder__WEBPACK_IMPORTED_MODULE_1__["TokenBuilder"]());

    this.pos = pos;
  }

  consume(chars) {
    this.output += chars;
    let start = this.pos;
    this.pos += chars.length;
    return {
      start,
      end: this.pos
    };
  }

  token(token) {
    this.tokenBuilder.pos = this.pos;
    this.tokenBuilder.updateOutput(this.output);
    let built = token(this.tokenBuilder);
    this.pos = this.tokenBuilder.pos;
    this.output = this.tokenBuilder.source;
    return built;
  }

  get source() {
    return this.output;
  }

}
function text(chars) {
  return builder => _create_node__WEBPACK_IMPORTED_MODULE_0__["text"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["text"](chars)));
}

function normalizeExpr(expr) {
  if (typeof expr === "string") {
    return ref(expr);
  } else {
    return expr;
  }
}

function normalizeCallPart(part) {
  if (typeof part === "string" && part.match(/^\s+$/)) {
    return {
      type: "ws",
      value: part
    };
  } else {
    return {
      type: "expr",
      value: normalizeExpr(part)
    };
  }
}

function extractCallParts(...parts) {
  let head;
  let beforeWS;
  let afterWS;
  let positional;
  let named;

  for (const part of parts) {
    if (Array.isArray(part)) {
      if (positional) {
        throw new Error("ASSERT: only pass one array (positional) to interpolate");
      } else {
        positional = curriedPositional(...part);
      }
    } else if (typeof part === "object") {
      if (named) {
        throw new Error("ASSERT: only pass one object (named) to interpolate");
      } else {
        named = curriedNamed(part);
      }
    } else if (typeof part === "function") {
      if (head) {
        throw new Error("ASSERT: only pass one head (expression or string) to interpolate");
      } else {
        head = part;
      }
    } else if (part.match(/^\s*$/)) {
      if (beforeWS && afterWS) {
        throw new Error("ASSERT: pass at most two whitespace to interpolate");
      } else if (beforeWS) {
        afterWS = _read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](part);
      } else {
        beforeWS = _read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](part);
      }
    } else {
      if (head) {
        throw new Error("ASSERT: only pass one head (expression or string) to interpolate");
      }

      head = ref(part);
    }
  }

  assert(head);
  return {
    beforeWS,
    head,
    positional,
    named,
    afterWS
  };
}

function curriedNamed(obj) {
  return builder => {
    let args = [];
    let leading = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](" "));

    for (let [key, value] of Object.entries(obj)) {
      let after = undefined;
      let name = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["id"](key));
      let expr;
      builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["eq"]);

      if (Array.isArray(value)) {
        expr = normalizeExpr(value[0])(builder);
        after = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](value[1]));
      } else {
        expr = normalizeExpr(value)(builder);
      }

      args.push(_create_node__WEBPACK_IMPORTED_MODULE_0__["namedArg"]({
        name,
        value: expr
      }, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(name, expr),
        after
      }));
    }

    return _create_node__WEBPACK_IMPORTED_MODULE_0__["namedArgs"](args, {
      span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(...args),
      before: leading
    });
  };
}

function curriedPositional(...parts) {
  return builder => {
    let args = [];
    let [first, ...rest] = parts;
    let currentWS = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](first));
    let start = builder.pos;

    for (let part of rest) {
      let result = normalizeCallPart(part);

      switch (result.type) {
        case "expr":
          {
            let node = normalizeExpr(part)(builder);

            if (currentWS) {
              node.before = currentWS;
              currentWS = undefined;
            }

            args.push(node);
            break;
          }

        case "ws":
          currentWS = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](result.value));
      }
    }

    let end = builder.pos;
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["positional"](args, {
      span: {
        start,
        end
      },
      ...(currentWS ? {
        after: currentWS
      } : {})
    });
  };
}

function block(parts) {
  let {
    head
  } = extractCallParts(...parts);
  let openBlock = callBody(...parts);
  return builder => {
    let openStart = builder.consume("{{#");
    let open = openBlock(builder);
    let openEnd = builder.consume("}}");
    let closeStart = builder.consume("{{/");
    let closeHead = head(builder);
    let closeEnd = builder.consume("}}");
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["block"]({
      open: _create_node__WEBPACK_IMPORTED_MODULE_0__["openBlock"]({ ...open
      }, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(openStart, openEnd)
      }),
      body: [],
      close: _create_node__WEBPACK_IMPORTED_MODULE_0__["closeBlock"](closeHead.span, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(closeStart, closeEnd)
      })
    }, {
      span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(openStart, closeEnd)
    });
  };
}
function interpolate(...parts) {
  return builder => {
    let start = builder.pos;
    builder.consume("{{");
    let body = callBody(...parts)(builder);
    builder.consume("}}");
    let end = builder.pos;
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["interpolate"](body, {
      span: {
        start,
        end
      }
    });
  };
}

function assert(input, cb) {
  let success = typeof cb === "function" ? cb(input) : !!input;

  if (success === false) {
    throw new Error("ASSERT");
  }
}

function call(...parts) {
  return builder => {
    let start = builder.pos;
    builder.consume("(");
    let body = callBody(...parts)(builder);
    builder.consume(")");
    let end = builder.pos;
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["call"](body, {
      span: {
        start,
        end
      }
    });
  };
}

function callBody(...parts) {
  return builder => {
    let {
      beforeWS,
      afterWS,
      head,
      positional,
      named
    } = extractCallParts(...parts);
    let before = beforeWS && builder.token(beforeWS);
    let headNode = head(builder);
    let positionalNodes = positional && positional(builder);
    let namedNode = named && named(builder);
    let after = afterWS && builder.token(afterWS);
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["callBody"]({
      head: headNode,
      positional: positionalNodes,
      named: namedNode
    }, {
      span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(headNode, positionalNodes, namedNode),
      before,
      after
    });
  };
}
/**
 * This function turns a string into the appropriate token typ:
 *
 * - `this` -> ThisReferenceToken
 * - `@` ID -> ArgReferenceToken
 * - ID -> VarReferenceToken
 */


function ref(name) {
  return builder => {
    if (name === "this") {
      return _create_node__WEBPACK_IMPORTED_MODULE_0__["thisReference"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["id"]("this")));
    } else if (name.startsWith("@")) {
      return _create_node__WEBPACK_IMPORTED_MODULE_0__["argReference"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["arg"](name)));
    } else {
      return _create_node__WEBPACK_IMPORTED_MODULE_0__["varReference"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["id"](name)));
    }
  };
}
function path(curriedHead, ...tailParts) {
  return builder => {
    let start = builder.pos;
    let head = normalizeExpr(curriedHead)(builder);
    let splitTail = tailParts.length === 1 ? tailParts[0].split(".") : tailParts;
    let tail = splitTail.map(part => {
      return member(part)(builder);
    });
    let end = builder.pos;
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["path"]({
      head,
      tail
    }, {
      start,
      end
    });
  };
}
function member(part) {
  return builder => {
    let dot = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["dot"]);
    let span = builder.consume(part);
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["member"](dot, span);
  };
}
/**
 *
 * @param body the outer contents of the string (like `"hello"`)
 */

function str(body) {
  return builder => {
    let tok = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["str"](body));
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["string"](tok, builder.source);
  };
}
function int(body) {
  return builder => {
    let tok = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["int"](body));
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["number"](tok, builder.source);
  };
}
function decimal(body) {
  return builder => {
    let tok = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["decimal"](body));
    return _create_node__WEBPACK_IMPORTED_MODULE_0__["number"](tok, builder.source);
  };
}
function root(...children) {
  let builder = new AstBuilder();
  let start = builder.pos;
  let out = children.map(child => child(builder));
  let end = builder.pos;
  return {
    root: _create_node__WEBPACK_IMPORTED_MODULE_0__["root"](out, Object(_span__WEBPACK_IMPORTED_MODULE_2__["span"])(start, end)),
    source: builder.source
  };
}

/***/ }),

/***/ "./src/parser/create-node.ts":
/*!***********************************!*\
  !*** ./src/parser/create-node.ts ***!
  \***********************************/
/*! exports provided: root, text, interpolate, blockParams, openBlock, closeBlock, block, string, number, thisReference, varReference, argReference, call, path, member, callBody, namedArg, namedArgs, positional, formatAstNode, extendNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatAstNode", function() { return formatAstNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendNode", function() { return extendNode; });
/* harmony import */ var _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodes/top-level */ "./src/parser/nodes/top-level.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "root", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["root"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "text", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["text"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["interpolate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blockParams", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["blockParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "openBlock", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["openBlock"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "closeBlock", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["closeBlock"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "block", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["block"]; });

/* harmony import */ var _nodes_expression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nodes/expression */ "./src/parser/nodes/expression.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "string", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["string"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "number", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["number"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "thisReference", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["thisReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "varReference", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["varReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argReference", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["argReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "call", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["call"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "path", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["path"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "member", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["member"]; });

/* harmony import */ var _nodes_call__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nodes/call */ "./src/parser/nodes/call.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "callBody", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["callBody"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "namedArg", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["namedArg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "namedArgs", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["namedArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "positional", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["positional"]; });




function formatAstNode(node) {
  return "<".concat(node.type, ":").concat(node.span.start, "..").concat(node.span.end, ">");
}
function extendNode(node, base) {
  return { ...node,
    ...base
  };
}

/***/ }),

/***/ "./src/parser/debug.ts":
/*!*****************************!*\
  !*** ./src/parser/debug.ts ***!
  \*****************************/
/*! exports provided: ParseTracer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParseTracer", function() { return ParseTracer; });
/* harmony import */ var _read_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../read/debug */ "./src/read/debug.ts");
/* harmony import */ var _read_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../read/utils */ "./src/read/utils.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shape */ "./src/parser/shape.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./create-node */ "./src/parser/create-node.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class ParseTracer {
  constructor(token) {
    _defineProperty(this, "stack", void 0);

    this.stack = [{
      shape: {
        desc: "root"
      },
      preToken: token,
      postToken: undefined,
      result: null,
      children: []
    }];
  }

  print(tokens, source) {
    let trace = this.trace;
    new PrintTracer(trace, tokens, source).print();
  }

  get trace() {
    if (this.stack.length !== 1) {
      throw new Error("ASSERT: can only get trace when the stack is empty");
    }

    return this.stack[0];
  }

  begin(preToken) {
    let trace = {
      shape: {
        desc: "begin"
      },
      preToken: preToken,
      postToken: undefined,
      result: null,
      children: []
    };
    let last = this.last;

    if (last) {
      if (last.children) {
        last.children.push(trace);
      } else {
        throw new Error("ASSERT: Can't add children to leaf: ".concat(last.shape.desc));
      }
    }

    this.stack.push(trace);
  }

  commit() {
    this.stackCheck("begin");
  }

  rollback() {
    let last = this.stackCheck("begin");
    last.failure = "rollback";
  }

  preInvoke(shape, token) {
    let trace = {
      shape,
      preToken: token,
      postToken: undefined,
      result: null,
      children: "isLeaf" in shape && shape.isLeaf === true ? undefined : []
    };
    let last = this.last;

    if (last) {
      if (last.children) {
        last.children.push(trace);
      } else {
        throw new Error("ASSERT: Can't add children to leaf: ".concat(last.shape.desc));
      }
    }

    this.stack.push(trace);
  }

  postInvoke(shape, result, postToken) {
    let last = this.stackCheck(shape.desc);
    last.result = result;
    last.postToken = postToken;
  }

  stackCheck(expected) {
    let last = Object(_read_utils__WEBPACK_IMPORTED_MODULE_1__["unwrap"])(this.stack.pop());

    if (last.shape.desc !== expected) {
      console.warn("unbalanced stack", "stack =", this.stack.map(s => s.shape.desc), "last =", last.shape.desc, "expected =", expected);
      throw new Error("ASSERT: unbalanced stack: stack=".concat(last.shape.desc, ", expected=").concat(expected));
    }

    return last;
  }

  postInvokeFailure(shape, reason) {
    let last = this.stackCheck(shape.desc);
    last.result = undefined;
    last.postToken = undefined;
    last.failure = reason;
  }

  get last() {
    if (this.stack.length === 0) {
      return null;
    } else {
      return this.stack[this.stack.length - 1];
    }
  }

}
const SUCCESS = "color: green";
const ERROR = "color: red";
const TRANSACTION_SUCCESS = "background-color: #6a6; color: white; font-weight: bold";
const TRANSACTION_FAILURE = "background-color: #a66; color: white; font-weight: bold";
const NORMAL = "color: #333";
const DIM = "color: #999";

class PrintTracer {
  constructor(trace, tokens, source, indent = 0) {
    this.trace = trace;
    this.tokens = tokens;
    this.source = source;
    this.indent = indent;
  }

  print() {
    if (this.trace.shape.desc === undefined) {
      debugger;
    }

    console.log("%c| ".concat(this.preSlice, " | ").concat(Object(_read_debug__WEBPACK_IMPORTED_MODULE_0__["truncString"])(this.details, 80), " | ").concat(this.postSlice), NORMAL, NORMAL, this.descStyle, DIM);

    if (this.trace.children) {
      for (let child of this.trace.children) {
        if (child.failure === "ignored") {
          continue;
        }

        new PrintTracer(child, this.tokens, this.source, this.indent + 1).print();
      }
    }
  }

  get details() {
    let retval = this.trace.shape.desc === "begin" ? "" : " \uD83E\uDC2A ".concat(this.formattedResult);
    return "%c".concat(" ".repeat(this.indent), "%c").concat(this.trace.shape.desc, "%c").concat(retval);
  }

  get preSlice() {
    return this.slice(this.trace.preToken);
  }

  get postSlice() {
    return this.slice(this.trace.postToken, 25);
  }

  slice(token, length = 13) {
    if (token) {
      let span = token.span;
      return Object(_read_debug__WEBPACK_IMPORTED_MODULE_0__["truncString"])(Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])({
        start: span.start,
        end: this.source.length
      }, this.source), length);
    } else {
      return Object(_read_debug__WEBPACK_IMPORTED_MODULE_0__["truncString"])("<eof>");
    }
  }

  get formattedResult() {
    return formatResult(this.trace.result);
  }

  get descStyle() {
    let result = this.trace.result;

    if (isResult(result)) {
      if (result.kind === "ok") {
        return SUCCESS;
      } else {
        return ERROR;
      }
    } else if (this.trace.failure === "rollback") {
      return TRANSACTION_FAILURE;
    } else if (this.trace.shape.desc === "begin") {
      return TRANSACTION_SUCCESS;
    } else {
      return SUCCESS;
    }
  }

}

function formatResult(result) {
  if (typeof result !== "object" || result === null) {
    return String(result);
  } else if (Array.isArray(result)) {
    if (result.length > 3) {
      return "[".concat(result.slice(0, 2).map(formatResult).join(", "), "...]");
    } else {
      return "[".concat(result.map(formatResult).join(", "), "]");
    }
  } else if (isResult(result)) {
    if (Object(_shape__WEBPACK_IMPORTED_MODULE_3__["isParseErr"])(result)) {
      return formatReason(result.reason);
    } else {
      return formatResult(result.value);
    }
  } else if (isNodeish(result)) {
    return Object(_create_node__WEBPACK_IMPORTED_MODULE_4__["formatAstNode"])(result);
  } else {
    console.log("not debuggable", result);
    return result + "";
  }
}

function formatReason(reason) {
  switch (reason.type) {
    case "empty":
      return "empty";

    case "lookahead":
      return "lookahead was ".concat(formatToken(reason.actual), ", expected ").concat(reason.expected);

    case "mismatch":
      return "expected ".concat(formatToken(reason.actual), ", got ").concat(reason.expected);

    case "not":
      return "expected not ".concat(formatResult(reason.result));

    case "rejected":
      return "rejected ".concat(formatToken(reason.token));

    case "unexpected-eof":
      return "unexpected eof";
  }
}

function formatToken(token) {
  if (token === "EOF") {
    return "EOF";
  } else {
    return token.type;
  }
}

function isNodeish(item) {
  if (typeof item === "object" && item !== null) {
    let obj = item;
    return "type" in obj && typeof obj.type === "string" && typeof obj.span === "object" && obj.span !== null && typeof obj.span.start === "number" && typeof obj.span.end === "number";
  } else {
    return false;
  }
}

function isResult(item) {
  if (typeof item === "object" && item !== null) {
    let obj = item;
    return "kind" in obj && obj.kind === "ok" || obj.kind === "err";
  } else {
    return false;
  }
}

/***/ }),

/***/ "./src/parser/node-types.ts":
/*!**********************************!*\
  !*** ./src/parser/node-types.ts ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node */ "./src/parser/node.ts");


/***/ }),

/***/ "./src/parser/node.ts":
/*!****************************!*\
  !*** ./src/parser/node.ts ***!
  \****************************/
/*! exports provided: AstNodeType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AstNodeType", function() { return AstNodeType; });
let AstNodeType;

(function (AstNodeType) {
  AstNodeType["Root"] = "Root";
  AstNodeType["Text"] = "Text";
  AstNodeType["Interpolate"] = "Interpolate";
  AstNodeType["NamedArgument"] = "NamedArgument";
  AstNodeType["NamedArguments"] = "NamedArguments";
  AstNodeType["PositionalArguments"] = "PositionalArguments";
  AstNodeType["Member"] = "Member";
  AstNodeType["CallBody"] = "CallBody";
  AstNodeType["OpenBlock"] = "OpenBlock";
  AstNodeType["BlockParams"] = "BlockParams";
  AstNodeType["CloseBlock"] = "CloseBlock";
  AstNodeType["Block"] = "Block";
  AstNodeType["Call"] = "Call";
  AstNodeType["Path"] = "Path";
  AstNodeType["String"] = "String";
  AstNodeType["Number"] = "Number";
  AstNodeType["ThisReference"] = "ThisReference";
  AstNodeType["VarReference"] = "VarReference";
  AstNodeType["ArgReference"] = "ArgReference";
})(AstNodeType || (AstNodeType = {}));

/***/ }),

/***/ "./src/parser/nodes/call.ts":
/*!**********************************!*\
  !*** ./src/parser/nodes/call.ts ***!
  \**********************************/
/*! exports provided: callBody, namedArg, namedArgs, positional */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "callBody", function() { return callBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "namedArg", function() { return namedArg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "namedArgs", function() { return namedArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "positional", function() { return positional; });
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node */ "./src/parser/node.ts");

function callBody({
  head,
  positional = null,
  named = null
}, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].CallBody,
    ...base,
    head,
    positional,
    named
  };
}
function namedArg({
  name,
  value
}, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].NamedArgument,
    ...base,
    name: name.span,
    value
  };
}
function namedArgs(args, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].NamedArguments,
    ...base,
    args
  };
}
function positional(args, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].PositionalArguments,
    ...base,
    args
  };
}

/***/ }),

/***/ "./src/parser/nodes/expression.ts":
/*!****************************************!*\
  !*** ./src/parser/nodes/expression.ts ***!
  \****************************************/
/*! exports provided: string, number, thisReference, varReference, argReference, call, path, member */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "string", function() { return string; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "number", function() { return number; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "thisReference", function() { return thisReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "varReference", function() { return varReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argReference", function() { return argReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "call", function() { return call; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "path", function() { return path; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "member", function() { return member; });
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node */ "./src/parser/node.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../span */ "./src/span.ts");
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../read/tokens */ "./src/read/tokens.ts");



function string(token, source) {
  let processed;
  let inner = Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.data, source);

  switch (token.quote) {
    case _read_tokens__WEBPACK_IMPORTED_MODULE_2__["QuoteType"].Double:
      processed = inner.replace("\\\"", "\"");
      break;

    case _read_tokens__WEBPACK_IMPORTED_MODULE_2__["QuoteType"].Single:
      processed = inner.replace("\\'", "'");
      break;
  }

  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].String,
    span: token.span,
    string: processed,
    token
  };
}
function number(token, source) {
  let wholeString = Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.head, source);
  let decimalString = token.tail ? Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.tail, source) : undefined;
  let wholeNumber = decimalString ? parseFloat("".concat(wholeString, ".").concat(decimalString)) : parseInt(wholeString, 10);
  let num = token.negative ? wholeNumber * -1 : wholeNumber;
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Number,
    span: token.span,
    number: num,
    token
  };
}
function thisReference(token) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].ThisReference,
    span: token.span
  };
}
function varReference(token) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].VarReference,
    span: token.span
  };
}
function argReference(token) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].ArgReference,
    span: token.span,
    token
  };
}
function call(body, {
  span,
  before,
  after
}) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Call,
    span,
    before,
    after,
    body
  };
}
function path({
  head,
  tail
}, span) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Path,
    span,
    head,
    tail
  };
} // TODO: Support other kinds of tails

function member(dot, span) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Member,
    dot,
    span
  };
}

/***/ }),

/***/ "./src/parser/nodes/top-level.ts":
/*!***************************************!*\
  !*** ./src/parser/nodes/top-level.ts ***!
  \***************************************/
/*! exports provided: root, text, interpolate, blockParams, openBlock, closeBlock, block */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blockParams", function() { return blockParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "openBlock", function() { return openBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeBlock", function() { return closeBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node */ "./src/parser/node.ts");

function root(children, span) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Root,
    span,
    children
  };
}
function text(token) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Text,
    span: token.span
  };
}
function interpolate(body, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Interpolate,
    ...base,
    body
  };
}
function blockParams(params, span) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].BlockParams,
    params,
    span
  };
}
function openBlock({
  head,
  positional = null,
  named = null,
  params = null
}, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].OpenBlock,
    ...base,
    head,
    positional,
    named,
    params
  };
}
function closeBlock(name, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].CloseBlock,
    ...base,
    name
  };
}
function block({
  open,
  body,
  close
}, base) {
  return {
    type: _node__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Block,
    ...base,
    open,
    body,
    close
  };
}

/***/ }),

/***/ "./src/parser/parse.ts":
/*!*****************************!*\
  !*** ./src/parser/parse.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return parse; });
/* harmony import */ var _read_read__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../read/read */ "./src/read/read.ts");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */ "./src/parser/debug.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./create-node */ "./src/parser/create-node.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shape */ "./src/parser/shape.ts");
/* harmony import */ var _shapes_top_level__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shapes/top-level */ "./src/parser/shapes/top-level.ts");
/* harmony import */ var _tokens_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tokens-iterator */ "./src/parser/tokens-iterator.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../span */ "./src/span.ts");







function parse({
  input,
  source,
  logging
}) {
  let tracer = new _debug__WEBPACK_IMPORTED_MODULE_1__["ParseTracer"](input);
  let iterator = new _tokens_iterator__WEBPACK_IMPORTED_MODULE_5__["default"](input.children, {
    source,
    tracer
  });

  try {
    let topLevel = _shapes_top_level__WEBPACK_IMPORTED_MODULE_4__["TopLevelArrow"].repeat().fallible().checkNext(_shape__WEBPACK_IMPORTED_MODULE_3__["ParserArrow"].start().eof()).ifOk(nodes => _create_node__WEBPACK_IMPORTED_MODULE_2__["root"](nodes, Object(_span__WEBPACK_IMPORTED_MODULE_6__["range"])(...nodes))).label("root");
    let state = iterator.arrowState;
    let [, root] = topLevel.invoke(state);
    return root;
  } finally {
    if (logging === _read_read__WEBPACK_IMPORTED_MODULE_0__["LoggingType"].Print) {
      tracer.print(iterator[_tokens_iterator__WEBPACK_IMPORTED_MODULE_5__["TOKENS"]], iterator.source);
    }
  }
}

/***/ }),

/***/ "./src/parser/shape.ts":
/*!*****************************!*\
  !*** ./src/parser/shape.ts ***!
  \*****************************/
/*! exports provided: ITERATOR_SOURCE, EXPAND, RESULT_KIND, parseOk, parseErr, fatalError, ok, err, isResult, isOk, isErr, isParseErr, mapResult, SOURCE, ParseEvaluator, ParserArrowEvaluateCore, token, source, recurse, ParserArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ITERATOR_SOURCE", function() { return ITERATOR_SOURCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXPAND", function() { return EXPAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESULT_KIND", function() { return RESULT_KIND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseOk", function() { return parseOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseErr", function() { return parseErr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fatalError", function() { return fatalError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ok", function() { return ok; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "err", function() { return err; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isResult", function() { return isResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOk", function() { return isOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isErr", function() { return isErr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isParseErr", function() { return isParseErr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapResult", function() { return mapResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SOURCE", function() { return SOURCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParseEvaluator", function() { return ParseEvaluator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParserArrowEvaluateCore", function() { return ParserArrowEvaluateCore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "token", function() { return token; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "source", function() { return source; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recurse", function() { return recurse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParserArrow", function() { return ParserArrow; });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug */ "./src/debug.ts");

const ITERATOR_SOURCE = Symbol("SOURCE");
const EXPAND = Symbol("EXPAND");
const RESULT_KIND = Symbol("RESULT_KIND");
function parseOk(value) {
  return {
    [RESULT_KIND]: "ok",
    kind: "ok",

    [_debug__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]() {
      return {
        type: "raw",
        value: "Ok(".concat(value, ")")
      };
    },

    [_debug__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
      return this;
    },

    value
  };
}
function parseErr(token, reason) {
  return {
    [RESULT_KIND]: "err",

    [_debug__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]() {
      return {
        type: "raw",
        value: "Err"
      };
    },

    [_debug__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
      return this;
    },

    kind: "err",
    token,
    reason,
    fatal: false
  };
}
function fatalError(token, reason) {
  return {
    [RESULT_KIND]: "err",

    [_debug__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]() {
      return {
        type: "raw",
        value: "Err"
      };
    },

    [_debug__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
      return this;
    },

    kind: "err",
    token,
    reason,
    fatal: true
  };
}
function ok(value) {
  return {
    [RESULT_KIND]: "ok",

    [_debug__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]() {
      return {
        type: "raw",
        value: "Ok(".concat(Object(_debug__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(value), ")")
      };
    },

    [_debug__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
      return this;
    },

    value
  };
}
function err(reason) {
  return {
    [RESULT_KIND]: "err",

    [_debug__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]() {
      return {
        type: "raw",
        value: "Err"
      };
    },

    [_debug__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
      return this;
    },

    reason
  };
}
function isResult(input) {
  if (typeof input === "object" && input !== null) {
    return RESULT_KIND in input;
  } else {
    return false;
  }
}
function isOk(input) {
  if (!isResult(input)) {
    throw new Error("ASSERT: Expected Result, got something else");
  }

  return input[RESULT_KIND] === "ok";
}
function isErr(input) {
  if (!isResult(input)) {
    throw new Error("ASSERT: Expected Result, got something else");
  }

  return input[RESULT_KIND] === "err";
}
function isParseErr(input) {
  return isErr(input);
}
function mapResult(result, callback) {
  if (isParseErr(result)) {
    return result;
  }

  return callback(result.value);
}
const SOURCE = parseOk(undefined);
class ParseEvaluator {
  constructor(state, arrow) {
    this.state = state;
    this.arrow = arrow;
  }

  evaluate(prev) {
    return this.arrow.evaluate(this, prev);
  }

  withState(callback) {
    let state = this.state;
    let [newState, result] = callback(state);
    this.state = newState;
    return result;
  }

}
class ParserArrowEvaluateCore {
  Id() {
    return new ParserArrow(new ParserArrowEvaluateCore(), (s, t) => [s, t]);
  }

  evalArr(callback) {
    return new ParserArrow(new ParserArrowEvaluateCore(), callback);
  }

  recurse(callback) {
    return this.evalArr((state, last) => {
      let arrow = callback();
      return arrow.invoke(state, last);
    });
  }

  Arr(callback) {
    return this.evalArr((state, last) => [state, callback(last)]);
  }

  zip(left, right) {
    return this.evalArr((state, [t, t2]) => {
      let [state2, u] = left.invoke(state, t);
      let [state3, u2] = right.invoke(state2, t2);
      return [state3, [u, u2]];
    });
  }

  andThen(left, right) {
    return this.evalArr((state, prev) => {
      let [state2, leftResult] = left.invoke(state, prev);
      return right.invoke(state2, leftResult);
    });
  }

  mergeNext(left, right) {
    return this.evalArr((state, prev) => {
      let [state2, u] = left.invoke(state, prev);
      let [state3, u2] = right.invoke(state2, prev);
      return [state3, [u, u2]];
    });
  }

  mergeAndThen(left, right) {
    return this.evalArr((state, prev) => {
      let [state2, u] = left.invoke(state, prev);
      let [state3, u2] = right.invoke(state2, u);
      return [state3, [u, u2]];
    });
  }

  iterate(arrow) {
    return this.evalArr((state, last) => {
      let currentState = state;
      let out = [];

      for (let item of last) {
        let [nextState, result] = arrow.invoke(currentState, item);
        out.push(result);
        currentState = nextState;
      }

      return [currentState, out];
    });
  }

  repeat(arrow) {
    return this.evalArr((state, input) => {
      let currentState = state;
      let [nextState, nextInput] = arrow.invoke(state, input);

      if (isErr(nextInput)) {
        return [nextState, []];
      }

      let out = [nextInput.value];
      currentState = nextState;
      loop(() => {
        let [nextState, nextInput] = arrow.invoke(currentState, input);

        if (isErr(nextInput)) {
          return "break";
        }

        currentState = nextState;
        out.push(nextInput.value);
      });
      return [currentState, out];
    });
  }

  Reduce(callback) {
    return this.evalArr((state, last) => {
      return [state, callback(last)];
    });
  }

  FallibleArr(ok, err) {
    return this.evalArr((state, last) => {
      if (isOk(last)) {
        return [state, ok(last.value)];
      } else {
        return [state, err(last)];
      }
    });
  }

  BothOk(arrow) {
    return this.evalArr((state, last) => {
      let [state2, [left, right]] = arrow.invoke(state, last);

      if (isOk(left) && isOk(right)) {
        return [state2, parseOk([left.value, right.value])];
      } else if (isOk(left)) {
        return [state2, right];
      } else {
        return [state2, left];
      }
    });
  }

  OrElse(left, right) {
    return this.evalArr((state, last) => {
      let [state2, prev] = left.invoke(state, last);

      if (isOk(prev)) {
        return [state2, prev];
      } else {
        return right.invoke(state2, last);
      }
    });
  }

  fallibleInput(arrow) {
    return this.evalArr((state, last) => {
      if (isOk(last)) {
        let [state2, result] = arrow.invoke(state, last.value);
        return [state2, parseOk(result)];
      } else {
        return [state, last];
      }
    });
  }

  Source() {
    return this.evalArr(state => [state, state[ITERATOR_SOURCE]]);
  }

  Atomic(arrow) {
    return this.evalArr((state, prev) => state.atomic(state2 => arrow.invoke(state2, prev)));
  }

  label(label, arrow) {
    return this.evalArr((state, prev) => state.label(label, state2 => arrow.invoke(state2, prev)));
  }

  parent(desc, tokenType, arrow) {
    return this.evalArr(state => [state, state.parent(desc, tokenType, arrow)]);
  }

  token(tokenType) {
    return this.evalArr(state => [state, state.next(tokenType, token => {
      if (token === undefined) {
        return parseErr("EOF", {
          type: "unexpected-eof"
        });
      }

      if (token.type === tokenType) {
        return parseOk(token);
      } else {
        return parseErr(token, {
          type: "mismatch",
          expected: tokenType,
          actual: token
        });
      }
    })]);
  }

  lookahead() {
    return this.evalArr(state => [state, state.lookahead()]);
  }

  eof() {
    return this.evalArr(state => [state, state.next("eof", token => {
      if (token === undefined) {
        return parseOk(undefined);
      } else {
        return parseErr(token, {
          type: "mismatch",
          expected: "EOF",
          actual: token
        });
      }
    })]);
  }

}
function token(type) {
  return ParserArrow.start().token(type);
}
function source() {
  return ParserArrow.start().source().fallible();
}
function recurse(callback) {
  return new ParserArrowEvaluateCore().recurse(callback);
}
class ParserArrow {
  static start() {
    return new ParserArrow(new ParserArrowEvaluateCore(), (s, t) => [s, t]);
  }

  constructor(core, start) {
    this.core = core;
    this.start = start;
  }

  evaluate(evaluator, prev) {
    return evaluator.withState(state => this.invoke(state, prev));
  }

  invoke(state, prev) {
    return this.start(state, prev);
  }

  iterate() {
    return this.core.iterate(this);
  }

  lift(callback) {
    return this.core.Arr(callback);
  }

  liftFallible(ifOk, ifErr) {
    return this.core.FallibleArr(ifOk, ifErr);
  }

  repeat() {
    return this.core.repeat(this.label("repeated")).label("repeat");
  }

  bothOk() {
    return this.core.BothOk(this);
  }

  andThen(arrow) {
    return this.core.andThen(this, arrow);
  }

  map(callback) {
    return this.core.andThen(this, this.core.Arr(callback));
  } // An adapter for cases where something assumes fallibility
  // but you have something infallible


  fallible() {
    return this.map(input => parseOk(input));
  }

  orElse(arrow) {
    return this.core.OrElse(this, arrow);
  }

  checkNext(arrow) {
    return this.mergeNext(arrow).ifOk(([left]) => left);
  }

  andCheck(arrow) {
    return this.core.mergeAndThen(this, arrow).bothOk().ifOk(([left]) => left);
  }

  ifOk(callback) {
    return this.core.andThen(this, this.core.FallibleArr(input => parseOk(callback(input)), err => err));
  }

  mergeNext(arrow) {
    return this.core.mergeNext(this, arrow).bothOk();
  }

  extend(key, arrow) {
    return this.mergeNext(arrow).ifOk(([left, right]) => {
      return { ...left,
        [key]: right
      };
    });
  }

  or(value) {
    return this.andThen(this.core.FallibleArr(input => input, () => value));
  } // convenient


  named(name) {
    return this.ifOk(val => {
      return {
        [name]: val
      };
    });
  }

  present() {
    return this.core.andThen(this, this.core.Arr(list => list.length > 0 ? parseOk(undefined) : parseErr("unknown", {
      type: "empty"
    })));
  }

  not() {
    return this.core.andThen(this, this.core.FallibleArr(input => parseErr("unknown", {
      type: "not",
      result: input
    }), _ => parseOk(undefined)));
  } // special parser combinators


  source() {
    return this.core.Source();
  }

  debug() {
    return this.core.andThen(this, this.core.Arr(input => {
      debugger;
      return input;
    }));
  }

  atomic() {
    return this.core.Atomic(this);
  }

  token(type) {
    return this.core.token(type);
  }

  eof() {
    return this.core.eof();
  }

  parent(desc, tokenType, arrow) {
    return this.core.parent(desc, tokenType, arrow);
  }

  label(label) {
    return this.core.label(label, this);
  }

  lookahead() {
    return this.core.lookahead();
  }

}

// Convenience function so I can avoid infinite loop pain during development
function loop(callback) {
  let count = 0;

  while (true) {
    count++;

    if (count > 1000) {
      throw new Error("likely infinite loop");
    }

    if (callback(count) === "break") {
      break;
    }
  }
}

/***/ }),

/***/ "./src/parser/shapes/core-operations.ts":
/*!**********************************************!*\
  !*** ./src/parser/shapes/core-operations.ts ***!
  \**********************************************/
/*! exports provided: Arrow, DelayedArrow, source, input, pure, zip, pipeline, mapResult, bothOk, allOk, firstOk, mapInput, merge, keepAndThen, repeat, state, reduce, evaluate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Arrow", function() { return Arrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DelayedArrow", function() { return DelayedArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "source", function() { return source; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "input", function() { return input; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pure", function() { return pure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipeline", function() { return pipeline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapResult", function() { return mapResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bothOk", function() { return bothOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allOk", function() { return allOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firstOk", function() { return firstOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapInput", function() { return mapInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keepAndThen", function() { return keepAndThen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "repeat", function() { return repeat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "state", function() { return state; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function() { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "evaluate", function() { return evaluate; });
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

class Arrow {
  static delay(callback) {
    return new DelayedArrow(() => {
      return callback().operation;
    });
  }

  constructor(operation) {
    this.operation = operation;
  }

  invoke(state, evaluator, input) {
    return evaluate(this.operation, state, input, evaluator);
  }

}
class DelayedArrow {
  constructor(operation) {
    _delayed.set(this, {
      writable: true,
      value: void 0
    });

    _operation.set(this, {
      writable: true,
      value: undefined
    });

    _classPrivateFieldSet(this, _delayed, operation);
  }

  get operation() {
    if (!_classPrivateFieldGet(this, _operation)) {
      _classPrivateFieldSet(this, _operation, _classPrivateFieldGet(this, _delayed).call(this));
    }

    return _classPrivateFieldGet(this, _operation);
  }

  invoke(state, evaluator, input) {
    return evaluate(this.operation, state, input, evaluator);
  }

} // PureEvaluator includes methods that can plausibly work
// in the absence of unknown state.

var _delayed = new WeakMap();

var _operation = new WeakMap();

function source(callback, label) {
  return new Arrow({
    type: "Source",
    callback,
    label
  });
} /// INPUT ///

/**
 * This is a placeholder operation for the input of an arrow
 */

function input(label) {
  return new Arrow({
    type: "Input",
    label
  });
} /// PURE ///

function pure(callback, label) {
  return new Arrow({
    type: "Pure",
    label,
    callback: callback
  });
} /// ZIP ///

function zip(left, right, label) {
  return new Arrow({
    type: "Zip",
    label,
    left,
    right
  });
} /// PIPELINE ///

function pipeline(left, right, label) {
  return new Arrow({
    type: "Pipeline",
    label,
    left,
    right
  });
} /// MAP RESULT ///

function mapResult(left, ifOk, ifErr, label) {
  return new Arrow({
    type: "MapResult",
    label,
    left,
    ifOk,
    ifErr
  });
} /// BOTH OK ///

function bothOk(left, right, label) {
  return new Arrow({
    type: "BothOk",
    label,
    left,
    right
  });
} /// ALL OK ///

function allOk(arrows, label) {
  return new Arrow({
    type: "AllOk",
    label,
    arrows
  });
} /// FIRST OK ///

function firstOk(left, right, label) {
  return new Arrow({
    type: "FirstOk",
    label,
    left,
    right
  });
} /// MAP INPUT ///

function mapInput(arrow, map, label) {
  return new Arrow({
    type: "MapInput",
    label,
    arrow,
    map
  });
} /// Merge ///

function merge(left, right, label) {
  return new Arrow({
    type: "Merge",
    label,
    left,
    right
  });
} /// KEEP AND THEN ///

function keepAndThen(left, right, label) {
  return new Arrow({
    type: "KeepAndThen",
    label,
    left,
    right
  });
} /// REPEAT ///

function repeat(callback, label) {
  return new Arrow({
    type: "Repeat",
    label,
    callback
  });
} /// STATE ///

function state(label) {
  return new Arrow({
    type: "State",
    label
  });
} /// REDUCE ///

function reduce(callback, label) {
  return new Arrow({
    type: "Reduce",
    label,
    callback
  });
} /// UTILITY TYPES ///

/// FUNCTIONS ///
function evaluate(op, state, input, evaluator) {
  return evaluator[op.type](state, input, op);
}

/***/ }),

/***/ "./src/parser/shapes/expression/args-ref.ts":
/*!**************************************************!*\
  !*** ./src/parser/shapes/expression/args-ref.ts ***!
  \**************************************************/
/*! exports provided: ArgRefArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArgRefArrow", function() { return ArgRefArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../create-node */ "./src/parser/create-node.ts");



const ArgRefArrow = _shape__WEBPACK_IMPORTED_MODULE_1__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Argument).ifOk(ref => Object(_create_node__WEBPACK_IMPORTED_MODULE_2__["argReference"])(ref)).label("ArgRef");

/***/ }),

/***/ "./src/parser/shapes/expression/number.ts":
/*!************************************************!*\
  !*** ./src/parser/shapes/expression/number.ts ***!
  \************************************************/
/*! exports provided: NumberArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberArrow", function() { return NumberArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../create-node */ "./src/parser/create-node.ts");



const NumberArrow = _shape__WEBPACK_IMPORTED_MODULE_1__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Number).named("token").extend("source", _shape__WEBPACK_IMPORTED_MODULE_1__["ParserArrow"].start().source().map(_shape__WEBPACK_IMPORTED_MODULE_1__["parseOk"])).ifOk(({
  token,
  source
}) => Object(_create_node__WEBPACK_IMPORTED_MODULE_2__["number"])(token, source)).label("Number");

/***/ }),

/***/ "./src/parser/shapes/expression/path.ts":
/*!**********************************************!*\
  !*** ./src/parser/shapes/expression/path.ts ***!
  \**********************************************/
/*! exports provided: ExpressionArrow, HeadArrow, PositionalArrow, NamedArgumentArrow, CallBodyArrow, SexpArrow, PathMemberArrow, PathHeadArrow, PathArrow, NamedArgumentsArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionArrow", function() { return ExpressionArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeadArrow", function() { return HeadArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionalArrow", function() { return PositionalArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedArgumentArrow", function() { return NamedArgumentArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CallBodyArrow", function() { return CallBodyArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SexpArrow", function() { return SexpArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathMemberArrow", function() { return PathMemberArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathHeadArrow", function() { return PathHeadArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathArrow", function() { return PathArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedArgumentsArrow", function() { return NamedArgumentsArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _nodes_expression__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nodes/expression */ "./src/parser/nodes/expression.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _internal_any__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/any */ "./src/parser/shapes/internal/any.ts");
/* harmony import */ var _args_ref__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./args-ref */ "./src/parser/shapes/expression/args-ref.ts");
/* harmony import */ var _var_ref__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./var-ref */ "./src/parser/shapes/expression/var-ref.ts");
/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./string */ "./src/parser/shapes/expression/string.ts");
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./number */ "./src/parser/shapes/expression/number.ts");
/* harmony import */ var _internal_ws__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../internal/ws */ "./src/parser/shapes/internal/ws.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../create-node */ "./src/parser/create-node.ts");











const ExpressionArrow = Object(_shape__WEBPACK_IMPORTED_MODULE_3__["recurse"])(() => Object(_internal_any__WEBPACK_IMPORTED_MODULE_4__["anyArrow"])([SexpArrow, _string__WEBPACK_IMPORTED_MODULE_7__["StringArrow"], _number__WEBPACK_IMPORTED_MODULE_8__["NumberArrow"], PathArrow]).label("Expression"));
const HeadArrow = Object(_shape__WEBPACK_IMPORTED_MODULE_3__["recurse"])(() => ExpressionArrow.label("Head"));
const PositionalArrow = Object(_shape__WEBPACK_IMPORTED_MODULE_3__["recurse"])(() => _internal_ws__WEBPACK_IMPORTED_MODULE_9__["WsArrow"].named("before").extend("expr", ExpressionArrow).ifOk(({
  before,
  expr
}) => Object(_create_node__WEBPACK_IMPORTED_MODULE_10__["extendNode"])(expr, {
  before
})).atomic().repeat().andThen(assertPresent()).ifOk(out => Object(_create_node__WEBPACK_IMPORTED_MODULE_10__["positional"])(out, {
  span: Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...out)
})).label("Positional"));
const NamedArgumentArrow = Object(_shape__WEBPACK_IMPORTED_MODULE_3__["recurse"])(() => _shape__WEBPACK_IMPORTED_MODULE_3__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Identifier).named("id").extend("eq", _shape__WEBPACK_IMPORTED_MODULE_3__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Eq)).extend("expr", ExpressionArrow).extend("trailingWS", _internal_ws__WEBPACK_IMPORTED_MODULE_9__["MaybeWsArrow"].fallible()).ifOk(({
  id,
  expr,
  trailingWS
}) => Object(_create_node__WEBPACK_IMPORTED_MODULE_10__["namedArg"])({
  name: id,
  value: expr
}, {
  span: Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(id, expr),
  after: trailingWS || undefined
})).label("NamedArgument"));
const CallBodyArrow = Object(_shape__WEBPACK_IMPORTED_MODULE_3__["recurse"])(() => _internal_ws__WEBPACK_IMPORTED_MODULE_9__["MaybeWsArrow"].fallible().named("before").extend("head", HeadArrow).extend("positional", PositionalArrow.or(null).fallible()).extend("named", NamedArgumentsArrow.or(null).fallible()).extend("after", _internal_ws__WEBPACK_IMPORTED_MODULE_9__["MaybeWsArrow"].fallible()).ifOk(({
  before,
  after,
  head,
  positional,
  named
}) => Object(_create_node__WEBPACK_IMPORTED_MODULE_10__["callBody"])({
  head,
  positional,
  named
}, {
  span: Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(head, positional, named),
  before,
  after
})).label("CallBody"));
const SexpArrow = _shape__WEBPACK_IMPORTED_MODULE_3__["ParserArrow"].start().parent("sexp", _read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Sexp, CallBodyArrow).ifOk(({
  result,
  token
}) => Object(_nodes_expression__WEBPACK_IMPORTED_MODULE_2__["call"])(result, {
  span: token.span
})).label("Sexp");
const PathMemberArrow = _shape__WEBPACK_IMPORTED_MODULE_3__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Dot).named("dot").extend("id", _shape__WEBPACK_IMPORTED_MODULE_3__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Identifier)).ifOk(({
  dot,
  id
}) => Object(_nodes_expression__WEBPACK_IMPORTED_MODULE_2__["member"])(dot, id.span)).atomic().label("PathMember");
const PathHeadArrow = Object(_internal_any__WEBPACK_IMPORTED_MODULE_4__["anyArrow"])([SexpArrow, _args_ref__WEBPACK_IMPORTED_MODULE_5__["ArgRefArrow"], _var_ref__WEBPACK_IMPORTED_MODULE_6__["VarRefArrow"]]).label("PathHead");
const PathArrow = PathHeadArrow.named("head").extend("tail", PathMemberArrow.repeat().fallible()).ifOk(({
  head,
  tail
}) => tail.length === 0 ? head : Object(_nodes_expression__WEBPACK_IMPORTED_MODULE_2__["path"])({
  head,
  tail
}, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(head, ...tail))).label("Path");

function assertPresent() {
  return _shape__WEBPACK_IMPORTED_MODULE_3__["ParserArrow"].start().lift(list => list.length > 0 ? Object(_shape__WEBPACK_IMPORTED_MODULE_3__["parseOk"])(list) : Object(_shape__WEBPACK_IMPORTED_MODULE_3__["parseErr"])("unknown", {
    type: "empty"
  }));
}

const NamedArgumentsArrow = _internal_ws__WEBPACK_IMPORTED_MODULE_9__["WsArrow"].named("leadingWS").extend("args", NamedArgumentArrow.repeat().andThen(assertPresent())).atomic().ifOk(({
  leadingWS,
  args
}) => Object(_create_node__WEBPACK_IMPORTED_MODULE_10__["namedArgs"])(args, {
  span: Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...args),
  before: leadingWS
})).label("NamedArguments");

/***/ }),

/***/ "./src/parser/shapes/expression/string.ts":
/*!************************************************!*\
  !*** ./src/parser/shapes/expression/string.ts ***!
  \************************************************/
/*! exports provided: StringArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringArrow", function() { return StringArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../create-node */ "./src/parser/create-node.ts");



const StringArrow = Object(_shape__WEBPACK_IMPORTED_MODULE_1__["token"])(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].String).named("token").extend("source", Object(_shape__WEBPACK_IMPORTED_MODULE_1__["source"])()).ifOk(({
  token,
  source
}) => Object(_create_node__WEBPACK_IMPORTED_MODULE_2__["string"])(token, source)).label("String");

/***/ }),

/***/ "./src/parser/shapes/expression/var-ref.ts":
/*!*************************************************!*\
  !*** ./src/parser/shapes/expression/var-ref.ts ***!
  \*************************************************/
/*! exports provided: VarRefArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VarRefArrow", function() { return VarRefArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../create-node */ "./src/parser/create-node.ts");




const VarRefArrow = _shape__WEBPACK_IMPORTED_MODULE_2__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Identifier).named("id").checkNext(_shape__WEBPACK_IMPORTED_MODULE_2__["ParserArrow"].start().lookahead().map(token => token === undefined || token.type !== _read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Eq ? Object(_shape__WEBPACK_IMPORTED_MODULE_2__["parseOk"])(undefined) : Object(_shape__WEBPACK_IMPORTED_MODULE_2__["parseErr"])("unknown", {
  type: "lookahead",
  expected: _read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Eq,
  actual: token
}))).extend("source", _shape__WEBPACK_IMPORTED_MODULE_2__["ParserArrow"].start().source().fallible()).ifOk(({
  id,
  source
}) => {
  if (Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(id.span, source) === "this") {
    return Object(_create_node__WEBPACK_IMPORTED_MODULE_3__["thisReference"])(id);
  } else {
    return Object(_create_node__WEBPACK_IMPORTED_MODULE_3__["varReference"])(id);
  }
}).label("VarRef");

/***/ }),

/***/ "./src/parser/shapes/internal/any.ts":
/*!*******************************************!*\
  !*** ./src/parser/shapes/internal/any.ts ***!
  \*******************************************/
/*! exports provided: anyArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anyArrow", function() { return anyArrow; });
function anyArrow(sequences) {
  let [current, ...tail] = sequences;

  for (let item of tail) {
    current = current.orElse(item);
  }

  return current;
}

/***/ }),

/***/ "./src/parser/shapes/internal/ws.ts":
/*!******************************************!*\
  !*** ./src/parser/shapes/internal/ws.ts ***!
  \******************************************/
/*! exports provided: MaybeWsArrow, WsArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaybeWsArrow", function() { return MaybeWsArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WsArrow", function() { return WsArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");


const MaybeWsArrow = _shape__WEBPACK_IMPORTED_MODULE_1__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].WS).or(undefined).label("WS?");
const WsArrow = _shape__WEBPACK_IMPORTED_MODULE_1__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].WS).label("WS");

/***/ }),

/***/ "./src/parser/shapes/iterator-evaluator.ts":
/*!*************************************************!*\
  !*** ./src/parser/shapes/iterator-evaluator.ts ***!
  \*************************************************/
/*! exports provided: PureEvaluatorImpl, StatefulEvaluatorImpl, IteratorEvaluator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PureEvaluatorImpl", function() { return PureEvaluatorImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StatefulEvaluatorImpl", function() { return StatefulEvaluatorImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IteratorEvaluator", function() { return IteratorEvaluator; });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



/* eslint-enable import/no-duplicates */
class PureEvaluatorImpl {
  constructor(delegate) {
    _defineProperty(this, "delegate", void 0);

    this.delegate = delegate !== null && delegate !== void 0 ? delegate : this;
  }

  Source(_state, _input, op) {
    return op.callback();
  }

  Input(_state, input, _op) {
    return input;
  }

  Pure(_, input, op) {
    return op.callback(input);
  }

  Zip(state, input, op) {
    let out1 = op.left.invoke(state, this.delegate, input[0]);
    let out2 = op.right.invoke(state, this.delegate, input[1]);
    return [out1, out2];
  }

  Pipeline(state, input, op) {
    let middle = op.left.invoke(state, this.delegate, input);
    let out = op.right.invoke(state, this.delegate, middle);
    return out;
  }

  MapResult(state, input, op) {
    let result = op.left.invoke(state, this.delegate, input);

    if (Object(_shape__WEBPACK_IMPORTED_MODULE_0__["isOk"])(result)) {
      return op.ifOk.invoke(state, this.delegate, result.value);
    } else {
      return op.ifErr.invoke(state, this.delegate, result);
    }
  }

  BothOk(state, input, op) {
    let leftResult = op.left.invoke(state, this.delegate, input);

    if (!Object(_shape__WEBPACK_IMPORTED_MODULE_0__["isOk"])(leftResult)) {
      return leftResult;
    }

    let rightResult = op.right.invoke(state, this.delegate, input);

    if (Object(_shape__WEBPACK_IMPORTED_MODULE_0__["isOk"])(rightResult)) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["ok"])([leftResult.value, rightResult.value]);
    } else {
      return rightResult;
    }
  }

  AllOk(state, input, op) {
    let out = [];

    for (let arrow of op.arrows) {
      let result = arrow.invoke(state, this.delegate, input);

      if (Object(_shape__WEBPACK_IMPORTED_MODULE_0__["isErr"])(result)) {
        return result;
      } else {
        out.push(result.value);
      }
    }

    return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["ok"])(out);
  }

  FirstOk(state, input, op) {
    let leftResult = op.left.invoke(state, this.delegate, input);

    if (Object(_shape__WEBPACK_IMPORTED_MODULE_0__["isOk"])(leftResult)) {
      return leftResult;
    }

    return op.right.invoke(state, this.delegate, input);
  }

  MapInput(state, input, op) {
    return op.map.invoke(state, this.delegate, input);
  }

  Merge(state, input, op) {
    let leftOut = op.left.invoke(state, this.delegate, input);
    let rightOut = op.right.invoke(state, this.delegate, input);
    return [leftOut, rightOut];
  }

  KeepAndThen(state, input, op) {
    let leftOut = op.left.invoke(state, this.delegate, input);
    let rightOut = op.right.invoke(state, this.delegate, leftOut);
    return [leftOut, rightOut];
  }

  Reduce(state, [accum, input], op) {
    let current = accum;

    for (let item of input) {
      current = op.callback.invoke(state, this.delegate, [current, item]);
    }

    return current;
  }

}
class StatefulEvaluatorImpl extends PureEvaluatorImpl {
  State(state, _input, _op) {
    return state;
  }

  Repeat(state, input, op) {
    let out = [];

    while (true) {
      let item = op.callback.invoke(state, this.delegate, [input, state]);

      if (Object(_shape__WEBPACK_IMPORTED_MODULE_0__["isOk"])(item)) {
        out.push(item.value);
      } else {
        break;
      }
    }

    return out;
  }

}
class IteratorEvaluator extends StatefulEvaluatorImpl {
  constructor(iterator) {
    super();
    this.iterator = iterator;
  }

}

/***/ }),

/***/ "./src/parser/shapes/print.ts":
/*!************************************!*\
  !*** ./src/parser/shapes/print.ts ***!
  \************************************/
/*! exports provided: printAST, toIndented */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printAST", function() { return printAST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toIndented", function() { return toIndented; });
function isTuple(ast) {
  return Array.isArray(ast);
}

function printAST(arrow) {
  let seen = new Set();
  return iteration(arrow, seen);
}
function toIndented(ast, key) {
  if (isTuple(ast)) {
    let [head, tail] = ast;

    if (Array.isArray(tail)) {
      return [head, tail.map(value => toIndented(value))];
    } else {
      let printedTail = Object.entries(tail).map(([key, value]) => toIndented(value, key));
      return [head, printedTail];
    }
  } else if (typeof ast === "string") {
    return keyed(ast, key);
  } else {
    assertNever(ast);
  }
}

function keyed(head, key) {
  if (key) {
    return "".concat(key, ": ").concat(head);
  } else {
    return head;
  }
}

function iteration(arrow, seen) {
  if (seen.has(arrow)) {
    return "<cycle:".concat(labelled(arrow.operation), ">"); // throw new Error(`unexpected cycle`);
  } else {
    seen.add(arrow);
  }

  let op = arrow.operation;

  switch (op.type) {
    case "Source":
      return "source";

    case "Input":
      return "input";

    case "Pure":
      return labelled(op);

    case "AllOk":
      return [labelled(op), op.arrows.map(arrow => iteration(arrow, seen))];

    case "Zip":
    case "Pipeline":
    case "BothOk":
    case "FirstOk":
    case "Merge":
    case "KeepAndThen":
      return [labelled(op), [iteration(op.left, seen), iteration(op.right, seen)]];

    case "MapResult":
      return [labelled(op), {
        arrow: iteration(op.left, seen),
        ifOk: iteration(op.ifOk, seen),
        ifErr: iteration(op.ifErr, seen)
      }];

    case "MapInput":
      return [labelled(op), {
        pre: iteration(op.map, seen),
        arrow: iteration(op.arrow, seen)
      }];

    case "Repeat":
      return [labelled(op), [iteration(op.callback, seen)]];

    case "State":
      return "state";

    case "Reduce":
      return [labelled(op), [iteration(op.callback, seen)]];

    default:
      assertNever(op);
  }
}

function labelled(op) {
  if (op.label) {
    return "".concat(op.type, "(").concat(op.label, ")");
  } else {
    return op.type;
  }
}

function assertNever(_v) {
  throw new Error("unreachable");
}

/***/ }),

/***/ "./src/parser/shapes/text.ts":
/*!***********************************!*\
  !*** ./src/parser/shapes/text.ts ***!
  \***********************************/
/*! exports provided: TextArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextArrow", function() { return TextArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../create-node */ "./src/parser/create-node.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");



const TextArrow = _shape__WEBPACK_IMPORTED_MODULE_2__["ParserArrow"].start().token(_read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Text).ifOk(_create_node__WEBPACK_IMPORTED_MODULE_1__["text"]).label("Text");

/***/ }),

/***/ "./src/parser/shapes/top-level.ts":
/*!****************************************!*\
  !*** ./src/parser/shapes/top-level.ts ***!
  \****************************************/
/*! exports provided: InterpolateArrow, TopLevelArrow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateArrow", function() { return InterpolateArrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopLevelArrow", function() { return TopLevelArrow; });
/* harmony import */ var _read_token_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../read/token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _create_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../create-node */ "./src/parser/create-node.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
/* harmony import */ var _expression_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./expression/path */ "./src/parser/shapes/expression/path.ts");
/* harmony import */ var _internal_any__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/any */ "./src/parser/shapes/internal/any.ts");
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./text */ "./src/parser/shapes/text.ts");






const InterpolateArrow = Object(_shape__WEBPACK_IMPORTED_MODULE_2__["recurse"])(() => _shape__WEBPACK_IMPORTED_MODULE_2__["ParserArrow"].start().parent("interpolate", _read_token_enum__WEBPACK_IMPORTED_MODULE_0__["TokenType"].UntrustedInterpolate, _expression_path__WEBPACK_IMPORTED_MODULE_3__["CallBodyArrow"]).ifOk(({
  result,
  token
}) => Object(_create_node__WEBPACK_IMPORTED_MODULE_1__["interpolate"])(result, {
  span: token.span
})).label("Interpolate"));
const TopLevelArrow = Object(_internal_any__WEBPACK_IMPORTED_MODULE_4__["anyArrow"])([_text__WEBPACK_IMPORTED_MODULE_5__["TextArrow"], InterpolateArrow]).label("TopLevel");

/***/ }),

/***/ "./src/parser/tokens-iterator.ts":
/*!***************************************!*\
  !*** ./src/parser/tokens-iterator.ts ***!
  \***************************************/
/*! exports provided: TOKENS, CONTEXT, POS, PeekedToken, TokensIteratorState, default, TokensIteratorTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOKENS", function() { return TOKENS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXT", function() { return CONTEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POS", function() { return POS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PeekedToken", function() { return PeekedToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokensIteratorState", function() { return TokensIteratorState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TokensIterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokensIteratorTransaction", function() { return TokensIteratorTransaction; });
/* harmony import */ var _read_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../read/utils */ "./src/read/utils.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shape */ "./src/parser/shape.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }



const TOKENS = Symbol("TOKENS");
const CONTEXT = Symbol("CONTEXT");
const POS = Symbol("POS");
class PeekedToken {
  constructor(iterator, desc, pos) {
    _committed.set(this, {
      writable: true,
      value: false
    });

    _rejected.set(this, {
      writable: true,
      value: false
    });

    _optional.set(this, {
      writable: true,
      value: false
    });

    _ignored.set(this, {
      writable: true,
      value: false
    });

    this.iterator = iterator;
    this.desc = desc;
    this.pos = pos;
  }

  get isEOF() {
    return this.iterator[TOKENS].length === this.pos;
  }

  get finished() {
    return _classPrivateFieldGet(this, _committed) || _classPrivateFieldGet(this, _rejected) || _classPrivateFieldGet(this, _optional) || _classPrivateFieldGet(this, _ignored);
  }

  get rejected() {
    return _classPrivateFieldGet(this, _rejected);
  }

  commit() {
    if (this.finished) {
      throw new Error("assert: cannot commit already committed peeked token");
    }

    _classPrivateFieldSet(this, _committed, true);

    return this.iterator.commitPeek(this.desc, this.pos);
  }

  silentReject() {
    if (this.finished) {
      throw new Error("assert: cannot reject already committed peeked token");
    }

    _classPrivateFieldSet(this, _rejected, true);

    return this;
  }

  reject() {
    if (this.finished) {
      throw new Error("assert: cannot reject already committed peeked token");
    }

    _classPrivateFieldSet(this, _rejected, true);

    this.iterator.rejectPeek(this.desc, this.pos, this);
    return this;
  }

  ignore() {
    if (this.finished) {
      throw new Error("assert: cannot mark already committed peeked token as optional");
    }

    _classPrivateFieldSet(this, _ignored, true);

    this.iterator.peekFailure(this.desc, "ignored");
    return null;
  }

  optional() {
    if (this.finished) {
      throw new Error("assert: cannot mark already committed peeked token as optional");
    }

    _classPrivateFieldSet(this, _optional, true);

    this.iterator.peekFailure(this.desc, "optional");
    return null;
  }

  get token() {
    return this.iterator[TOKENS][this.pos];
  }

}

var _committed = new WeakMap();

var _rejected = new WeakMap();

var _optional = new WeakMap();

var _ignored = new WeakMap();

class TokensIteratorState {
  constructor(iterator) {
    this.iterator = iterator;

    if (new.target !== TokensIteratorState) {
      throw new Error("TokensIteratorState is final");
    }
  }

  get [_shape__WEBPACK_IMPORTED_MODULE_1__["ITERATOR_SOURCE"]]() {
    return this.iterator[_shape__WEBPACK_IMPORTED_MODULE_1__["ITERATOR_SOURCE"]];
  }

  lookahead() {
    let next = this.iterator.peek("lookahead");
    next.ignore();
    return next.token;
  }

  atomic(callback) {
    let result = this.iterator.atomic(iterator => {
      let state = new TokensIteratorState(iterator);
      let [newState, result] = callback(state);

      if (Object(_shape__WEBPACK_IMPORTED_MODULE_1__["isOk"])(result)) {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseOk"])([newState, result]);
      } else {
        return result;
      }
    });

    if (Object(_shape__WEBPACK_IMPORTED_MODULE_1__["isOk"])(result)) {
      return [this, result.value[1]];
    } else {
      return [this, result];
    }
  }

  label(desc, callback) {
    let innerState;
    let result = this.iterator.label(desc, iterator => {
      let [state, result] = callback(new TokensIteratorState(iterator));
      innerState = state;
      return result;
    });
    return [Object(_read_utils__WEBPACK_IMPORTED_MODULE_0__["unwrap"])(innerState), result];
  }

  next(desc, callback) {
    return this.iterator.next(desc, callback);
  }

  parent(desc, tokenType, arrow) {
    return this.iterator.processChildren(desc, tokenType, iterator => {
      let [, result] = arrow.invoke(iterator.arrowState);
      return result;
    });
  }

}
class TokensIterator {
  constructor(tokens, context, pos = 0) {
    _defineProperty(this, TOKENS, void 0);

    _defineProperty(this, CONTEXT, void 0);

    _defineProperty(this, POS, void 0);

    _defineProperty(this, "activeTransaction", null);

    this[TOKENS] = tokens;
    this[CONTEXT] = context;
    this[POS] = pos;
  }

  get arrowState() {
    return new TokensIteratorState(this);
  }

  get [_shape__WEBPACK_IMPORTED_MODULE_1__["ITERATOR_SOURCE"]]() {
    return this[CONTEXT].source;
  }

  assertNotEOF() {
    let next = this.peek("eof");

    if (next.isEOF) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseErr"])(next.reject().token || "EOF", {
        type: "unexpected-eof"
      });
    } else {
      next.ignore();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseOk"])(undefined);
    }
  }

  start(step) {
    return step(this);
  }

  ok(value) {
    return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseOk"])(value);
  }

  label(desc, callback) {
    this[CONTEXT].tracer.preInvoke({
      desc,
      isLeaf: false
    }, this[TOKENS][this[POS]]);
    let result = callback(this);
    this[CONTEXT].tracer.postInvoke({
      desc
    }, result, this[TOKENS][this[POS]]);
    return result;
  }

  peek(desc, options = {
    isLeaf: true
  }) {
    this[CONTEXT].tracer.preInvoke({
      desc,
      isLeaf: options.isLeaf
    }, this[TOKENS][this[POS]]);
    return new PeekedToken(this, desc, this[POS]);
  }

  commitPeek(desc, pos) {
    if (this[POS] !== pos) {
      throw new Error("assert: can't commit a peeked token after the iterator advanced");
    }

    this[POS]++;
    this[CONTEXT].tracer.postInvoke({
      desc
    }, this[TOKENS][pos], this[TOKENS][pos + 1]);
    return this[TOKENS][this[POS] - 1];
  }

  rejectPeek(desc, pos, peeked) {
    this[CONTEXT].tracer.postInvoke({
      desc
    }, Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseErr"])(peeked.token || "EOF", {
      type: "rejected",
      token: peeked.token || "EOF"
    }), this[TOKENS][pos]);
  }

  peekFailure(desc, reason) {
    this[CONTEXT].tracer.postInvokeFailure({
      desc
    }, reason);
  }

  silentPeek(desc) {
    return new PeekedToken(this, desc, this[POS]);
  }

  get source() {
    return this[CONTEXT].source;
  }

  withChildTokens(tokens) {
    return new TokensIterator(tokens, this[CONTEXT]);
  }

  atomic(callback) {
    let transaction = this.begin();
    let result = callback(transaction);

    if (result.kind === "ok") {
      transaction.commit();
    } else {
      transaction.rollback();
    }

    return result;
  }

  begin() {
    if (this.activeTransaction) {
      throw new Error("ASSERT: Can only have one active transaction for a parent at a time");
    }

    this[CONTEXT].tracer.begin(this[TOKENS][this[POS]]);
    let t = new TokensIteratorTransaction(this[TOKENS], this[CONTEXT], this[POS], this);
    this.activeTransaction = t;
    return t;
  }

  commitTransaction(pos, transaction) {
    if (this[POS] > pos) {
      throw new Error("assert: can't commit a transaction if it rewinds the position");
    }

    if (transaction !== this.activeTransaction) {
      throw new Error("ASSERT: Can only commit a transaction if it's the active transaction");
    }

    this.activeTransaction = null;
    this[CONTEXT].tracer.commit();
    this[POS] = pos;
  }

  rollbackTransaction(pos, transaction) {
    if (this[POS] > pos) {
      throw new Error("assert: transaction's position is in the past");
    }

    if (transaction !== this.activeTransaction) {
      throw new Error("ASSERT: Can only roll back a transaction if it's the active transaction");
    }

    this.activeTransaction = null;
    this[CONTEXT].tracer.rollback();
  }

  processInner(tokens, callback) {
    let child = this.withChildTokens(tokens);
    let result = callback(child);

    if (result.kind === "err") {
      return result;
    }

    let eof = child.peek("eof");

    if (eof.token === undefined) {
      eof.ignore();
    } else {
      eof.reject();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseErr"])(eof.token, {
        type: "mismatch",
        expected: "EOF",
        actual: eof.token
      });
    }

    return result;
  }

  processChildren(desc, tokenType, step) {
    let next = this.peek(desc, {
      isLeaf: false
    });

    if (next.token === undefined) {
      next.reject();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseErr"])("EOF", {
        type: "unexpected-eof"
      });
    } else if (next.token.type !== tokenType) {
      next.reject();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseErr"])(next.token, {
        type: "mismatch",
        expected: tokenType,
        actual: next.token
      });
    } else {
      let result = this.processInner(next.token.children, step);

      if (Object(_shape__WEBPACK_IMPORTED_MODULE_1__["isParseErr"])(result)) {
        next.reject();
        return result;
      }

      next.commit();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseOk"])({
        result: result.value,
        token: next.token
      });
    }
  }

  next(desc, callback) {
    let next = this.peek(desc);
    let result = callback(next.token);

    if (Object(_shape__WEBPACK_IMPORTED_MODULE_1__["isErr"])(result)) {
      let token = next.reject().token;
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseErr"])(token || "EOF", {
        type: "rejected",
        token: token || "EOF"
      });
    }

    next.commit();
    return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["parseOk"])(result.value);
  }

}
class TokensIteratorTransaction extends TokensIterator {
  constructor(tokens, context, pos = 0, transactionParent) {
    super(tokens, context, pos);

    _committed2.set(this, {
      writable: true,
      value: false
    });

    _rolledBack.set(this, {
      writable: true,
      value: false
    });

    this.transactionParent = transactionParent;
  }

  get isActive() {
    return !_classPrivateFieldGet(this, _committed2) && !_classPrivateFieldGet(this, _rolledBack);
  }

  begin() {
    if (_classPrivateFieldGet(this, _committed2) || _classPrivateFieldGet(this, _rolledBack)) {
      throw new Error("ASSERT: can't create a nested transaction for a committed or rolled back parent");
    }

    return super.begin();
  }

  commit() {
    if (_classPrivateFieldGet(this, _committed2) || _classPrivateFieldGet(this, _rolledBack)) {
      throw new Error("ASSERT: can only commit a transaction once");
    }

    if (this.activeTransaction) {
      throw new Error("ASSERT: can't commit a transaction if it has active nested transactions");
    }

    _classPrivateFieldSet(this, _committed2, true);

    this.transactionParent.commitTransaction(this[POS], this);
  }

  rollback() {
    if (_classPrivateFieldGet(this, _committed2) || _classPrivateFieldGet(this, _rolledBack)) {
      throw new Error("ASSERT: can only commit a transaction once");
    }

    if (this.activeTransaction) {
      throw new Error("ASSERT: can't roll back a transaction if it has active nested transactions");
    }

    _classPrivateFieldSet(this, _rolledBack, true);

    this.transactionParent.rollbackTransaction(this[POS], this);
  }

  commitTransaction(pos, transaction) {
    if (_classPrivateFieldGet(this, _committed2) || _classPrivateFieldGet(this, _rolledBack)) {
      throw new Error("ASSERT: Can't commit a nested transaction if the parent is already committed or rolled back");
    }

    super.commitTransaction(pos, transaction);
  }

  rollbackTransaction(pos, transaction) {
    if (_classPrivateFieldGet(this, _committed2) || _classPrivateFieldGet(this, _rolledBack)) {
      throw new Error("ASSERT: Can't commit a nested transaction if the parent is already committed or rolled back");
    }

    super.rollbackTransaction(pos, transaction);
  }

  finallyRollback() {
    if (!_classPrivateFieldGet(this, _committed2) && !_classPrivateFieldGet(this, _rolledBack)) {
      this.rollback();
    }
  }

}

var _committed2 = new WeakMap();

var _rolledBack = new WeakMap();

/***/ }),

/***/ "./src/read/combinator.ts":
/*!********************************!*\
  !*** ./src/read/combinator.ts ***!
  \********************************/
/*! exports provided: combinator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combinator", function() { return combinator; });
function combinator(func) {
  return {
    name: "wrapper",
    kind: "transparent",

    invoke(input) {
      return input.invoke(func());
    }

  };
}

/***/ }),

/***/ "./src/read/combinators.ts":
/*!*********************************!*\
  !*** ./src/read/combinators.ts ***!
  \*********************************/
/*! exports provided: tag, pattern, takeUntil, takeWhile, seq, any, pick, maybe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tag", function() { return tag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pattern", function() { return pattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeUntil", function() { return takeUntil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeWhile", function() { return takeWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seq", function() { return seq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "any", function() { return any; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pick", function() { return pick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maybe", function() { return maybe; });
/* harmony import */ var _combinators_any__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combinators/any */ "./src/read/combinators/any.ts");
/* harmony import */ var _combinators_pattern__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./combinators/pattern */ "./src/read/combinators/pattern.ts");
/* harmony import */ var _combinators_seq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinators/seq */ "./src/read/combinators/seq.ts");
/* harmony import */ var _combinators_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators/tag */ "./src/read/combinators/tag.ts");
/* harmony import */ var _combinators_take_until__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./combinators/take-until */ "./src/read/combinators/take-until.ts");
/* harmony import */ var _combinators_take_while__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./combinators/take-while */ "./src/read/combinators/take-while.ts");
/* harmony import */ var _combinators_pick__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./combinators/pick */ "./src/read/combinators/pick.ts");
/* harmony import */ var _combinators_maybe__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./combinators/maybe */ "./src/read/combinators/maybe.ts");
/*
  This file type infers reliably, and being explicit would be very annoying
*/

/* eslint-disable @typescript-eslint/explicit-function-return-type */








const tag = source => new _combinators_tag__WEBPACK_IMPORTED_MODULE_3__["default"](source);
const pattern = (pat, name) => new _combinators_pattern__WEBPACK_IMPORTED_MODULE_1__["default"](name, pat);
const takeUntil = pat => new _combinators_take_until__WEBPACK_IMPORTED_MODULE_4__["default"](pat);
const takeWhile = pat => new _combinators_take_while__WEBPACK_IMPORTED_MODULE_5__["default"](pat);
const seq = (desc, ...combinators) => new _combinators_seq__WEBPACK_IMPORTED_MODULE_2__["default"](desc, combinators); // tslint:disable-next-line:variable-name

const any = (desc, ...combinators) => new _combinators_any__WEBPACK_IMPORTED_MODULE_0__["default"](desc, combinators);
const pick = (combinators, callbacks) => new _combinators_pick__WEBPACK_IMPORTED_MODULE_6__["default"](combinators, callbacks);
const maybe = c => new _combinators_maybe__WEBPACK_IMPORTED_MODULE_7__["default"](c);

/***/ }),

/***/ "./src/read/combinators/any.ts":
/*!*************************************!*\
  !*** ./src/read/combinators/any.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Any; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");


class Any extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(desc, combinators) {
    super();
    this.desc = desc;
    this.combinators = combinators;
  }

  get name() {
    return "any \u2022 ".concat(this.desc);
  }

  invoke(input) {
    let current = input;

    for (let item of this.combinators) {
      let result = current.invoke(item);

      if (result.kind === "ok") {
        return result;
      } // if there was a fatal error, don't try other variants


      if (result.kind === "err" && result.fatal) {
        return result;
      }
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "any");
  }

}

/***/ }),

/***/ "./src/read/combinators/base.ts":
/*!**************************************!*\
  !*** ./src/read/combinators/base.ts ***!
  \**************************************/
/*! exports provided: AbstractCombinator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractCombinator", function() { return AbstractCombinator; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/read/utils.ts");

class AbstractCombinator {
  map(mapper) {
    return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(this, mapper);
  }

}

/***/ }),

/***/ "./src/read/combinators/core.ts":
/*!**************************************!*\
  !*** ./src/read/combinators/core.ts ***!
  \**************************************/
/*! exports provided: token, ID_SNIPPET, ID, DOT, wrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "token", function() { return token; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ID_SNIPPET", function() { return ID_SNIPPET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ID", function() { return ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOT", function() { return DOT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return wrap; });
/* harmony import */ var _combinators_hbs_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../combinators/hbs/id */ "./src/read/combinators/hbs/id.ts");
/* harmony import */ var _token_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs_token__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hbs/token */ "./src/read/combinators/hbs/token.ts");
/* harmony import */ var _wrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wrap */ "./src/read/combinators/wrap.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../combinator */ "./src/read/combinator.ts");






const token = (c, type) => new _hbs_token__WEBPACK_IMPORTED_MODULE_3__["default"](c, type);
const ID_SNIPPET = Object(_combinator__WEBPACK_IMPORTED_MODULE_5__["combinator"])(() => new _combinators_hbs_id__WEBPACK_IMPORTED_MODULE_0__["default"]());
const ID = Object(_combinator__WEBPACK_IMPORTED_MODULE_5__["combinator"])(() => token(ID_SNIPPET, _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Identifier));
const DOT = Object(_combinator__WEBPACK_IMPORTED_MODULE_5__["combinator"])(() => token(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("."), _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Dot));
const wrap = c => new _wrap__WEBPACK_IMPORTED_MODULE_4__["default"](c);

/***/ }),

/***/ "./src/read/combinators/hbs/block.ts":
/*!*******************************************!*\
  !*** ./src/read/combinators/hbs/block.ts ***!
  \*******************************************/
/*! exports provided: default, BLOCK, OpenBlock, CloseBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLOCK", function() { return BLOCK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenBlock", function() { return OpenBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseBlock", function() { return CloseBlock; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _multi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../multi */ "./src/read/multi.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _read__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../read */ "./src/read/read.ts");
/* harmony import */ var _simple_path__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./simple-path */ "./src/read/combinators/hbs/simple-path.ts");
/* harmony import */ var _spaced_tokens__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./spaced-tokens */ "./src/read/combinators/hbs/spaced-tokens.ts");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../core */ "./src/read/combinators/core.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



 // eslint-disable-next-line import/no-cycle




 // eslint-disable-next-line import/no-cycle


 // eslint-disable-next-line import/no-cycle




class Block extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "BLOCK");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("BLOCK", OPEN_BLOCK, Object(_multi__WEBPACK_IMPORTED_MODULE_4__["many"])(_read__WEBPACK_IMPORTED_MODULE_7__["TOP_LEVEL"]), CLOSE_BLOCK).map(([open, body, close]) => {
      if (!Object(_tokens__WEBPACK_IMPORTED_MODULE_5__["equalPath"])(open.name, close.name, input.source)) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["fatalError"])(input.forSpan(Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...close.name)), "mismatch");
      }

      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_5__["block"])({
        open,
        body,
        close
      }));
    }));
  }

}
const BLOCK = Object(_combinator__WEBPACK_IMPORTED_MODULE_11__["combinator"])(() => new Block());
const BLOCK_SPACED_TOKENS = new _spaced_tokens__WEBPACK_IMPORTED_MODULE_9__["default"](["as"]); // tslint:disable-next-line:max-classes-per-file

class OpenBlock extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "OPEN_BLOCK");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("OPEN_BLOCK", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("{{#"), _simple_path__WEBPACK_IMPORTED_MODULE_8__["SIMPLE_PATH"], BLOCK_SPACED_TOKENS, Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(BLOCK_PARAMS), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(_hbs__WEBPACK_IMPORTED_MODULE_3__["WS"]), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("}}")).map(([open, path, head, params, ws, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_5__["openBlock"])({
      name: path,
      head: [...head, ...(params ? [params] : []), ...(ws ? [ws] : [])]
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}
const OPEN_BLOCK = Object(_combinator__WEBPACK_IMPORTED_MODULE_11__["combinator"])(() => new OpenBlock()); // tslint:disable-next-line:max-classes-per-file

class BlockParams extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "BLOCK_PARAMS");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("BLOCK_PARAMS", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("as |"), Object(_multi__WEBPACK_IMPORTED_MODULE_4__["many"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["any"])("block param", _core__WEBPACK_IMPORTED_MODULE_10__["ID"], _hbs__WEBPACK_IMPORTED_MODULE_3__["WS"])), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("|")).map(([open, params, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_5__["blockParams"])(params, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}

const BLOCK_PARAMS = Object(_combinator__WEBPACK_IMPORTED_MODULE_11__["combinator"])(() => new BlockParams());
class CloseBlock extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "CLOSE_BLOCK");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("CLOSE_BLOCK", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("{{/"), _simple_path__WEBPACK_IMPORTED_MODULE_8__["SIMPLE_PATH"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("}}")).map(([open, path, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_5__["closeBlock"])(path, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}
const CLOSE_BLOCK = new CloseBlock();

/***/ }),

/***/ "./src/read/combinators/hbs/id.ts":
/*!****************************************!*\
  !*** ./src/read/combinators/hbs/id.ts ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Id; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");



class Id extends _base__WEBPACK_IMPORTED_MODULE_2__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();
    this.disallowedKeywords = disallowedKeywords;
  }

  get name() {
    if (this.disallowedKeywords) {
      return "ID \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "ID";
    }
  }

  invoke(input) {
    const disallowedKeywords = this.disallowedKeywords;

    if (disallowedKeywords) {
      return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["pattern"])(/^[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE4}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F45}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11003}-\u{11037}\u{11083}-\u{110AF}\u{110D0}-\u{110E8}\u{11103}-\u{11126}\u{11144}\u{11147}\u{11150}-\u{11172}\u{11176}\u{11183}-\u{111B2}\u{111C1}-\u{111C4}\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{1122B}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112DE}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}\u{11350}\u{1135D}-\u{11361}\u{11400}-\u{11434}\u{11447}-\u{1144A}\u{1145F}-\u{11461}\u{11480}-\u{114AF}\u{114C4}\u{114C5}\u{114C7}\u{11580}-\u{115AE}\u{115D8}-\u{115DB}\u{11600}-\u{1162F}\u{11644}\u{11680}-\u{116AA}\u{116B8}\u{11700}-\u{1171A}\u{11800}-\u{1182B}\u{118A0}-\u{118DF}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{1192F}\u{1193F}\u{11941}\u{119A0}-\u{119A7}\u{119AA}-\u{119D0}\u{119E1}\u{119E3}\u{11A00}\u{11A0B}-\u{11A32}\u{11A3A}\u{11A50}\u{11A5C}-\u{11A89}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2E}\u{11C40}\u{11C72}-\u{11C8F}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D89}\u{11D98}\u{11EE0}-\u{11EF2}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16AD0}-\u{16AED}\u{16B00}-\u{16B2F}\u{16B40}-\u{16B43}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F50}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E14E}\u{1E2C0}-\u{1E2EB}\u{1E800}-\u{1E8C4}\u{1E900}-\u{1E943}\u{1E94B}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}][\x2D0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D27}\u{10D30}-\u{10D39}\u{10E80}-\u{10EA9}\u{10EAB}\u{10EAC}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F50}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11000}-\u{11046}\u{11066}-\u{1106F}\u{1107F}-\u{110BA}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{1113F}\u{11144}-\u{11147}\u{11150}-\u{11173}\u{11176}\u{11180}-\u{111C4}\u{111C9}-\u{111CC}\u{111CE}-\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{11237}\u{1123E}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1144A}\u{11450}-\u{11459}\u{1145E}-\u{11461}\u{11480}-\u{114C5}\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115C0}\u{115D8}-\u{115DD}\u{11600}-\u{11640}\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116B8}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{11739}\u{11800}-\u{1183A}\u{118A0}-\u{118E9}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11943}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E1}\u{119E3}\u{119E4}\u{11A00}-\u{11A3E}\u{11A47}\u{11A50}-\u{11A99}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C40}\u{11C50}-\u{11C59}\u{11C72}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF6}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF4}\u{16B00}-\u{16B36}\u{16B40}-\u{16B43}\u{16B50}-\u{16B59}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9D}\u{1BC9E}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E2C0}-\u{1E2F9}\u{1E800}-\u{1E8C4}\u{1E8D0}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{E0100}-\u{E01EF}]*/u, "ID_SNIPPET").map(snippet => {
        let frag = snippet.fragment;

        if (disallowedKeywords.some(k => frag === k)) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(snippet, "disallowed keyword");
        } else {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(snippet);
        }
      }));
    } else {
      return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["pattern"])(/^[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE4}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F45}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11003}-\u{11037}\u{11083}-\u{110AF}\u{110D0}-\u{110E8}\u{11103}-\u{11126}\u{11144}\u{11147}\u{11150}-\u{11172}\u{11176}\u{11183}-\u{111B2}\u{111C1}-\u{111C4}\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{1122B}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112DE}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}\u{11350}\u{1135D}-\u{11361}\u{11400}-\u{11434}\u{11447}-\u{1144A}\u{1145F}-\u{11461}\u{11480}-\u{114AF}\u{114C4}\u{114C5}\u{114C7}\u{11580}-\u{115AE}\u{115D8}-\u{115DB}\u{11600}-\u{1162F}\u{11644}\u{11680}-\u{116AA}\u{116B8}\u{11700}-\u{1171A}\u{11800}-\u{1182B}\u{118A0}-\u{118DF}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{1192F}\u{1193F}\u{11941}\u{119A0}-\u{119A7}\u{119AA}-\u{119D0}\u{119E1}\u{119E3}\u{11A00}\u{11A0B}-\u{11A32}\u{11A3A}\u{11A50}\u{11A5C}-\u{11A89}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2E}\u{11C40}\u{11C72}-\u{11C8F}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D89}\u{11D98}\u{11EE0}-\u{11EF2}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16AD0}-\u{16AED}\u{16B00}-\u{16B2F}\u{16B40}-\u{16B43}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F50}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E14E}\u{1E2C0}-\u{1E2EB}\u{1E800}-\u{1E8C4}\u{1E900}-\u{1E943}\u{1E94B}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}][\x2D0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D27}\u{10D30}-\u{10D39}\u{10E80}-\u{10EA9}\u{10EAB}\u{10EAC}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F50}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11000}-\u{11046}\u{11066}-\u{1106F}\u{1107F}-\u{110BA}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{1113F}\u{11144}-\u{11147}\u{11150}-\u{11173}\u{11176}\u{11180}-\u{111C4}\u{111C9}-\u{111CC}\u{111CE}-\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{11237}\u{1123E}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1144A}\u{11450}-\u{11459}\u{1145E}-\u{11461}\u{11480}-\u{114C5}\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115C0}\u{115D8}-\u{115DD}\u{11600}-\u{11640}\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116B8}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{11739}\u{11800}-\u{1183A}\u{118A0}-\u{118E9}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11943}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E1}\u{119E3}\u{119E4}\u{11A00}-\u{11A3E}\u{11A47}\u{11A50}-\u{11A99}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C40}\u{11C50}-\u{11C59}\u{11C72}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF6}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF4}\u{16B00}-\u{16B36}\u{16B40}-\u{16B43}\u{16B50}-\u{16B59}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9D}\u{1BC9E}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E2C0}-\u{1E2F9}\u{1E800}-\u{1E8C4}\u{1E8D0}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{E0100}-\u{E01EF}]*/u, "ID_SNIPPET"));
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/interpolate.ts":
/*!*************************************************!*\
  !*** ./src/read/combinators/hbs/interpolate.ts ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Interpolate; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



 // eslint-disable-next-line import/no-cycle




class Interpolate extends _base__WEBPACK_IMPORTED_MODULE_5__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "INTERPOLATE");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("INTERPOLATE", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("{{"), _hbs__WEBPACK_IMPORTED_MODULE_3__["SPACED_TOKENS"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("}}")).map(([open, path, close]) => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_4__["interpolate"])(path, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)));
    }));
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/number.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/hbs/number.ts ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SomeNumber; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class SomeNumber extends _base__WEBPACK_IMPORTED_MODULE_4__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "NUMBER");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("NUMBER", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("-")), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^[0-9]+/, "digits"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("decimal", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("."), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^[0-9]+/, "digits")).map(([, tail]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(tail)))).map(([negative, head, tail]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["numberToken"])({
      head: head.span,
      tail: tail ? tail.span : null,
      negative: negative ? negative.span : null
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(negative, head, tail ? tail : null)))));
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/sexp.ts":
/*!******************************************!*\
  !*** ./src/read/combinators/hbs/sexp.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Sexp; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class Sexp extends _base__WEBPACK_IMPORTED_MODULE_5__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "SEXP");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("SEXP", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("("), _hbs__WEBPACK_IMPORTED_MODULE_3__["SPACED_TOKENS"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])(")")).map(([open, path, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_4__["sexp"])({
      children: path,
      inner: Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...path)
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/simple-path.ts":
/*!*************************************************!*\
  !*** ./src/read/combinators/hbs/simple-path.ts ***!
  \*************************************************/
/*! exports provided: MEMBER, ARG, Head, default, SIMPLE_PATH */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MEMBER", function() { return MEMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARG", function() { return ARG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Head", function() { return Head; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SimplePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIMPLE_PATH", function() { return SIMPLE_PATH; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core */ "./src/read/combinators/core.ts");
/* harmony import */ var _token_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./token */ "./src/read/combinators/hbs/token.ts");
/* harmony import */ var _id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./id */ "./src/read/combinators/hbs/id.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











 // export const SIMPLE_HEAD = combinator(() => any("HEAD", ARG, ID));
// TODO: Allow `[]` or string members

const MEMBER = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => _core__WEBPACK_IMPORTED_MODULE_7__["ID"]);
const ARG = Object(_utils__WEBPACK_IMPORTED_MODULE_5__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("@id", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("@"), _core__WEBPACK_IMPORTED_MODULE_7__["ID_SNIPPET"]), ([at, id]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_4__["arg"])(Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(at, id))));
class Head extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();

    _defineProperty(this, "id", void 0);

    this.disallowedKeywords = disallowedKeywords;
    this.id = new _token__WEBPACK_IMPORTED_MODULE_9__["default"](new _id__WEBPACK_IMPORTED_MODULE_10__["default"](disallowedKeywords), _token_enum__WEBPACK_IMPORTED_MODULE_8__["TokenType"].Identifier);
  }

  get name() {
    if (this.disallowedKeywords) {
      return "HEAD \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "HEAD";
    }
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("HEAD", ARG, this.id));
  }

}
class SimplePath extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();

    _defineProperty(this, "head", void 0);

    this.disallowedKeywords = disallowedKeywords;
    this.head = new Head(disallowedKeywords);
  }

  get name() {
    if (this.disallowedKeywords) {
      return "SIMPLE_PATH \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "SIMPLE_PATH";
    }
  }

  invoke(input) {
    let result = input.invoke(this.head);

    if (result.kind === "err") {
      return result;
    }

    let [current, head] = result.value;
    let out = [head];

    while (true) {
      if (current.isEOF()) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current, out]);
      }

      let resultDot = current.invoke(_core__WEBPACK_IMPORTED_MODULE_7__["DOT"], {
        optional: true
      });

      if (resultDot.kind === "err") {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current, out]);
      }

      current = resultDot.value[0];
      let nextDot = resultDot.value[1];
      let resultMember = current.invoke(MEMBER);

      if (resultMember.kind === "err") {
        return resultMember;
      }

      current = resultMember.value[0];
      let nextMember = resultMember.value[1];
      out.push(nextDot, nextMember);
    }
  }

}
const SIMPLE_PATH = new SimplePath();

/***/ }),

/***/ "./src/read/combinators/hbs/spaced-tokens.ts":
/*!***************************************************!*\
  !*** ./src/read/combinators/hbs/spaced-tokens.ts ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SpacedTokens; });
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _simple_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simple-path */ "./src/read/combinators/hbs/simple-path.ts");
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core */ "./src/read/combinators/core.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line import/no-cycle






class SpacedTokens extends _base__WEBPACK_IMPORTED_MODULE_2__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();

    _defineProperty(this, "path", void 0);

    this.disallowedKeywords = disallowedKeywords;
    this.path = new _simple_path__WEBPACK_IMPORTED_MODULE_4__["default"](disallowedKeywords);
  }

  get name() {
    if (this.disallowedKeywords) {
      return "SPACED_TOKENS \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "SPACED_TOKENS";
    }
  }

  invoke(input) {
    let out = [];
    let tk = Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["any"])("token", Object(_core__WEBPACK_IMPORTED_MODULE_5__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["SEXP"]), Object(_core__WEBPACK_IMPORTED_MODULE_5__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["STRING"]), Object(_core__WEBPACK_IMPORTED_MODULE_5__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["NUMBER"]), _hbs__WEBPACK_IMPORTED_MODULE_0__["NAMED"], this.path, Object(_core__WEBPACK_IMPORTED_MODULE_5__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["WS"]));
    let current = input;

    while (true) {
      if (current.isEOF()) {
        break;
      }

      let result = current.invoke(tk);

      if (result.kind === "err") {
        break;
      }

      let [next, tokens] = result.value;

      for (let tok of tokens) {
        if (Array.isArray(tok)) {
          out.push(...tok);
        } else {
          out.push(tok);
        }
      }

      current = next;
    }

    if (out.length === 0) {
      return {
        kind: "err",
        reason: "present",
        snippet: input
      };
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_3__["ok"])([current, out]);
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/string.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/hbs/string.ts ***!
  \********************************************/
/*! exports provided: default, SINGLE_QUOTED, DOUBLE_QUOTED */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SomeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTED", function() { return SINGLE_QUOTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOUBLE_QUOTED", function() { return DOUBLE_QUOTED; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class SomeString extends _base__WEBPACK_IMPORTED_MODULE_4__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "STRING");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["any"])("QUOTED_STRING", SINGLE_QUOTED, DOUBLE_QUOTED));
  }

}
const SINGLE_QUOTED = Object(_combinator__WEBPACK_IMPORTED_MODULE_5__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("SINGLE_QUOTED", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("'"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^(\\'|[^'])*/u, "single quote body"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("'")).map(([open, body, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["stringToken"])({
  data: body.span,
  quote: _tokens__WEBPACK_IMPORTED_MODULE_3__["QuoteType"].Single
}, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
const DOUBLE_QUOTED = Object(_combinator__WEBPACK_IMPORTED_MODULE_5__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("DOUBLE_QUOTED", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("\""), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^(\\"|[^"])*/u, "double quote body"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("\"")).map(([open, body, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["stringToken"])({
  data: body.span,
  quote: _tokens__WEBPACK_IMPORTED_MODULE_3__["QuoteType"].Double
}, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));

/***/ }),

/***/ "./src/read/combinators/hbs/token.ts":
/*!*******************************************!*\
  !*** ./src/read/combinators/hbs/token.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SomeToken; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");



class SomeToken extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(combinator, type) {
    super();
    this.combinator = combinator;
    this.type = type;
  }

  get name() {
    return "token \u2022 ".concat(Object(_utils__WEBPACK_IMPORTED_MODULE_2__["combinatorName"])(this.combinator));
  }

  invoke(input) {
    let result = input.invoke(this.combinator, {
      forceTransparent: true
    });

    if (result.kind === "err") {
      return result;
    } else {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([result.value[0], {
        type: this.type,
        span: result.value[1].span
      }]);
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/html/attribute.ts":
/*!************************************************!*\
  !*** ./src/read/combinators/html/attribute.ts ***!
  \************************************************/
/*! exports provided: default, ATTRIBUTE, ATTRIBUTE_NAME, ARG_NAME, ANY_ATTR_NAME, DQ_STRING_INTERPOLATE, SQ_STRING_INTERPOLATE, StringInterpolation, ATTRIBUTE_VALUE, ATTRIBUTES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE", function() { return ATTRIBUTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE_NAME", function() { return ATTRIBUTE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARG_NAME", function() { return ARG_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANY_ATTR_NAME", function() { return ANY_ATTR_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DQ_STRING_INTERPOLATE", function() { return DQ_STRING_INTERPOLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SQ_STRING_INTERPOLATE", function() { return SQ_STRING_INTERPOLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringInterpolation", function() { return StringInterpolation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE_VALUE", function() { return ATTRIBUTE_VALUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTES", function() { return ATTRIBUTES; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _multi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../multi */ "./src/read/multi.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }










class HTMLAttribute extends _base__WEBPACK_IMPORTED_MODULE_8__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "TEXT");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pick"])({
      valued: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("valued attribute", ANY_ATTR_NAME, _hbs__WEBPACK_IMPORTED_MODULE_4__["EQ"], ATTRIBUTE_VALUE),
      bare: ATTRIBUTE_NAME
    }, {
      valued: ([name,, value]) => {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["valuedAttr"])({
          name,
          value
        }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(name, value)));
      },
      bare: value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrName"])(value.span))
    }));
  }

}
const ATTRIBUTE = new HTMLAttribute(); // https://www.w3.org/TR/2011/WD-html5-20110113/tokenization.html#before-attribute-name-state

const ATTRIBUTE_NAME = Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^\u0009\u000A\u000C\u0020/>\u0000"'<=].*?(?=[\u0009\u000A\u000C\u0020/=>\u0000"'<])/u, "ATTRIBUTE_NAME").map(name => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrName"])(name.span)));
const ARG_NAME = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("ARG_NAME", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("@"), ATTRIBUTE_NAME).map(([at, attr]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["argName"])(attr.span, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(at.span, attr.span)))));
const ANY_ATTR_NAME = Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("ANY_ATTR_NAME", ARG_NAME, ATTRIBUTE_NAME);
const DQ_STRING_INTERPOLATE = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("DQ_STRING_INTERPOLATE", _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"], Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^"]+/, "dq text").map(value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["text"])(value.span)))));
const SQ_STRING_INTERPOLATE = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("SQ_STRING_INTERPOLATE", _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"], Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^']+/, "sq text").map(value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["text"])(value.span))))); // tslint:disable-next-line:max-classes-per-file

class StringInterpolation extends _base__WEBPACK_IMPORTED_MODULE_8__["AbstractCombinator"] {
  constructor(combinator) {
    super();

    _defineProperty(this, "name", "STRING_INTERPOLATION");

    this.combinator = combinator;
  }

  invoke(input) {
    return input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["map"])(Object(_multi__WEBPACK_IMPORTED_MODULE_5__["many"])(this.combinator), value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["stringInterpolation"])(value, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...value)))));
  }

}
const ATTRIBUTE_VALUE = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pick"])({
  interpolate: _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"],
  dq: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("dq", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("\""), new StringInterpolation(DQ_STRING_INTERPOLATE), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("\"")),
  sq: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("sq", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("'"), new StringInterpolation(SQ_STRING_INTERPOLATE), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("'")),
  unquoted: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^\u0009\u000A\u000C\u0020>\0"'<=`]+/u, "unquoted contents")
}, {
  interpolate: interpolate => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].Interpolate,
    value: interpolate
  }, interpolate.span)),
  dq: ([open, value, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].DoubleQuoted,
    value
  }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close))),
  sq: ([open, value, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].SingleQuoted,
    value
  }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close))),
  unquoted: value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].Unquoted,
    value: Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["stringInterpolation"])([Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["text"])(value.span)], value.span)
  }, value.span))
}));
const ATTRIBUTES = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_utils__WEBPACK_IMPORTED_MODULE_7__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("ATTRIBUTES", _hbs__WEBPACK_IMPORTED_MODULE_4__["WS"], Object(_multi__WEBPACK_IMPORTED_MODULE_5__["many"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("spaced attribute", _hbs__WEBPACK_IMPORTED_MODULE_4__["WS"], _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"], ATTRIBUTE))), ([ws, attrs]) => {
  return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([ws, ...attrs]);
}));

/***/ }),

/***/ "./src/read/combinators/html/end-tag.ts":
/*!**********************************************!*\
  !*** ./src/read/combinators/html/end-tag.ts ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLEndTag; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _tag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tag */ "./src/read/combinators/html/tag.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









class HTMLEndTag extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "END_TAG");
  }

  invoke(input) {
    return input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_5__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("END_TAG", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("</"), _tag__WEBPACK_IMPORTED_MODULE_7__["TAG_OR_COMPONENT_NAME"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(_hbs__WEBPACK_IMPORTED_MODULE_3__["WS"]), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])(">")), ([start, name, trailing, end]) => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_4__["endTag"])({
        name,
        trailing
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end)));
    }));
  }

}

/***/ }),

/***/ "./src/read/combinators/html/start-tag.ts":
/*!************************************************!*\
  !*** ./src/read/combinators/html/start-tag.ts ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLStartTag; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _attribute__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./attribute */ "./src/read/combinators/html/attribute.ts");
/* harmony import */ var _tag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tag */ "./src/read/combinators/html/tag.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









class HTMLStartTag extends _base__WEBPACK_IMPORTED_MODULE_5__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "START_TAG");
  }

  invoke(input) {
    return input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_4__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("START_TAG", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("<"), _tag__WEBPACK_IMPORTED_MODULE_7__["TAG_OR_COMPONENT_NAME"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(_attribute__WEBPACK_IMPORTED_MODULE_6__["ATTRIBUTES"]), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("/")), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])(">")), ([start, name, attrs, selfClosing, end]) => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["startTag"])({
        name,
        attrs: attrs || undefined,
        selfClosing: selfClosing ? true : undefined
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end)));
    }));
  }

}

/***/ }),

/***/ "./src/read/combinators/html/tag.ts":
/*!******************************************!*\
  !*** ./src/read/combinators/html/tag.ts ***!
  \******************************************/
/*! exports provided: TAG_NAME, TAG_NAME_TOKEN, TAG_OR_COMPONENT_NAME */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAG_NAME", function() { return TAG_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAG_NAME_TOKEN", function() { return TAG_NAME_TOKEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAG_OR_COMPONENT_NAME", function() { return TAG_OR_COMPONENT_NAME; });
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _hbs_simple_path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../hbs/simple-path */ "./src/read/combinators/hbs/simple-path.ts");





 // https://www.w3.org/TR/2011/WD-html5-20110113/tokenization.html#tag-name-state

const TAG_NAME = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^[A-Za-z][^/>\0\s]+/u, "TAG_NAME"));
const TAG_NAME_TOKEN = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_utils__WEBPACK_IMPORTED_MODULE_3__["map"])(TAG_NAME, snippet => Object(_snippet__WEBPACK_IMPORTED_MODULE_4__["ok"])([Object(_tokens__WEBPACK_IMPORTED_MODULE_1__["id"])(snippet.span)])));
const TAG_OR_COMPONENT_NAME = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["any"])("tag or component name", _hbs_simple_path__WEBPACK_IMPORTED_MODULE_5__["SIMPLE_PATH"], TAG_NAME_TOKEN));

/***/ }),

/***/ "./src/read/combinators/html/text.ts":
/*!*******************************************!*\
  !*** ./src/read/combinators/html/text.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLText; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class HTMLText extends _base__WEBPACK_IMPORTED_MODULE_3__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "TEXT");
  }

  invoke(input) {
    let result = input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["pattern"])(/^[\s\S]*?(?=[{<}]|$)/u, "TEXT"));

    if (result.kind === "err") {
      return result;
    }

    let [next, value] = result.value;
    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([next, Object(_tokens__WEBPACK_IMPORTED_MODULE_2__["text"])(value.span)]);
  }

}

/***/ }),

/***/ "./src/read/combinators/maybe.ts":
/*!***************************************!*\
  !*** ./src/read/combinators/maybe.ts ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Maybe; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Maybe extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(combinator) {
    super();
    this.combinator = combinator;
  }

  get name() {
    return "maybe ".concat(this.combinator.name);
  }

  invoke(input) {
    let result = input.invoke(this.combinator);

    if (result.kind === "err") {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([input, null]);
    } else {
      return result;
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/pattern.ts":
/*!*****************************************!*\
  !*** ./src/read/combinators/pattern.ts ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Pattern; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Pattern extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(desc, pattern) {
    super();
    this.desc = desc;
    this.pattern = pattern;
  }

  get name() {
    return "pattern[".concat(this.desc, "]");
  }

  invoke(input) {
    let rest = input.sliceRest;
    let match = rest.match(this.pattern);

    if (match) {
      let matched = match[0];
      let next = input.slice(matched.length);
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
    } else {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["err"])(input, "pattern");
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/pick.ts":
/*!**************************************!*\
  !*** ./src/read/combinators/pick.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Pick; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



class Pick extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(combinators, callbacks) {
    super();

    _defineProperty(this, "name", "pick");

    this.combinators = combinators;
    this.callbacks = callbacks;
  }

  invoke(input) {
    let current = input;

    for (let [name, item] of Object.entries(this.combinators)) {
      let firstResult = current.invoke(item, {
        context: name
      });

      if (firstResult.kind === "ok") {
        let [next, value] = firstResult.value;
        let result = this.callbacks[name](value);

        if (result.kind === "ok") {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([next, result.value]);
        } else {
          return result;
        }
      }
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "any");
  }

}

/***/ }),

/***/ "./src/read/combinators/seq.ts":
/*!*************************************!*\
  !*** ./src/read/combinators/seq.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Seq; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");


class Seq extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(name, combinators) {
    super();
    this.name = name;
    this.combinators = combinators;
  }

  invoke(input) {
    let out = [];
    let current = input;

    for (let item of this.combinators) {
      let result = current.invoke(item);

      if (result.kind === "ok") {
        let [next, value] = result.value;
        out.push(value);
        current = next.rest;
      } else {
        return result;
      }
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current.rest, out]);
  }

}

/***/ }),

/***/ "./src/read/combinators/tag.ts":
/*!*************************************!*\
  !*** ./src/read/combinators/tag.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Tag; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Tag extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(source) {
    super();
    this.source = source;
  }

  get name() {
    return JSON.stringify(this.source);
  }

  invoke(input) {
    let next = input.slice(this.source.length);

    if (next.fragment === this.source) {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
    } else {
      return {
        kind: "err",
        snippet: input,
        reason: "tag"
      };
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/take-until.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/take-until.ts ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TakeUntil; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



class TakeUntil extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(pattern) {
    super();

    _defineProperty(this, "name", "takeUntil");

    this.pattern = pattern;
  }

  invoke(input) {
    let next = input;

    while (true) {
      if (next.isEOF() || next.isMatch(this.pattern)) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
      } else {
        next = next.extend(1);
      }
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/take-while.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/take-while.ts ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TakeWhile; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



class TakeWhile extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(pattern) {
    super();

    _defineProperty(this, "name", "takeWhile");

    this.pattern = pattern;
  }

  invoke(input) {
    let next = input;

    while (true) {
      if (next.isEOF()) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
      } else if (next.isMatch(this.pattern)) {
        next = next.extend(this.pattern.length);
      } else if (next.length === 0) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["err"])(input, "takeWhile");
      } else {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
      }
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/wrap.ts":
/*!**************************************!*\
  !*** ./src/read/combinators/wrap.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Wrap; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Wrap extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(combinator) {
    super();
    this.combinator = combinator;
  }

  get name() {
    return "wrap \u2022 ".concat(this.combinator.name);
  }

  invoke(input) {
    let result = input.invoke(this.combinator);

    if (result.kind === "err") {
      return result;
    } else {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([result.value[0], [result.value[1]]]);
    }
  }

}

/***/ }),

/***/ "./src/read/debug.ts":
/*!***************************!*\
  !*** ./src/read/debug.ts ***!
  \***************************/
/*! exports provided: preInvoke, postInvoke, outputStyle, outputString, afterSnippet, trunc, truncString, getTrace, printTrace, indent, outdent, indentWS, formatDebuggable, debugFormatToken */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preInvoke", function() { return preInvoke; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "postInvoke", function() { return postInvoke; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outputStyle", function() { return outputStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outputString", function() { return outputString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterSnippet", function() { return afterSnippet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trunc", function() { return trunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "truncString", function() { return truncString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTrace", function() { return getTrace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printTrace", function() { return printTrace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indent", function() { return indent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outdent", function() { return outdent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indentWS", function() { return indentWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDebuggable", function() { return formatDebuggable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debugFormatToken", function() { return debugFormatToken; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");

const ERROR = "color: red";
const SUCCESS = "color: green";
const NORMAL = "color: #333";
const OPTIONAL = "color: #999";
let childStack = [];
let root;
function preInvoke({
  combinator,
  snippet,
  optional
}) {
  let child = {
    combinator,
    preSnippet: snippet,
    optional,
    children: []
  };

  if (childStack.length !== 0) {
    let last = childStack[childStack.length - 1];
    last.children.push(child);
  }

  childStack.push(child);
}
function postInvoke(result) {
  let last = childStack[childStack.length - 1];
  last.output = result;
  let row = childStack.pop();

  if (childStack.length === 0) {
    root = row;
  }
}
function outputStyle({
  output,
  optional
}, weight) {
  if (output === undefined) {
    throw new Error("assert: unexpected undefined output (should be a result)");
  }

  switch (output.kind) {
    case "ok":
      return "".concat(SUCCESS, ";").concat(weight);

    case "err":
      {
        if (optional) {
          return OPTIONAL;
        } else {
          return "".concat(ERROR, ";").concat(weight);
        }
      }
  }
}
function outputString(output) {
  if (output === undefined) {
    throw new Error("assert: unexpected undefined output (should be a result)");
  }

  switch (output.kind) {
    case "ok":
      return "".concat(formatDebuggable(output.value[1]), "%c");

    case "err":
      return "".concat(output.fatal ? "fatal " : "", "error: ").concat(output.reason, " %c@ ").concat(output.snippet.fmt());
  }
}
function afterSnippet(output) {
  if (output === undefined) {
    throw new Error("assert: unexpected undefined output (should be a result)");
  }

  switch (output.kind) {
    case "ok":
      return output.value[0];

    case "err":
      return output.snippet;
  }
}
function trunc(snippet) {
  let rest = snippet.sliceRest;

  if (rest.length > 13) {
    return "".concat(rest.slice(0, 10), "...");
  } else {
    return rest.padEnd(13);
  }
}
function truncString(snippet, length = 13) {
  if (snippet.length > length) {
    return "".concat(snippet.slice(0, length - 3), "...");
  } else {
    return snippet.padEnd(length);
  }
}
function getTrace() {
  let current = root;

  if (current === undefined) {
    throw new Error("attempting to get the trace, but none was recorded");
  }

  root = undefined;
  return current;
}
function printTrace(indent = 0, nestedError = 0, parentStatus, row = getTrace()) {
  if (row === undefined) {
    // tslint:disable-next-line:no-console
    console.log("%cassert: unexpected undefined row", ERROR);
    return;
  }

  let context = row.combinator.name;
  let afterPad = Math.max(60 - indent - context.length - nestedError, 0);
  let inErrorHere = row.output && row.output.kind === "err" && row.children.length > 0 && indent !== 0;
  let currentStatus;

  if (row.output && row.output.kind === "err") {
    if (row.optional) {
      currentStatus = "optional";
    } else {
      currentStatus = "error";
    }
  } else {
    currentStatus = "success";
  }

  let weight = parentStatus === currentStatus ? "font-weight: normal" : "font-weight: bold";

  if (inErrorHere) {
    // tslint:disable-next-line:no-console
    console.groupCollapsed("".concat(String(indent).padEnd(3), "%c").concat(" ".repeat(indent), "%c").concat(context, "%c").concat(" ".repeat(afterPad), "| ").concat(trunc(row.preSnippet), " | ").concat(trunc(afterSnippet(row.output)), " | %c").concat(outputString(row.output)), NORMAL, outputStyle(row, weight), NORMAL, outputStyle(row, weight), NORMAL);
    nestedError += 2;
  } else {
    // tslint:disable-next-line:no-console
    console.log("".concat(String(indent).padEnd(3), "%c").concat(" ".repeat(indent), "%c").concat(context, "%c").concat(" ".repeat(afterPad), "| ").concat(trunc(row.preSnippet), " | ").concat(trunc(afterSnippet(row.output)), " | %c").concat(outputString(row.output)), NORMAL, outputStyle(row, weight), NORMAL, outputStyle(row, weight), NORMAL);
  }

  for (let child of row.children) {
    printTrace(indent + 1, nestedError, currentStatus, child);
  }

  if (inErrorHere) {
    console.groupEnd();
  }
}
let TAB = 0;
function indent() {
  TAB += 1;
}
function outdent() {
  TAB -= 1;
}
function indentWS() {
  return " ".repeat(TAB);
}
function formatDebuggable(debuggable) {
  if (typeof debuggable === "string") {
    return debuggable;
  } else if (debuggable === null) {
    return "null";
  } else if (Array.isArray(debuggable)) {
    if (debuggable.length <= 2) {
      return "[".concat(debuggable.map(formatDebuggable).join(", "), "]");
    } else {
      return "[".concat(formatDebuggable(debuggable[0]), ", ").concat(formatDebuggable(debuggable[1]), ", ").concat(formatDebuggable(debuggable[2]), ", ...]");
    }
  } else if (debuggable instanceof _snippet__WEBPACK_IMPORTED_MODULE_0__["Snippet"]) {
    return debuggable.fmt();
  } else {
    return debugFormatToken(debuggable);
  }
}
function debugFormatToken(token) {
  return "<token:".concat(token.type, ">");
}

/***/ }),

/***/ "./src/read/hbs.ts":
/*!*************************!*\
  !*** ./src/read/hbs.ts ***!
  \*************************/
/*! exports provided: WS, STRING, NUMBER, SEXP, EQ, NAMED, SPACED_TOKENS, INTERPOLATE, EXPRESSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WS", function() { return WS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STRING", function() { return STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMBER", function() { return NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEXP", function() { return SEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EQ", function() { return EQ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAMED", function() { return NAMED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPACED_TOKENS", function() { return SPACED_TOKENS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INTERPOLATE", function() { return INTERPOLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXPRESSION", function() { return EXPRESSION; });
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./combinators */ "./src/read/combinators.ts");
/* harmony import */ var _combinators_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinators/core */ "./src/read/combinators/core.ts");
/* harmony import */ var _combinators_hbs_interpolate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators/hbs/interpolate */ "./src/read/combinators/hbs/interpolate.ts");
/* harmony import */ var _combinators_hbs_number__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./combinators/hbs/number */ "./src/read/combinators/hbs/number.ts");
/* harmony import */ var _combinators_hbs_sexp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./combinators/hbs/sexp */ "./src/read/combinators/hbs/sexp.ts");
/* harmony import */ var _combinators_hbs_simple_path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./combinators/hbs/simple-path */ "./src/read/combinators/hbs/simple-path.ts");
/* harmony import */ var _combinators_hbs_spaced_tokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./combinators/hbs/spaced-tokens */ "./src/read/combinators/hbs/spaced-tokens.ts");
/* harmony import */ var _combinators_hbs_string__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./combinators/hbs/string */ "./src/read/combinators/hbs/string.ts");
/* harmony import */ var _token_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./token-enum */ "./src/read/token-enum.ts");


 // eslint-disable-next-line import/no-cycle


 // eslint-disable-next-line import/no-cycle


 // eslint-disable-next-line import/no-cycle




const WS = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators_core__WEBPACK_IMPORTED_MODULE_2__["token"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["pattern"])(/^[\u0009\u000A\u000C\u0020]+/u, "WS"), _token_enum__WEBPACK_IMPORTED_MODULE_9__["TokenType"].WS));
const STRING = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => new _combinators_hbs_string__WEBPACK_IMPORTED_MODULE_8__["default"]());
const NUMBER = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => new _combinators_hbs_number__WEBPACK_IMPORTED_MODULE_4__["default"]());
const SEXP = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => new _combinators_hbs_sexp__WEBPACK_IMPORTED_MODULE_5__["default"]());
const EQ = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators_core__WEBPACK_IMPORTED_MODULE_2__["token"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["tag"])("="), _token_enum__WEBPACK_IMPORTED_MODULE_9__["TokenType"].Eq));
const NAMED = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["seq"])("NAMED", _combinators_core__WEBPACK_IMPORTED_MODULE_2__["ID"], EQ, EXPRESSION));
const SPACED_TOKENS = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => new _combinators_hbs_spaced_tokens__WEBPACK_IMPORTED_MODULE_7__["default"]());
const INTERPOLATE = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => new _combinators_hbs_interpolate__WEBPACK_IMPORTED_MODULE_3__["default"]());
const EXPRESSION = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["any"])("EXPRESSION", SEXP, _combinators_hbs_simple_path__WEBPACK_IMPORTED_MODULE_6__["SIMPLE_PATH"], STRING, NUMBER));

/***/ }),

/***/ "./src/read/html.ts":
/*!**************************!*\
  !*** ./src/read/html.ts ***!
  \**************************/
/*! exports provided: TEXT, START_TAG, END_TAG, COMMENT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXT", function() { return TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "START_TAG", function() { return START_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END_TAG", function() { return END_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMENT", function() { return COMMENT; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators */ "./src/read/combinators.ts");
/* harmony import */ var _combinators_html_start_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./combinators/html/start-tag */ "./src/read/combinators/html/start-tag.ts");
/* harmony import */ var _combinators_html_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./combinators/html/text */ "./src/read/combinators/html/text.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");
/* harmony import */ var _combinators_html_end_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./combinators/html/end-tag */ "./src/read/combinators/html/end-tag.ts");









const TEXT = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => new _combinators_html_text__WEBPACK_IMPORTED_MODULE_5__["default"]());
const START_TAG = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => new _combinators_html_start_tag__WEBPACK_IMPORTED_MODULE_4__["default"]());
const END_TAG = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => new _combinators_html_end_tag__WEBPACK_IMPORTED_MODULE_8__["default"]());
const COMMENT = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_utils__WEBPACK_IMPORTED_MODULE_7__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("COMMENT", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("<!--"), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^.*(?=[-][-][>])/u, "comment body"), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("-->")), ([start, data, end]) => {
  return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["comment"])(data.span, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end)));
}));

/***/ }),

/***/ "./src/read/logger.ts":
/*!****************************!*\
  !*** ./src/read/logger.ts ***!
  \****************************/
/*! exports provided: Logger, combinatorDebugType, isTransparent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combinatorDebugType", function() { return combinatorDebugType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTransparent", function() { return isTransparent; });
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug */ "./src/read/debug.ts");

class Logger {
  constructor(enableLogging) {
    this.enableLogging = enableLogging;
  }

  invoke(c, input, {
    forceTransparent,
    optional
  } = {}) {
    let logged = this.enableLogging && !isTransparent(c) && !forceTransparent;

    if (logged) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_0__["preInvoke"])({
        combinator: c,
        snippet: input,
        optional: !!optional
      });
      Object(_debug__WEBPACK_IMPORTED_MODULE_0__["indent"])();
    }

    let result = c.invoke(input);

    if (logged) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_0__["outdent"])();
      Object(_debug__WEBPACK_IMPORTED_MODULE_0__["postInvoke"])(result);
    }

    return result;
  }

}
function combinatorDebugType(c) {
  if (typeof c === "function") {
    return "normal";
  } else {
    return c.kind || "normal";
  }
}
function isTransparent(c) {
  if (typeof c === "function") {
    return false;
  } else {
    return c.kind === "transparent";
  }
}

/***/ }),

/***/ "./src/read/multi.ts":
/*!***************************!*\
  !*** ./src/read/multi.ts ***!
  \***************************/
/*! exports provided: many */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "many", function() { return many; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");


function many(source) {
  return {
    name: "many \u2022 ".concat(Object(_utils__WEBPACK_IMPORTED_MODULE_1__["combinatorName"])(source)),

    invoke(input) {
      let current = input;
      let out = [];
      let count = 0;

      while (true) {
        if (count++ > 1000) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "likely infinite loop");
        }

        if (current.isEOF()) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current.rest, out]);
        }

        let iterate = current.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_1__["present"])(source));

        if (iterate.kind === "err") {
          // if we encountered a fatal error, the entire `many`
          // is an error
          if (iterate.fatal) {
            return iterate;
          } else {
            return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current.rest, out]);
          }
        } else {
          let [next, match] = iterate.value;
          out.push(match);
          current = next;
        }
      }
    }

  };
}

/***/ }),

/***/ "./src/read/read.ts":
/*!**************************!*\
  !*** ./src/read/read.ts ***!
  \**************************/
/*! exports provided: LoggingType, CONTENT, TOP_LEVEL, read */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoggingType", function() { return LoggingType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTENT", function() { return CONTENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_LEVEL", function() { return TOP_LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "read", function() { return read; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators */ "./src/read/combinators.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logger */ "./src/read/logger.ts");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./debug */ "./src/read/debug.ts");
/* harmony import */ var _html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./html */ "./src/read/html.ts");
/* harmony import */ var _multi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./multi */ "./src/read/multi.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hbs */ "./src/read/hbs.ts");
/* harmony import */ var _combinators_hbs_block__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./combinators/hbs/block */ "./src/read/combinators/hbs/block.ts");





 // eslint-disable-next-line import/no-cycle





 // eslint-disable-next-line import/no-cycle


let LoggingType;

(function (LoggingType) {
  LoggingType["Return"] = "Return";
  LoggingType["Print"] = "Print";
  LoggingType["None"] = "Off";
})(LoggingType || (LoggingType = {}));

const CONTENT = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("CONTENT", _html__WEBPACK_IMPORTED_MODULE_6__["COMMENT"], _html__WEBPACK_IMPORTED_MODULE_6__["END_TAG"], _html__WEBPACK_IMPORTED_MODULE_6__["START_TAG"], _html__WEBPACK_IMPORTED_MODULE_6__["TEXT"]));
const TOP_LEVEL = {
  name: "TOP_LEVEL",

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("top level", _combinators_hbs_block__WEBPACK_IMPORTED_MODULE_11__["BLOCK"], _hbs__WEBPACK_IMPORTED_MODULE_10__["INTERPOLATE"], CONTENT));
  }

};
function read(source, {
  logging
} = {}) {
  try {
    let input = _snippet__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input(source, new _logger__WEBPACK_IMPORTED_MODULE_4__["Logger"](logging === LoggingType.Return || logging === LoggingType.Print));
    let result = input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_9__["complete"])(Object(_utils__WEBPACK_IMPORTED_MODULE_9__["map"])(Object(_multi__WEBPACK_IMPORTED_MODULE_7__["many"])(TOP_LEVEL), tokens => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_8__["root"])(tokens, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...tokens)));
    })));

    if (logging === LoggingType.Return) {
      return {
        root: Object(_utils__WEBPACK_IMPORTED_MODULE_9__["mapResult"])(result, ([, token]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(token)),
        trace: Object(_debug__WEBPACK_IMPORTED_MODULE_5__["getTrace"])()
      };
    } else {
      return {
        root: Object(_utils__WEBPACK_IMPORTED_MODULE_9__["mapResult"])(result, ([, token]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(token))
      };
    }
  } finally {
    if (logging === LoggingType.Print) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_5__["printTrace"])();
    }
  }
}

/***/ }),

/***/ "./src/read/serialize.ts":
/*!*******************************!*\
  !*** ./src/read/serialize.ts ***!
  \*******************************/
/*! exports provided: serializeRoot, serializeNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeRoot", function() { return serializeRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeNode", function() { return serializeNode; });
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _token_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token-enum */ "./src/read/token-enum.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");




function serializeRoot(root, source) {
  let out = [];

  for (let token of root.children) {
    out.push(...serializeNode(token, source));
  }

  return out.join("");
}
function serializeNode(token, source) {
  if (token === null) {
    return [""];
  }

  switch (token.type) {
    // leaf tokens
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Dot:
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Eq:
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Identifier:
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].WS:
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Text:
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].AttributeName:
      return [Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.span, source)];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].String:
      {
        let quote = token.quote === _tokens__WEBPACK_IMPORTED_MODULE_0__["QuoteType"].Single ? "'" : "\"";
        return [quote, Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.data, source), quote];
      }

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Number:
      {
        let out = [];

        if (token.negative) {
          out.push(Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.negative, source));
        }

        out.push(Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.head, source));

        if (token.tail) {
          out.push(".", Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.tail, source));
        }

        return out;
      }

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].ArgName:
      return ["@", Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.name, source)];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].AttributeValue:
      return serializeAttributeValue(token, source);

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Argument:
      return ["@", Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.name, source)];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Sexp:
      return ["(", ...serializeList(token.children, source), ")"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].UntrustedInterpolate:
      return ["{{", ...serializeList(token.children, source), "}}"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].TrustedInterpolate:
      return ["{{{", ...serializeList(token.children, source), "}}}"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Block:
      return [...serializeNode(token.open, source), ...serializeList(token.body, source), ...serializeNode(token.close, source)];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].OpenBlock:
      return ["{{#", ...serializeList(token.name, source), ...serializeList(token.head, source), "}}"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].BlockParams:
      return ["as |", ...serializeList(token.params, source), "|"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].CloseBlock:
      return ["{{/", ...serializeList(token.name, source), "}}"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Comment:
      return ["<!--", Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])(token.data, source), "-->"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].StartTag:
      return ["<", ...serializeList(token.name, source), ...serializeList(token.attributes, source), ">"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].EndTag:
      return ["</", ...serializeList(token.name, source), ...serializeNode(token.trailing, source), ">"];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].ValuedAttribute:
      return [...serializeNode(token.name, source), "=", ...serializeNode(token.value, source)];

    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].StringInterpolation:
      return serializeList(token.parts, source);

    default:
      return Object(_utils__WEBPACK_IMPORTED_MODULE_3__["unreachable"])(token);
  }
}

function serializeAttributeValue(token, source) {
  if (Object(_tokens__WEBPACK_IMPORTED_MODULE_0__["isInterpolateAttribute"])(token)) {
    return serializeNode(token.value, source);
  }

  return [serializeQuote(token), ...serializeNode(token.value, source), serializeQuote(token)];
}

function serializeQuote(token) {
  switch (token.valueType) {
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].SingleQuoted:
      return "'";

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].DoubleQuoted:
      return "\"";

    default:
      return "";
  }
}

function serializeList(tokens, source) {
  if (tokens === null) {
    return [];
  }

  return [...tokens.flatMap(child => serializeNode(child, source))];
}

/***/ }),

/***/ "./src/read/token-builder.ts":
/*!***********************************!*\
  !*** ./src/read/token-builder.ts ***!
  \***********************************/
/*! exports provided: buildPresentTokens, str, int, decimal, id, arg, dot, eq, sp, ws, block, as, interpolate, stringInterpolate, attrInterpolate, sexp, text, comment, startTag, endTag, argName, attr, TokenBuilder, root */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildPresentTokens", function() { return buildPresentTokens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int", function() { return int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decimal", function() { return decimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "id", function() { return id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arg", function() { return arg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sp", function() { return sp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ws", function() { return ws; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "as", function() { return as; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringInterpolate", function() { return stringInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attrInterpolate", function() { return attrInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sexp", function() { return sexp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comment", function() { return comment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTag", function() { return startTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endTag", function() { return endTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argName", function() { return argName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attr", function() { return attr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenBuilder", function() { return TokenBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




function buildPresentTokens(tok, builder) {
  return tok.map(token => token(builder));
}
function str(name) {
  return builder => {
    let start = builder.consume(name[0]);
    let data = builder.consume(name.slice(1, -1));
    let end = builder.consume(name.slice(-1));
    let quote = name[0] === "'" ? _tokens__WEBPACK_IMPORTED_MODULE_0__["QuoteType"].Single : _tokens__WEBPACK_IMPORTED_MODULE_0__["QuoteType"].Double;
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["stringToken"]({
      data,
      quote
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}
function int(num) {
  if (num[0] === "-") {
    return builder => {
      let negative = builder.consume("-");
      let head = builder.consume(num.slice(1));
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["numberToken"]({
        head,
        tail: null,
        negative
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(negative, head));
    };
  } else {
    return builder => {
      let head = builder.consume(num);
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["numberToken"]({
        head,
        tail: null,
        negative: null
      }, head);
    };
  }
}
function decimal(num) {
  let [, negative, head, tail] = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(num.match(/^(-?)([0-9]+)\.([0-9]+)$/));
  return builder => {
    let negativeSpan = negative ? builder.consume("-") : null;
    let headSpan = builder.consume(head);
    let tailSpan = null;

    if (tail) {
      builder.consume(".");
      tailSpan = builder.consume(tail);
    }

    return _tokens__WEBPACK_IMPORTED_MODULE_0__["numberToken"]({
      head: headSpan,
      tail: tailSpan,
      negative: negativeSpan
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(negativeSpan, headSpan, tailSpan));
  };
}
function id(name) {
  return builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["id"](builder.consume(name));
}
function arg(name) {
  return builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["arg"](builder.consume(name));
}
const dot = builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["dot"](builder.consume("."));
const eq = builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["eq"](builder.consume("="));
const sp = builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["ws"](builder.consume(" "));
function ws(space) {
  return builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["ws"](builder.consume(space));
}
function block(name, head, ...body) {
  let curriedName = typeof name === "string" ? [id(name)] : name;
  return builder => {
    let openToken = builder.consume("{{#");
    let nameTokens = buildTokens(curriedName, builder);
    let headTokens = buildTokens(head, builder);
    let endOpen = builder.consume("}}");
    let bodyTokens = body.map(tok => tok(builder));
    let close = builder.consume("{{/");
    let closeName = buildTokens(curriedName, builder);
    let endClose = builder.consume("}}");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["block"]({
      open: _tokens__WEBPACK_IMPORTED_MODULE_0__["openBlock"]({
        name: nameTokens,
        head: headTokens
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(openToken, endOpen)),
      body: bodyTokens,
      close: _tokens__WEBPACK_IMPORTED_MODULE_0__["closeBlock"](closeName, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(close, endClose))
    });
  };
}
function as(...params) {
  return builder => {
    let start = builder.consume("as |");
    let head = params.slice(0, -1);
    let tail = params.slice(-1)[0];
    let tokenList = head.flatMap(param => typeof param === "function" ? [param(builder)] : [id(param)(builder), sp(builder)]);
    tokenList.push(id(tail)(builder));
    let end = builder.consume("|");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["blockParams"](tokenList, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}

function buildTokens(input, builder) {
  return input.map(tok => tok(builder));
}

function interpolate(...children) {
  return builder => {
    let open = builder.consume("{{");
    let out = children.map(child => child(builder));
    let close = builder.consume("}}");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["interpolate"](out, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close));
  };
}
function stringInterpolate(children, quote) {
  return builder => {
    let open = builder.consume(quote);
    let out = children.map(child => child(builder));
    let close = builder.consume(quote);
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
      type: quoteType(quote),
      value: _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"](out, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...out))
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close));
  };
}
function attrInterpolate(...tokenList) {
  return builder => {
    let value = interpolate(...tokenList)(builder);
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
      type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].Interpolate,
      value
    }, value.span);
  };
}
function sexp(children) {
  return builder => {
    let open = builder.consume("(");
    let innerStart = builder.pos;
    let out = children.map(child => child(builder));
    let innerEnd = builder.pos;
    let close = builder.consume(")");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["sexp"]({
      children: out,
      inner: Object(_span__WEBPACK_IMPORTED_MODULE_1__["span"])(innerStart, innerEnd)
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close));
  };
}
function text(chars) {
  return builder => {
    let out = builder.consume(chars);
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["text"](out);
  };
}
function comment(chars) {
  return builder => {
    let start = builder.consume("<!--");
    let data = builder.consume(chars);
    let end = builder.consume("-->");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["comment"](data, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}

function isTagName(input) {
  return typeof input === "string" || Array.isArray(input) || typeof input === "function";
}

function buildTagName(name) {
  if (Array.isArray(name)) {
    let toks = [];

    for (let part of name) {
      if (typeof part === "function") {
        toks.push(part);
      } else {
        switch (part[0]) {
          case "@":
            toks.push(arg(part));
            break;

          default:
            toks.push(id(part));
        }
      }
    }

    return toks;
  } else {
    if (typeof name === "function") {
      return [name];
    } else {
      switch (name[0]) {
        case "@":
          return [arg(name)];

        default:
          return [id(name)];
      }
    }
  }
}

function startTag(options) {
  if (isTagName(options)) {
    return builder => {
      let start = builder.consume("<");
      let nameTokens = buildPresentTokens(buildTagName(options), builder);
      let end = builder.consume(">");
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["startTag"]({
        name: nameTokens
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
    };
  } else {
    return builder => {
      let {
        name,
        attrs,
        selfClosing
      } = options;
      let start = builder.consume("<");
      let nameTokens = buildPresentTokens(buildTagName(name), builder);
      let children = attrs.map(a => a(builder));

      if (selfClosing) {
        builder.consume("/");
      }

      let end = builder.consume(">");
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["startTag"]({
        name: nameTokens,
        attrs: children,
        selfClosing
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
    };
  }
}
function endTag(options) {
  let tagName = isTagName(options) ? options : options.name;
  let trailing = isTagName(options) ? undefined : options.trailing;
  return builder => {
    let start = builder.consume("</");
    let tagTokens = buildPresentTokens(buildTagName(tagName), builder);
    let trailingToken = trailing ? ws(trailing)(builder) : undefined;
    let end = builder.consume(">");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["endTag"]({
      name: tagTokens,
      trailing: trailingToken
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}
function argName(name) {
  return builder => {
    let startSpan = builder.consume(name[0]);
    let nameSpan = builder.consume(name.slice(1));
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["argName"](nameSpan, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(startSpan, nameSpan));
  };
}
function attr(options) {
  if (typeof options === "string") {
    return builder => {
      let nameSpan = builder.consume(options);
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["attrName"](nameSpan);
    };
  } else if (typeof options === "function") {
    return options;
  } else {
    return builder => {
      let {
        name,
        value: rawValue
      } = options;
      let start = builder.pos;
      let nameToken = typeof name === "string" ? _tokens__WEBPACK_IMPORTED_MODULE_0__["attrName"](builder.consume(name)) : name(builder);
      builder.consume("=");
      let valueToken;

      if (typeof rawValue === "string") {
        switch (rawValue[0]) {
          case "\"":
            {
              let quoteStart = builder.consume("\"");
              let valueSpan = builder.consume(rawValue.slice(1, -1));
              let quoteEnd = builder.consume("\"");
              let interpolation = _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"]([_tokens__WEBPACK_IMPORTED_MODULE_0__["text"](valueSpan)], valueSpan);
              valueToken = _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
                type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].DoubleQuoted,
                value: interpolation
              }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(quoteStart, quoteEnd));
              break;
            }

          case "'":
            {
              let quoteStart = builder.consume("'");
              let valueSpan = builder.consume(rawValue.slice(1, -1));
              let quoteEnd = builder.consume("'");
              let interpolation = _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"]([_tokens__WEBPACK_IMPORTED_MODULE_0__["text"](valueSpan)], valueSpan);
              valueToken = _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
                type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].SingleQuoted,
                value: interpolation
              }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(quoteStart, quoteEnd));
              break;
            }

          default:
            {
              let valueSpan = builder.consume(rawValue);
              let interpolation = _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"]([_tokens__WEBPACK_IMPORTED_MODULE_0__["text"](valueSpan)], valueSpan);
              valueToken = _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
                type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].Unquoted,
                value: interpolation
              }, valueSpan);
            }
        }
      } else {
        valueToken = rawValue(builder);
      }

      let end = builder.pos;
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["valuedAttr"]({
        name: nameToken,
        value: valueToken
      }, {
        start,
        end
      });
    };
  }
}

function quoteType(quote) {
  switch (quote) {
    case "\"":
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].DoubleQuoted;

    case "'":
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].SingleQuoted;

    default:
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].Unquoted;
  }
}

class TokenBuilder {
  constructor(pos = 0) {
    _defineProperty(this, "output", "");

    this.pos = pos;
  }

  consume(chars) {
    this.output += chars;
    let start = this.pos;
    this.pos += chars.length;
    return {
      start,
      end: this.pos
    };
  }
  /**
   * This method is used by the AstBuilder to share an output
   */


  updateOutput(output) {
    this.output = output;
  }

  get source() {
    return this.output;
  }

}
function root(...children) {
  let builder = new TokenBuilder();
  let start = builder.pos;
  let out = children.map(child => child(builder));
  let end = builder.pos;
  return {
    root: _tokens__WEBPACK_IMPORTED_MODULE_0__["root"](out, Object(_span__WEBPACK_IMPORTED_MODULE_1__["span"])(start, end)),
    source: builder.source
  };
}

/***/ }),

/***/ "./src/read/token-enum.ts":
/*!********************************!*\
  !*** ./src/read/token-enum.ts ***!
  \********************************/
/*! exports provided: TokenType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenType", function() { return TokenType; });
/**
 * Steps for creating a new token type:
 *
 * 1. add a variant to TokenType
 * 2. create an interface {Name}Token
 * 3. add the new token to LeafTokenMap or TokenMap
 * 4. update serializeNode to serialize the new token
 * 5. add a function to construct the new token (unless it's always nested
 *    inside another token like `BlockParams`)
 * 6. update token-builder.ts to support building the new token
 */
let TokenType;

(function (TokenType) {
  TokenType["Root"] = "Root";
  TokenType["UntrustedInterpolate"] = "Interpolate";
  TokenType["TrustedInterpolate"] = "TrustedInterpolate";
  TokenType["Block"] = "Block";
  TokenType["BlockParams"] = "BlockParams";
  TokenType["OpenBlock"] = "OpenBlock";
  TokenType["CloseBlock"] = "CloseBlock";
  TokenType["Sexp"] = "Sexp";
  TokenType["Identifier"] = "Identifier";
  TokenType["Argument"] = "Argument";
  TokenType["Dot"] = "Dot";
  TokenType["Eq"] = "Eq";
  TokenType["WS"] = "WS";
  TokenType["String"] = "String";
  TokenType["Number"] = "Number";
  TokenType["Text"] = "Text";
  TokenType["Comment"] = "Comment";
  TokenType["StartTag"] = "StartTag";
  TokenType["EndTag"] = "EndTag";
  TokenType["ArgName"] = "ArgName";
  TokenType["AttributeName"] = "AttributeName";
  TokenType["AttributeValue"] = "AttributeValue";
  TokenType["ValuedAttribute"] = "ValuedAttribute";
  TokenType["StringInterpolation"] = "StringInterpolation";
})(TokenType || (TokenType = {}));

/***/ }),

/***/ "./src/read/tokens.ts":
/*!****************************!*\
  !*** ./src/read/tokens.ts ***!
  \****************************/
/*! exports provided: leaf, id, dot, eq, ws, text, attrName, QuoteType, stringToken, numberToken, comment, arg, equalPath, blockParams, block, openBlock, closeBlock, AttributeValueType, argName, stringInterpolation, isInterpolateAttribute, attrValue, valuedAttr, startTag, endTag, sexp, interpolate, trustedInterpolate, root, isParentToken */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "leaf", function() { return leaf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "id", function() { return id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ws", function() { return ws; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attrName", function() { return attrName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuoteType", function() { return QuoteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringToken", function() { return stringToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numberToken", function() { return numberToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comment", function() { return comment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arg", function() { return arg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equalPath", function() { return equalPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blockParams", function() { return blockParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "openBlock", function() { return openBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeBlock", function() { return closeBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AttributeValueType", function() { return AttributeValueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argName", function() { return argName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringInterpolation", function() { return stringInterpolation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInterpolateAttribute", function() { return isInterpolateAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attrValue", function() { return attrValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valuedAttr", function() { return valuedAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTag", function() { return startTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endTag", function() { return endTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sexp", function() { return sexp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trustedInterpolate", function() { return trustedInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isParentToken", function() { return isParentToken; });
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _token_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./token-enum */ "./src/read/token-enum.ts");


function leaf(type) {
  return span => ({
    type,
    span
  });
}
const id = leaf(_token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Identifier);
const dot = leaf(_token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Dot);
const eq = leaf(_token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Eq);
const ws = leaf(_token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].WS);
const text = leaf(_token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Text);
const attrName = leaf(_token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].AttributeName);
let QuoteType;

(function (QuoteType) {
  QuoteType[QuoteType["Single"] = 0] = "Single";
  QuoteType[QuoteType["Double"] = 1] = "Double";
})(QuoteType || (QuoteType = {}));

function stringToken({
  data,
  quote
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].String,
    span,
    data,
    quote
  };
}
function numberToken({
  head,
  tail,
  negative
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Number,
    span,
    negative,
    head,
    tail
  };
}
function comment(data, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Comment,
    data,
    span
  };
}
function arg(span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Argument,
    name: {
      start: span.start + 1,
      end: span.end
    },
    span
  };
}
function equalPath(leftTokens, rightTokens, source) {
  if (leftTokens.length !== rightTokens.length) {
    return false;
  }

  return leftTokens.every((left, index) => {
    let right = rightTokens[index];

    if (left.type !== right.type) {
      return false;
    }

    switch (left.type) {
      case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].ArgName:
        return Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(left.name, source) === Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(right.name, source);

      case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Identifier:
        return Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(left.span, source) === Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(right.span, source);

      case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Dot:
        return true;

      default:
        throw new Error("assert: unexpected token type ".concat(left.type));
    }
  });
}
function blockParams(params, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].BlockParams,
    span,
    params
  };
}
function block({
  open,
  body,
  close
}) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Block,
    span: Object(_span__WEBPACK_IMPORTED_MODULE_0__["range"])(open.span, close.span),
    open,
    body,
    close
  };
}
function openBlock({
  name,
  head
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].OpenBlock,
    span,
    name,
    head
  };
}
function closeBlock(name, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].CloseBlock,
    span,
    name
  };
}
let AttributeValueType;

(function (AttributeValueType) {
  AttributeValueType["Interpolate"] = "Interpolate";
  AttributeValueType["Unquoted"] = "Unquoted";
  AttributeValueType["SingleQuoted"] = "SingleQuoted";
  AttributeValueType["DoubleQuoted"] = "DoubleQuoted";
})(AttributeValueType || (AttributeValueType = {}));

function argName(name, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].ArgName,
    name,
    span
  };
}
function stringInterpolation(parts, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].StringInterpolation,
    span,
    parts
  };
}
function isInterpolateAttribute(input) {
  return input.valueType === AttributeValueType.Interpolate;
}
function attrValue({
  type,
  value
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].AttributeValue,
    span,
    valueType: type,
    value
  };
}
function valuedAttr({
  name,
  value
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].ValuedAttribute,
    span,
    name,
    value
  };
}
function startTag({
  name,
  attrs,
  selfClosing
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].StartTag,
    span,
    name,
    attributes: attrs || [],
    selfClosing
  };
}
function endTag({
  name,
  trailing
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].EndTag,
    span,
    trailing: trailing ? trailing : null,
    name
  };
}
function sexp({
  children,
  inner
}, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Sexp,
    span,
    inner,
    children
  };
}
function interpolate(children, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].UntrustedInterpolate,
    span,
    children
  };
}
function trustedInterpolate(children, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].TrustedInterpolate,
    span,
    children
  };
}
function root(children, span) {
  return {
    type: _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Root,
    span,
    children
  };
}
function isParentToken(token) {
  switch (token.type) {
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].TrustedInterpolate:
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].UntrustedInterpolate:
    case _token_enum__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Sexp:
      return true;

    default:
      if ("children" in token && Array.isArray(token["children"])) {
        throw new Error("Missing parent token in isParentToken");
      }

      return false;
  }
}

/***/ }),

/***/ "./src/read/utils.ts":
/*!***************************!*\
  !*** ./src/read/utils.ts ***!
  \***************************/
/*! exports provided: mapResult, map, complete, present, combinatorName, unreachable, join, unwrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapResult", function() { return mapResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "complete", function() { return complete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "present", function() { return present; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combinatorName", function() { return combinatorName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unreachable", function() { return unreachable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "join", function() { return join; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return unwrap; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");

function mapResult(result, callback) {
  if (result.kind === "err") {
    return result;
  }

  return callback(result.value);
}
function map(combinator, mapper) {
  return {
    name: combinatorName(combinator),

    invoke(input) {
      let first = input.invoke(combinator, {
        forceTransparent: true
      });

      if (first.kind === "err") {
        return first;
      }

      let [next, value] = first.value;
      let result = mapper(value, next);

      if (result.kind === "err") {
        return result;
      }

      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([next, result.value]);
    }

  };
}
function complete(source) {
  return {
    name: "complete",

    invoke(input) {
      return input.invoke(map(source, (value, next) => {
        if (next.restLength !== 0) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "incomplete");
        } else {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(value);
        }
      }));
    }

  };
}
function present(source) {
  return {
    name: "present",
    kind: "transparent",

    invoke(input) {
      let result = input.invoke(source);

      if (result.kind === "ok") {
        let [next] = result.value;

        if (input.eq(next)) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "empty");
        } else {
          return result;
        }
      } else {
        return result;
      }
    }

  };
}
function combinatorName(c) {
  if (c.name) {
    return c.name;
  } else {
    console.error(c);
    throw new Error("assert: expected combinator name");
  }
}
function unreachable(value) {
  console.error("unreachable value", value);
  throw new Error("unreachable code reached");
}
function join(...items) {
  return items.filter(i => i === null || i === undefined);
}
function unwrap(v) {
  if (v === null || v === undefined) {
    throw new Error("ASSERT: Expected non-null");
  }

  return v;
}

/***/ }),

/***/ "./src/snippet.ts":
/*!************************!*\
  !*** ./src/snippet.ts ***!
  \************************/
/*! exports provided: Snippet, ok, err, fatalError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Snippet", function() { return Snippet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ok", function() { return ok; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "err", function() { return err; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fatalError", function() { return fatalError; });
class Snippet {
  static input(source, logger) {
    return new Snippet(source, 0, 0, logger);
  }

  constructor(source, offset, length, logger) {
    this.source = source;
    this.offset = offset;
    this.length = length;
    this.logger = logger;
  }

  invoke(combinator, options = {}) {
    return this.logger.invoke(combinator, this, options);
  }

  eq(other) {
    return this.source === other.source && this.offset === other.offset && this.length === other.length;
  }

  forSpan(span) {
    return new Snippet(this.source, span.start, span.end - span.start, this.logger);
  }

  fmt() {
    return "<offset:".concat(this.offset, " length:").concat(this.length, ">");
  }

  debugRest() {
    if (this.isEOF()) {
      return "(eof)";
    } else {
      return "".concat(this.source.slice(this.offset + this.length));
    }
  }

  slice(chars) {
    return new Snippet(this.source, this.offset + this.length, chars, this.logger);
  }

  get sliceRest() {
    return this.source.slice(this.offset + this.length);
  }

  get rest() {
    return new Snippet(this.source, this.offset + this.length, 0, this.logger);
  }

  isEOF() {
    return this.offset + this.length === this.source.length;
  }

  isMatch(chars) {
    let slice = this.source.slice(this.offset + this.length, this.offset + this.length + chars.length);
    return slice === chars;
  }

  extend(count = 1) {
    return new Snippet(this.source, this.offset, this.length + count, this.logger);
  }

  get span() {
    return {
      start: this.offset,
      end: this.offset + this.length
    };
  }

  get fragment() {
    return this.source.slice(this.offset, this.offset + this.length);
  }

  get restLength() {
    return this.source.length - this.offset - this.length;
  }

}
function ok(value) {
  return {
    kind: "ok",
    value
  };
}
function err(snippet, reason) {
  return {
    kind: "err",
    snippet,
    reason
  };
}
function fatalError(snippet, reason) {
  return {
    kind: "err",
    snippet,
    reason,
    fatal: true
  };
}

/***/ }),

/***/ "./src/span.ts":
/*!*********************!*\
  !*** ./src/span.ts ***!
  \*********************/
/*! exports provided: span, range, isSpan, getSpan, slice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "span", function() { return span; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function() { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSpan", function() { return isSpan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSpan", function() { return getSpan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return slice; });
function span(start, end) {
  return {
    start,
    end
  };
}
function range(...rawSpans) {
  let spans = rawSpans.filter(s => s !== null && s !== undefined);

  if (spans.length === 0) {
    return span(0, 0);
  }

  let first = spans[0];
  let last = first;

  for (let s of spans) {
    last = s;
  }

  return {
    start: getSpan(first).start,
    end: getSpan(last).end
  };
}
function isSpan(item) {
  return typeof item.start === "number" && typeof item.end === "number";
}
function getSpan(item) {
  if (isSpan(item)) {
    return item;
  } else {
    return item.span;
  }
}
function slice(s, source) {
  return source.slice(s.start, s.end);
}

/***/ }),

/***/ "./tests/combinators-test.ts":
/*!***********************************!*\
  !*** ./tests/combinators-test.ts ***!
  \***********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! qunit */ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(qunit__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./tests/helpers.ts");



const LOGGER = new hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Logger"](qunit__WEBPACK_IMPORTED_MODULE_1__["config"].logging || false);
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["module"])("[combinators] tag");
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: one character tag", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, fragment] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("h")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(1).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(fragment, input.slice(1));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: multi-character tag", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, fragment] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("hello")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(5).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(fragment, input.slice(5));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("mismatch: multi-character tag", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let next = input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("holla"));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqError"])(next, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "tag"));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("mismatch: not at 0 offset", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("hello ")));
  let mismatch = next.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("woold"));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqError"])(mismatch, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["err"])(next, "tag"));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["module"])("[combinators] takeUntil");
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: skipping a chunk of characters", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeUntil("world")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(6).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(6));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: skipping zero characters", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeUntil("hello")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.rest);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: skipping until the last character", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeUntil("d")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(10).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(10));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: skipping until the last characters", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeUntil("world")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(6).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(6));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("mismatch: no match before the end", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeUntil("cruel")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(11).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(11));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["module"])("[combinators] takeWhile");
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: at non-zero offset", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello!!!!", LOGGER);
  let [next1] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("hello")));
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(next1.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeWhile("!")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(9).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(5).slice(4));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: skipping zero characters", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeWhile("hello")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(5).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(5));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("match: skipping until the last characters", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeWhile("hello world")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(11).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(11));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("mismatch: no match before the end", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hellohello", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].takeWhile("hellohello")));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(10).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(match, input.slice(10));
});

/***/ }),

/***/ "./tests/helpers.ts":
/*!**************************!*\
  !*** ./tests/helpers.ts ***!
  \**************************/
/*! exports provided: unwrap, eqResult, eqSnippet, eqSnippets, eqError, printIndentedItems, module, test */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return unwrap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqResult", function() { return eqResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqSnippet", function() { return eqSnippet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqSnippets", function() { return eqSnippets; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqError", function() { return eqError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printIndentedItems", function() { return printIndentedItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "module", function() { return module; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "test", function() { return test; });
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qunit */ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(qunit__WEBPACK_IMPORTED_MODULE_0__);

function unwrap(input) {
  if (input.kind === "ok") {
    return input.value;
  } else {
    throw new Error("Expected Ok result, got Err (reason=".concat(input.reason, ")"));
  }
}
function eqResult(left, right) {
  qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].strictEqual(left.kind, right.kind);

  if (left.kind === "ok" && right.kind === "ok") {
    qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].ok(left.value.eq(right.value));
  } else if (left.kind === "err" && right.kind === "err") {
    qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].ok(left.snippet.eq(right.snippet), "left=".concat(left.snippet.fmt(), " right=").concat(right.snippet.fmt()));
    qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].strictEqual(left.reason, right.reason);
  }
}
function eqSnippet(left, right) {
  qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].ok(left.eq(right), "left=".concat(left.fmt(), " right=").concat(right.fmt()));
}
function eqSnippets(left, right) {
  if (left.length !== right.length) {
    qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].ok(false, "left=".concat(JSON.stringify(left.map(s => s.fmt())), "\nright=").concat(JSON.stringify(right.map(s => s.fmt()))));
  } else {
    for (let i = 0; i < left.length; i++) {
      let leftItem = left[i];
      let rightItem = right[i];
      eqSnippet(leftItem, rightItem);
    }
  }
}
function eqError(left, right) {
  if (left.kind === "err") {
    qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].ok(left.snippet.eq(right.snippet), "left=".concat(left.snippet.fmt(), " right=").concat(right.snippet.fmt()));
    qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].strictEqual(left.reason, right.reason);
  } else {
    qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].strictEqual(left.kind, "err", "expected an error");
  }
}
const SIMPLE = true;
const SPACE = "   ";
const CROSS = SIMPLE ? SPACE : " ┣━";
const CORNER = SIMPLE ? SPACE : " ┗━";
const VERTICAL = SIMPLE ? SPACE : " ┃ ";
function printIndentedItems(nodes) {
  let out = "";

  for (let node of nodes) {
    out += printNode(node, "");
  }

  return out;
}

function printNode(node, indent) {
  let out = "";

  if (Array.isArray(node)) {
    out += "".concat(node[0], "\n");
    let childrenCount = node[1].length;
    node[1].forEach((child, i) => {
      let isLast = i === childrenCount - 1;
      out += printChildNode(child, indent, isLast);
    });
  } else {
    out += "".concat(node, "\n");
  }

  return out;
}

function printChildNode(node, indent, isLast) {
  let out = indent;

  if (isLast) {
    out += CORNER;
    indent += SPACE;
  } else {
    out += CROSS;
    indent += VERTICAL;
  }

  out += printNode(node, indent);
  return out;
}

function module(name) {
  Object(qunit__WEBPACK_IMPORTED_MODULE_0__["module"])(name);
  return c => c;
}
function test(target, name) {
  Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])(name, assert => {
    let constructor = target.constructor;
    let instance = new constructor();
    instance.assert = assert;
    return instance[name](assert);
  });
}

/***/ }),

/***/ "./tests/index.ts":
/*!************************!*\
  !*** ./tests/index.ts ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var file_loader_name_name_ext_node_modules_qunit_qunit_qunit_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! file-loader?name=[name].[ext]!../node_modules/qunit/qunit/qunit.css */ "./node_modules/.pnpm/registry.npmjs.org/file-loader/6.0.0_webpack@4.43.0/node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.css");
/* harmony import */ var file_loader_name_name_ext_index_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! file-loader?name=[name].[ext]!./index.html */ "./node_modules/.pnpm/registry.npmjs.org/file-loader/6.0.0_webpack@4.43.0/node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./tests/index.html");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! qunit */ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(qunit__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _combinators_test__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators-test */ "./tests/combinators-test.ts");
/* harmony import */ var _multi_test__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./multi-test */ "./tests/multi-test.ts");
/* harmony import */ var _reader_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reader/index */ "./tests/reader/index.ts");
/* harmony import */ var _shape_test__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shape-test */ "./tests/shape-test.ts");
/* harmony import */ var _parser_shape_test__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parser-shape-test */ "./tests/parser-shape-test.ts");








qunit__WEBPACK_IMPORTED_MODULE_2__["config"].autostart = true;
qunit__WEBPACK_IMPORTED_MODULE_2__["config"].urlConfig.push({
  id: "logging",
  label: "Enable logging"
});
qunit__WEBPACK_IMPORTED_MODULE_2__["dump"].maxDepth = 25;

/***/ }),

/***/ "./tests/multi-test.ts":
/*!*****************************!*\
  !*** ./tests/multi-test.ts ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! qunit */ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(qunit__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ "./tests/helpers.ts");



const LOGGER = new hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Logger"](qunit__WEBPACK_IMPORTED_MODULE_1__["config"].logging || false);
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["module"])("[combinators] many");
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("zero times", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("abcabcabc", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["multi"].many(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("def"))));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippets"])(match, []);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("one time", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["multi"].many(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("hello"))));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(5).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippets"])(match, [input.slice(5)]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("several times", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("abcabcabc", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["multi"].many(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("abc"))));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(9).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippets"])(match, [input.slice(3), input.slice(3).slice(3), input.slice(6).slice(3)]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["module"])("[combinators] present(many) (at least one match)");
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("zero times", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("abcabcabc", LOGGER);
  let mismatch = input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["utils"].present(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["multi"].many(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("def"))));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqError"])(mismatch, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "empty"));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("one time", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("hello world", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["utils"].present(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["multi"].many(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("hello")))));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(5).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippets"])(match, [input.slice(5)]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("several times", () => {
  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input("abcabcabc", LOGGER);
  let [next, match] = Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(input.invoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["utils"].present(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["multi"].many(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["combinators"].tag("abc")))));
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippet"])(next, input.slice(9).rest);
  Object(_helpers__WEBPACK_IMPORTED_MODULE_2__["eqSnippets"])(match, [input.slice(3), input.slice(3).slice(3), input.slice(6).slice(3)]);
});

/***/ }),

/***/ "./tests/parser-shape-test.ts":
/*!************************************!*\
  !*** ./tests/parser-shape-test.ts ***!
  \************************************/
/*! exports provided: MathParserTest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MathParserTest", function() { return MathParserTest; });
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./tests/helpers.ts");
/* harmony import */ var _tracer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracer */ "./tests/tracer.ts");
var _dec, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

// A simplistic parser built on top of the arrow library



const ERR = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseErr"])("mismatch");
const takeInt = fromState(state => state.parser.tryMatch(/^\d+/), "int");
const takePlus = exact("+");
const takeWS = fromState(state => state.parser.match(/^\s+/), "ws?");
const maybeWS = fallible(takeWS);
const takeParens = recurse(() => hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].allOk([exact("(", "open-parens"), maybeWS, takeSum, maybeWS, exact(")", "close-parens")], "parens"));
const takeExpr = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].firstOk(takeParens, takeInt, "expr");
const takeSum = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].allOk([takeExpr, maybeWS, takePlus, maybeWS, takeExpr], "sum");
let MathParserTest = (_dec = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["module"])("math reader"), _dec(_class = (_class2 = (_temp = class MathParserTest {
  constructor() {
    _defineProperty(this, "evaluator", parserEvaluator());
  }

  plus() {
    console.log(Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["printIndentedItems"])([Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["toIndented"])(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["printAST"])(takeSum))]));
    this.assertInvoke(takeSum, _tracer__WEBPACK_IMPORTED_MODULE_2__["VOID"], "1+1", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["1", null, "+", null, "1"]), ...Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(int("1"), fallibleState("ws?", null), state("+", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("+")), fallibleState("ws?", null), int("1"), ["sum(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["1", null, "+", null, "1"])]).traces);
    this.assertInvoke(takeSum, _tracer__WEBPACK_IMPORTED_MODULE_2__["VOID"], "1 + 1", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["1", " ", "+", " ", "1"]), ...Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(int("1"), fallibleState("ws?", " "), state("+", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("+")), fallibleState("ws?", " "), int("1"), ["sum(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["1", " ", "+", " ", "1"])]).traces);
  }

  paren() {
    this.assertInvoke(takeSum, _tracer__WEBPACK_IMPORTED_MODULE_2__["VOID"], "(1+1)+1", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])([["(", null, ["1", null, "+", null, "1"], null, ")"], null, "+", null, "1"]), ...Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(state("open-parens", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("(")), fallibleState("ws?", null), Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(int("1"), fallibleState("ws?", null), state("+", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("+")), fallibleState("ws?", null), int("1")), ["sum(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["1", null, "+", null, "1"])]), fallibleState("ws?", null), state("close-parens", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(")")), ["parens(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["(", null, ["1", null, "+", null, "1"], null, ")"])], ["expr(FirstOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["(", null, ["1", null, "+", null, "1"], null, ")"])], fallibleState("ws?", null), state("+", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("+")), fallibleState("ws?", null), int("1"), ["sum(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])([["(", null, ["1", null, "+", null, "1"], null, ")"], null, "+", null, "1"])]).traces);
    this.assertInvoke(takeSum, _tracer__WEBPACK_IMPORTED_MODULE_2__["VOID"], "( 1 + 1 ) + 1", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])([["(", " ", ["1", " ", "+", " ", "1"], " ", ")"], " ", "+", " ", "1"]), ...Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(state("open-parens", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("(")), fallibleState("ws?", " "), Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(int("1"), fallibleState("ws?", " "), state("+", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("+")), fallibleState("ws?", " "), int("1")), ["sum(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["1", " ", "+", " ", "1"])]), fallibleState("ws?", " "), state("close-parens", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(")")), ["parens(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["(", " ", ["1", " ", "+", " ", "1"], " ", ")"])], ["expr(FirstOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(["(", " ", ["1", " ", "+", " ", "1"], " ", ")"])], fallibleState("ws?", " "), state("+", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])("+")), fallibleState("ws?", " "), int("1"), ["sum(AllOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])([["(", " ", ["1", " ", "+", " ", "1"], " ", ")"], " ", "+", " ", "1"])]).traces);
  }

  assertInvoke(arrow, input, source, expectedOutput, ...expectedTraceRecords) {
    let step = "source: ".concat(JSON.stringify(source));
    this.assert.step(step);
    let state = new State(new _tracer__WEBPACK_IMPORTED_MODULE_2__["Tracer"](), new Parser(source));
    let actual = this.invoke(arrow, input, state);
    this.assert.deepEqual(actual, expectedOutput, "expected output to be ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(expectedOutput)));
    this.assert.deepEqual("\n".concat(Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["printIndentedItems"])(state.tracer.records), "\n"), "\n".concat(Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["printIndentedItems"])(expectedTraceRecords), "\n"), "expected trace to match");
    this.assert.verifySteps([step]);
  }

  invoke(op, input, state) {
    return op.invoke(state, this.evaluator, input);
  }

}, _temp), (_applyDecoratedDescriptor(_class2.prototype, "plus", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class2.prototype, "plus"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "paren", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class2.prototype, "paren"), _class2.prototype)), _class2)) || _class);

function int(value) {
  return Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(state("open-parens", ERR), ["parens(AllOk)", ERR], state("int", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(value)), ["expr(FirstOk)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(value)]);
}

function fallibleState(label, value) {
  return Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["steps"])(state(label, value), Object(_tracer__WEBPACK_IMPORTED_MODULE_2__["step"])("Pure", value, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(value)), ["ok[".concat(label, "](Pipeline)"), Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(value)]);
}

function state(...args) {
  let out = args.length === 2 ? args[1] : args[0];
  let label = args.length === 2 ? args[0] : undefined;
  let builder = new _tracer__WEBPACK_IMPORTED_MODULE_2__["TraceBuilder"]().addTraces(["State: ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(_tracer__WEBPACK_IMPORTED_MODULE_2__["STATE"]))]).step("Pure", _tracer__WEBPACK_IMPORTED_MODULE_2__["STATE"], out).into({
    type: "Pipeline",
    label
  }, _tracer__WEBPACK_IMPORTED_MODULE_2__["VOID"], out);
  return {
    type: "multiple",
    builder
  };
}

class State {
  constructor(tracer, parser) {
    this.tracer = tracer;
    this.parser = parser;
  }

  [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]() {
    return {
      type: "raw",
      value: "<State>"
    };
  }

  [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
    return this;
  }

}

class Parser {
  constructor(source, pos = 0) {
    this.source = source;
    this.pos = pos;
  }

  tryMatch(pattern) {
    let result = this.match(pattern);

    if (result === null) {
      return Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseErr"])("mismatch");
    } else {
      return Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(result);
    }
  }

  match(pattern) {
    let next = this.source.slice(this.pos);

    if (typeof pattern === "string") {
      let sliced = next.slice(0, pattern.length);
      let match = sliced === pattern;

      if (match) {
        this.pos += sliced.length;
        return sliced;
      }
    } else {
      let match = next.match(pattern);

      if (match) {
        this.pos += match[0].length;
        return match[0];
      }
    }

    return null;
  }

}

function fromState(callback, label) {
  return hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].state(), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(callback), label);
}

function fallible(arrow) {
  return hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(arrow, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(input => Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(input)), arrow.operation.label ? "ok[".concat(arrow.operation.label, "]") : undefined);
}

function recurse(callback) {
  return hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].Arrow.delay(callback);
}

function exact(s, label = s) {
  return fromState(state => state.parser.tryMatch(s), label);
}

function parserEvaluator() {
  let tracer = new _tracer__WEBPACK_IMPORTED_MODULE_2__["TracedEvaluator"]();
  let evaluator = new hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["StatefulEvaluatorImpl"](tracer);
  tracer.setInner(evaluator);
  return tracer;
}

/***/ }),

/***/ "./tests/reader/hbs.ts":
/*!*****************************!*\
  !*** ./tests/reader/hbs.ts ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qunit */ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(qunit__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");



Object(qunit__WEBPACK_IMPORTED_MODULE_0__["module"])("[READER] interpolation"); // Patch QUnit.assert with assert.tree

qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].tree = function (source, expectedRead, expectedAst) {
  let readStep = "read: ".concat(source || "(empty)") || false;
  let parseStep = "parse: ".concat(source || "(empty)") || false;
  let steps = [readStep];
  this.step(readStep);
  let {
    root: tree
  } = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["read"])(source, {
    logging: qunit__WEBPACK_IMPORTED_MODULE_0__["config"].logging ? hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["LoggingType"].Print : hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["LoggingType"].None
  });
  let expectedTokens = Array.isArray(expectedRead) ? expectedRead : [expectedRead];
  let {
    root: expectedRoot,
    source: expectedSource
  } = hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].root(...expectedTokens);
  let expectedString = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["serializeRoot"])(expectedRoot, expectedSource);

  if (tree.kind === "err") {
    this.ok(false, "expected tokens (".concat(expectedString, "), got error (").concat(tree.reason, ")"));
  } else {
    let actualString = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["serializeRoot"])(tree.value, source);
    this.strictEqual(actualString, expectedString, "serialization of expected and actual match");
    this.deepEqual(tree.value, expectedRoot, "token trees match");

    if (expectedAst) {
      if (qunit__WEBPACK_IMPORTED_MODULE_0__["equiv"](tree.value, expectedRoot)) {
        steps.push(parseStep);
        this.step(parseStep);
        let expected = Array.isArray(expectedAst) ? expectedAst : [expectedAst];
        let result = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["parse"])({
          input: tree.value,
          source,
          logging: qunit__WEBPACK_IMPORTED_MODULE_0__["config"].logging ? hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["LoggingType"].Print : hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["LoggingType"].None
        });
        let ast = hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].root(...expected);
        this.pushResult({
          result: result.kind === "ok",
          actual: result,
          expected: "ok",
          message: "parse succeeded"
        });

        if (result.kind === "ok") {
          if (!qunit__WEBPACK_IMPORTED_MODULE_0__["equiv"](result.value, ast.root)) {
            console.log("expected", ast.root);
            console.log("actual", result.value);
          }

          this.deepEqual(result.value, ast.root);
        }
      }
    }
  }

  this.verifySteps(steps, "verified steps");
};

qunit__WEBPACK_IMPORTED_MODULE_0__["assert"].readError = function (source, expected) {
  let {
    root: tree
  } = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["read"])(source, {
    logging: qunit__WEBPACK_IMPORTED_MODULE_0__["config"].logging ? hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["LoggingType"].Print : hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["LoggingType"].None
  });
  this.pushResult({
    result: tree.kind === "err",
    actual: tree.kind,
    expected: "err",
    message: "expected an error"
  });
  isType(tree);
  this.pushResult({
    result: tree.reason === expected.reason,
    actual: tree.reason,
    expected: expected.reason,
    message: "reason matches"
  });
  this.pushResult({
    result: tree.snippet.span.start === expected.span.start && tree.snippet.span.end === expected.span.end,
    actual: "".concat(tree.snippet.span.start, "..").concat(tree.snippet.span.end),
    expected: "".concat(expected.span.start, "..").concat(expected.span.end),
    message: "span matches"
  });
};

function isType(_input) {
  _input;
  return;
}

Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("empty", assert => {
  assert.tree("", []);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("{{id}} interpolating an id", assert => {
  assert.tree("{{identifier}}", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("identifier"))], [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate("identifier")]); // assert.tree("{{id}}", [r.interpolate(r.id("id"))], [a.interpolate("id")]);
  // assert.tree(
  //   "{{id-with-dash}}",
  //   [r.interpolate(r.id("id-with-dash"))],
  //   [a.interpolate("id-with-dash")]
  // );
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("{{this}} interpolating the keyword this", assert => {
  assert.tree("{{this}}", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("this"))], [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate("this")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("{{\"string\"}} interpolating a string", assert => {
  assert.tree("{{\"hello\"}}", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].str("\"hello\""))], [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].str("\"hello\""))]);
  assert.tree("{{\"hello world\"}}", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].str("\"hello world\""))], [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].str("\"hello world\""))]);
  assert.tree("{{\"hello\\\"world\"}}", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].str("\"hello\\\"world\""))], [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].str("\"hello\\\"world\""))]);
  assert.tree("{{'hello'}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].str("'hello'")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].str("'hello'")));
  assert.tree("{{'hello world'}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].str("'hello world'")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].str("'hello world'")));
  assert.tree("{{'hello\\'world'}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].str("'hello\\'world'")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].str("'hello\\'world'")));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("{{123}} interpolating a number", assert => {
  assert.tree("{{10}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].int("10")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].int("10")));
  assert.tree("{{-10}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].int("-10")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].int("-10")));
  assert.tree("{{100.5123}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].decimal("100.5123")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].decimal("100.5123")));
  assert.tree("{{-100.5123}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].decimal("-100.5123")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].decimal("-100.5123")));
}); // test("{{(id)}} interpolating a sexp", assert => {
//   assert.tree(
//     "{{(id)}}",
//     r.interpolate(r.sexp([r.id("id")])),
//     a.interpolate(a.call("id"))
//   );
//   assert.tree(
//     "{{ (id) }}",
//     r.interpolate(r.sp, r.sexp([r.id("id")]), r.sp),
//     a.interpolate(" ", a.call("id"), " ")
//   );
//   assert.tree(
//     "{{( id )}}",
//     r.interpolate(r.sexp([r.sp, r.id("id"), r.sp])),
//     a.interpolate(a.call(" ", "id", " "))
//   );
//   assert.tree(
//     "{{ ( id ) }}",
//     r.interpolate(r.sp, r.sexp([r.sp, r.id("id"), r.sp]), r.sp),
//     a.interpolate(" ", a.call(" ", "id", " "), " ")
//   );
// });

Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("{{@id}} interpolating an argument", assert => {
  assert.tree("{{@identifier}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@identifier")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate("@identifier"));
  assert.tree("{{@id}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@id")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate("@id"));
  assert.tree("{{@id-with-dash}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@id-with-dash")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate("@id-with-dash"));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("whitespace around interpolation", assert => {
  assert.tree("{{ identifier }}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("identifier"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(" ", "identifier", " "));
  assert.tree("{{ id }}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(" ", "id", " "));
  assert.tree("{{ this }}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("this"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(" ", "this", " "));
  assert.tree("{{ id-with-dash }}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id-with-dash"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(" ", "id-with-dash", " "));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("paths", assert => {
  assert.tree("{{this.path}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("this"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("this", "path")));
  assert.tree("{{id.with.path}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("with"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("id", "with", "path")));
  assert.tree("{{ id.with.path }}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("with"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(" ", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("id", "with", "path"), " "));
  assert.tree("{{  id.with.path  }}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].ws("  "), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("with"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].ws("  ")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate("  ", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("id", "with", "path"), "  "));
  assert.tree("{{@id.with.path}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("with"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("@id", "with", "path")));
  assert.tree("{{@dash-id.with-dashed.path}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@dash-id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("with-dashed"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("@dash-id", "with-dashed", "path")));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("{{id.with.path some other.stuff}}", assert => {
  assert.tree("{{id.with.path some other.stuff}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("with"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("some"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("other"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("stuff")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("id", "with.path"), [" ", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].ref("some"), " ", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("other", "stuff")]));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("named arguments", assert => {
  assert.tree("{{id some named=args other=named}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("some"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("named"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].eq, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("args"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("other"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].eq, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("named")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].ref("id"), [" ", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].ref("some")], {
    named: ["args", " "],
    other: "named"
  })); // assert.tree(
  //   "{{id.with.path some named=args other=named.args}}",
  //   r.interpolate(
  //     r.id("id"),
  //     r.dot,
  //     r.id("with"),
  //     r.dot,
  //     r.id("path"),
  //     r.sp,
  //     r.id("some"),
  //     r.sp,
  //     r.id("named"),
  //     r.eq,
  //     r.id("args"),
  //     r.sp,
  //     r.id("other"),
  //     r.eq,
  //     r.id("named"),
  //     r.dot,
  //     r.id("args")
  //   ),
  //   a.interpolate(a.path("id", "with.path"), [" ", "some"], {
  //     named: ["args", " "],
  //     other: a.path("named", "args"),
  //   })
  // );
  // assert.tree(
  //   "{{id.with.path some @arg named=args other=@named.args}}",
  //   r.interpolate(
  //     r.id("id"),
  //     r.dot,
  //     r.id("with"),
  //     r.dot,
  //     r.id("path"),
  //     r.sp,
  //     r.id("some"),
  //     r.sp,
  //     r.arg("@arg"),
  //     r.sp,
  //     r.id("named"),
  //     r.eq,
  //     r.id("args"),
  //     r.sp,
  //     r.id("other"),
  //     r.eq,
  //     r.arg("@named"),
  //     r.dot,
  //     r.id("args")
  //   ),
  //   a.interpolate(a.path("id", "with.path"), [" ", "some", " ", "@arg"], {
  //     named: ["args", " "],
  //     other: a.path("@named", "args"),
  //   })
  // );
}); // test("using all the features", assert => {
//   assert.tree(
//     "{{  (id.with.path some @arg named=args other=@named.args) @some.arg another.arg named=@arg other=named.arg yet-another=-12.5  }}",
//     r.interpolate(
//       r.ws("  "),
//       r.sexp([
//         r.id("id"),
//         r.dot,
//         r.id("with"),
//         r.dot,
//         r.id("path"),
//         r.sp,
//         r.id("some"),
//         r.sp,
//         r.arg("@arg"),
//         r.sp,
//         r.id("named"),
//         r.eq,
//         r.id("args"),
//         r.sp,
//         r.id("other"),
//         r.eq,
//         r.arg("@named"),
//         r.dot,
//         r.id("args"),
//       ]),
//       r.sp,
//       r.arg("@some"),
//       r.dot,
//       r.id("arg"),
//       r.sp,
//       r.id("another"),
//       r.dot,
//       r.id("arg"),
//       r.sp,
//       r.id("named"),
//       r.eq,
//       r.arg("@arg"),
//       r.sp,
//       r.id("other"),
//       r.eq,
//       r.id("named"),
//       r.dot,
//       r.id("arg"),
//       r.sp,
//       r.id("yet-another"),
//       r.eq,
//       r.decimal("-12.5"),
//       r.ws("  ")
//     ),
//     a.interpolate(
//       "  ",
//       a.call(a.path("id", "with.path"), [" ", "some", " ", "@arg"], {
//         named: ["args", " "],
//         other: a.path("@named", "args"),
//       }),
//       [" ", a.path("@some", "arg"), " ", a.path("another", "arg")],
//       {
//         named: ["@arg", " "],
//         other: [a.path("named", "arg"), " "],
//         "yet-another": [a.decimal("-12.5"), "  "],
//       }
//     )
//   );
// });

Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("two interpolations next to each other", assert => {
  assert.tree("{{id.with.path some named=args other=named.args}}{{some.stuff}}", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("id"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("with"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("path"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("some"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("named"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].eq, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("args"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("other"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].eq, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("named"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("args")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("some"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("stuff"))], [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("id", "with.path"), [" ", "some"], {
    named: ["args", " "],
    other: hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("named", "args")
  }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].path("some", "stuff"))]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["todo"])("blocks", assert => {
  assert.tree("{{#if @x}}{{/if}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].block("if", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@x")]), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["a"].block(["if", [" ", "@x"]]));
  assert.tree("{{#if @x}}a b c {{#unless @y.z}}some stuff{{/unless}}{{/if}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].block("if", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@x")], hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].text("a b c "), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].block("unless", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@y"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("z")], hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].text("some stuff"))));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("blocks with block params", assert => {
  assert.tree("{{#let @x as |x|}}insert {{x}}{{/let}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].block("let", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@x"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].as("x")], hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].text("insert "), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("x"))));
  assert.tree("{{#let @x as |x| }}insert {{x}}{{/let}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].block("let", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@x"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].as("x"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp], hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].text("insert "), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("x"))));
  assert.tree("{{#let @x as |x|}}a b c {{#with @y.z as |z|}}some stuff{{/with}}{{/let}}", hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].block("let", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@x"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].as("x")], hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].text("a b c "), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].block("with", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].arg("@y"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].id("z"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].as("z")], hbs_parser_next__WEBPACK_IMPORTED_MODULE_1__["r"].text("some stuff"))));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_0__["test"])("mismatched blocks", assert => {
  assert.readError("{{#if @x}}{{/unless}}", {
    reason: "mismatch",
    span: {
      start: 13,
      end: 19
    }
  });
});

/***/ }),

/***/ "./tests/reader/html.ts":
/*!******************************!*\
  !*** ./tests/reader/html.ts ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! qunit */ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(qunit__WEBPACK_IMPORTED_MODULE_1__);


Object(qunit__WEBPACK_IMPORTED_MODULE_1__["module"])("[READER] HTML");
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("simple content", assert => {
  assert.tree("hello", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].text("hello")], [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["a"].text("hello")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("a simple tag", assert => {
  assert.tree("<div>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag("div"));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("a simple tag with closing tag", assert => {
  assert.tree("<div></div>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag("div"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div")]);
  assert.tree("<div>hello</div>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag("div"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].text("hello"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div")]);
  assert.tree("<div>hello\nworld</div>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag("div"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].text("hello\nworld"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A simple tag with trailing spaces", assert => {
  assert.tree("<div   \t\n>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].ws("   \t\n")]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A simple closing tag", assert => {
  assert.tree("</div>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div"));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A simple closing tag with trailing spaces", assert => {
  assert.tree("</div   \t\n>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag({
    name: "div",
    trailing: "   \t\n"
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A pair of hyphenated tags", assert => {
  assert.tree("<x-foo></x-foo>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag("x-foo"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("x-foo")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A tag with a single-quoted attribute", assert => {
  assert.tree("<div id='foo'>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "id",
      value: "'foo'"
    })]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A tag with a double-quoted attribute", assert => {
  assert.tree("<div id=\"foo\">", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "id",
      value: "\"foo\""
    })]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A tag with a double-quoted empty", assert => {
  assert.tree("<div id=\"\">", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "id",
      value: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].stringInterpolate([], "\"")
    })]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A tag with unquoted attribute", assert => {
  assert.tree("<div id=foo>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "id",
      value: "foo"
    })]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A tag with valueless attributes", assert => {
  assert.tree("<div foo bar>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr("foo"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr("bar")]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A tag with multiple attributes", assert => {
  assert.tree("<div id=foo class=\"bar baz\" href='bat'>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "id",
      value: "foo"
    }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "class",
      value: "\"bar baz\""
    }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "href",
      value: "'bat'"
    })]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A self-closing tag", assert => {
  assert.tree("<img />", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "img",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp],
    selfClosing: true
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A self-closing tag with valueless attributes", assert => {
  assert.tree("<input disabled />", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "input",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr("disabled"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp],
    selfClosing: true
  }));
  assert.tree("<input disabled/>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "input",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr("disabled")],
    selfClosing: true
  }));
  assert.tree("<input data-foo=bar/>", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "input",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "data-foo",
      value: "bar/"
    })]
  }));
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A comment", assert => {
  assert.tree("<!-- hello -->", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].comment(" hello "));
  assert.tree("<!---->", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].comment(""));
  assert.tree("<!-- A perfectly legal - appears -->", hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].comment(" A perfectly legal - appears "));
});

/***/ }),

/***/ "./tests/reader/hybrid.ts":
/*!********************************!*\
  !*** ./tests/reader/hybrid.ts ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! qunit */ "./node_modules/.pnpm/registry.npmjs.org/qunit/2.9.3/node_modules/qunit/qunit/qunit.js");
/* harmony import */ var qunit__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(qunit__WEBPACK_IMPORTED_MODULE_1__);


Object(qunit__WEBPACK_IMPORTED_MODULE_1__["module"])("[READER] Hybrid");
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("content plus interpolation", assert => {
  assert.tree("hello {{world}} goodbye", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].text("hello "), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("world")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].text(" goodbye")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A named arg invocation", assert => {
  assert.tree("<@foo></@foo>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].arg("@foo")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("@foo")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("A path invocation", assert => {
  assert.tree("<f.input></f.input>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("f"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("input")]), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("f"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("input")])]);
  assert.tree("<@f.input></@f.input>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].arg("@f"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("input")]), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].arg("@f"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("input")])]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("Curly attributes", assert => {
  assert.tree("<div disabled={{disabled}}></div>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "disabled",
      value: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attrInterpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("disabled"))
    })]
  }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("Curlies inside quoted attributes", assert => {
  assert.tree("<div disabled=\"{{disabled}}\"></div>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "disabled",
      value: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].stringInterpolate([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("disabled"))], "\"")
    })]
  }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div")]);
  assert.tree("<a href=\"{{url}}.html\"></a>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "a",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: "href",
      value: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].stringInterpolate([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("url")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].text(".html")], "\"")
    })]
  }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("a")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("Arguments", assert => {
  assert.tree("<div @disabled=\"{{disabled}}\"></div>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].argName("@disabled"),
      value: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].stringInterpolate([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("disabled"))], "\"")
    })]
  }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div")]);
  assert.tree("<a @href=\"{{url}}.html\"></a>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "a",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr({
      name: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].argName("@href"),
      value: hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].stringInterpolate([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("url")), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].text(".html")], "\"")
    })]
  }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("a")]);
});
Object(qunit__WEBPACK_IMPORTED_MODULE_1__["test"])("Modifiers", assert => {
  assert.tree("<div disabled {{on \"click\" (fn this.handleClick @arg)}}></div>", [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].startTag({
    name: "div",
    attrs: [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].attr("disabled"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].interpolate(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("on"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].str("\"click\""), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sexp([hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("fn"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("this"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].dot, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].id("handleClick"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].sp, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].arg("@arg")]))]
  }), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["r"].endTag("div")]);
});

/***/ }),

/***/ "./tests/reader/index.ts":
/*!*******************************!*\
  !*** ./tests/reader/index.ts ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hbs */ "./tests/reader/hbs.ts");
/* harmony import */ var _html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./html */ "./tests/reader/html.ts");
/* harmony import */ var _hybrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hybrid */ "./tests/reader/hybrid.ts");




/***/ }),

/***/ "./tests/shape-test.ts":
/*!*****************************!*\
  !*** ./tests/shape-test.ts ***!
  \*****************************/
/*! exports provided: CustomArray, flatIncrementTrace, ArrowEvaluationTest, formatJSON, StatefulArrowEvaluationTest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomArray", function() { return CustomArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatIncrementTrace", function() { return flatIncrementTrace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrowEvaluationTest", function() { return ArrowEvaluationTest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatJSON", function() { return formatJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StatefulArrowEvaluationTest", function() { return StatefulArrowEvaluationTest; });
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "./tests/helpers.ts");
var _dec, _class, _class2, _temp, _dec2, _class4, _class5, _temp2;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }


 // The test facilities below are intentionally using unnecessary
// combinators when they could have used `lift` to stress-test
// the system.

class CustomArray extends Array {
  constructor(...args) {
    if (new.target !== CustomArray) {
      throw new Error("CustomArray is final -- don't subclass");
    } // eslint-disable-next-line @typescript-eslint/no-explicit-any


    super(...args);
  }

  breakableReduce(callback, init) {
    let current = init;

    for (let item of this) {
      let next = callback(current, item);

      if (next.done) {
        return next.value;
      }

      current = next.value;
    }

    return current;
  }

  zero() {
    return new CustomArray();
  }

  merge(other) {
    for (let item of other) {
      this.push(item);
    }
  }

}

function list(...items) {
  let a = new CustomArray();
  a.push(...items);
  return a;
}

const flatIncrement = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(i => list(i + 1), "flat-increment");
function flatIncrementTrace(input, out) {
  return formatOp(input, {
    type: "Pure",
    label: "flat-increment"
  }, out);
}
const firstReducable = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(numbers => numbers.breakableReduce((_, value) => ({
  done: true,
  value
}), 0), "first");

function firstReducableTrace(input, output) {
  return formatOp(input, {
    type: "Pure",
    label: "first"
  }, output);
}

const increment = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(flatIncrement, firstReducable, "increment"); // this is useful for examples that are already very noisy

const boringIncrement = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(input => input + 1, "boring-increment");

function incrementTrace(input, output) {
  return [formatOp(input, {
    type: "Pipeline",
    label: "increment"
  }, output), [flatIncrementTrace(input, [output]), firstReducableTrace([output], output)]];
}

const decrement = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(i => i - 1, "decrement");
const double = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(i => i * 2, "double");

function iterateOne(map) {
  // extract the first value from the input
  const accumulator = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(input => input[0], "first"); // extract the second value from the input

  const value = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(input => input[1], "second"); // merge them back together, mapping the value over the map arrow

  const pair = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].merge(accumulator, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(value, map)); // the append function takes an [accum, input] and pushes the input
  // into the accum; yes, I know this is not really pure 🤔

  let append = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(([accum, input]) => {
    accum.push(input);
    return accum;
  }, "append"); // pipe [accum, input -> map] into append

  return hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(pair, append, "iterate");
}

function iterate(arrow) {
  // create the initial `[]`
  const inputAccumulator = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].source(() => [], "initialize"); // build a single iteration arrow
  // [accum: number[], in: number] -> number

  let iteration = iterateOne(arrow); // turn the iteration arrow into a reduce
  // [in: number[], accum: number[]] -> number[]

  let reduce = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].reduce(iteration); // create the input

  let input = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].merge(inputAccumulator, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].input(), "input-pair"); // [in: number[]] -> reduce: ([in: number[], accum: number[]] -> number[])

  return hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(input, reduce, "iteration");
}

function decrementTrace(input, output) {
  return formatArrow(input, decrement, output);
}

function doubleTrace(input, output) {
  return formatArrow(input, double, output);
}

let ArrowEvaluationTest = (_dec = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["module"])("Arrow Evaluation"), _dec(_class = (_class2 = (_temp = class ArrowEvaluationTest {
  constructor() {
    _defineProperty(this, "evaluator", new hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["StatefulEvaluatorImpl"]());
  }

  invoke(op, input) {
    return op.invoke(null, this.evaluator, input);
  }

  pure(assert) {
    assert.equal(this.invoke(increment, 1), 2);
  }

  zip(assert) {
    let zipped = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].zip(increment, decrement);
    assert.deepEqual(this.invoke(zipped, [5, 5]), [6, 4]);
  }

  pipeline(assert) {
    let pipeline = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(increment, double);
    assert.deepEqual(this.invoke(pipeline, 5), 12);
  }

  merge(assert) {
    let concurrent = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].merge(increment, double);
    assert.deepEqual(this.invoke(concurrent, 5), [6, 10]);
  }

  mergeAndThen(assert) {
    let pipeline = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].keepAndThen(increment, double);
    assert.deepEqual(this.invoke(pipeline, 5), [6, 12]);
  }

}, _temp), (_applyDecoratedDescriptor(_class2.prototype, "pure", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class2.prototype, "pure"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "zip", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class2.prototype, "zip"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pipeline", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class2.prototype, "pipeline"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "merge", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class2.prototype, "merge"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "mergeAndThen", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class2.prototype, "mergeAndThen"), _class2.prototype)), _class2)) || _class);

class Tracer {
  constructor(input = []) {
    _defineProperty(this, "stack", []);

    this.input = input;
  }

  toJSON() {
    return "<State>";
  }

  get currentChildren() {
    if (this.stack.length === 0) {
      return this.stack;
    } else {
      return this.stack[this.stack.length - 1][1];
    }
  }

  get currentName() {
    if (this.stack.length === 0) {
      return;
    } else {
      return this.stack[this.stack.length - 1][0];
    }
  }

  get records() {
    return this.stack;
  }

  pushLeaf(leaf) {
    this.currentChildren.push(leaf);
  }

  preInvoke(name) {
    let record = [name, []];
    this.currentChildren.push(record);
    this.stack.push(record);
  }

  postInvoke(desc) {
    let last = this.stack.pop();
    last[0] = desc;
  }

}

function trace(rawName, input, output, children) {
  let parsedName = rawName.match(/^([^(]*)(?:\((.*)\))?$/);

  if (parsedName === null) {
    throw new Error("SYNTAX ERROR, name must be label(Kind) or Kind");
  }

  let leftName = parsedName[1];
  let inParen = parsedName[2];
  let name = inParen ? [inParen, leftName] : leftName;
  debugger;

  if (children) {
    return [formatOp(input, name, output), children];
  } else {
    return formatOp(input, name, output);
  }
}

function format(op) {
  return op.label ? "".concat(op.label, "(").concat(op.type, ")") : op.type;
}

function formatJSON(input) {
  return JSON.stringify(input).replace(/\\?"/g, "'").replace(/'(<.*?>)'/, "$1");
}

function formatOp(input, op, out) {
  let formattedInput = formatJSON(input);
  let formattedOutput = formatJSON(out);
  let formattedOp;

  if (typeof op === "string") {
    formattedOp = op;
  } else if (Array.isArray(op)) {
    formattedOp = format({
      type: op[0],
      label: op[1]
    });
  } else {
    formattedOp = format(op);
  }

  return "".concat(formattedOp, ": ").concat(formattedInput, " -> ").concat(formattedOutput);
}

function source(value, label) {
  let out = "Source: ".concat(formatJSON(value));

  if (label) {
    out += " (".concat(label, ")");
  }

  return out;
}

function input(value) {
  return "Input: ".concat(formatJSON(value));
}

function formatArrow(input, op, out) {
  return formatOp(input, op.operation, out);
}

class CollectingEvaluator extends hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["StatefulEvaluatorImpl"] {
  parent(callback, state, input, op) {
    state.preInvoke(op.type);
    let clonedInput = JSON.parse(JSON.stringify(input));
    let out = callback();
    state.postInvoke(formatOp(clonedInput, op, out));
    return out;
  }

  Source(...args) {
    let out = super.Source(...args);

    if (args[2].label) {
      args[0].pushLeaf("Source: ".concat(formatJSON(out), " (").concat(args[2].label, ")"));
    } else {
      args[0].pushLeaf("Source: ".concat(formatJSON(out)));
    }

    return out;
  }

  Input(tracer, input, _op) {
    tracer.pushLeaf("Input: ".concat(formatJSON(input)));
    return input;
  }

  Pure(state, ...args) {
    let input = JSON.parse(JSON.stringify(args[0]));
    let out = super.Pure(state, ...args);
    state.pushLeaf(formatOp(input, args[1], out));
    return out;
  }

  Zip(...args) {
    return this.parent(() => super.Zip(...args), ...args);
  }

  Pipeline(...args) {
    return this.parent(() => super.Pipeline(...args), ...args);
  }

  Merge(...args) {
    return this.parent(() => super.Merge(...args), ...args);
  }

  MapInput(...args) {
    return this.parent(() => super.MapInput(...args), ...args);
  }

  KeepAndThen(...args) {
    return this.parent(() => super.KeepAndThen(...args), ...args);
  }

  Reduce(...args) {
    return this.parent(() => super.Reduce(...args), ...args);
  }

  Repeat(...args) {
    return this.parent(() => super.Repeat(...args), ...args);
  }

}

let StatefulArrowEvaluationTest = (_dec2 = Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["module"])("Stateful Arrow Evaluation"), _dec2(_class4 = (_class5 = (_temp2 = class StatefulArrowEvaluationTest {
  constructor() {
    _defineProperty(this, "evaluator", new CollectingEvaluator());

    _defineProperty(this, "tracer", new Tracer());
  }

  assertInvoke(arrow, input, expectedOutput, ...expectedTraceRecords) {
    let actual = this.invoke(arrow, input);
    this.assert.deepEqual(actual, expectedOutput, "expected output to be ".concat(formatJSON(expectedOutput)));
    this.assert.deepEqual("\n".concat(Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["printIndentedItems"])(this.tracer.records), "\n"), "\n".concat(Object(_helpers__WEBPACK_IMPORTED_MODULE_1__["printIndentedItems"])(expectedTraceRecords), "\n"), "expected trace to match");
  }

  invoke(op, input) {
    return op.invoke(this.tracer, this.evaluator, input);
  }

  pure() {
    this.assertInvoke(increment, 1, 2, incrementTrace(1, 2));
  }

  zip() {
    this.assertInvoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].zip(increment, decrement), [5, 5], [6, 4], [formatOp([5, 5], "Zip", [6, 4]), [incrementTrace(5, 6), decrementTrace(5, 4)]]);
  }

  pipeline() {
    this.assertInvoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(increment, double), 5, 12, [formatOp(5, {
      type: "Pipeline"
    }, 12), [incrementTrace(5, 6), doubleTrace(6, 12)]]);
  }

  merge() {
    this.assertInvoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].merge(increment, double), 5, [6, 10], [formatOp(5, "Merge", [6, 10]), [incrementTrace(5, 6), doubleTrace(5, 10)]]);
  }

  mergeAndThen() {
    this.assertInvoke(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].keepAndThen(increment, double), 5, [6, 12], [formatOp(5, "KeepAndThen", [6, 12]), [incrementTrace(5, 6), doubleTrace(6, 12)]]);
  }

  iterate() {
    this.assertInvoke(iterate(boringIncrement), [3, 6, 9], [4, 7, 10], trace("iteration(Pipeline)", [3, 6, 9], [4, 7, 10], [trace("input-pair(Merge)", [3, 6, 9], [[], [3, 6, 9]], [source([], "initialize"), input([3, 6, 9])]), trace("Reduce", [[], [3, 6, 9]], [4, 7, 10], [iterateTrace([], 3, 4), iterateTrace([4], 6, 7), iterateTrace([4, 7], 9, 10)])]));
  }

  repeat() {
    this.tracer.input = [1, 2, 3];
    let extract = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(([, state]) => {
      if (state.input.length === 0) {
        return Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseErr"])("done");
      } else {
        return Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(state.input.shift());
      }
    }, "shift");
    let fallible = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(v => Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(v), "fallible");
    let increment = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].mapResult(extract, hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pipeline(boringIncrement, fallible, "ifOk"), hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].pure(err => err, "ifErr"));
    let repeat = hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["ops"].repeat(increment);
    this.assertInvoke(repeat, null, [2, 3, 4], trace("Repeat", null, [2, 3, 4], [trace("shift(Pure)", [null, this.tracer], Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(1)), trace("ifOk(Pipeline)", 1, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(2), [trace("boring-increment(Pure)", 1, 2), trace("fallible(Pure)", 2, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(2))]), trace("shift(Pure)", [null, this.tracer], Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(2)), trace("ifOk(Pipeline)", 2, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(3), [trace("boring-increment(Pure)", 2, 3), trace("fallible(Pure)", 3, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(3))]), trace("shift(Pure)", [null, this.tracer], Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(3)), trace("ifOk(Pipeline)", 3, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(4), [trace("boring-increment(Pure)", 3, 4), trace("fallible(Pure)", 4, Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseOk"])(4))]), trace("shift(Pure)", [null, this.tracer], Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseErr"])("done")), trace("ifErr(Pure)", Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseErr"])("done"), Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["baseErr"])("done"))]));
  }

}, _temp2), (_applyDecoratedDescriptor(_class5.prototype, "pure", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class5.prototype, "pure"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "zip", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class5.prototype, "zip"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "pipeline", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class5.prototype, "pipeline"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "merge", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class5.prototype, "merge"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "mergeAndThen", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class5.prototype, "mergeAndThen"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "iterate", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class5.prototype, "iterate"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "repeat", [_helpers__WEBPACK_IMPORTED_MODULE_1__["test"]], Object.getOwnPropertyDescriptor(_class5.prototype, "repeat"), _class5.prototype)), _class5)) || _class4);

function iterateTrace(accum, input, output) {
  return trace("iterate(Pipeline)", [accum, input], [...accum, output], [trace("Merge", [accum, input], [accum, output], [trace("first(Pure)", [accum, input], accum), trace("Pipeline", [accum, input], output, [trace("second(Pure)", [accum, input], input), trace("boring-increment(Pure)", input, output)])]), trace("append(Pure)", [accum, output], [...accum, output])]);
}

/***/ }),

/***/ "./tests/tracer.ts":
/*!*************************!*\
  !*** ./tests/tracer.ts ***!
  \*************************/
/*! exports provided: TracedEvaluator, Tracer, trace, formatOpName, raw, STATE, VOID, STATE_TRACE, TraceBuilder, step, steps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TracedEvaluator", function() { return TracedEvaluator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tracer", function() { return Tracer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trace", function() { return trace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatOpName", function() { return formatOpName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "raw", function() { return raw; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STATE", function() { return STATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOID", function() { return VOID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STATE_TRACE", function() { return STATE_TRACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraceBuilder", function() { return TraceBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "step", function() { return step; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "steps", function() { return steps; });
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }


class TracedEvaluator {
  constructor() {
    _inner.set(this, {
      writable: true,
      value: undefined
    });
  }

  setInner(inner) {
    _classPrivateFieldSet(this, _inner, inner);
  }

  get inner() {
    if (_classPrivateFieldGet(this, _inner) === undefined) {
      throw new Error("Must set inner on WithTrace before using it");
    }

    return _classPrivateFieldGet(this, _inner);
  }

  parent(callback, state, input, op) {
    state.tracer.preInvoke(op.type);
    let clonedInput = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["snapshot"])(input);
    let out = callback();
    state.tracer.postInvoke(formatOp(clonedInput, op, out));
    return out;
  }

  State(state, input, op) {
    let out = this.inner.State(state, input, op);

    if (op.label) {
      state.tracer.pushLeaf("State: ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(out), " (").concat(op.label, ")"));
    } else {
      state.tracer.pushLeaf("State: ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(out)));
    }

    return out;
  }

  Source(...args) {
    let out = this.inner.Source(...args);

    if (args[2].label) {
      args[0].tracer.pushLeaf("Source: ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(out), " (").concat(args[2].label, ")"));
    } else {
      args[0].tracer.pushLeaf("Source: ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(out)));
    }

    return out;
  }

  Input(state, input, _op) {
    state.tracer.pushLeaf("Input: ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(input)));
    return input;
  }

  Pure(state, ...args) {
    let input = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["snapshot"])(args[0]);
    let out = this.inner.Pure(state, ...args);
    state.tracer.pushLeaf(formatOp2(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatFormattable"])(input), args[1], out));
    return out;
  }

  Zip(...args) {
    return this.parent(() => this.inner.Zip(...args), ...args);
  }

  Pipeline(...args) {
    return this.parent(() => this.inner.Pipeline(...args), ...args);
  }

  MapResult(...args) {
    return this.parent(() => this.inner.MapResult(...args), ...args);
  }

  BothOk(...args) {
    return this.parent(() => this.inner.BothOk(...args), ...args);
  }

  AllOk(...args) {
    return this.parent(() => this.inner.AllOk(...args), ...args);
  }

  FirstOk(...args) {
    return this.parent(() => this.inner.FirstOk(...args), ...args);
  }

  Merge(...args) {
    return this.parent(() => this.inner.Merge(...args), ...args);
  }

  MapInput(...args) {
    return this.parent(() => this.inner.MapInput(...args), ...args);
  }

  KeepAndThen(...args) {
    return this.parent(() => this.inner.KeepAndThen(...args), ...args);
  }

  Reduce(...args) {
    return this.parent(() => this.inner.Reduce(...args), ...args);
  }

  Repeat(...args) {
    return this.parent(() => this.inner.Repeat(...args), ...args);
  }

}

var _inner = new WeakMap();

class Tracer {
  constructor(input = []) {
    _defineProperty(this, "stack", []);

    _defineProperty(this, "linear", []);

    this.input = input;
  }

  [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]() {
    return {
      type: "raw",
      value: "<State>"
    };
  }

  [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
    return this;
  }

  get currentChildren() {
    if (this.stack.length === 0) {
      return this.stack;
    } else {
      return this.stack[this.stack.length - 1][1];
    }
  }

  get currentName() {
    if (this.stack.length === 0) {
      return;
    } else {
      return this.stack[this.stack.length - 1][0];
    }
  }

  get records() {
    return this.stack;
  }

  pushLeaf(leaf) {
    this.currentChildren.push(leaf);
  }

  preInvoke(name) {
    this.linear.push(["enter", name]);
    let record = [name, []];
    this.currentChildren.push(record);
    this.stack.push(record);
  }

  postInvoke(desc) {
    this.linear.push(["exit", desc]);
    let last = this.stack.pop();
    last[0] = desc;
  }

}
function trace(op, input, output, children) {
  let name = formatOpName(op);

  if (children) {
    return [formatOp(input, name, output), children];
  } else {
    return formatOp(input, name, output);
  }
}
function formatOpName(op) {
  if (typeof op === "string") {
    let parsedName = op.match(/^([^(]*)(?:\((.*)\))?$/);

    if (parsedName === null) {
      throw new Error("SYNTAX ERROR, name must be label(Kind) or Kind");
    }

    let leftName = parsedName[1];
    let inParen = parsedName[2];
    return inParen ? {
      type: inParen,
      label: leftName
    } : {
      type: leftName
    };
  } else {
    return op.label ? "".concat(op.label, "(").concat(op.type, ")") : op.type;
  }
}

function formatOp(input, op, out) {
  let formattedInput = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(input);
  let formattedOutput = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(out);
  let formattedOp;

  if (typeof op === "string") {
    formattedOp = op;
  } else if (Array.isArray(op)) {
    formattedOp = formatOpName({
      type: op[0],
      label: op[1]
    });
  } else {
    formattedOp = formatOpName(op);
  }

  return "".concat(formattedOp, ": ").concat(formattedInput, " -> ").concat(formattedOutput);
}

function formatOp2(formattedInput, op, out) {
  let formattedOutput = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(out);
  let formattedOp;

  if (typeof op === "string") {
    formattedOp = op;
  } else if (Array.isArray(op)) {
    formattedOp = formatOpName({
      type: op[0],
      label: op[1]
    });
  } else {
    formattedOp = formatOpName(op);
  }

  return "".concat(formattedOp, ": ").concat(formattedInput, " -> ").concat(formattedOutput);
}

function raw(value) {
  let formatted = {
    type: "raw",
    value
  };
  return {
    [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["FORMAT"]]: () => formatted,

    [hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["SNAPSHOT"]]() {
      return this;
    }

  };
}
const STATE = raw("<State>");
const VOID = raw("<void>");
const STATE_TRACE = "State: ".concat(Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_0__["formatUnknown"])(STATE));
class TraceBuilder {
  constructor(traces = []) {
    this.traces = traces;
  }

  addTraces(traces) {
    this.traces.push(...traces);
    return this;
  }

  step(opName, input, output) {
    this.traces.push(trace(opName, input, output));
    return this;
  }

  into(opName, input, output) {
    this.traces = [trace(opName, input, output, this.traces)];
    return this;
  }

  done() {
    return this.traces;
  }

}
function step(name, input, output) {
  return {
    type: "step",
    name,
    input,
    output
  };
}
function steps(...steps) {
  let builder = new TraceBuilder();

  for (let step of steps) {
    if (Array.isArray(step)) {
      if (step.length === 3) {
        builder = builder.into(step[0], step[1], step[2]);
      } else {
        builder = builder.into(step[0], VOID, step[1]);
      }
    } else {
      switch (step.type) {
        case "step":
          builder = builder.step(step.name, step.input, step.output);
          break;

        case "multiple":
          builder = builder.addTraces(step.builder.done());
          break;

        case "traces":
          builder = builder.addTraces(step.traces);
          break;
      }
    }
  }

  return {
    type: "traces",
    traces: builder.done()
  };
}

/***/ }),

/***/ 1:
/*!**********************************************************************************************************************************************************************************************!*\
  !*** multi ./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client?http://localhost:9000 ./tests/index.ts ***!
  \**********************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /home/wycats/Code/hbs-parser/node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/index.js?http://localhost:9000 */"./node_modules/.pnpm/registry.npmjs.org/webpack-dev-server/3.10.3_6bb071789035dbb53b131cf2ad63510b/node_modules/webpack-dev-server/client/index.js?http://localhost:9000");
module.exports = __webpack_require__(/*! ./tests/index.ts */"./tests/index.ts");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,