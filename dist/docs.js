/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./docs/index.ts":
/*!***********************!*\
  !*** ./docs/index.ts ***!
  \***********************/
/*! exports provided: TraceService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraceService", function() { return TraceService; });
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony import */ var _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmerx/component */ "./node_modules/@glimmerx/component/dist/modules/index.js");
/* harmony import */ var _glimmerx_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmerx/core */ "./node_modules/@glimmerx/core/dist/modules/index.js");
/* harmony import */ var _glimmerx_modifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @glimmerx/modifier */ "./node_modules/@glimmerx/modifier/dist/modules/index.js");
/* harmony import */ var _src_parsed__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/parsed */ "./docs/src/parsed.ts");
/* harmony import */ var _src_bind__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/bind */ "./docs/src/bind.ts");
/* harmony import */ var file_loader_name_name_ext_docs_html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! file-loader?name=[name].[ext]!./docs.html */ "./node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./docs/docs.html");
/* harmony import */ var _src_guid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/guid */ "./docs/src/guid.ts");
/* harmony import */ var _src_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/utils */ "./docs/src/utils.ts");


var _class, _descriptor, _descriptor2, _descriptor3, _temp, _class3, _descriptor4, _temp2;

function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }









let MyComponent = (_class = (_temp = class MyComponent extends _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(...args) {
    super(...args);

    _initializerDefineProperty(this, "text", _descriptor, this);

    _initializerDefineProperty(this, "cursor", _descriptor2, this);

    _initializerDefineProperty(this, "isShowing", _descriptor3, this);
  }

  update(target) {
    this.text = target.value;
    this.cursor = {
      start: target.selectionStart,
      end: target.selectionEnd
    };
  }

  get cursored() {
    let {
      text,
      cursor: {
        start,
        end
      }
    } = this;
    return "".concat(text.slice(0, start), "|").concat(text.slice(start, end), "|").concat(text.slice(end));
  }

}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "text", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return "{{hello world}}";
  }
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "cursor", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return {
      start: 0,
      end: 0
    };
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "isShowing", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _applyDecoratedDescriptor(_class.prototype, "update", [_glimmerx_modifier__WEBPACK_IMPORTED_MODULE_3__["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "update"), _class.prototype)), _class);

Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setComponentTemplate"])({
  id: "yyvFzy00",
  block: "{\"symbols\":[],\"statements\":[[1,1,0,0,\"\\n    \"],[9,\"style\",true],[10],[1,1,0,0,\"\\n      textarea {\\n        width: 100%;\\n        height: 5rem;\\n      }\\n\\n      html {\\n        font-family: Helvetica, Arial, sans-serif;\\n        box-sizing: border-box;\\n        font-size: 16px;\\n      }\\n\\n      *, *:before, *:after {\\n        box-sizing: border-box;\\n      }\\n\\n      body, h1, h2, h3, h4, h5, h6, p, ol, ul, pre {\\n        margin: 0;\\n        padding: 0;\\n        font-weight: normal;\\n      }\\n\\n      ol, ul {\\n        list-style: none;\\n      }\\n\\n      img {\\n        max-width: 100%;\\n        height: auto;\\n      }\\n\\n      li {\\n        padding-left: 1rem;\\n        line-height: 1.6;\\n      }\\n\\n      li.trace-node button {\\n        border: 0;\\n        font-family: system-ui, sans-serif;\\n        font-size: 0.8rem;\\n        line-height: 1;\\n        white-space: no-wrap;\\n        text-decoration: none;\\n        padding: 0.25rem 0.5rem;\\n        margin: 0.25rem;\\n        cursor: pointer;\\n      }\\n\\n      body {\\n        overflow: hidden;\\n      }\\n\\n      li.trace-node button.shallow-expand {\\n\\n      }\\n\\n      li.trace-node button.expand {\\n        border-radius: 0.25rem;\\n        background: #c66;\\n        color: #fff;\\n      }\\n\\n      li.trace-node .trace-name span.output {\\n        color: #999;\\n      }\\n\\n      li.trace-node .trace-name span.expand {\\n        color: #666;\\n      }\\n\\n      li.trace-node .trace-name {\\n        color: #3a3;\\n      }\\n\\n      li.trace-node.err .trace-name {\\n        color: red;\\n      }\\n\\n      li.trace-node.optional-err .trace-name {\\n        color: #f99;\\n      }\\n\\n      li.trace-node.err.expand-all ul {\\n        display: block;\\n      }\\n\\n      li.trace-node.err > ul {\\n        display: none;\\n      }\\n\\n      li.trace-node.err.active > ul {\\n        display: block;\\n      }\\n\\n      li.trace-node.err.deep-active ul {\\n        display: block;\\n      }\\n\\n      .trace-name:hover {\\n        background-color: #9f9;\\n        color: #fff;\\n      }\\n\\n\\n      div.page {\\n        display: grid;\\n        grid-template:\\n          \\\"input perf trace-pane\\\" 1rem\\n          \\\"input output trace-pane\\\" 1fr /\\n          20% 20% 60%;\\n        gap: 1rem;\\n        height: 100vh;\\n      }\\n\\n      div.input-pane {\\n        grid-area: input;\\n        padding-right: 1rem;\\n        border-right: 1px solid #666;\\n      }\\n\\n      div.output-pane {\\n        grid-area: output;\\n      }\\n\\n      div.trace > ul {\\n        position: relative;\\n        padding-left: 8rem;\\n      }\\n\\n      p.trace-name code {\\n        position: absolute;\\n        left: 0;\\n      }\\n\\n      div.trace-pane {\\n        border-left: 1px solid #666;\\n        padding-left: 1rem;\\n        grid-area: trace-pane;\\n        display: grid;\\n\\n        grid-template:\\n          \\\"trace\\\" 60%\\n          \\\"trace-details\\\" 40%;\\n      }\\n\\n      div.trace-pane .trace {\\n        grid-area: trace;\\n        overflow-y: scroll;\\n        border-bottom: 1px solid #aaa;\\n      }\\n\\n      div.trace-pane .trace-details {\\n        grid-area: trace-details;\\n        overflow-y: scroll;\\n        padding-top: 1rem;\\n      }\\n\\n      div.perf {\\n        grid-area: perf;\\n      }\\n    \"],[11],[1,1,0,0,\"\\n\\n    \"],[9,\"div\",true],[12,\"class\",\"page\",null],[10],[1,1,0,0,\"\\n      \"],[9,\"div\",true],[12,\"class\",\"input-pane\",null],[10],[1,1,0,0,\"\\n        \"],[9,\"h1\",true],[10],[1,1,0,0,\"Input\"],[11],[1,1,0,0,\"\\n        \"],[9,\"pre\",true],[10],[1,0,0,0,[27,[24,0],[\"cursored\"]]],[11],[1,1,0,0,\"\\n        \"],[9,\"textarea\",false],[3,0,0,[27,[26,0,\"ModifierHead\"],[]],[[27,[24,0],[\"update\"]]],null],[3,0,0,[27,[26,2,\"ModifierHead\"],[]],[[31,3154,3,[27,[26,1,\"CallHead\"],[]],[[27,[24,0],[]],\"text\"],null]],null],[10],[11],[1,1,0,0,\"\\n      \"],[11],[1,1,0,0,\"\\n      \"],[7,\"Parsed\",[],[[\"@source\",\"@at\"],[[27,[24,0],[\"text\"]],[27,[24,0],[\"cursor\",\"start\"]]]],null],[1,1,0,0,\"\\n    \"],[11],[1,1,0,0,\"\\n  \"]],\"hasEval\":false,\"upvars\":[\"textChange\",\"box\",\"bind\"]}",
  meta: {
    scope: () => ({
      Parsed: _src_parsed__WEBPACK_IMPORTED_MODULE_4__["default"],
      bind: _src_bind__WEBPACK_IMPORTED_MODULE_5__["bind"],
      box: _src_bind__WEBPACK_IMPORTED_MODULE_5__["box"],
      textChange: textChange
    })
  }
}, MyComponent)

function textChange(element, callback) {
  element.addEventListener("focus", e => setTimeout(() => callback(Object(_src_utils__WEBPACK_IMPORTED_MODULE_8__["unwrap"])(e.target)), 0));
  element.addEventListener("input", e => callback(e.currentTarget));
  element.addEventListener("keydown", e => {
    let target = e.currentTarget;
    setTimeout(() => {
      callback(target);
    }, 0);
  });

  function change(e) {
    if (e.target && element.contains(e.target)) {
      callback(e.target);
    }
  }

  document.addEventListener("selectionchange", change);
  return () => {
    document.removeEventListener("selectionchange", change);
  };
}

let TraceService = (_class3 = (_temp2 = class TraceService {
  constructor() {
    _initializerDefineProperty(this, "trace", _descriptor4, this);
  }

}, _temp2), (_descriptor4 = _applyDecoratedDescriptor(_class3.prototype, "trace", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class3);
Object(_glimmerx_core__WEBPACK_IMPORTED_MODULE_2__["renderComponent"])(MyComponent, {
  element: document.body,
  services: {
    guid: new _src_guid__WEBPACK_IMPORTED_MODULE_7__["default"](),
    trace: new TraceService()
  }
});

/***/ }),

/***/ "./docs/src/bind.ts":
/*!**************************!*\
  !*** ./docs/src/bind.ts ***!
  \**************************/
/*! exports provided: bind, box */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function() { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "box", function() { return box; });
function bind(element, box) {
  let {
    get,
    set
  } = inputKind(element);
  set(box.value);

  function update() {
    console.log(get());
    box.update(get());
  }

  element.addEventListener("input", update);
  return () => element.removeEventListener("input", update);
}
function box(object, prop) {
  return {
    value: object[prop],

    update(value) {
      object[prop] = value;
    }

  };
}

function inputKind(element) {
  if (element.tagName === "TEXTAREA") {
    return {
      get: () => element.value,
      set: value => element.value = value
    };
  } else if (element.tagName === "INPUT") {
    switch (element.type) {
      case "text":
        return {
          get: () => element.value,
          set: value => element.value = value
        };

      case "checkbox":
        return {
          get: () => element.checked,
          set: value => element.checked = value
        };
    }
  }

  throw new Error("bind is only implemented for text, checkbox or textarea");
}

/***/ }),

/***/ "./docs/src/guid.ts":
/*!**************************!*\
  !*** ./docs/src/guid.ts ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GuidService; });
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

const GUIDS = new WeakMap();
class GuidService {
  constructor() {
    _guid.set(this, {
      writable: true,
      value: 1
    });
  }

  guid(obj) {
    var _this$guid;

    let guid = GUIDS.get(obj);

    if (guid) {
      return guid;
    }

    guid = "".concat((_classPrivateFieldSet(this, _guid, (_this$guid = +_classPrivateFieldGet(this, _guid)) + 1), _this$guid));
    GUIDS.set(obj, guid);
    return guid;
  }

}

var _guid = new WeakMap();

/***/ }),

/***/ "./docs/src/models/read-node.ts":
/*!**************************************!*\
  !*** ./docs/src/models/read-node.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ReadNodeModel; });
class ReadNodeModel {
  constructor(node, start = 0) {
    this.node = node;
  }

  get kind() {
    return this.node.type;
  }

  get span() {
    return this.node.span;
  }

  get children() {
    if ("children" in this.node) {
      return this.node.children.map(node => new ReadNodeModel(node));
    }

    return undefined;
  }

}

/***/ }),

/***/ "./docs/src/models/trace-node.ts":
/*!***************************************!*\
  !*** ./docs/src/models/trace-node.ts ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TraceNodeModel; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./docs/src/utils.ts");


function children(node, included, start) {
  if (node.preSnippet.offset >= start) {
    return node.children.map(child => new TraceNodeModel(child, included, start));
  }

  let out = [];

  for (let child of node.children) {
    if (child.preSnippet.offset >= start) {
      out.push(new TraceNodeModel(child, included, start));
    } else {
      out.push(...children(child, [...included, node.combinator.name], start));
    }
  }

  return out;
}

class TraceNodeModel {
  constructor(node, included = [], start = 0) {
    this.node = node;
    this.included = included;
    this.start = start;
  }

  get output() {
    return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["unwrap"])(this.node.output);
  }

  get snippet() {
    return this.node.preSnippet;
  }

  get name() {
    return this.node.combinator.name;
  }

  get children() {
    return children(this.node, this.included, this.start);
  }

  get kind() {
    let kind = this.output.kind;

    if (kind === "err" && this.node.optional) {
      return "optional-err";
    } else {
      return kind;
    }
  }

  get isExpandable() {
    return this.output.kind === "err" && this.node.children.some(child => Object(_utils__WEBPACK_IMPORTED_MODULE_0__["unwrap"])(child.output).kind === "err");
  }

  get isLeaf() {
    return this.node.children.length === 0;
  }

}

/***/ }),

/***/ "./docs/src/parsed.ts":
/*!****************************!*\
  !*** ./docs/src/parsed.ts ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Parsed; });
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony import */ var _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmerx/component */ "./node_modules/@glimmerx/component/dist/modules/index.js");
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var _read_output__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./read-output */ "./docs/src/read-output.ts");


var _class, _descriptor, _temp, _lastSource, _lastResult;

function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }




let x = 0;

let Parsed = Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setComponentTemplate"])({
  id: "FobXepNR",
  block: "{\"symbols\":[\"@source\",\"@at\"],\"statements\":[[1,1,0,0,\"\\n    \"],[9,\"div\",true],[12,\"class\",\"perf\",null],[10],[1,1,0,0,\"Last Parse Time: \"],[1,0,0,0,[27,[24,0],[\"perf\"]]],[11],[1,1,0,0,\"\\n\\n    \"],[7,\"ReadOutput\",[],[[\"@node\",\"@source\",\"@trace\",\"@at\"],[[27,[24,0],[\"parsed\",\"root\"]],[27,[24,1],[]],[27,[24,0],[\"parsed\",\"trace\"]],[27,[24,2],[]]]],null],[1,1,0,0,\"\\n  \"]],\"hasEval\":false,\"upvars\":[]}",
  meta: {
    scope: () => ({
      ReadOutput: _read_output__WEBPACK_IMPORTED_MODULE_3__["default"]
    })
  }
}, (_class = (_temp = class Parsed extends _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(...args) {
    super(...args);

    _initializerDefineProperty(this, "perf", _descriptor, this);

    _lastSource.set(this, {
      writable: true,
      value: ""
    });

    _lastResult.set(this, {
      writable: true,
      value: null
    });
  }

  get parsed() {
    if (this.args.source === _classPrivateFieldGet(this, _lastSource) && _classPrivateFieldGet(this, _lastResult) !== null) {
      return _classPrivateFieldGet(this, _lastResult);
    }

    _classPrivateFieldSet(this, _lastSource, this.args.source);

    console.log("parsing ".concat(x++));
    let start = performance.now();
    let result = Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__["read"])(this.args.source, {
      logging: hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__["LoggingType"].Return
    });
    let end = performance.now();
    this.perf = end - start;

    _classPrivateFieldSet(this, _lastResult, result);

    return result;
  }

}, _lastSource = new WeakMap(), _lastResult = new WeakMap(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "perf", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return 0;
  }
})), _class));



/***/ }),

/***/ "./docs/src/read-output.ts":
/*!*********************************!*\
  !*** ./docs/src/read-output.ts ***!
  \*********************************/
/*! exports provided: Details, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Details", function() { return Details; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ReadOutput; });
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony import */ var _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmerx/component */ "./node_modules/@glimmerx/component/dist/modules/index.js");
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./docs/src/utils.ts");
/* harmony import */ var _trace_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./trace-node */ "./docs/src/trace-node.ts");
/* harmony import */ var _glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmerx/modifier */ "./node_modules/@glimmerx/modifier/dist/modules/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _models_trace_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./models/trace-node */ "./docs/src/models/trace-node.ts");
/* harmony import */ var _models_read_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./models/read-node */ "./docs/src/models/read-node.ts");


var _class, _descriptor, _descriptor2, _temp, _class3, _temp2, _details, _traceModel, _readModel;

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }









let Details = (_class = (_temp = class Details {
  constructor() {
    _initializerDefineProperty(this, "active", _descriptor, this);

    _initializerDefineProperty(this, "isPinned", _descriptor2, this);
  }

}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "active", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "isPinned", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
})), _class);

class ReadNode extends _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["default"] {}

Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setComponentTemplate"])({
  id: "m2rYHcCg",
  block: "{\"symbols\":[\"child\",\"@source\",\"@node\"],\"statements\":[[1,1,0,0,\"\\n    \"],[9,\"li\",true],[10],[1,1,0,0,\"\\n    \"],[1,0,0,0,[27,[24,3],[\"kind\"]]],[1,1,0,0,\"\\n\\n\"],[5,[27,[26,3,\"BlockHead\"],[]],[[27,[24,3],[\"children\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,1,0,0,\"      \"],[9,\"ul\",true],[10],[1,1,0,0,\"\\n\"],[5,[27,[26,2,\"BlockHead\"],[]],[[27,[24,3],[\"children\"]]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"          \"],[7,\"ReadNode\",[],[[\"@node\",\"@source\"],[[27,[24,1],[]],[27,[24,2],[]]]],null],[1,1,0,0,\"\\n\"]],\"parameters\":[1]}]]],[1,1,0,0,\"      \"],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[1,1,0,0,\"      \"],[9,\"code\",true],[12,\"class\",\"slice\",null],[10],[1,0,0,0,[31,242,4,[27,[26,1,\"CallHead\"],[]],[[31,248,5,[27,[26,0,\"CallHead\"],[]],[[27,[24,3],[\"span\"]],[27,[24,2],[]]],null]],null]],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]}]]],[1,1,0,0,\"    \"],[11],[1,1,0,0,\"\\n  \"]],\"hasEval\":false,\"upvars\":[\"slice\",\"json\",\"each\",\"if\"]}",
  meta: {
    scope: () => ({
      slice: hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__["slice"],
      ReadNode: ReadNode,
      json: json
    })
  }
}, ReadNode)

let ReadOutput = Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setComponentTemplate"])({
  id: "BK3lPehU",
  block: "{\"symbols\":[\"included\",\"@source\",\"@node\"],\"statements\":[[1,1,0,0,\"\\n    \"],[9,\"style\",true],[10],[1,1,0,0,\"\\n      .slice {\\n        color: #aaa;\\n      }\\n\\n      .output-pane > ul > li li {\\n        padding-left: 1rem;\\n      }\\n\\n      .output-pane > ul, .output-pane > ul > li {\\n        padding-left: 0;\\n      }\\n\\n      ul.included {\\n        display: flex;\\n        flex-flow: row wrap;\\n      }\\n\\n      ul.included li {\\n        padding-left: 0;\\n        white-space: nowrap;\\n      }\\n\\n      ul.included li:not(:last-child)::after {\\n        content: \\\"➡\\\";\\n        margin-left: 0.5rem;\\n        margin-right: 0.5rem;\\n      }\\n    \"],[11],[1,1,0,0,\"\\n    \"],[1,0,0,0,[31,535,3,[27,[26,3,\"CallHead\"],[]],[\"hi\",[27,[24,2],[]]],null]],[1,1,0,0,\"\\n\\n\"],[5,[27,[26,5,\"BlockHead\"],[]],[[31,566,2,[27,[26,4,\"CallHead\"],[]],[[27,[24,3],[\"kind\"]],\"ok\"],null]],null,[[\"default\",\"else\"],[{\"statements\":[[1,1,0,0,\"      \"],[9,\"div\",true],[12,\"class\",\"output-pane\",null],[10],[1,1,0,0,\"\\n        \"],[9,\"h1\",true],[10],[1,1,0,0,\"Output\"],[11],[1,1,0,0,\"\\n        \"],[9,\"ul\",true],[10],[1,1,0,0,\"\\n          \"],[7,\"ReadNode\",[],[[\"@node\",\"@source\"],[[27,[24,0],[\"readModel\"]],[27,[24,2],[]]]],null],[1,1,0,0,\"\\n        \"],[11],[1,1,0,0,\"\\n        \"],[9,\"pre\",true],[10],[1,0,0,0,[31,754,4,[27,[26,2,\"CallHead\"],[]],[[27,[24,3],[]]],null]],[11],[1,1,0,0,\"\\n      \"],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[1,1,0,0,\"      \"],[9,\"div\",true],[12,\"class\",\"output-pane\",null],[10],[1,1,0,0,\"\\n        \"],[9,\"pre\",true],[10],[1,1,0,0,\"ERROR\"],[11],[1,1,0,0,\"\\n      \"],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]}]]],[1,1,0,0,\"\\n    \"],[9,\"div\",true],[12,\"class\",\"trace-pane\",null],[10],[1,1,0,0,\"\\n      \"],[9,\"div\",true],[12,\"class\",\"trace\",null],[10],[1,1,0,0,\"\\n        \"],[9,\"h1\",true],[10],[1,1,0,0,\"Trace\"],[11],[1,1,0,0,\"\\n        \"],[9,\"ul\",true],[10],[1,1,0,0,\"\\n        \"],[7,\"TraceNode\",[],[[\"@node\",\"@details\"],[[27,[24,0],[\"traceModel\"]],[27,[24,0],[\"details\"]]]],null],[1,1,0,0,\"\\n        \"],[11],[1,1,0,0,\"\\n      \"],[11],[1,1,0,0,\"\\n\\n      \"],[9,\"div\",true],[12,\"class\",\"trace-details\",null],[10],[1,1,0,0,\"\\n\"],[5,[27,[26,5,\"BlockHead\"],[]],[[27,[24,0],[\"details\",\"isPinned\"]]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"          \"],[9,\"p\",true],[10],[9,\"button\",false],[3,0,0,[27,[26,1,\"ModifierHead\"],[]],[\"click\",[27,[24,0],[\"unpin\"]]],null],[10],[1,1,0,0,\"unpin\"],[11],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]}]]],[5,[27,[26,5,\"BlockHead\"],[]],[[31,1244,7,[27,[26,6,\"CallHead\"],[]],[[27,[24,0],[\"included\"]]],null]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"          \"],[9,\"ul\",true],[12,\"class\",\"included\",null],[10],[1,1,0,0,\"\\n\"],[5,[27,[26,0,\"BlockHead\"],[]],[[27,[24,0],[\"included\"]]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"              \"],[9,\"li\",true],[10],[1,0,0,0,[27,[24,1],[]]],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[1]}]]],[1,1,0,0,\"          \"],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]}]]],[1,1,0,0,\"        \"],[9,\"pre\",true],[10],[1,0,0,0,[31,1456,4,[27,[26,2,\"CallHead\"],[]],[[27,[24,0],[\"details\",\"active\"]]],null]],[11],[1,1,0,0,\"\\n      \"],[11],[1,1,0,0,\"\\n    \"],[11],[1,1,0,0,\"\\n  \"]],\"hasEval\":false,\"upvars\":[\"each\",\"on\",\"json\",\"log\",\"eq\",\"if\",\"present\"]}",
  meta: {
    scope: () => ({
      eq: _utils__WEBPACK_IMPORTED_MODULE_3__["eq"],
      log: _utils__WEBPACK_IMPORTED_MODULE_3__["log"],
      present: _utils__WEBPACK_IMPORTED_MODULE_3__["present"],
      TraceNode: _trace_node__WEBPACK_IMPORTED_MODULE_4__["default"],
      on: _glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__["on"],
      ReadNode: ReadNode,
      json: json
    })
  }
}, (_class3 = (_temp2 = class ReadOutput extends _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(...args) {
    super(...args);

    _details.set(this, {
      writable: true,
      value: Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_6__["memoizeTracked"])(() => {
        this.args.node;
        return new Details();
      })
    });

    _traceModel.set(this, {
      writable: true,
      value: Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_6__["memoizeTracked"])(() => new _models_trace_node__WEBPACK_IMPORTED_MODULE_7__["default"](this.args.trace, [], this.args.at))
    });

    _readModel.set(this, {
      writable: true,
      value: Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_6__["memoizeTracked"])(() => this.args.node.kind === "ok" ? new _models_read_node__WEBPACK_IMPORTED_MODULE_8__["default"](this.args.node.value) : undefined)
    });
  }

  get included() {
    if (this.details.active) {
      return this.details.active.included;
    }

    return;
  }

  get traceModel() {
    return _classPrivateFieldGet(this, _traceModel).call(this);
  }

  get readModel() {
    return _classPrivateFieldGet(this, _readModel).call(this);
  }

  get details() {
    return _classPrivateFieldGet(this, _details).call(this);
  }

  unpin() {
    this.details.isPinned = false;
  }

}, _details = new WeakMap(), _traceModel = new WeakMap(), _readModel = new WeakMap(), _temp2), (_applyDecoratedDescriptor(_class3.prototype, "unpin", [_glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__["action"]], Object.getOwnPropertyDescriptor(_class3.prototype, "unpin"), _class3.prototype)), _class3));



function json(o) {
  return JSON.stringify(o, undefined, 2);
}

/***/ }),

/***/ "./docs/src/trace-node.ts":
/*!********************************!*\
  !*** ./docs/src/trace-node.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony import */ var _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmerx/component */ "./node_modules/@glimmerx/component/dist/modules/index.js");
/* harmony import */ var hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hbs-parser-next */ "./src/index.ts");
/* harmony import */ var _glimmerx_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @glimmerx/service */ "./node_modules/@glimmerx/service/dist/modules/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./docs/src/utils.ts");
/* harmony import */ var _glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmerx/modifier */ "./node_modules/@glimmerx/modifier/dist/modules/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");


var _class, _descriptor, _descriptor2, _descriptor3, _temp;

function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }








function format(output) {
  if (output.kind === "err") {
    return output.reason;
  } else {
    return Object(hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__["formatDebuggable"])(output.value[1]);
  }
}

let TraceNode = (_class = (_temp = class TraceNode extends _glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(...args) {
    super(...args);

    _initializerDefineProperty(this, "guid", _descriptor, this);

    _initializerDefineProperty(this, "isShallowExpanded", _descriptor2, this);

    _initializerDefineProperty(this, "localDeepExpanded", _descriptor3, this);
  }

  get output() {
    return Object(_utils__WEBPACK_IMPORTED_MODULE_4__["unwrap"])(this.args.node.output);
  }

  get isExpandable() {
    return this.output.kind === "err" && this.args.node.children.some(child => Object(_utils__WEBPACK_IMPORTED_MODULE_4__["unwrap"])(child.output).kind === "err");
  }

  get isShallowExpandable() {
    return this.isExpandable && !this.isDeepExpanded;
  }

  get isExpanded() {
    return this.isShallowExpanded || this.isDeepExpanded;
  }

  get isDeepExpanded() {
    return this.localDeepExpanded || this.args.isDeepExpanded || false;
  }

  get isPinned() {
    return this.args.details.isPinned && this.args.details.active === this.args.node;
  }

  hoverDetails() {
    if (!this.args.details.isPinned) {
      this.args.details.active = this.args.node;
    }
  }

  togglePin() {
    if (this.isPinned) {
      this.args.details.isPinned = false;
    } else {
      this.args.details.active = this.args.node;
      this.args.details.isPinned = true;
    }
  }

  toggleExpanded(e) {
    e.stopPropagation();
    this.isShallowExpanded = !this.isShallowExpanded;
  }

  toggleDeepExpanded(e) {
    e.stopPropagation();
    this.localDeepExpanded = !this.isDeepExpanded;
  }

}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "guid", [_glimmerx_service__WEBPACK_IMPORTED_MODULE_3__["service"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "isShallowExpanded", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "localDeepExpanded", [_glimmerx_component__WEBPACK_IMPORTED_MODULE_1__["tracked"]], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _applyDecoratedDescriptor(_class.prototype, "hoverDetails", [_glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "hoverDetails"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "togglePin", [_glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "togglePin"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleExpanded", [_glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "toggleExpanded"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "toggleDeepExpanded", [_glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__["action"]], Object.getOwnPropertyDescriptor(_class.prototype, "toggleDeepExpanded"), _class.prototype)), _class);

Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setComponentTemplate"])({
  id: "vPvz3TJU",
  block: "{\"symbols\":[\"child\",\"@details\",\"@node\",\"@isDeepExpanded\"],\"statements\":[[1,1,0,0,\"\\n    \"],[9,\"li\",true],[13,\"class\",[32,[\"trace-node \",[27,[24,3],[\"kind\"]],\" \",[31,50,2,[27,[26,2,\"CallHead\"],[]],[[27,[24,0],[\"isExpanded\"]],\"active\"],null],\" \",[31,82,2,[27,[26,2,\"CallHead\"],[]],[[27,[24,0],[\"isDeepExpanded\"]],\"deep-active\"],null]]],null],[10],[1,1,0,0,\"\\n      \"],[9,\"p\",false],[23,\"class\",\"trace-name\",null],[3,0,0,[27,[26,1,\"ModifierHead\"],[]],[\"mouseenter\",[27,[24,0],[\"hoverDetails\"]]],null],[10],[1,1,0,0,\"\\n        \"],[9,\"code\",true],[10],[1,0,0,0,[31,211,5,[27,[26,3,\"CallHead\"],[]],[[27,[24,3],[\"snippet\"]]],null]],[11],[1,1,0,0,\"\\n\"],[5,[27,[26,2,\"BlockHead\"],[]],[[27,[24,3],[\"isShallowExpandable\"]]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"          \"],[9,\"button\",true],[12,\"class\",\"shallow-expand\",null],[10],[1,1,0,0,\"\\n          \"],[5,[27,[26,2,\"BlockHead\"],[]],[[27,[24,0],[\"isExpanded\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,1,0,0,\"⯆\"]],\"parameters\":[]},{\"statements\":[[1,1,0,0,\"⯈\"]],\"parameters\":[]}]]],[1,1,0,0,\"\\n          \"],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]}]]],[1,1,0,0,\"        \"],[9,\"span\",false],[23,\"class\",\"name\",null],[3,0,0,[27,[26,1,\"ModifierHead\"],[]],[\"click\",[27,[24,0],[\"toggleExpanded\"]]],null],[10],[1,0,0,0,[27,[24,3],[\"name\"]]],[11],[1,1,0,0,\"\\n        \"],[9,\"span\",true],[12,\"class\",\"output\",null],[10],[1,1,0,0,\"➡ \"],[1,0,0,0,[31,528,6,[27,[26,4,\"CallHead\"],[]],[[27,[24,0],[\"output\"]]],null]],[11],[1,1,0,0,\"\\n\"],[5,[27,[26,2,\"BlockHead\"],[]],[[31,571,3,[27,[26,5,\"CallHead\"],[]],[[27,[24,4],[]]],null]],null,[[\"default\"],[{\"statements\":[[5,[27,[26,2,\"BlockHead\"],[]],[[27,[24,3],[\"isExpandable\"]]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"            \"],[9,\"button\",false],[23,\"class\",\"expand\",null],[3,0,0,[27,[26,1,\"ModifierHead\"],[]],[\"click\",[27,[24,0],[\"toggleDeepExpanded\"]]],null],[10],[1,1,0,0,\"\\n\"],[5,[27,[26,2,\"BlockHead\"],[]],[[27,[24,0],[\"isDeepExpanded\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,1,0,0,\"              ➖\\n\"]],\"parameters\":[]},{\"statements\":[[1,1,0,0,\"              ➕\\n\"]],\"parameters\":[]}]]],[1,1,0,0,\"            \"],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]}]]]],\"parameters\":[]}]]],[1,1,0,0,\"        \"],[9,\"button\",false],[3,0,0,[27,[26,1,\"ModifierHead\"],[]],[\"click\",[27,[24,0],[\"togglePin\"]]],null],[10],[1,1,0,0,\"\\n\"],[5,[27,[26,2,\"BlockHead\"],[]],[[27,[24,0],[\"isPinned\"]]],null,[[\"default\",\"else\"],[{\"statements\":[[1,1,0,0,\"            📌\\n\"]],\"parameters\":[]},{\"statements\":[[1,1,0,0,\"            pin\\n\"]],\"parameters\":[]}]]],[1,1,0,0,\"        \"],[11],[1,1,0,0,\"\\n      \"],[11],[1,1,0,0,\"\\n\\n\"],[5,[27,[26,2,\"BlockHead\"],[]],[[31,1065,3,[27,[26,5,\"CallHead\"],[]],[[27,[24,3],[\"isLeaf\"]]],null]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"        \"],[9,\"ul\",true],[10],[1,1,0,0,\"\\n\"],[5,[27,[26,0,\"BlockHead\"],[]],[[27,[24,3],[\"children\"]]],null,[[\"default\"],[{\"statements\":[[1,1,0,0,\"            \"],[7,\"TraceNode\",[],[[\"@node\",\"@isDeepExpanded\",\"@details\"],[[27,[24,1],[]],[27,[24,0],[\"isDeepExpanded\"]],[27,[24,2],[]]]],null],[1,1,0,0,\"\\n\"]],\"parameters\":[1]}]]],[1,1,0,0,\"        \"],[11],[1,1,0,0,\"\\n\"]],\"parameters\":[]}]]],[1,1,0,0,\"    \"],[11],[1,1,0,0,\"\\n  \"]],\"hasEval\":false,\"upvars\":[\"each\",\"on\",\"if\",\"trunc\",\"format\",\"not\"]}",
  meta: {
    scope: () => ({
      trunc: hbs_parser_next__WEBPACK_IMPORTED_MODULE_2__["trunc"],
      not: _utils__WEBPACK_IMPORTED_MODULE_4__["not"],
      on: _glimmerx_modifier__WEBPACK_IMPORTED_MODULE_5__["on"],
      format: format,
      TraceNode: TraceNode
    })
  }
}, TraceNode)

/* harmony default export */ __webpack_exports__["default"] = (TraceNode);

/***/ }),

/***/ "./docs/src/utils.ts":
/*!***************************!*\
  !*** ./docs/src/utils.ts ***!
  \***************************/
/*! exports provided: eq, not, set, log, json, present, unwrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "not", function() { return not; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "json", function() { return json; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "present", function() { return present; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return unwrap; });
function eq(left, right) {
  return left === right;
}
function not(item) {
  return !item;
}
function set(parent, key) {
  return value => {
    parent[key] = value;
  };
}
function log(...args) {
  console.log(...args);
}
function json(o) {
  return JSON.stringify(o, undefined, 2);
}
function present(o) {
  return Array.isArray(o) && o.length > 0;
}
function unwrap(v) {
  if (v === null || v === undefined) {
    throw new Error("ASSERT: Expected non-null");
  }

  return v;
}

/***/ }),

/***/ "./node_modules/@glimmer/component/dist/modules/addon/-private/base-component-manager.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@glimmer/component/dist/modules/addon/-private/base-component-manager.js ***!
  \***********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BaseComponentManager; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@glimmer/component/dist/modules/addon/-private/component.js");

class BaseComponentManager {
  constructor(owner) {
    this.owner = owner;
  }

  createComponent(ComponentClass, args) {
    if (true
    /* DEBUG */
    ) {
      _component__WEBPACK_IMPORTED_MODULE_0__["ARGS_SET"].set(args.named, true);
    }

    return new ComponentClass(this.owner, args.named);
  }

  getContext(component) {
    return component;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/component/dist/modules/addon/-private/component.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@glimmer/component/dist/modules/addon/-private/component.js ***!
  \**********************************************************************************/
/*! exports provided: setDestroying, setDestroyed, ARGS_SET, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDestroying", function() { return setDestroying; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDestroyed", function() { return setDestroyed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARGS_SET", function() { return ARGS_SET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GlimmerComponent; });
const DESTROYING = new WeakMap();
const DESTROYED = new WeakMap();
function setDestroying(component) {
  DESTROYING.set(component, true);
}
function setDestroyed(component) {
  DESTROYED.set(component, true);
}
let ARGS_SET;

if (true
/* DEBUG */
) {
  ARGS_SET = new WeakMap();
}
/**
 * The `Component` class defines an encapsulated UI element that is rendered to
 * the DOM. A component is made up of a template and, optionally, this component
 * object.
 *
 * ## Defining a Component
 *
 * To define a component, subclass `Component` and add your own properties,
 * methods and lifecycle hooks:
 *
 * ```ts
 * import Component from '@glimmer/component';
 *
 * export default class extends Component {
 * }
 * ```
 *
 * ## Lifecycle Hooks
 *
 * Lifecycle hooks allow you to respond to changes to a component, such as when
 * it gets created, rendered, updated or destroyed. To add a lifecycle hook to a
 * component, implement the hook as a method on your component subclass.
 *
 * For example, to be notified when Glimmer has rendered your component so you
 * can attach a legacy jQuery plugin, implement the `didInsertElement()` method:
 *
 * ```ts
 * import Component from '@glimmer/component';
 *
 * export default class extends Component {
 *   didInsertElement() {
 *     $(this.element).pickadate();
 *   }
 * }
 * ```
 *
 * ## Data for Templates
 *
 * `Component`s have two different kinds of data, or state, that can be
 * displayed in templates:
 *
 * 1. Arguments
 * 2. Properties
 *
 * Arguments are data that is passed in to a component from its parent
 * component. For example, if I have a `UserGreeting` component, I can pass it
 * a name and greeting to use:
 *
 * ```hbs
 * <UserGreeting @name="Ricardo" @greeting="Olá" />
 * ```
 *
 * Inside my `UserGreeting` template, I can access the `@name` and `@greeting`
 * arguments that I've been given:
 *
 * ```hbs
 * {{@greeting}}, {{@name}}!
 * ```
 *
 * Arguments are also available inside my component:
 *
 * ```ts
 * console.log(this.args.greeting); // prints "Olá"
 * ```
 *
 * Properties, on the other hand, are internal to the component and declared in
 * the class. You can use properties to store data that you want to show in the
 * template, or pass to another component as an argument.
 *
 * ```ts
 * import Component from '@glimmer/component';
 *
 * export default class extends Component {
 *   user = {
 *     name: 'Robbie'
 *   }
 * }
 * ```
 *
 * In the above example, we've defined a component with a `user` property that
 * contains an object with its own `name` property.
 *
 * We can render that property in our template:
 *
 * ```hbs
 * Hello, {{user.name}}!
 * ```
 *
 * We can also take that property and pass it as an argument to the
 * `UserGreeting` component we defined above:
 *
 * ```hbs
 * <UserGreeting @greeting="Hello" @name={{user.name}} />
 * ```
 *
 * ## Arguments vs. Properties
 *
 * Remember, arguments are data that was given to your component by its parent
 * component, and properties are data your component has defined for itself.
 *
 * You can tell the difference between arguments and properties in templates
 * because arguments always start with an `@` sign (think "A is for arguments"):
 *
 * ```hbs
 * {{@firstName}}
 * ```
 *
 * We know that `@firstName` came from the parent component, not the current
 * component, because it starts with `@` and is therefore an argument.
 *
 * On the other hand, if we see:
 *
 * ```hbs
 * {{name}}
 * ```
 *
 * We know that `name` is a property on the component. If we want to know where
 * the data is coming from, we can go look at our component class to find out.
 *
 * Inside the component itself, arguments always show up inside the component's
 * `args` property. For example, if `{{@firstName}}` is `Tom` in the template,
 * inside the component `this.args.firstName` would also be `Tom`.
 */


class GlimmerComponent {
  /**
   * Constructs a new component and assigns itself the passed properties. You
   * should not construct new components yourself. Instead, Glimmer will
   * instantiate new components automatically as it renders.
   *
   * @param owner
   * @param args
   */
  constructor(_owner, args) {
    if ( true
    /* DEBUG */
    && !ARGS_SET.has(args)) {
      throw new Error("You must pass both the owner and args to super() in your component: ".concat(this.constructor.name, ". You can pass them directly, or use ...arguments to pass all arguments through."));
    }

    this.args = args;
    DESTROYING.set(this, false);
    DESTROYED.set(this, false);
  }

  get isDestroying() {
    return DESTROYING.get(this) || false;
  }

  get isDestroyed() {
    return DESTROYED.get(this) || false;
  }
  /**
   * Called before the component has been removed from the DOM.
   */


  willDestroy() {} // eslint-disable-line @typescript-eslint/no-empty-function


}

/***/ }),

/***/ "./node_modules/@glimmer/component/dist/modules/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@glimmer/component/dist/modules/index.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/component */ "./node_modules/@glimmer/component/dist/modules/src/component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _src_component__WEBPACK_IMPORTED_MODULE_0__["default"]; });



/***/ }),

/***/ "./node_modules/@glimmer/component/dist/modules/src/component-manager.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@glimmer/component/dist/modules/src/component-manager.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GlimmerComponentManager; });
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony import */ var _addon_private_base_component_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../addon/-private/base-component-manager */ "./node_modules/@glimmer/component/dist/modules/addon/-private/base-component-manager.js");
/* harmony import */ var _addon_private_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addon/-private/component */ "./node_modules/@glimmer/component/dist/modules/addon/-private/component.js");



const CAPABILITIES = Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["componentCapabilities"])('3.13', {
  destructor: true
});
/**
 * This component manager runs in Glimmer.js environments and extends the base component manager to:
 *
 * 1. Implement a lightweight destruction protocol (currently not deferred, like in Ember)
 * 2. Invoke legacy component lifecycle hooks (didInsertElement and didUpdate)
 */

class GlimmerComponentManager extends _addon_private_base_component_manager__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    super(...arguments);
    this.capabilities = CAPABILITIES;
  }

  destroyComponent(component) {
    Object(_addon_private_component__WEBPACK_IMPORTED_MODULE_2__["setDestroying"])(component);
    component.willDestroy();
    Object(_addon_private_component__WEBPACK_IMPORTED_MODULE_2__["setDestroyed"])(component);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/component/dist/modules/src/component.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@glimmer/component/dist/modules/src/component.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GlimmerComponent; });
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony import */ var _component_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component-manager */ "./node_modules/@glimmer/component/dist/modules/src/component-manager.js");
/* harmony import */ var _addon_private_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addon/-private/component */ "./node_modules/@glimmer/component/dist/modules/addon/-private/component.js");



class GlimmerComponent extends _addon_private_component__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(owner, args) {
    super(owner, args);

    if ( true
    /* DEBUG */
    && !(owner !== null && typeof owner === 'object')) {
      throw new Error("You must pass both the owner and args to super() in your component: ".concat(this.constructor.name, ". You can pass them directly, or use ...arguments to pass all arguments through."));
    }

    Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setOwner"])(this, owner);
  }

}
Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setComponentManager"])(owner => {
  return new _component_manager__WEBPACK_IMPORTED_MODULE_1__["default"](owner);
}, GlimmerComponent);

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/index.js ***!
  \**********************************************************/
/*! exports provided: renderComponent, didRender, getTemplateIterator, BaseEnvDelegate, setComponentManager, setHelperManager, setModifierManager, modifierCapabilities, helperCapabilities, componentCapabilities, templateOnlyComponent, createTemplate, setComponentTemplate, getOwner, setOwner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_render_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/render-component */ "./node_modules/@glimmer/core/dist/modules/src/render-component/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderComponent", function() { return _src_render_component__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "didRender", function() { return _src_render_component__WEBPACK_IMPORTED_MODULE_0__["didRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getTemplateIterator", function() { return _src_render_component__WEBPACK_IMPORTED_MODULE_0__["getTemplateIterator"]; });

/* harmony import */ var _src_environment_delegates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/environment/delegates */ "./node_modules/@glimmer/core/dist/modules/src/environment/delegates.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseEnvDelegate", function() { return _src_environment_delegates__WEBPACK_IMPORTED_MODULE_1__["BaseEnvDelegate"]; });

/* harmony import */ var _src_managers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/managers */ "./node_modules/@glimmer/core/dist/modules/src/managers/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setComponentManager", function() { return _src_managers__WEBPACK_IMPORTED_MODULE_2__["setComponentManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setHelperManager", function() { return _src_managers__WEBPACK_IMPORTED_MODULE_2__["setHelperManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setModifierManager", function() { return _src_managers__WEBPACK_IMPORTED_MODULE_2__["setModifierManager"]; });

/* harmony import */ var _src_managers_modifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/managers/modifier */ "./node_modules/@glimmer/core/dist/modules/src/managers/modifier.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modifierCapabilities", function() { return _src_managers_modifier__WEBPACK_IMPORTED_MODULE_3__["capabilities"]; });

/* harmony import */ var _src_managers_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/managers/helper */ "./node_modules/@glimmer/core/dist/modules/src/managers/helper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "helperCapabilities", function() { return _src_managers_helper__WEBPACK_IMPORTED_MODULE_4__["capabilities"]; });

/* harmony import */ var _src_managers_component_custom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/managers/component/custom */ "./node_modules/@glimmer/core/dist/modules/src/managers/component/custom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "componentCapabilities", function() { return _src_managers_component_custom__WEBPACK_IMPORTED_MODULE_5__["capabilities"]; });

/* harmony import */ var _src_managers_component_template_only__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/managers/component/template-only */ "./node_modules/@glimmer/core/dist/modules/src/managers/component/template-only.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "templateOnlyComponent", function() { return _src_managers_component_template_only__WEBPACK_IMPORTED_MODULE_6__["templateOnlyComponent"]; });

/* harmony import */ var _src_template__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/template */ "./node_modules/@glimmer/core/dist/modules/src/template.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTemplate", function() { return _src_template__WEBPACK_IMPORTED_MODULE_7__["createTemplate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setComponentTemplate", function() { return _src_template__WEBPACK_IMPORTED_MODULE_7__["setComponentTemplate"]; });

/* harmony import */ var _src_owner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/owner */ "./node_modules/@glimmer/core/dist/modules/src/owner.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOwner", function() { return _src_owner__WEBPACK_IMPORTED_MODULE_8__["getOwner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setOwner", function() { return _src_owner__WEBPACK_IMPORTED_MODULE_8__["setOwner"]; });











/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/environment/delegates.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/environment/delegates.js ***!
  \******************************************************************************/
/*! exports provided: BaseEnvDelegate, ClientEnvDelegate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseEnvDelegate", function() { return BaseEnvDelegate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClientEnvDelegate", function() { return ClientEnvDelegate; });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iterator */ "./node_modules/@glimmer/core/dist/modules/src/environment/iterator.js");
/* harmony import */ var _to_bool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./to-bool */ "./node_modules/@glimmer/core/dist/modules/src/environment/to-bool.js");


/**
 * The environment delegate base class shared by both the client and SSR
 * environments. Contains shared definitions, but requires user to specify
 * `isInteractive` and a method for getting the protocols of URLs.
 *
 * @internal
 */

class BaseEnvDelegate {
  constructor() {
    // Match Ember's toBool semantics for cross-compatibility
    this.toBool = _to_bool__WEBPACK_IMPORTED_MODULE_1__["default"];
  }

  toIterator(value) {
    if (Object(_iterator__WEBPACK_IMPORTED_MODULE_0__["isNativeIterable"])(value)) {
      return _iterator__WEBPACK_IMPORTED_MODULE_0__["NativeIterator"].from(value);
    }

    return null;
  }

}

if (true
/* DEBUG */
) {
  // This is only possible in `key` on {{each}}
  BaseEnvDelegate.prototype.getPath = (obj, path) => {
    if (path.includes('.')) {
      throw new Error('You attempted to get a path with a `.` in it, but Glimmer.js does not support paths with dots.');
    }

    return obj[path];
  };
}
/**
 * The client specific environment delegate.
 *
 * @internal
 */


class ClientEnvDelegate extends BaseEnvDelegate {
  constructor() {
    super(...arguments);
    this.isInteractive = true;
    this.uselessAnchor = self.document.createElement('a');

    this.protocolForURL = url => {
      // TODO - investigate alternative approaches
      // e.g. see `installPlatformSpecificProtocolForURL` in Ember
      this.uselessAnchor.href = url;
      return this.uselessAnchor.protocol;
    };
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/environment/iterator.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/environment/iterator.js ***!
  \*****************************************************************************/
/*! exports provided: isNativeIterable, NativeIterator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNativeIterable", function() { return isNativeIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NativeIterator", function() { return NativeIterator; });
function isNativeIterable(value) {
  return typeof value === 'object' && value !== null && Symbol.iterator in value;
}
class NativeIterator {
  constructor(iterable, result) {
    this.iterable = iterable;
    this.result = result;
    this.position = 0;
  }

  static from(iterable) {
    const iterator = iterable[Symbol.iterator]();
    const result = iterator.next();
    const {
      done
    } = result;

    if (done === true) {
      return null;
    } else {
      return new this(iterator, result);
    }
  }

  isEmpty() {
    return false;
  }

  next() {
    const {
      iterable,
      result,
      position
    } = this;

    if (result.done) {
      return null;
    }

    const value = result.value;
    const memo = position;
    this.position++;
    this.result = iterable.next();
    return {
      value,
      memo
    };
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/environment/to-bool.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/environment/to-bool.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return toBool; });
function toBool(predicate) {
  if (Array.isArray(predicate)) {
    return predicate.length !== 0;
  } else {
    return Boolean(predicate);
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/managers/component/custom.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/managers/component/custom.js ***!
  \**********************************************************************************/
/*! exports provided: VM_CAPABILITIES, capabilities, hasAsyncLifecycleCallbacks, hasUpdateHook, hasAsyncUpdateHook, hasDestructors, default, VMCustomComponentState, CUSTOM_COMPONENT_MANAGER, VMCustomComponentDefinition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VM_CAPABILITIES", function() { return VM_CAPABILITIES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capabilities", function() { return capabilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasAsyncLifecycleCallbacks", function() { return hasAsyncLifecycleCallbacks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasUpdateHook", function() { return hasUpdateHook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasAsyncUpdateHook", function() { return hasAsyncUpdateHook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasDestructors", function() { return hasDestructors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CustomComponentManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VMCustomComponentState", function() { return VMCustomComponentState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_COMPONENT_MANAGER", function() { return CUSTOM_COMPONENT_MANAGER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VMCustomComponentDefinition", function() { return VMCustomComponentDefinition; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../owner */ "./node_modules/@glimmer/core/dist/modules/src/owner.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! .. */ "./node_modules/@glimmer/core/dist/modules/src/managers/index.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util */ "./node_modules/@glimmer/core/dist/modules/src/managers/util.js");






const VM_CAPABILITIES = {
  createInstance: true,
  dynamicLayout: false,
  dynamicTag: false,
  wrapped: false,
  prepareArgs: false,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  updateHook: false,
  createCaller: false,
  dynamicScope: true,
  willDestroy: false
};
function capabilities(managerAPI, options = {}) {
  Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(managerAPI === '3.4' || managerAPI === '3.13', 'Invalid component manager compatibility specified');
  const updateHook = managerAPI !== '3.4' ? Boolean(options.updateHook) : true;
  return {
    asyncLifecycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
    destructor: Boolean(options.destructor),
    updateHook
  };
}
function hasAsyncLifecycleCallbacks(delegate) {
  return delegate.capabilities.asyncLifecycleCallbacks;
}
function hasUpdateHook(delegate) {
  return delegate.capabilities.updateHook;
}
function hasAsyncUpdateHook(delegate) {
  return hasAsyncLifecycleCallbacks(delegate) && hasUpdateHook(delegate);
}
function hasDestructors(delegate) {
  return delegate.capabilities.destructor;
} ///////////

/**
  The CustomComponentManager allows addons to provide custom component
  implementations that integrate seamlessly into Ember. This is accomplished
  through a delegate, registered with the custom component manager, which
  implements a set of hooks that determine component behavior.

  To create a custom component manager, instantiate a new CustomComponentManager
  class and pass the delegate as the first argument:

  ```js
  let manager = new CustomComponentManager({
    // ...delegate implementation...
  });
  ```

  ## Delegate Hooks

  Throughout the lifecycle of a component, the component manager will invoke
  delegate hooks that are responsible for surfacing those lifecycle changes to
  the end developer.

  * `create()` - invoked when a new instance of a component should be created
  * `update()` - invoked when the arguments passed to a component change
  * `getContext()` - returns the object that should be
*/

class CustomComponentManager {
  create(env, definition, args, dynamicScope) {
    const {
      ComponentDefinition
    } = definition;
    const capturedArgs = args.capture();
    const owner = dynamicScope.get(_owner__WEBPACK_IMPORTED_MODULE_3__["OWNER_KEY"]).value();
    const delegate = Object(___WEBPACK_IMPORTED_MODULE_4__["getComponentManager"])(owner, ComponentDefinition);
    const argsProxy = Object(_util__WEBPACK_IMPORTED_MODULE_5__["argsProxyFor"])(capturedArgs, 'component');
    const component = delegate.createComponent(ComponentDefinition, argsProxy);
    return new VMCustomComponentState(env, delegate, component, capturedArgs, argsProxy);
  }

  update({
    delegate,
    component,
    argsProxy
  }) {
    if (hasUpdateHook(delegate)) {
      delegate.updateComponent(component, argsProxy);
    }
  }

  didCreate({
    delegate,
    component
  }) {
    if (hasAsyncLifecycleCallbacks(delegate)) {
      delegate.didCreateComponent(component);
    }
  }

  didUpdate({
    delegate,
    component
  }) {
    if (hasAsyncUpdateHook(delegate)) {
      delegate.didUpdateComponent(component);
    }
  }

  getContext({
    delegate,
    component
  }) {
    delegate.getContext(component);
  }

  getSelf({
    env,
    delegate,
    component
  }) {
    return new _glimmer_reference__WEBPACK_IMPORTED_MODULE_1__["ComponentRootReference"](delegate.getContext(component), env);
  }

  getDestructor(state) {
    if (hasDestructors(state.delegate)) {
      return state;
    }

    return null;
  }

  getCapabilities({
    capabilities
  }) {
    return Object.assign({}, VM_CAPABILITIES, {
      updateHook: capabilities.updateHook
    });
  }

  getTag({
    args
  }) {
    if (Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__["isConst"])(args)) {
      // returning a const tag skips the update hook (VM BUG?)
      return Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__["createTag"])();
    }

    return args.tag;
  }

  didRenderLayout() {} // eslint-disable-line @typescript-eslint/no-empty-function


  didUpdateLayout() {} // eslint-disable-line @typescript-eslint/no-empty-function


  getJitStaticLayout({
    definition
  }) {
    return definition.template.asLayout();
  }

} ///////////

/**
 * Stores internal state about a component instance after it's been created.
 */

class VMCustomComponentState {
  constructor(env, delegate, component, args, argsProxy) {
    this.env = env;
    this.delegate = delegate;
    this.component = component;
    this.args = args;
    this.argsProxy = argsProxy;
  }

  destroy() {
    const {
      delegate,
      component
    } = this;

    if (hasDestructors(delegate)) {
      delegate.destroyComponent(component);
    }
  }

}
const CUSTOM_COMPONENT_MANAGER = new CustomComponentManager();
class VMCustomComponentDefinition {
  constructor(handle, ComponentDefinition, template) {
    this.manager = CUSTOM_COMPONENT_MANAGER;
    this.handle = handle;
    this.template = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["unwrapTemplate"])(template);
    const capabilities = Object(___WEBPACK_IMPORTED_MODULE_4__["getComponentManager"])(_owner__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_OWNER"], ComponentDefinition).capabilities;
    this.state = {
      ComponentDefinition,
      capabilities,
      definition: this
    };
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/managers/component/template-only.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/managers/component/template-only.js ***!
  \*****************************************************************************************/
/*! exports provided: CAPABILITIES, ComponentStateBucket, TemplateOnlyComponentDebugBucket, default, TEMPLATE_ONLY_MANAGER, TemplateOnlyComponentDefinition, TemplateOnlyComponent, templateOnlyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CAPABILITIES", function() { return CAPABILITIES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentStateBucket", function() { return ComponentStateBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateOnlyComponentDebugBucket", function() { return TemplateOnlyComponentDebugBucket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TemplateOnlyComponentManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEMPLATE_ONLY_MANAGER", function() { return TEMPLATE_ONLY_MANAGER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateOnlyComponentDefinition", function() { return TemplateOnlyComponentDefinition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateOnlyComponent", function() { return TemplateOnlyComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "templateOnlyComponent", function() { return templateOnlyComponent; });
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");



const CAPABILITIES = {
  attributeHook: false,
  createArgs: false,
  createCaller: false,
  createInstance: true,
  dynamicLayout: false,
  dynamicScope: false,
  dynamicTag: false,
  elementHook: false,
  prepareArgs: false,
  updateHook: false,
  wrapped: false,
  willDestroy: false
};
class ComponentStateBucket {
  constructor(args) {
    this.args = args;
  }

}
const EMPTY_SELF = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ConstReference"](null);
let TemplateOnlyComponentDebugReference;

if (true
/* DEBUG */
) {
  TemplateOnlyComponentDebugReference = class extends _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ConstReference"] {
    constructor(name) {
      super(undefined);
      this.name = name;
    }

    get(propertyKey) {
      throw new Error("You tried to reference {{".concat(propertyKey, "}} from the ").concat(this.name, " template, which doesn't have an associated component class. Template-only components can only access args passed to them. Did you mean {{@").concat(propertyKey, "}}?"));
    }

  };
}
/**
 * For performance reasons, we want to avoid instantiating component buckets for
 * components that don't have an associated component class that we would need
 * instantiate and invoke lifecycle hooks on.
 *
 * In development mode, however, we need to track some state about the component
 * in order to produce more useful error messages. This
 * TemplateOnlyComponentDebugBucket is only created in development mode to hold
 * that state.
 */


class TemplateOnlyComponentDebugBucket {
  constructor(definition) {
    this.definition = definition;
  }

}
class TemplateOnlyComponentManager {
  static create() {
    return new TemplateOnlyComponentManager();
  }

  getCapabilities() {
    return CAPABILITIES;
  }

  getJitStaticLayout({
    definition
  }) {
    return definition.template.asLayout();
  }

  create(_env, state) {
    // In development mode, save off state needed for error messages. This will
    // get stripped in production mode and no bucket will be instantiated.
    return true
    /* DEBUG */
    ? new TemplateOnlyComponentDebugBucket(state.definition) : undefined;
  }

  getSelf(bucket) {
    return true
    /* DEBUG */
    ? new TemplateOnlyComponentDebugReference(bucket.definition.state.name) : undefined;
  }

  getTag() {
    return _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
  }

  didRenderLayout() {} // eslint-disable-line @typescript-eslint/no-empty-function


  didCreate() {} // eslint-disable-line @typescript-eslint/no-empty-function


  didUpdateLayout() {} // eslint-disable-line @typescript-eslint/no-empty-function


  didUpdate() {} // eslint-disable-line @typescript-eslint/no-empty-function


  getDestructor() {
    return null;
  }

}
const TEMPLATE_ONLY_MANAGER = new TemplateOnlyComponentManager();
class TemplateOnlyComponentDefinition {
  constructor(handle, name, template) {
    this.manager = TEMPLATE_ONLY_MANAGER;
    this.handle = handle;
    this.template = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["unwrapTemplate"])(template);
    this.state = {
      name,
      definition: this
    };
  }

}
class TemplateOnlyComponent {} // TODO: We end up creating an extra object here mainly to be the weakmap key
// for setComponentTemplate. It might be possible to optimize.

function templateOnlyComponent() {
  return new TemplateOnlyComponent();
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/managers/helper.js":
/*!************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/managers/helper.js ***!
  \************************************************************************/
/*! exports provided: capabilities, hasUpdateHook, hasDestructor, vmHelperFactoryFor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capabilities", function() { return capabilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasUpdateHook", function() { return hasUpdateHook; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasDestructor", function() { return hasDestructor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vmHelperFactoryFor", function() { return vmHelperFactoryFor; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./node_modules/@glimmer/core/dist/modules/src/managers/util.js");
/* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../owner */ "./node_modules/@glimmer/core/dist/modules/src/owner.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! . */ "./node_modules/@glimmer/core/dist/modules/src/managers/index.js");
/* harmony import */ var _utils_unbindable_function__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/unbindable-function */ "./node_modules/@glimmer/core/dist/modules/src/utils/unbindable-function.js");
/* harmony import */ var _utils_autotracking__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/autotracking */ "./node_modules/@glimmer/core/dist/modules/src/utils/autotracking.js");







function capabilities(managerAPI, options = {}) {
  Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(managerAPI === 'glimmerjs-2.0.0', 'Invalid helper manager compatibility specified');
  return {
    destructor: Boolean(options.destructor),
    updateHook: Boolean(options.updateHook)
  };
}
function hasUpdateHook(delegate) {
  return delegate.capabilities.updateHook;
}
function hasDestructor(delegate) {
  return delegate.capabilities.destructor;
} ///////////

function customHelperFn(manager, definition, capturedArgs, vm) {
  let bucket;
  const argsProxy = Object(_util__WEBPACK_IMPORTED_MODULE_2__["argsProxyFor"])(capturedArgs, 'helper');
  const hasUpdate = hasUpdateHook(manager);

  if (hasDestructor(manager)) {
    vm.associateDestroyable({
      destroy() {
        if (bucket !== undefined) {
          manager.destroyHelper(bucket);
        }
      }

    });
  }

  const getValue = Object(_utils_autotracking__WEBPACK_IMPORTED_MODULE_6__["trackedMemoize"])(() => manager.getValue(bucket));
  const createOrUpdate = Object(_utils_autotracking__WEBPACK_IMPORTED_MODULE_6__["trackedMemoize"])(() => {
    if (bucket === undefined) {
      bucket = manager.createHelper(definition, argsProxy);
    } else if (hasUpdate) {
      manager.updateHelper(bucket, argsProxy);
    }
  });
  return () => {
    createOrUpdate();
    return getValue();
  };
}
/**
 * Returns a factory that produces a HelperRootReference, which is how the VM
 * expects to receive helpers currently.
 *
 * @param definition the helper definition
 */


function vmHelperFactoryFor(definition) {
  return (args, vm) => {
    const owner = vm.dynamicScope().get(_owner__WEBPACK_IMPORTED_MODULE_3__["OWNER_KEY"]).value();
    const manager = Object(___WEBPACK_IMPORTED_MODULE_4__["getHelperManager"])(owner, definition);
    const capturedArgs = args.capture();
    let helperFn;

    if (manager !== undefined) {
      helperFn = customHelperFn(manager, definition, capturedArgs, vm);
    } else {
      if (true
      /* DEBUG */
      ) {
        Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assert"])(typeof definition === 'function', "Attempted to use ".concat(definition, " as a helper, but it was not a function and did not have an associated helper manager. Helpers must either be plain JavaScript functions, or managed with a helper manager."));
      }

      const func = true
      /* DEBUG */
      ? Object(_utils_unbindable_function__WEBPACK_IMPORTED_MODULE_5__["unbindableFunction"])(definition) : undefined;

      helperFn = capturedArgs => {
        if ( true
        /* DEBUG */
        && capturedArgs.named.length > 0) {
          throw new Error("You used named arguments with the ".concat(func.name.replace(/^bound /, ''), " helper, but it is a standard function. Normal functions cannot receive named arguments when used as helpers."));
        }

        return func(...capturedArgs.positional.value());
      };
    }

    return new _glimmer_reference__WEBPACK_IMPORTED_MODULE_1__["HelperRootReference"](helperFn, capturedArgs, vm.env);
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/managers/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/managers/index.js ***!
  \***********************************************************************/
/*! exports provided: setManager, setModifierManager, getModifierManager, setHelperManager, getHelperManager, setComponentManager, getComponentManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setManager", function() { return setManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setModifierManager", function() { return setModifierManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModifierManager", function() { return getModifierManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setHelperManager", function() { return setHelperManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHelperManager", function() { return getHelperManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setComponentManager", function() { return setComponentManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getComponentManager", function() { return getComponentManager; });
///////////
const MANAGERS = new WeakMap();
const MANAGER_INSTANCES = new WeakMap();
const getPrototypeOf = Object.getPrototypeOf;
function setManager(wrapper, obj) {
  MANAGERS.set(obj, wrapper);
  return obj;
}

function getManager(obj) {
  let pointer = obj;

  while (pointer !== undefined && pointer !== null) {
    const manager = MANAGERS.get(pointer);

    if (manager !== undefined) {
      return manager;
    }

    pointer = getPrototypeOf(pointer);
  }

  return undefined;
}

function getManagerInstanceForOwner(owner, factory) {
  let managers = MANAGER_INSTANCES.get(owner);

  if (managers === undefined) {
    managers = new WeakMap();
    MANAGER_INSTANCES.set(owner, managers);
  }

  let instance = managers.get(factory);

  if (instance === undefined) {
    instance = factory(owner);
    managers.set(factory, instance);
  } // We know for sure that it's the correct type at this point, but TS can't know


  return instance;
} ///////////


function setModifierManager(factory, definition) {
  return setManager({
    factory,
    type: 'modifier'
  }, definition);
}
function getModifierManager(owner, definition) {
  const wrapper = getManager(definition);

  if (wrapper !== undefined && wrapper.type === 'modifier') {
    return getManagerInstanceForOwner(owner, wrapper.factory);
  }
}
function setHelperManager(factory, definition) {
  return setManager({
    factory,
    type: 'helper'
  }, definition);
}
function getHelperManager(owner, definition) {
  const wrapper = getManager(definition);

  if (wrapper !== undefined && wrapper.type === 'helper') {
    return getManagerInstanceForOwner(owner, wrapper.factory);
  }
}
function setComponentManager(factory, definition) {
  return setManager({
    factory,
    type: 'component'
  }, definition);
}
function getComponentManager(owner, definition) {
  const wrapper = getManager(definition);

  if (wrapper !== undefined && wrapper.type === 'component') {
    return getManagerInstanceForOwner(owner, wrapper.factory);
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/managers/modifier.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/managers/modifier.js ***!
  \**************************************************************************/
/*! exports provided: capabilities, CustomModifierState, CustomModifierManager, CUSTOM_MODIFIER_MANAGER, VMCustomModifierDefinition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capabilities", function() { return capabilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomModifierState", function() { return CustomModifierState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomModifierManager", function() { return CustomModifierManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_MODIFIER_MANAGER", function() { return CUSTOM_MODIFIER_MANAGER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VMCustomModifierDefinition", function() { return VMCustomModifierDefinition; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _utils_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/debug */ "./node_modules/@glimmer/core/dist/modules/src/utils/debug.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@glimmer/core/dist/modules/src/managers/util.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! . */ "./node_modules/@glimmer/core/dist/modules/src/managers/index.js");
/* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../owner */ "./node_modules/@glimmer/core/dist/modules/src/owner.js");






function capabilities(managerAPI, options = {}) {
  Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(managerAPI === '3.13', 'Invalid component manager compatibility specified');
  return {
    disableAutoTracking: Boolean(options.disableAutoTracking)
  };
}

class SimpleModifierManager {
  constructor() {
    this.capabilities = capabilities('3.13');
  }

  createModifier(definition, args) {
    if (true
    /* DEBUG */
    ) {
      Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(Object.keys(args.named).length === 0, "You used named arguments with the ".concat(definition.name, " modifier, but it is a standard function. Normal functions cannot receive named arguments when used as modifiers."));
    }

    return {
      definition
    };
  }

  installModifier(bucket, element, args) {
    bucket.destructor = bucket.definition(element, ...args.positional);
    bucket.element = element;
  }

  updateModifier(bucket, args) {
    this.destroyModifier(bucket);
    this.installModifier(bucket, bucket.element, args);
  }

  destroyModifier(bucket) {
    const {
      destructor
    } = bucket;

    if (destructor !== undefined) {
      destructor();
    }
  }

}

const SIMPLE_MODIFIER_MANAGER = new SimpleModifierManager(); ///////////

class CustomModifierState {
  constructor(element, delegate, modifier, argsProxy, capturedArgs) {
    this.element = element;
    this.delegate = delegate;
    this.modifier = modifier;
    this.argsProxy = argsProxy;
    this.capturedArgs = capturedArgs;
    this.tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["createUpdatableTag"])();
  }

  destroy() {
    const {
      delegate,
      modifier,
      argsProxy
    } = this;
    delegate.destroyModifier(modifier, argsProxy);
  }

}
class CustomModifierManager {
  create(element, definition, args, dynamicScope) {
    const owner = dynamicScope.get(_owner__WEBPACK_IMPORTED_MODULE_5__["OWNER_KEY"]).value();
    let delegate = Object(___WEBPACK_IMPORTED_MODULE_4__["getModifierManager"])(owner, definition);

    if (delegate === undefined) {
      if (true
      /* DEBUG */
      ) {
        Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(typeof definition === 'function', "No modifier manager found for ".concat(definition, ", and it was not a plain function, so it could not be used as a modifier"));
      }

      delegate = SIMPLE_MODIFIER_MANAGER;
    }

    const capturedArgs = args.capture();
    const argsProxy = Object(_util__WEBPACK_IMPORTED_MODULE_3__["argsProxyFor"])(capturedArgs, 'modifier');
    const instance = delegate.createModifier(definition, argsProxy);
    return new CustomModifierState(element, delegate, instance, argsProxy, capturedArgs);
  }

  getTag({
    tag,
    capturedArgs
  }) {
    return Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["combine"])([tag, capturedArgs.tag]);
  }

  install(state) {
    const {
      element,
      argsProxy,
      delegate,
      modifier,
      tag
    } = state;

    if (delegate.capabilities.disableAutoTracking === true) {
      Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["untrack"])(() => delegate.installModifier(modifier, element, argsProxy));
    } else {
      const combinedTrackingTag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["track"])(() => delegate.installModifier(modifier, element, argsProxy),  true
      /* DEBUG */
      && Object(_utils_debug__WEBPACK_IMPORTED_MODULE_2__["default"])("(instance of a `".concat(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["debugToString"])(modifier), "` modifier)")));
      Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["updateTag"])(tag, combinedTrackingTag);
    }
  }

  update(state) {
    const {
      argsProxy,
      delegate,
      modifier,
      tag
    } = state;

    if (delegate.capabilities.disableAutoTracking === true) {
      Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["untrack"])(() => delegate.updateModifier(modifier, argsProxy));
    } else {
      const combinedTrackingTag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["track"])(() => delegate.updateModifier(modifier, argsProxy),  true
      /* DEBUG */
      && Object(_utils_debug__WEBPACK_IMPORTED_MODULE_2__["default"])("(instance of a `".concat(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["debugToString"])(modifier), "` modifier)")));
      Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["updateTag"])(tag, combinedTrackingTag);
    }
  }

  getDestructor(state) {
    return state;
  }

}
const CUSTOM_MODIFIER_MANAGER = new CustomModifierManager();
class VMCustomModifierDefinition {
  constructor(handle, state) {
    this.handle = handle;
    this.state = state;
    this.manager = CUSTOM_MODIFIER_MANAGER;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/managers/util.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/managers/util.js ***!
  \**********************************************************************/
/*! exports provided: argsProxyFor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argsProxyFor", function() { return argsProxyFor; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");



function convertToInt(prop) {
  if (typeof prop === 'symbol') return null;
  const num = Number(prop);
  if (isNaN(num)) return null;
  return num % 1 === 0 ? num : null;
}

function argsProxyFor(capturedArgs, type) {
  const {
    named,
    positional
  } = capturedArgs;
  const namedHandler = {
    get(_target, prop) {
      if (named.has(prop)) {
        const ref = named.get(prop);
        Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["consumeTag"])(ref.tag);
        return ref.value();
      }
    },

    has(_target, prop) {
      return named.has(prop);
    },

    ownKeys(_target) {
      return named.names;
    },

    isExtensible() {
      return false;
    },

    getOwnPropertyDescriptor(_target, prop) {
      if (true
      /* DEBUG */
      ) {
        Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["assert"])(named.has(prop), 'args proxies do not have real property descriptors, so you should never need to call getOwnPropertyDescriptor yourself. This code exists for enumerability, such as in for-in loops and Object.keys()');
      }

      return {
        enumerable: true,
        configurable: true
      };
    }

  };
  const positionalHandler = {
    get(target, prop) {
      if (prop === 'length') {
        Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["consumeTag"])(positional.tag);
        return positional.length;
      }

      const parsed = convertToInt(prop);

      if (parsed !== null && parsed < positional.length) {
        const ref = positional.at(parsed);
        Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["consumeTag"])(ref.tag);
        return ref.value();
      } // eslint-disable-next-line @typescript-eslint/no-explicit-any


      return target[prop];
    },

    isExtensible() {
      return false;
    },

    has(_target, prop) {
      const parsed = convertToInt(prop);
      return parsed !== null && parsed < positional.length;
    }

  };
  const namedTarget = Object.create(null);
  const positionalTarget = [];

  if (true
  /* DEBUG */
  ) {
    const setHandler = function (_target, prop) {
      throw new Error("You attempted to set ".concat(String(prop), " on the arguments of a component, helper, or modifier. Arguments are immutable and cannot be updated directly, they always represent the values that is passed down. If you want to set default values, you should use a getter and local tracked state instead."));
    };

    const forInDebugHandler = () => {
      throw new Error("Object.keys() was called on the positional arguments array for a ".concat(type, ", which is not supported. This function is a low-level function that should not need to be called for positional argument arrays. You may be attempting to iterate over the array using for...in instead of for...of."));
    };

    namedHandler.set = setHandler;
    positionalHandler.set = setHandler;
    positionalHandler.ownKeys = forInDebugHandler;
  }

  return {
    named: new Proxy(namedTarget, namedHandler),
    positional: new Proxy(positionalTarget, positionalHandler)
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/owner.js":
/*!**************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/owner.js ***!
  \**************************************************************/
/*! exports provided: OWNER_KEY, DEFAULT_OWNER, getOwner, setOwner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OWNER_KEY", function() { return OWNER_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_OWNER", function() { return DEFAULT_OWNER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOwner", function() { return getOwner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOwner", function() { return setOwner; });
const OWNER_MAP = new WeakMap();
const OWNER_KEY = "__OWNER_".concat(Math.floor(Math.random() * Date.now()), "__");
let DEFAULT_OWNER = {};

if (true
/* DEBUG */
) {
  const OWNER_ERROR = 'You attempted to use the Owner for a component, modifier, or helper, but did not provide an owner to `renderComponent`.';
  DEFAULT_OWNER = new Proxy(DEFAULT_OWNER, {
    get() {
      throw new Error(OWNER_ERROR);
    },

    set() {
      throw new Error(OWNER_ERROR);
    }

  });
}

function getOwner(obj) {
  return OWNER_MAP.get(obj);
}
function setOwner(obj, owner) {
  OWNER_MAP.set(obj, owner);
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/render-component/built-ins.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/render-component/built-ins.js ***!
  \***********************************************************************************/
/*! exports provided: ifHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifHelper", function() { return ifHelper; });
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _environment_to_bool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../environment/to-bool */ "./node_modules/@glimmer/core/dist/modules/src/environment/to-bool.js");


function ifHelper(args, vm) {
  return new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["HelperRootReference"](({
    positional
  }) => {
    if ( true
    /* DEBUG */
    && positional.length < 2 || positional.length > 3) {
      throw new Error('The inline form of the `if` helper expects two or three arguments, e.g. `{{if trialExpired "Expired" expiryDate}}`.');
    }

    const condition = positional.at(0);
    const truthyValue = positional.at(1);
    const falsyValue = positional.at(2);

    if (Object(_environment_to_bool__WEBPACK_IMPORTED_MODULE_1__["default"])(condition.value()) === true) {
      return truthyValue.value();
    } else {
      return falsyValue !== undefined ? falsyValue.value() : undefined;
    }
  }, args.capture(), vm.env, 'if');
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/render-component/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/render-component/index.js ***!
  \*******************************************************************************/
/*! exports provided: didRender, default, getTemplateIterator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "didRender", function() { return didRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTemplateIterator", function() { return getTemplateIterator; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/runtime */ "./node_modules/@glimmer/runtime/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_opcode_compiler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/opcode-compiler */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/index.js");
/* harmony import */ var _environment_delegates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../environment/delegates */ "./node_modules/@glimmer/core/dist/modules/src/environment/delegates.js");
/* harmony import */ var _resolvers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resolvers */ "./node_modules/@glimmer/core/dist/modules/src/render-component/resolvers.js");
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../owner */ "./node_modules/@glimmer/core/dist/modules/src/owner.js");







let renderNotifiers = [];
function didRender() {
  if (scheduled) {
    return new Promise((resolve, reject) => {
      renderNotifiers.push([resolve, reject]);
    });
  }

  return Promise.resolve();
}

async function renderComponent(ComponentClass, optionsOrElement) {
  const options = optionsOrElement instanceof HTMLElement ? {
    element: optionsOrElement
  } : optionsOrElement;
  const {
    element,
    args,
    owner
  } = options;
  const document = self.document;
  const iterator = getTemplateIterator(ComponentClass, element, {
    document
  }, new _environment_delegates__WEBPACK_IMPORTED_MODULE_3__["ClientEnvDelegate"](), args, owner);
  const result = iterator.sync();
  results.push(result);
}

/* harmony default export */ __webpack_exports__["default"] = (renderComponent);
const results = [];
Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["setPropertyDidChange"])(scheduleRevalidation);
let scheduled = false;

function scheduleRevalidation() {
  if (scheduled) {
    return;
  }

  scheduled = true;
  setTimeout(() => {
    scheduled = false;

    try {
      revalidate();
      renderNotifiers.forEach(([resolve]) => resolve());
    } catch (err) {
      renderNotifiers.forEach(([, reject]) => reject(err));
    }

    renderNotifiers = [];
  }, 0);
}

function revalidate() {
  for (const result of results) {
    const {
      env
    } = result;
    env.begin();
    result.rerender();
    env.commit();
  }
}

const resolver = new _resolvers__WEBPACK_IMPORTED_MODULE_4__["RuntimeResolver"]();
const context = Object(_glimmer_opcode_compiler__WEBPACK_IMPORTED_MODULE_2__["JitContext"])(new _resolvers__WEBPACK_IMPORTED_MODULE_4__["CompileTimeResolver"](resolver));

function dictToReference(dict, env) {
  const root = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_5__["ComponentRootReference"](dict, env);
  return Object.keys(dict).reduce((acc, key) => {
    acc[key] = root.get(key);
    return acc;
  }, {});
}

function getTemplateIterator(ComponentClass, element, envOptions, envDelegate, componentArgs = {}, owner = _owner__WEBPACK_IMPORTED_MODULE_6__["DEFAULT_OWNER"]) {
  const runtime = Object(_glimmer_runtime__WEBPACK_IMPORTED_MODULE_1__["JitRuntime"])(envOptions, envDelegate, context, resolver);
  const builder = Object(_glimmer_runtime__WEBPACK_IMPORTED_MODULE_1__["clientBuilder"])(runtime.env, {
    element,
    nextSibling: null
  });
  const handle = resolver.registerRoot(ComponentClass);
  let dynamicScope;

  if (owner) {
    dynamicScope = new _glimmer_runtime__WEBPACK_IMPORTED_MODULE_1__["DefaultDynamicScope"]({
      [_owner__WEBPACK_IMPORTED_MODULE_6__["OWNER_KEY"]]: new _glimmer_reference__WEBPACK_IMPORTED_MODULE_5__["ConstReference"](owner)
    });
  }

  return Object(_glimmer_runtime__WEBPACK_IMPORTED_MODULE_1__["renderJitComponent"])(runtime, builder, context, 0, handle, dictToReference(componentArgs, runtime.env), dynamicScope);
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/render-component/resolvers.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/render-component/resolvers.js ***!
  \***********************************************************************************/
/*! exports provided: RuntimeResolver, CompileTimeResolver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuntimeResolver", function() { return RuntimeResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompileTimeResolver", function() { return CompileTimeResolver; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _vm_definitions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vm-definitions */ "./node_modules/@glimmer/core/dist/modules/src/render-component/vm-definitions.js");
/* harmony import */ var _built_ins__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./built-ins */ "./node_modules/@glimmer/core/dist/modules/src/render-component/built-ins.js");



const builtInHelpers = {
  if: Object(_vm_definitions__WEBPACK_IMPORTED_MODULE_1__["vmDefinitionForBuiltInHelper"])(_built_ins__WEBPACK_IMPORTED_MODULE_2__["ifHelper"])
}; ///////////

/**
 * The RuntimeResolver is what is used to resolve everything. It is responsible
 * for registering root components (passed to `renderComponent`), and resolving
 * all other types of resolvables.
 *
 * The CompileTimeResolver is responsible for registering everything but root
 * components, which is why `registry` is public, for ease of access.
 */

class RuntimeResolver {
  constructor() {
    this.registry = [];
  } // TODO: This is only necessary because `renderJitComponent` only receives a
  // string, can't receive a handle. We should make that optional somehow.


  registerRoot(definition) {
    const vmDefinition = Object(_vm_definitions__WEBPACK_IMPORTED_MODULE_1__["vmDefinitionForComponent"])(definition);
    const {
      handle
    } = vmDefinition;
    this.registry[handle] = vmDefinition; // We're lying to the type system here so we can pass handle around as a
    // string. Should definitely fix this in the future.

    return handle;
  }

  lookupComponent(handle, _referrer) {
    return this.registry[handle];
  }

  resolve(handle) {
    return this.registry[handle];
  } // TODO: Make these optional


  compilable(_locator) {
    throw new Error('Method not implemented.');
  }

  lookupPartial(_name, _referrer) {
    throw new Error('Method not implemented.');
  }

} ///////////

/**
 * The CompileTimeResolver is what is used to lookup most things, with the
 * exception of root components rendered with `renderComponent`. It registers
 * the values on the RuntimeResolver, which Glimmer then uses to actually
 * resolve later on via the handle that is returned.
 */

class CompileTimeResolver {
  constructor(inner) {
    this.inner = inner;
  }

  lookupHelper(name, referrer) {
    const scope = referrer.scope();
    const {
      helper,
      handle
    } = builtInHelpers[name] || Object(_vm_definitions__WEBPACK_IMPORTED_MODULE_1__["vmDefinitionForHelper"])(scope[name]);
    this.inner.registry[handle] = helper;
    return handle;
  }

  lookupModifier(name, referrer) {
    const scope = referrer.scope();
    const modifier = scope[name];
    const definition = Object(_vm_definitions__WEBPACK_IMPORTED_MODULE_1__["vmDefinitionForModifier"])(modifier);
    const {
      handle
    } = definition;
    this.inner.registry[handle] = definition;
    return handle;
  }

  lookupComponent(name, referrer) {
    const scope = referrer.scope();
    const ComponentDefinition = scope[name];

    if ( true
    /* DEBUG */
    && ComponentDefinition === undefined) {
      throw new Error("Cannot find component `".concat(name, "` in scope. It was used in a template, but not imported into the template scope or defined as a local variable. If you meant to access a property, you must add `this` to it: `<this.").concat(name, ">`"));
    }

    const definition = Object(_vm_definitions__WEBPACK_IMPORTED_MODULE_1__["vmDefinitionForComponent"])(ComponentDefinition);
    const {
      state,
      manager,
      template,
      handle
    } = definition;
    this.inner.registry[handle] = definition;
    return {
      handle,
      capabilities: manager.getCapabilities(state),
      compilable: Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["unwrapTemplate"])(template).asLayout()
    };
  }

  resolve(handle) {
    return this.inner.resolve(handle);
  } // TODO: Make this optional


  lookupPartial(_name, _referrer) {
    throw new Error('Method not implemented.');
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/render-component/vm-definitions.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/render-component/vm-definitions.js ***!
  \****************************************************************************************/
/*! exports provided: vmDefinitionForComponent, vmDefinitionForHelper, vmDefinitionForModifier, vmDefinitionForBuiltInHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vmDefinitionForComponent", function() { return vmDefinitionForComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vmDefinitionForHelper", function() { return vmDefinitionForHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vmDefinitionForModifier", function() { return vmDefinitionForModifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vmDefinitionForBuiltInHelper", function() { return vmDefinitionForBuiltInHelper; });
/* harmony import */ var _glimmer_opcode_compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/opcode-compiler */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/index.js");
/* harmony import */ var _template__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../template */ "./node_modules/@glimmer/core/dist/modules/src/template.js");
/* harmony import */ var _managers_component_custom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../managers/component/custom */ "./node_modules/@glimmer/core/dist/modules/src/managers/component/custom.js");
/* harmony import */ var _managers_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../managers/helper */ "./node_modules/@glimmer/core/dist/modules/src/managers/helper.js");
/* harmony import */ var _managers_component_template_only__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../managers/component/template-only */ "./node_modules/@glimmer/core/dist/modules/src/managers/component/template-only.js");
/* harmony import */ var _managers_modifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../managers/modifier */ "./node_modules/@glimmer/core/dist/modules/src/managers/modifier.js");





 ///////////

let HANDLE = 0;
const VM_COMPONENT_DEFINITIONS = new WeakMap();
const VM_HELPER_DEFINITIONS = new WeakMap();
const VM_MODIFIER_DEFINITIONS = new WeakMap();
function vmDefinitionForComponent(ComponentDefinition) {
  return VM_COMPONENT_DEFINITIONS.get(ComponentDefinition) || createVMComponentDefinition(ComponentDefinition);
}
function vmDefinitionForHelper(Helper) {
  return VM_HELPER_DEFINITIONS.get(Helper) || createVMHelperDefinition(Helper);
}
function vmDefinitionForModifier(Modifier) {
  return VM_MODIFIER_DEFINITIONS.get(Modifier) || createVMModifierDefinition(Modifier);
} ///////////

let BUILT_INS;

if (true
/* DEBUG */
) {
  BUILT_INS = new WeakSet();
}

function handleForBuiltIn(builtIn) {
  if ( true
  /* DEBUG */
  && BUILT_INS.has(builtIn)) {
    throw new Error('attempted to register the same built-in twice');
  }

  return HANDLE++;
}

function vmDefinitionForBuiltInHelper(helper) {
  return {
    helper,
    handle: handleForBuiltIn(helper)
  };
} ///////////

function createVMComponentDefinition(ComponentDefinition) {
  const serializedTemplate = Object(_template__WEBPACK_IMPORTED_MODULE_1__["getComponentTemplate"])(ComponentDefinition);
  const template = Object(_glimmer_opcode_compiler__WEBPACK_IMPORTED_MODULE_0__["templateFactory"])(serializedTemplate).create();
  let definition;

  if (ComponentDefinition instanceof _managers_component_template_only__WEBPACK_IMPORTED_MODULE_4__["TemplateOnlyComponent"]) {
    // TODO: We probably need a better way to get a name for the template,
    // currently it'll just be `template-only-component` which is not great
    // for debugging
    definition = new _managers_component_template_only__WEBPACK_IMPORTED_MODULE_4__["TemplateOnlyComponentDefinition"](HANDLE++, 'template-only-component', template);
  } else {
    definition = new _managers_component_custom__WEBPACK_IMPORTED_MODULE_2__["VMCustomComponentDefinition"](HANDLE++, ComponentDefinition, template);
  }

  VM_COMPONENT_DEFINITIONS.set(ComponentDefinition, definition);
  return definition;
}

function createVMHelperDefinition(userDefinition) {
  const definition = {
    helper: Object(_managers_helper__WEBPACK_IMPORTED_MODULE_3__["vmHelperFactoryFor"])(userDefinition),
    handle: HANDLE++
  };
  VM_HELPER_DEFINITIONS.set(userDefinition, definition);
  return definition;
}

function createVMModifierDefinition(Modifier) {
  const definition = new _managers_modifier__WEBPACK_IMPORTED_MODULE_5__["VMCustomModifierDefinition"](HANDLE++, Modifier);
  VM_MODIFIER_DEFINITIONS.set(Modifier, definition);
  return definition;
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/template.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/template.js ***!
  \*****************************************************************/
/*! exports provided: createTemplate, setComponentTemplate, getComponentTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTemplate", function() { return createTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setComponentTemplate", function() { return setComponentTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getComponentTemplate", function() { return getComponentTemplate; });
const TEMPLATE_MAP = new WeakMap();
const getPrototypeOf = Object.getPrototypeOf; // This is provided by the `babel-plugin-strict-template-precompile` plugin

let createTemplate;

if (true
/* DEBUG */
) {
  createTemplate = () => {
    throw new Error('createTemplate() is meant to be preprocessed with a babel plugin, @glimmer/babel-plugin-strict-template-precompile. If you are seeing this error message, it means that you do not have this babel plugin installed, or it is not enabled correctly');
  };
}

const builtInHelpers = {
  if: true,
  each: true
};
function setComponentTemplate(template, ComponentClass) {
  if (true
  /* DEBUG */
  ) {
    const scope = template.meta.scope();
    const block = JSON.parse(template.block);

    if (block.upvars) {
      for (const upvar of block.upvars) {
        if (!(upvar in builtInHelpers) && scope[upvar] === undefined) {
          throw new Error("Cannot find identifier `".concat(upvar, "` in scope. It was used in a template, but not imported into the template scope or defined as a local variable. If you meant to access a property, you must add `this` to it: `{{this.").concat(upvar, "}}`"));
        }
      }
    }
  }

  TEMPLATE_MAP.set(ComponentClass, template);
  return ComponentClass;
}
function getComponentTemplate(ComponentClass) {
  let pointer = ComponentClass;

  while (pointer !== undefined && pointer !== null) {
    const manager = TEMPLATE_MAP.get(pointer);

    if (manager !== undefined) {
      return manager;
    }

    pointer = getPrototypeOf(pointer);
  }

  return undefined;
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/utils/autotracking.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/utils/autotracking.js ***!
  \***************************************************************************/
/*! exports provided: trackedMemoize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trackedMemoize", function() { return trackedMemoize; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");

function trackedMemoize(fn) {
  let lastValue;
  let tag;
  let snapshot;
  return () => {
    if (!tag || !Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["validateTag"])(tag, snapshot)) {
      tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["track"])(() => lastValue = fn());
      snapshot = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["valueForTag"])(tag);
    }

    Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["consumeTag"])(tag);
    return lastValue;
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/utils/debug.js":
/*!********************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/utils/debug.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
let debugRenderMessage;

if (true
/* DEBUG */
) {
  debugRenderMessage = renderingStack => {
    return "While rendering:\n----------------\n".concat(renderingStack.replace(/^/gm, '  '));
  };
}

/* harmony default export */ __webpack_exports__["default"] = (debugRenderMessage);

/***/ }),

/***/ "./node_modules/@glimmer/core/dist/modules/src/utils/unbindable-function.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@glimmer/core/dist/modules/src/utils/unbindable-function.js ***!
  \**********************************************************************************/
/*! exports provided: unbindableFunction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unbindableFunction", function() { return unbindableFunction; });
let unbindableFunction;

if (true
/* DEBUG */
) {
  unbindableFunction = func => {
    const assertOnProperty = property => {
      throw new Error("You accessed `this.".concat(String(property), "` from a function passed to the ").concat(func.name, ", but the function itself was not bound to a valid `this` context. Consider updating to usage of `@action`."));
    };

    const untouchableThis = new Proxy({}, {
      get(_target, property) {
        return assertOnProperty(property);
      },

      set(_target, property) {
        return assertOnProperty(property);
      },

      has(_target, property) {
        return assertOnProperty(property);
      }

    });
    return func.bind(untouchableThis);
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/encoder/dist/modules/es2017/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@glimmer/encoder/dist/modules/es2017/index.js ***!
  \********************************************************************/
/*! exports provided: InstructionEncoderImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_encoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/encoder */ "./node_modules/@glimmer/encoder/dist/modules/es2017/lib/encoder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InstructionEncoderImpl", function() { return _lib_encoder__WEBPACK_IMPORTED_MODULE_0__["InstructionEncoderImpl"]; });



/***/ }),

/***/ "./node_modules/@glimmer/encoder/dist/modules/es2017/lib/encoder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/encoder/dist/modules/es2017/lib/encoder.js ***!
  \**************************************************************************/
/*! exports provided: InstructionEncoderImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InstructionEncoderImpl", function() { return InstructionEncoderImpl; });
class InstructionEncoderImpl {
  constructor(buffer) {
    this.buffer = buffer;
    this.size = 0;
  }

  encode(type, machine) {
    if (type > 255
    /* TYPE_SIZE */
    ) {
        throw new Error("Opcode type over 8-bits. Got ".concat(type, "."));
      }

    let first = type | machine | arguments.length - 2 << 8
    /* ARG_SHIFT */
    ;
    this.buffer.push(first);

    for (let i = 2; i < arguments.length; i++) {
      let op = arguments[i];

      if (typeof op === 'number' && op > 2147483647
      /* MAX_SIZE */
      ) {
          throw new Error("Operand over 32-bits. Got ".concat(op, "."));
        }

      this.buffer.push(op);
    }

    this.size = this.buffer.length;
  }

  patch(position, target) {
    if (this.buffer[position + 1] === -1) {
      this.buffer[position + 1] = target;
    } else {
      throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');
    }
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/low-level/dist/modules/es2017/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@glimmer/low-level/dist/modules/es2017/index.js ***!
  \**********************************************************************/
/*! exports provided: Storage, Stack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_glue_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/glue/storage */ "./node_modules/@glimmer/low-level/dist/modules/es2017/lib/glue/storage.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Storage", function() { return _lib_glue_storage__WEBPACK_IMPORTED_MODULE_0__["Storage"]; });

/* harmony import */ var _lib_asm_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/asm/stack */ "./node_modules/@glimmer/low-level/dist/modules/es2017/lib/asm/stack.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Stack", function() { return _lib_asm_stack__WEBPACK_IMPORTED_MODULE_1__["Stack"]; });




/***/ }),

/***/ "./node_modules/@glimmer/low-level/dist/modules/es2017/lib/asm/stack.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@glimmer/low-level/dist/modules/es2017/lib/asm/stack.js ***!
  \******************************************************************************/
/*! exports provided: Stack */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stack", function() { return Stack; });
class Stack {
  constructor(vec = []) {
    this.vec = vec;
  }

  clone() {
    return new Stack(this.vec.slice());
  }

  sliceFrom(start) {
    return new Stack(this.vec.slice(start));
  }

  slice(start, end) {
    return new Stack(this.vec.slice(start, end));
  }

  copy(from, to) {
    this.vec[to] = this.vec[from];
  } // TODO: how to model u64 argument?


  writeRaw(pos, value) {
    // TODO: Grow?
    this.vec[pos] = value;
  } // TODO: partially decoded enum?


  getRaw(pos) {
    return this.vec[pos];
  }

  reset() {
    this.vec.length = 0;
  }

  len() {
    return this.vec.length;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/low-level/dist/modules/es2017/lib/glue/storage.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@glimmer/low-level/dist/modules/es2017/lib/glue/storage.js ***!
  \*********************************************************************************/
/*! exports provided: Storage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Storage", function() { return Storage; });
class Storage {
  constructor() {
    this.array = [];
    this.next = 0;
  }

  add(element) {
    let {
      next: slot,
      array
    } = this;

    if (slot === array.length) {
      this.next++;
    } else {
      let prev = array[slot];
      this.next = prev;
    }

    this.array[slot] = element;
    return slot;
  }

  deref(pointer) {
    return this.array[pointer];
  }

  drop(pointer) {
    this.array[pointer] = this.next;
    this.next = pointer;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/modifier/dist/modules/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@glimmer/modifier/dist/modules/index.js ***!
  \**************************************************************/
/*! exports provided: on, action */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_on__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/on */ "./node_modules/@glimmer/modifier/dist/modules/src/on.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "on", function() { return _src_on__WEBPACK_IMPORTED_MODULE_0__["on"]; });

/* harmony import */ var _src_action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/action */ "./node_modules/@glimmer/modifier/dist/modules/src/action.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "action", function() { return _src_action__WEBPACK_IMPORTED_MODULE_1__["action"]; });




/***/ }),

/***/ "./node_modules/@glimmer/modifier/dist/modules/src/action.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@glimmer/modifier/dist/modules/src/action.js ***!
  \*******************************************************************/
/*! exports provided: action */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action", function() { return action; });
const BINDINGS_MAP = new WeakMap();
function action(_target, _key, desc) {
  const actionFn = desc.value;
  return {
    enumerable: desc.enumerable,
    configurable: desc.configurable,

    get() {
      let bindings = BINDINGS_MAP.get(this);

      if (bindings === undefined) {
        bindings = new Map();
        BINDINGS_MAP.set(this, bindings);
      }

      let fn = bindings.get(actionFn);

      if (fn === undefined) {
        fn = actionFn.bind(this);
        bindings.set(actionFn, fn);
      }

      return fn;
    }

  };
}

/***/ }),

/***/ "./node_modules/@glimmer/modifier/dist/modules/src/on.js":
/*!***************************************************************!*\
  !*** ./node_modules/@glimmer/modifier/dist/modules/src/on.js ***!
  \***************************************************************/
/*! exports provided: on */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "on", function() { return on; });
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/ban-ts-ignore */
 // This function is just used to have an importable value to assign the modifier manager
// to, so it doesn't actually get run. Having the typings is good for documentation
// and discoverabilitity purposes though.

function on( // @ts-ignore
element, // @ts-ignore
eventName, // @ts-ignore
callBack, // @ts-ignore
options) {} // eslint-disable-line @typescript-eslint/no-empty-function

class OnModifierManager {
  constructor() {
    this.capabilities = Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["modifierCapabilities"])('3.13');
  }

  createModifier(_definition, args) {
    return {
      args: args,
      previousArgs: args
    };
  }

  installModifier(bucket, element) {
    const {
      args
    } = bucket;
    const [eventName, listener] = args.positional;
    const named = Object.assign({}, args.named);
    element.addEventListener(eventName, listener, named);
    bucket.element = element;
    bucket.previousArgs = {
      positional: [eventName, listener],
      named
    };
  }

  updateModifier(bucket) {
    this.destroyModifier(bucket);
    this.installModifier(bucket, bucket.element);
  }

  destroyModifier({
    element,
    previousArgs
  }) {
    const [eventName, listener] = previousArgs.positional;
    element.removeEventListener(eventName, listener, previousArgs.named);
  }

}

Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["setModifierManager"])(() => new OnModifierManager(), on);

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/index.js ***!
  \****************************************************************************/
/*! exports provided: ProgramCompilationContext, JitProgramCompilationContext, MacrosImpl, UNHANDLED, NONE, debugCompiler, compileStatements, compilable, staticComponent, syntaxCompilationContext, Context, JitContext, AotContext, templateCompilationContext, DEFAULT_CAPABILITIES, MINIMAL_CAPABILITIES, DefaultCompileTimeResolverDelegate, invokeStaticBlockWithStack, invokeStaticBlock, compileStd, meta, StdLib, PartialDefinitionImpl, templateFactory, Component, WrappedBuilder, EMPTY_BLOCKS, resolveLayoutForTag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_program_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/program-context */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/program-context.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgramCompilationContext", function() { return _lib_program_context__WEBPACK_IMPORTED_MODULE_0__["ProgramCompilationContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JitProgramCompilationContext", function() { return _lib_program_context__WEBPACK_IMPORTED_MODULE_0__["JitProgramCompilationContext"]; });

/* harmony import */ var _lib_syntax_macros__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/syntax/macros */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/macros.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MacrosImpl", function() { return _lib_syntax_macros__WEBPACK_IMPORTED_MODULE_1__["MacrosImpl"]; });

/* harmony import */ var _lib_syntax_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/syntax/concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UNHANDLED", function() { return _lib_syntax_concat__WEBPACK_IMPORTED_MODULE_2__["UNHANDLED"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NONE", function() { return _lib_syntax_concat__WEBPACK_IMPORTED_MODULE_2__["NONE"]; });

/* harmony import */ var _lib_compiler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/compiler */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compiler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "debugCompiler", function() { return _lib_compiler__WEBPACK_IMPORTED_MODULE_3__["debugCompiler"]; });

/* harmony import */ var _lib_compilable_template__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/compilable-template */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compileStatements", function() { return _lib_compilable_template__WEBPACK_IMPORTED_MODULE_4__["compileStatements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compilable", function() { return _lib_compilable_template__WEBPACK_IMPORTED_MODULE_4__["compilable"]; });

/* harmony import */ var _lib_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/opcode-builder/helpers/components */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticComponent", function() { return _lib_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_5__["StaticComponent"]; });

/* harmony import */ var _lib_opcode_builder_context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/opcode-builder/context */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/context.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "syntaxCompilationContext", function() { return _lib_opcode_builder_context__WEBPACK_IMPORTED_MODULE_6__["syntaxCompilationContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Context", function() { return _lib_opcode_builder_context__WEBPACK_IMPORTED_MODULE_6__["Context"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JitContext", function() { return _lib_opcode_builder_context__WEBPACK_IMPORTED_MODULE_6__["JitContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AotContext", function() { return _lib_opcode_builder_context__WEBPACK_IMPORTED_MODULE_6__["AotContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "templateCompilationContext", function() { return _lib_opcode_builder_context__WEBPACK_IMPORTED_MODULE_6__["templateCompilationContext"]; });

/* harmony import */ var _lib_opcode_builder_delegate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/opcode-builder/delegate */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/delegate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CAPABILITIES", function() { return _lib_opcode_builder_delegate__WEBPACK_IMPORTED_MODULE_7__["DEFAULT_CAPABILITIES"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MINIMAL_CAPABILITIES", function() { return _lib_opcode_builder_delegate__WEBPACK_IMPORTED_MODULE_7__["MINIMAL_CAPABILITIES"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultCompileTimeResolverDelegate", function() { return _lib_opcode_builder_delegate__WEBPACK_IMPORTED_MODULE_7__["DefaultCompileTimeResolverDelegate"]; });

/* harmony import */ var _lib_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/opcode-builder/helpers/blocks */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/blocks.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "invokeStaticBlockWithStack", function() { return _lib_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_8__["InvokeStaticBlockWithStack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "invokeStaticBlock", function() { return _lib_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_8__["InvokeStaticBlock"]; });

/* harmony import */ var _lib_opcode_builder_helpers_stdlib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/opcode-builder/helpers/stdlib */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/stdlib.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compileStd", function() { return _lib_opcode_builder_helpers_stdlib__WEBPACK_IMPORTED_MODULE_9__["compileStd"]; });

/* harmony import */ var _lib_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/opcode-builder/helpers/shared */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "meta", function() { return _lib_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_10__["meta"]; });

/* harmony import */ var _lib_opcode_builder_stdlib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/opcode-builder/stdlib */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/stdlib.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StdLib", function() { return _lib_opcode_builder_stdlib__WEBPACK_IMPORTED_MODULE_11__["StdLib"]; });

/* harmony import */ var _lib_partial_template__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/partial-template */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/partial-template.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PartialDefinitionImpl", function() { return _lib_partial_template__WEBPACK_IMPORTED_MODULE_12__["PartialDefinitionImpl"]; });

/* harmony import */ var _lib_template__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lib/template */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/template.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "templateFactory", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_13__["Component"]; });

/* harmony import */ var _lib_wrapped_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lib/wrapped-component */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/wrapped-component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WrappedBuilder", function() { return _lib_wrapped_component__WEBPACK_IMPORTED_MODULE_14__["WrappedBuilder"]; });

/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lib/utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EMPTY_BLOCKS", function() { return _lib_utils__WEBPACK_IMPORTED_MODULE_15__["EMPTY_BLOCKS"]; });

/* harmony import */ var _lib_resolver__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lib/resolver */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/resolver.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolveLayoutForTag", function() { return _lib_resolver__WEBPACK_IMPORTED_MODULE_16__["resolveLayoutForTag"]; });



















/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js ***!
  \**********************************************************************************************/
/*! exports provided: PLACEHOLDER_HANDLE, compilable, compileStatements, compilableBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLACEHOLDER_HANDLE", function() { return PLACEHOLDER_HANDLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compilable", function() { return compilable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compileStatements", function() { return compileStatements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compilableBlock", function() { return compilableBlock; });
/* harmony import */ var _opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opcode-builder/helpers/shared */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _opcode_builder_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opcode-builder/context */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/context.js");
/* harmony import */ var _syntax_concat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./syntax/concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony import */ var _compiler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./compiler */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compiler.js");
/* harmony import */ var _glimmer_program__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/program */ "./node_modules/@glimmer/program/dist/modules/es2017/index.js");
/* harmony import */ var _syntax_statements__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./syntax/statements */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/statements.js");







const PLACEHOLDER_HANDLE = -1;

class CompilableTemplateImpl {
  constructor(statements, meta, // Part of CompilableTemplate
  symbolTable) {
    this.statements = statements;
    this.meta = meta;
    this.symbolTable = symbolTable;
    this.compiled = null;
  } // Part of CompilableTemplate


  compile(context) {
    return maybeCompile(this, context);
  }

}

function compilable(layout) {
  let block = layout.block;
  return new CompilableTemplateImpl(block.statements, Object(_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_0__["meta"])(layout), {
    symbols: block.symbols,
    hasEval: block.hasEval
  });
}

function maybeCompile(compilable, context) {
  if (compilable.compiled !== null) return compilable.compiled;
  compilable.compiled = PLACEHOLDER_HANDLE;
  let {
    statements,
    meta
  } = compilable;
  let result = compileStatements(statements, meta, context);
  Object(_glimmer_program__WEBPACK_IMPORTED_MODULE_5__["patchStdlibs"])(context.program);
  compilable.compiled = result;
  return result;
}

function compileStatements(statements, meta, syntaxContext) {
  let sCompiler = _syntax_statements__WEBPACK_IMPORTED_MODULE_6__["STATEMENTS"];
  let context = Object(_opcode_builder_context__WEBPACK_IMPORTED_MODULE_2__["templateCompilationContext"])(syntaxContext, meta);

  for (let i = 0; i < statements.length; i++) {
    Object(_syntax_concat__WEBPACK_IMPORTED_MODULE_3__["concatStatements"])(context, sCompiler.compile(statements[i], context.meta));
  }

  let handle = context.encoder.commit(syntaxContext.program.heap, meta.size);

  if (false
  /* LOCAL_SHOULD_LOG */
  ) {}

  return handle;
}
function compilableBlock(overloadBlock, containing) {
  let block = Array.isArray(overloadBlock) ? {
    statements: overloadBlock,
    parameters: _glimmer_util__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARRAY"]
  } : overloadBlock;
  return new CompilableTemplateImpl(block.statements, containing, {
    parameters: block.parameters
  });
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compiler.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compiler.js ***!
  \***********************************************************************************/
/*! exports provided: compileInline, compileBlock, commit, debugCompiler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compileInline", function() { return compileInline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compileBlock", function() { return compileBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "commit", function() { return commit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debugCompiler", function() { return debugCompiler; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");


function compileInline(sexp, context) {
  return context.syntax.macros.inlines.compile(sexp, context);
}
function compileBlock(block, context) {
  let [, name, params, hash, named] = block;
  let blocks = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["namedBlocks"])(named, context.meta);
  let nameOrError = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["expectString"])(name, context.meta, 'Expected block head to be a string');

  if (typeof nameOrError !== 'string') {
    return nameOrError;
  }

  return context.syntax.macros.blocks.compile(nameOrError, params || [], hash, blocks, context);
}
function commit(heap, scopeSize, buffer) {
  let handle = heap.malloc();

  for (let i = 0; i < buffer.length; i++) {
    let value = buffer[i];

    if (typeof value === 'function') {
      heap.pushPlaceholder(value);
    } else if (typeof value === 'object') {
      heap.pushStdlib(value);
    } else {
      heap.push(value);
    }
  }

  heap.finishMalloc(handle, scopeSize);
  return handle;
}
let debugCompiler;

if (false
/* LOCAL_SHOULD_LOG */
) {}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/context.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/context.js ***!
  \*************************************************************************************************/
/*! exports provided: syntaxCompilationContext, Context, JitContext, AotContext, templateCompilationContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "syntaxCompilationContext", function() { return syntaxCompilationContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Context", function() { return Context; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JitContext", function() { return JitContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AotContext", function() { return AotContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "templateCompilationContext", function() { return templateCompilationContext; });
/* harmony import */ var _encoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _syntax_macros__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax/macros */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/macros.js");
/* harmony import */ var _program_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../program-context */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/program-context.js");
/* harmony import */ var _delegate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delegate */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/delegate.js");




function syntaxCompilationContext(program, macros) {
  return {
    program,
    macros
  };
}
function Context(resolver = {}, mode = "aot"
/* aot */
, macros = new _syntax_macros__WEBPACK_IMPORTED_MODULE_1__["MacrosImpl"]()) {
  return {
    program: new _program_context__WEBPACK_IMPORTED_MODULE_2__["ProgramCompilationContext"](new _delegate__WEBPACK_IMPORTED_MODULE_3__["DefaultCompileTimeResolverDelegate"](resolver), mode),
    macros
  };
}
function JitContext(resolver = {}, macros = new _syntax_macros__WEBPACK_IMPORTED_MODULE_1__["MacrosImpl"]()) {
  return {
    program: new _program_context__WEBPACK_IMPORTED_MODULE_2__["JitProgramCompilationContext"](new _delegate__WEBPACK_IMPORTED_MODULE_3__["DefaultCompileTimeResolverDelegate"](resolver)),
    macros
  };
}
function AotContext(resolver = {}, macros = new _syntax_macros__WEBPACK_IMPORTED_MODULE_1__["MacrosImpl"]()) {
  return {
    program: new _program_context__WEBPACK_IMPORTED_MODULE_2__["ProgramCompilationContext"](new _delegate__WEBPACK_IMPORTED_MODULE_3__["DefaultCompileTimeResolverDelegate"](resolver), "aot"
    /* aot */
    ),
    macros
  };
}
function templateCompilationContext(syntax, meta) {
  let encoder = new _encoder__WEBPACK_IMPORTED_MODULE_0__["EncoderImpl"]();
  return {
    syntax,
    encoder,
    meta
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/delegate.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/delegate.js ***!
  \**************************************************************************************************/
/*! exports provided: DEFAULT_CAPABILITIES, MINIMAL_CAPABILITIES, DefaultCompileTimeResolverDelegate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CAPABILITIES", function() { return DEFAULT_CAPABILITIES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MINIMAL_CAPABILITIES", function() { return MINIMAL_CAPABILITIES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultCompileTimeResolverDelegate", function() { return DefaultCompileTimeResolverDelegate; });
const DEFAULT_CAPABILITIES = {
  dynamicLayout: true,
  dynamicTag: true,
  prepareArgs: true,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  dynamicScope: true,
  createCaller: false,
  updateHook: true,
  createInstance: true,
  wrapped: false,
  willDestroy: false
};
const MINIMAL_CAPABILITIES = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: false,
  attributeHook: false,
  elementHook: false,
  dynamicScope: false,
  createCaller: false,
  updateHook: false,
  createInstance: false,
  wrapped: false,
  willDestroy: false
};
class DefaultCompileTimeResolverDelegate {
  constructor(inner) {
    this.inner = inner;
  }

  lookupHelper(name, referrer) {
    if (this.inner.lookupHelper) {
      let helper = this.inner.lookupHelper(name, referrer);

      if (helper === undefined) {
        throw new Error("Unexpected helper (".concat(name, " from ").concat(JSON.stringify(referrer), ") (lookupHelper returned undefined)"));
      }

      return helper;
    } else {
      throw new Error("Can't compile global helper invocations without an implementation of lookupHelper");
    }
  }

  lookupModifier(name, referrer) {
    if (this.inner.lookupModifier) {
      let modifier = this.inner.lookupModifier(name, referrer);

      if (modifier === undefined) {
        throw new Error("Unexpected modifier (".concat(name, " from ").concat(JSON.stringify(referrer), ") (lookupModifier returned undefined)"));
      }

      return modifier;
    } else {
      throw new Error("Can't compile global modifier invocations without an implementation of lookupModifier");
    }
  }

  lookupComponent(name, referrer) {
    if (this.inner.lookupComponent) {
      let component = this.inner.lookupComponent(name, referrer);

      if (component === undefined) {
        throw new Error("Unexpected component (".concat(name, " from ").concat(JSON.stringify(referrer), ") (lookupComponent returned undefined)"));
      }

      return component;
    } else {
      throw new Error("Can't compile global component invocations without an implementation of lookupComponent");
    }
  }

  lookupPartial(name, referrer) {
    if (this.inner.lookupPartial) {
      let partial = this.inner.lookupPartial(name, referrer);

      if (partial === undefined) {
        throw new Error("Unexpected partial (".concat(name, " from ").concat(JSON.stringify(referrer), ") (lookupPartial returned undefined)"));
      }

      return partial;
    } else {
      throw new Error("Can't compile global partial invocations without an implementation of lookupPartial");
    }
  } // For debugging


  resolve(handle) {
    if (this.inner.resolve) {
      return this.inner.resolve(handle);
    } else {
      throw new Error("Compile-time debugging requires an implementation of resolve");
    }
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js ***!
  \*************************************************************************************************/
/*! exports provided: LabelsImpl, error, op, EncoderImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelsImpl", function() { return LabelsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "error", function() { return error; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "op", function() { return op; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncoderImpl", function() { return EncoderImpl; });
/* harmony import */ var _glimmer_encoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/encoder */ "./node_modules/@glimmer/encoder/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _compiler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../compiler */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compiler.js");




class LabelsImpl {
  constructor() {
    this.labels = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["dict"])();
    this.targets = [];
  }

  label(name, index) {
    this.labels[name] = index;
  }

  target(at, target) {
    this.targets.push({
      at,
      target
    });
  }

  patch(encoder) {
    let {
      targets,
      labels
    } = this;

    for (let i = 0; i < targets.length; i++) {
      let {
        at,
        target
      } = targets[i];
      let address = labels[target] - at;
      encoder.patch(at, address);
    }
  }

}
function error(problem, start, end) {
  return op('Error', {
    problem,
    start,
    end
  });
}
function op(name, op1, op2, op3) {
  if (typeof name === 'number') {
    if (op3 !== undefined) {
      return {
        type: 'Number',
        op: name,
        op1,
        op2,
        op3
      };
    } else if (op2 !== undefined) {
      return {
        type: 'Number',
        op: name,
        op1,
        op2
      };
    } else if (op1 !== undefined) {
      return {
        type: 'Number',
        op: name,
        op1: op1
      };
    } else {
      return {
        type: 'Number',
        op: name
      };
    }
  } else {
    let type;

    if (isCompileOpcode(name)) {
      type = 'Compile';
    } else if (isResolutionOpcode(name)) {
      type = 'Resolution';
    } else if (isSimpleOpcode(name)) {
      type = 'Simple';
    } else if (isErrorOpcode(name)) {
      type = 'Error';
    } else {
      throw new Error("Exhausted ".concat(name));
    }

    if (op1 === undefined) {
      return {
        type,
        op: name,
        op1: undefined
      };
    } else {
      return {
        type,
        op: name,
        op1
      };
    }
  }
}
class EncoderImpl {
  constructor() {
    this.labelsStack = new _glimmer_util__WEBPACK_IMPORTED_MODULE_2__["Stack"]();
    this.encoder = new _glimmer_encoder__WEBPACK_IMPORTED_MODULE_0__["InstructionEncoderImpl"]([]);
    this.errors = [];
  }

  error(error) {
    this.encoder.encode(30
    /* Primitive */
    , 0);
    this.errors.push(error);
  }

  commit(heap, size) {
    this.encoder.encode(5
    /* Return */
    , 1024
    /* MACHINE_MASK */
    );
    let handle = Object(_compiler__WEBPACK_IMPORTED_MODULE_3__["commit"])(heap, size, this.encoder.buffer);

    if (this.errors.length) {
      return {
        errors: this.errors,
        handle
      };
    } else {
      return handle;
    }
  }

  push(constants, name, ...args) {
    if (Object(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["isMachineOp"])(name)) {
      let operands = args.map((operand, i) => this.operand(constants, operand, i));
      return this.encoder.encode(name, 1024
      /* MACHINE_MASK */
      , ...operands);
    } else {
      let operands = args.map((operand, i) => this.operand(constants, operand, i));
      return this.encoder.encode(name, 0, ...operands);
    }
  }

  operand(constants, operand, index) {
    if (operand && typeof operand === 'object' && operand.type === 'label') {
      this.currentLabels.target(this.encoder.size + index, operand.value);
      return -1;
    }

    return constant(constants, operand);
  }

  get currentLabels() {
    return this.labelsStack.current;
  }

  label(name) {
    this.currentLabels.label(name, this.encoder.size);
  }

  startLabels() {
    this.labelsStack.push(new LabelsImpl());
  }

  stopLabels() {
    let label = this.labelsStack.pop();
    label.patch(this.encoder);
  }

}

function constant(constants, operand) {
  if (typeof operand === 'number' || typeof operand === 'function') {
    return operand;
  }

  if (typeof operand === 'boolean') {
    return operand === true ? 1 : 0;
  }

  if (typeof operand === 'string') {
    return constants.string(operand);
  }

  if (operand === null) {
    return 0;
  }

  switch (operand.type) {
    case 'array':
      return constants.array(operand.value);

    case 'string-array':
      return constants.stringArray(operand.value);

    case 'serializable':
      return constants.serializable(operand.value);

    case 'template-meta':
      return constants.templateMeta(operand.value);

    case 'other':
      // TODO: Bad cast
      return constants.other(operand.value);

    case 'stdlib':
      return operand;

    case 'primitive':
      {
        switch (operand.value.type) {
          case 1
          /* STRING */
          :
            return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["encodeHandle"])(constants.string(operand.value.primitive), 1073741823
            /* STRING_MAX_INDEX */
            , -1
            /* STRING_MAX_HANDLE */
            );

          case 2
          /* NUMBER */
          :
            return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["encodeHandle"])(constants.number(operand.value.primitive), 1073741823
            /* NUMBER_MAX_INDEX */
            , -1073741825
            /* NUMBER_MAX_HANDLE */
            );

          case 0
          /* IMMEDIATE */
          :
            return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["encodeImmediate"])(operand.value.primitive);

          default:
            return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["exhausted"])(operand.value);
        }
      }

    case 'lookup':
      throw Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["unreachable"])('lookup not reachable');

    default:
      return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["exhausted"])(operand);
  }
}

function isSimpleOpcode(op) {
  return op === 'Label' || op === 'Option' || op === 'GetComponentLayout' || op === 'StartLabels' || op === 'StopLabels' || op === 'SimpleArgs' || op === 'JitCompileBlock' || op === 'SetBlock';
}

function isCompileOpcode(op) {
  return op === 'CompileInline' || op === 'CompileBlock' || op === 'InvokeStatic' || op === 'PushCompilable' || op === 'Args' || op === 'IfResolvedComponent' || op === 'DynamicComponent';
}

function isResolutionOpcode(op) {
  return op === 'IfResolved' || op === 'Expr' || op === 'SimpleArgs' || op === 'ResolveFree' || op === 'ResolveContextualFree';
}

function isErrorOpcode(op) {
  return op === 'Error';
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/blocks.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/blocks.js ***!
  \********************************************************************************************************/
/*! exports provided: YieldBlock, PushYieldableBlock, InvokeStaticBlock, InvokeStaticBlockWithStack, PushSymbolTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YieldBlock", function() { return YieldBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PushYieldableBlock", function() { return PushYieldableBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvokeStaticBlock", function() { return InvokeStaticBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvokeStaticBlockWithStack", function() { return InvokeStaticBlockWithStack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PushSymbolTable", function() { return PushSymbolTable; });
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _vm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vm */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/vm.js");
/* harmony import */ var _operands__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");




/**
 * Yield to a block located at a particular symbol location.
 *
 * @param to the symbol containing the block to yield to
 * @param params optional block parameters to yield to the block
 */

function YieldBlock(to, params) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('SimpleArgs', {
    params,
    hash: null,
    atNames: true
  }), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(24
  /* GetBlock */
  , to), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(25
  /* JitSpreadBlock */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Option', Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('JitCompileBlock')), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(64
  /* InvokeYield */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(40
  /* PopScope */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(1
  /* PopFrame */
  )];
}
/**
 * Push an (optional) yieldable block onto the stack. The yieldable block must be known
 * statically at compile time.
 *
 * @param block An optional Compilable block
 */

function PushYieldableBlock(block) {
  return [PushSymbolTable(block && block.symbolTable), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(62
  /* PushBlockScope */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('PushCompilable', block)];
}
/**
 * Invoke a block that is known statically at compile time.
 *
 * @param block a Compilable block
 */

function InvokeStaticBlock(block) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(0
  /* PushFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('PushCompilable', block), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('JitCompileBlock'), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(2
  /* InvokeVirtual */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(1
  /* PopFrame */
  )];
}
/**
 * Invoke a static block, preserving some number of stack entries for use in
 * updating.
 *
 * @param block A compilable block
 * @param callerCount A number of stack entries to preserve
 */

function InvokeStaticBlockWithStack(block, callerCount) {
  let {
    parameters
  } = block.symbolTable;
  let calleeCount = parameters.length;
  let count = Math.min(callerCount, calleeCount);

  if (count === 0) {
    return InvokeStaticBlock(block);
  }

  let out = [];
  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(0
  /* PushFrame */
  ));

  if (count) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(39
    /* ChildScope */
    ));

    for (let i = 0; i < count; i++) {
      out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(33
      /* Dup */
      , _glimmer_vm__WEBPACK_IMPORTED_MODULE_0__["$fp"], callerCount - i));
      out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(19
      /* SetVariable */
      , parameters[i]));
    }
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('PushCompilable', block));
  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('JitCompileBlock'));
  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(2
  /* InvokeVirtual */
  ));

  if (count) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(40
    /* PopScope */
    ));
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(1
  /* PopFrame */
  ));
  return out;
}
function PushSymbolTable(table) {
  if (table) {
    return Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(63
    /* PushSymbolTable */
    , Object(_operands__WEBPACK_IMPORTED_MODULE_3__["serializable"])(table));
  } else {
    return Object(_vm__WEBPACK_IMPORTED_MODULE_2__["PushPrimitive"])(null);
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js ***!
  \************************************************************************************************************/
/*! exports provided: ATTRS_BLOCK, StaticComponentHelper, InvokeStaticComponent, InvokeDynamicComponent, WrappedComponent, StaticComponent, InvokeComponent, invokePreparedComponent, InvokeBareComponent, curryComponent, WithSavedRegister */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRS_BLOCK", function() { return ATTRS_BLOCK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticComponentHelper", function() { return StaticComponentHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvokeStaticComponent", function() { return InvokeStaticComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvokeDynamicComponent", function() { return InvokeDynamicComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrappedComponent", function() { return WrappedComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticComponent", function() { return StaticComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvokeComponent", function() { return InvokeComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invokePreparedComponent", function() { return invokePreparedComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvokeBareComponent", function() { return InvokeBareComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "curryComponent", function() { return curryComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WithSavedRegister", function() { return WithSavedRegister; });
/* harmony import */ var _operands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../resolver */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/resolver.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js");
/* harmony import */ var _blocks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./blocks */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/blocks.js");
/* harmony import */ var _conditional__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./conditional */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/conditional.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _encoder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _syntax_concat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../syntax/concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony import */ var _compilable_template__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../compilable-template */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");
/* harmony import */ var _delegate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../delegate */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/delegate.js");












const ATTRS_BLOCK = '&attrs';
function StaticComponentHelper(context, tag, hash, template) {
  let component = Object(_resolver__WEBPACK_IMPORTED_MODULE_1__["resolveLayoutForTag"])(tag, context);

  if (component !== null) {
    let {
      compilable,
      handle,
      capabilities
    } = component;

    if (compilable) {
      if (hash) {
        for (let i = 0; i < hash.length; i = i + 2) {
          hash[i][0] = "@".concat(hash[i][0]);
        }
      }

      let out = [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(80
      /* PushComponentDefinition */
      , handle)];
      out.push(InvokeStaticComponent({
        capabilities,
        layout: compilable,
        attrs: null,
        params: null,
        hash,
        blocks: new _utils__WEBPACK_IMPORTED_MODULE_10__["NamedBlocksImpl"]({
          default: template
        })
      }));
      return out;
    }
  }

  return _syntax_concat__WEBPACK_IMPORTED_MODULE_8__["UNHANDLED"];
}
function InvokeStaticComponent({
  capabilities,
  layout,
  attrs,
  params,
  hash,
  blocks
}) {
  let {
    symbolTable
  } = layout;
  let bailOut = symbolTable.hasEval || capabilities.prepareArgs;

  if (bailOut) {
    return InvokeComponent({
      capabilities,
      attrs,
      params,
      hash,
      atNames: true,
      blocks,
      layout
    });
  }

  let out = [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(36
  /* Fetch */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(33
  /* Dup */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"], 1), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"])];
  let {
    symbols
  } = symbolTable;

  if (capabilities.createArgs) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(0
    /* PushFrame */
    ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('SimpleArgs', {
      params,
      hash,
      atNames: true
    }));
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(100
  /* BeginComponentTransaction */
  ));

  if (capabilities.dynamicScope) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(59
    /* PushDynamicScope */
    ));
  }

  if (capabilities.createInstance) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(89
    /* CreateComponent */
    , blocks.has('default') | 0, _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]));
  }

  if (capabilities.createArgs) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(1
    /* PopFrame */
    ));
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(0
  /* PushFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(90
  /* RegisterComponentDestructor */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]));
  let bindings = [];
  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(92
  /* GetComponentSelf */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]));
  bindings.push({
    symbol: 0,
    isBlock: false
  });

  for (let i = 0; i < symbols.length; i++) {
    let symbol = symbols[i];

    switch (symbol.charAt(0)) {
      case '&':
        let callerBlock;

        if (symbol === ATTRS_BLOCK) {
          callerBlock = attrs;
        } else {
          callerBlock = blocks.get(symbol.slice(1));
        }

        if (callerBlock) {
          out.push(Object(_blocks__WEBPACK_IMPORTED_MODULE_4__["PushYieldableBlock"])(callerBlock));
          bindings.push({
            symbol: i + 1,
            isBlock: true
          });
        } else {
          out.push(Object(_blocks__WEBPACK_IMPORTED_MODULE_4__["PushYieldableBlock"])(null));
          bindings.push({
            symbol: i + 1,
            isBlock: true
          });
        }

        break;

      case '@':
        if (!hash) {
          break;
        }

        let [keys, values] = hash;
        let lookupName = symbol;
        let index = keys.indexOf(lookupName);

        if (index !== -1) {
          out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('Expr', values[index]));
          bindings.push({
            symbol: i + 1,
            isBlock: false
          });
        }

        break;
    }
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(37
  /* RootScope */
  , symbols.length + 1, Object.keys(blocks).length > 0 ? 1 : 0));

  for (let i = bindings.length - 1; i >= 0; i--) {
    let {
      symbol,
      isBlock
    } = bindings[i];

    if (isBlock) {
      out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('SetBlock', symbol));
    } else {
      out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(19
      /* SetVariable */
      , symbol));
    }
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('InvokeStatic', layout));

  if (capabilities.createInstance) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(103
    /* DidRenderLayout */
    , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]));
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(1
  /* PopFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(40
  /* PopScope */
  ));

  if (capabilities.dynamicScope) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(60
    /* PopDynamicScope */
    ));
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(101
  /* CommitComponentTransaction */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]));
  return out;
}
function InvokeDynamicComponent(meta, {
  definition,
  attrs,
  params,
  hash,
  atNames,
  blocks
}) {
  return Object(_conditional__WEBPACK_IMPORTED_MODULE_5__["Replayable"])({
    args: () => {
      return {
        count: 2,
        actions: [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('Expr', definition), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(33
        /* Dup */
        , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"], 0)]
      };
    },
    body: () => {
      return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(66
      /* JumpUnless */
      , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])('ELSE')), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(83
      /* ResolveDynamicComponent */
      , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["templateMeta"])(meta.referrer)), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(81
      /* PushDynamicComponentInstance */
      ), InvokeComponent({
        capabilities: true,
        attrs,
        params,
        hash,
        atNames,
        blocks
      }), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('Label', 'ELSE')];
    }
  });
}
function WrappedComponent(layout, attrsBlockNumber) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('StartLabels'), WithSavedRegister(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s1"], () => [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(93
  /* GetComponentTagName */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(31
  /* PrimitiveReference */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(33
  /* Dup */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"], 0)]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(66
  /* JumpUnless */
  , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])('BODY')), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(36
  /* Fetch */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s1"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(91
  /* PutComponentOperations */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(49
  /* OpenDynamicElement */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(102
  /* DidCreateElement */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_blocks__WEBPACK_IMPORTED_MODULE_4__["YieldBlock"])(attrsBlockNumber, _glimmer_util__WEBPACK_IMPORTED_MODULE_6__["EMPTY_ARRAY"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(54
  /* FlushElement */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('Label', 'BODY'), Object(_blocks__WEBPACK_IMPORTED_MODULE_4__["InvokeStaticBlock"])(blockForLayout(layout)), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(36
  /* Fetch */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s1"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(66
  /* JumpUnless */
  , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])('END')), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(55
  /* CloseElement */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('Label', 'END'), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s1"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('StopLabels')];
}
function StaticComponent(component, args) {
  let [params, hash, blocks] = args;
  if (component === null) return _syntax_concat__WEBPACK_IMPORTED_MODULE_8__["NONE"];
  let {
    compilable,
    capabilities,
    handle
  } = component;

  if (compilable) {
    return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(80
    /* PushComponentDefinition */
    , handle), InvokeStaticComponent({
      capabilities: capabilities || _delegate__WEBPACK_IMPORTED_MODULE_11__["MINIMAL_CAPABILITIES"],
      layout: compilable,
      attrs: null,
      params,
      hash,
      blocks
    })];
  } else {
    return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(80
    /* PushComponentDefinition */
    , handle), InvokeComponent({
      capabilities: capabilities || _delegate__WEBPACK_IMPORTED_MODULE_11__["MINIMAL_CAPABILITIES"],
      attrs: null,
      params,
      hash,
      atNames: true,
      blocks
    })];
  }
}
function InvokeComponent({
  capabilities,
  attrs,
  params,
  hash,
  atNames,
  blocks: namedBlocks,
  layout
}) {
  let bindableBlocks = !!namedBlocks;
  let bindableAtNames = capabilities === true || capabilities.prepareArgs || !!(hash && hash[0].length !== 0);
  let blocks = namedBlocks.with('attrs', attrs);
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(36
  /* Fetch */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(33
  /* Dup */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"], 1), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(0
  /* PushFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('Args', {
    params,
    hash,
    blocks,
    atNames
  }), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(87
  /* PrepareArgs */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), invokePreparedComponent(blocks.has('default'), bindableBlocks, bindableAtNames, () => {
    let out;

    if (layout) {
      out = [Object(_blocks__WEBPACK_IMPORTED_MODULE_4__["PushSymbolTable"])(layout.symbolTable), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('PushCompilable', layout), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('JitCompileBlock')];
    } else {
      out = [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('GetComponentLayout', _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"])];
    }

    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(98
    /* PopulateLayout */
    , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]));
    return out;
  }), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"])];
}
function invokePreparedComponent(hasBlock, bindableBlocks, bindableAtNames, populateLayout = null) {
  let out = [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(100
  /* BeginComponentTransaction */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(59
  /* PushDynamicScope */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(89
  /* CreateComponent */
  , hasBlock | 0, _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"])]; // this has to run after createComponent to allow
  // for late-bound layouts, but a caller is free
  // to populate the layout earlier if it wants to
  // and do nothing here.

  if (populateLayout) {
    out.push(populateLayout());
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(90
  /* RegisterComponentDestructor */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(92
  /* GetComponentSelf */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(38
  /* VirtualRootScope */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(19
  /* SetVariable */
  , 0), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(97
  /* SetupForEval */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), bindableAtNames ? Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(17
  /* SetNamedVariables */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]) : _syntax_concat__WEBPACK_IMPORTED_MODULE_8__["NONE"], bindableBlocks ? Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(18
  /* SetBlocks */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]) : _syntax_concat__WEBPACK_IMPORTED_MODULE_8__["NONE"], Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(34
  /* Pop */
  , 1), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(99
  /* InvokeComponentLayout */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(103
  /* DidRenderLayout */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(1
  /* PopFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(40
  /* PopScope */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(60
  /* PopDynamicScope */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(101
  /* CommitComponentTransaction */
  ));
  return out;
}
function InvokeBareComponent() {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(36
  /* Fetch */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(33
  /* Dup */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"], 1), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(0
  /* PushFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(85
  /* PushEmptyArgs */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(87
  /* PrepareArgs */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), invokePreparedComponent(false, false, true, () => [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('GetComponentLayout', _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(98
  /* PopulateLayout */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"])]), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$s0"])];
}
function curryComponent({
  definition,
  params,
  hash,
  atNames
}, referrer) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(0
  /* PushFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('SimpleArgs', {
    params,
    hash,
    atNames
  }), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(88
  /* CaptureArgs */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])('Expr', definition), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(79
  /* CurryComponent */
  , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["templateMeta"])(referrer)), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(1
  /* PopFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(36
  /* Fetch */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$v0"])];
}

function blockForLayout(layout) {
  return Object(_compilable_template__WEBPACK_IMPORTED_MODULE_9__["compilableBlock"])(layout.block.statements, Object(_shared__WEBPACK_IMPORTED_MODULE_3__["meta"])(layout));
}

function WithSavedRegister(register, block) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(36
  /* Fetch */
  , register), block(), Object(_encoder__WEBPACK_IMPORTED_MODULE_7__["op"])(35
  /* Load */
  , register)];
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/conditional.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/conditional.js ***!
  \*************************************************************************************************************/
/*! exports provided: SwitchCases, Replayable, ReplayableIf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwitchCases", function() { return SwitchCases; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Replayable", function() { return Replayable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplayableIf", function() { return ReplayableIf; });
/* harmony import */ var _operands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");


function SwitchCases(callback) {
  // Setup the switch DSL
  let clauses = [];
  let count = 0;

  function when(match, callback) {
    clauses.push({
      match,
      callback,
      label: "CLAUSE".concat(count++)
    });
  } // Call the callback


  callback(when); // Emit the opcodes for the switch

  let out = [Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(69
  /* Enter */
  , 2), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(68
  /* AssertSame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(32
  /* ReifyU32 */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('StartLabels')]; // First, emit the jump opcodes. We don't need a jump for the last
  // opcode, since it bleeds directly into its clause.

  for (let clause of clauses.slice(0, -1)) {
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(67
    /* JumpEq */
    , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])(clause.label), clause.match));
  } // Enumerate the clauses in reverse order. Earlier matches will
  // require fewer checks.


  for (let i = clauses.length - 1; i >= 0; i--) {
    let clause = clauses[i];
    out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Label', clause.label), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(34
    /* Pop */
    , 2), clause.callback()); // The first match is special: it is placed directly before the END
    // label, so no additional jump is needed at the end of it.

    if (i !== 0) {
      out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(4
      /* Jump */
      , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])('END')));
    }
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Label', 'END'), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('StopLabels'), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(70
  /* Exit */
  ));
  return out;
}
/**
 * A convenience for pushing some arguments on the stack and
 * running some code if the code needs to be re-executed during
 * updating execution if some of the arguments have changed.
 *
 * # Initial Execution
 *
 * The `args` function should push zero or more arguments onto
 * the stack and return the number of arguments pushed.
 *
 * The `body` function provides the instructions to execute both
 * during initial execution and during updating execution.
 *
 * Internally, this function starts by pushing a new frame, so
 * that the body can return and sets the return point ($ra) to
 * the ENDINITIAL label.
 *
 * It then executes the `args` function, which adds instructions
 * responsible for pushing the arguments for the block to the
 * stack. These arguments will be restored to the stack before
 * updating execution.
 *
 * Next, it adds the Enter opcode, which marks the current position
 * in the DOM, and remembers the current $pc (the next instruction)
 * as the first instruction to execute during updating execution.
 *
 * Next, it runs `body`, which adds the opcodes that should
 * execute both during initial execution and during updating execution.
 * If the `body` wishes to finish early, it should Jump to the
 * `FINALLY` label.
 *
 * Next, it adds the FINALLY label, followed by:
 *
 * - the Exit opcode, which finalizes the marked DOM started by the
 *   Enter opcode.
 * - the Return opcode, which returns to the current return point
 *   ($ra).
 *
 * Finally, it adds the ENDINITIAL label followed by the PopFrame
 * instruction, which restores $fp, $sp and $ra.
 *
 * # Updating Execution
 *
 * Updating execution for this `replayable` occurs if the `body` added an
 * assertion, via one of the `JumpIf`, `JumpUnless` or `AssertSame` opcodes.
 *
 * If, during updating executon, the assertion fails, the initial VM is
 * restored, and the stored arguments are pushed onto the stack. The DOM
 * between the starting and ending markers is cleared, and the VM's cursor
 * is set to the area just cleared.
 *
 * The return point ($ra) is set to -1, the exit instruction.
 *
 * Finally, the $pc is set to to the instruction saved off by the
 * Enter opcode during initial execution, and execution proceeds as
 * usual.
 *
 * The only difference is that when a `Return` instruction is
 * encountered, the program jumps to -1 rather than the END label,
 * and the PopFrame opcode is not needed.
 */

function Replayable({
  args,
  body
}) {
  // Push the arguments onto the stack. The args() function
  // tells us how many stack elements to retain for re-execution
  // when updating.
  let {
    count,
    actions
  } = args(); // Start a new label frame, to give END and RETURN
  // a unique meaning.

  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('StartLabels'), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(0
  /* PushFrame */
  ), // If the body invokes a block, its return will return to
  // END. Otherwise, the return in RETURN will return to END.
  Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(6
  /* ReturnTo */
  , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])('ENDINITIAL')), actions, // Start a new updating closure, remembering `count` elements
  // from the stack. Everything after this point, and before END,
  // will execute both initially and to update the block.
  //
  // The enter and exit opcodes also track the area of the DOM
  // associated with this block. If an assertion inside the block
  // fails (for example, the test value changes from true to false
  // in an #if), the DOM is cleared and the program is re-executed,
  // restoring `count` elements to the stack and executing the
  // instructions between the enter and exit.
  Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(69
  /* Enter */
  , count), // Evaluate the body of the block. The body of the block may
  // return, which will jump execution to END during initial
  // execution, and exit the updating routine.
  body(), // All execution paths in the body should run the FINALLY once
  // they are done. It is executed both during initial execution
  // and during updating execution.
  Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Label', 'FINALLY'), // Finalize the DOM.
  Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(70
  /* Exit */
  ), // In initial execution, this is a noop: it returns to the
  // immediately following opcode. In updating execution, this
  // exits the updating routine.
  Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(5
  /* Return */
  ), // Cleanup code for the block. Runs on initial execution
  // but not on updating.
  Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Label', 'ENDINITIAL'), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(1
  /* PopFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('StopLabels')];
}
/**
 * A specialized version of the `replayable` convenience that allows the
 * caller to provide different code based upon whether the item at
 * the top of the stack is true or false.
 *
 * As in `replayable`, the `ifTrue` and `ifFalse` code can invoke `return`.
 *
 * During the initial execution, a `return` will continue execution
 * in the cleanup code, which finalizes the current DOM block and pops
 * the current frame.
 *
 * During the updating execution, a `return` will exit the updating
 * routine, as it can reuse the DOM block and is always only a single
 * frame deep.
 */

function ReplayableIf({
  args,
  ifTrue,
  ifFalse
}) {
  return Replayable({
    args,
    body: () => {
      let out = [// If the conditional is false, jump to the ELSE label.
      Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(66
      /* JumpUnless */
      , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])('ELSE')), // Otherwise, execute the code associated with the true branch.
      ifTrue(), // We're done, so return. In the initial execution, this runs
      // the cleanup code. In the updating VM, it exits the updating
      // routine.
      Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(4
      /* Jump */
      , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["label"])('FINALLY')), Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Label', 'ELSE')]; // If the conditional is false, and code associatied ith the
      // false branch was provided, execute it. If there was no code
      // associated with the false branch, jumping to the else statement
      // has no other behavior.

      if (ifFalse) {
        out.push(ifFalse());
      }

      return out;
    }
  });
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js ***!
  \********************************************************************************************************/
/*! exports provided: CompileArgs, CompilePositional, meta, evalSymbols */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompileArgs", function() { return CompileArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompilePositional", function() { return CompilePositional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "meta", function() { return meta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "evalSymbols", function() { return evalSymbols; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _operands__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _blocks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./blocks */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/blocks.js");
/* harmony import */ var _syntax_concat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../syntax/concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");





/**
 * Compile arguments, pushing an Arguments object onto the stack.
 *
 * @param args.params
 * @param args.hash
 * @param args.blocks
 * @param args.atNames
 */

function CompileArgs({
  params,
  hash,
  blocks,
  atNames
}) {
  let out = [];

  if (blocks.hasAny) {
    out.push(Object(_blocks__WEBPACK_IMPORTED_MODULE_3__["PushYieldableBlock"])(blocks.get('default')));
    out.push(Object(_blocks__WEBPACK_IMPORTED_MODULE_3__["PushYieldableBlock"])(blocks.get('else')));
    out.push(Object(_blocks__WEBPACK_IMPORTED_MODULE_3__["PushYieldableBlock"])(blocks.get('attrs')));
  }

  let {
    count,
    actions
  } = CompilePositional(params);
  out.push(actions);
  let flags = count << 4;
  if (atNames) flags |= 0b1000;

  if (blocks) {
    flags |= 0b111;
  }

  let names = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];

  if (hash) {
    names = hash[0];
    let val = hash[1];

    for (let i = 0; i < val.length; i++) {
      out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', val[i]));
    }
  }

  out.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(84
  /* PushArgs */
  , Object(_operands__WEBPACK_IMPORTED_MODULE_2__["strArray"])(names), flags));
  return out;
}
/**
 * Compile an optional list of positional arguments, which pushes each argument
 * onto the stack and returns the number of parameters compiled
 *
 * @param params an optional list of positional arguments
 */

function CompilePositional(params) {
  if (!params) return {
    count: 0,
    actions: _syntax_concat__WEBPACK_IMPORTED_MODULE_4__["NONE"]
  };
  let actions = [];

  for (let i = 0; i < params.length; i++) {
    actions.push(Object(_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', params[i]));
  }

  return {
    count: params.length,
    actions
  };
}
function meta(layout) {
  return {
    asPartial: layout.asPartial || false,
    evalSymbols: evalSymbols(layout),
    upvars: layout.block.upvars,
    referrer: layout.referrer,
    size: layout.block.symbols.length
  };
}
function evalSymbols(layout) {
  let {
    block
  } = layout;
  return block.hasEval ? block.symbols : null;
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/stdlib.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/stdlib.js ***!
  \********************************************************************************************************/
/*! exports provided: main, StdAppend, compileStd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "main", function() { return main; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StdAppend", function() { return StdAppend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compileStd", function() { return compileStd; });
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js");
/* harmony import */ var _stdlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stdlib */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/stdlib.js");
/* harmony import */ var _encoder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _conditional__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conditional */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/conditional.js");
/* harmony import */ var _syntax_concat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../syntax/concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony import */ var _syntax_macros__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../syntax/macros */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/macros.js");







function main() {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(76
  /* Main */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_0__["$s0"]), Object(_components__WEBPACK_IMPORTED_MODULE_1__["invokePreparedComponent"])(false, false, true)];
}
/**
 * Append content to the DOM. This standard function triages content and does the
 * right thing based upon whether it's a string, safe string, component, fragment
 * or node.
 *
 * @param trusting whether to interpolate a string as raw HTML (corresponds to
 * triple curlies)
 */

function StdAppend(trusting) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(78
  /* ContentType */
  ), Object(_conditional__WEBPACK_IMPORTED_MODULE_4__["SwitchCases"])(when => {
    when(1
    /* String */
    , () => {
      if (trusting) {
        return [Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(68
        /* AssertSame */
        ), Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(43
        /* AppendHTML */
        )];
      } else {
        return Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(47
        /* AppendText */
        );
      }
    });
    when(0
    /* Component */
    , () => [Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(82
    /* PushCurriedComponent */
    ), Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(81
    /* PushDynamicComponentInstance */
    ), Object(_components__WEBPACK_IMPORTED_MODULE_1__["InvokeBareComponent"])()]);
    when(3
    /* SafeString */
    , () => [Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(68
    /* AssertSame */
    ), Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(44
    /* AppendSafeHTML */
    )]);
    when(4
    /* Fragment */
    , () => [Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(68
    /* AssertSame */
    ), Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(45
    /* AppendDocumentFragment */
    )]);
    when(5
    /* Node */
    , () => [Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(68
    /* AssertSame */
    ), Object(_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(46
    /* AppendNode */
    )]);
  })];
}
function compileStd(context) {
  let mainHandle = build(context, main);
  let trustingGuardedAppend = build(context, () => StdAppend(true));
  let cautiousGuardedAppend = build(context, () => StdAppend(false));
  return new _stdlib__WEBPACK_IMPORTED_MODULE_2__["StdLib"](mainHandle, trustingGuardedAppend, cautiousGuardedAppend);
}
const STDLIB_META = {
  asPartial: false,
  evalSymbols: null,
  upvars: null,
  // TODO: ??
  referrer: {},
  size: 0
};

function build(program, callback) {
  let encoder = new _encoder__WEBPACK_IMPORTED_MODULE_3__["EncoderImpl"]();
  let macros = new _syntax_macros__WEBPACK_IMPORTED_MODULE_6__["MacrosImpl"]();
  let stdContext = {
    encoder,
    meta: STDLIB_META,
    syntax: {
      macros,
      program
    }
  };
  Object(_syntax_concat__WEBPACK_IMPORTED_MODULE_5__["concat"])(stdContext, callback());
  let result = encoder.commit(program.heap, 0);

  if (typeof result !== 'number') {
    // This shouldn't be possible
    throw new Error("Unexpected errors compiling std");
  } else {
    return result;
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/vm.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/vm.js ***!
  \****************************************************************************************************/
/*! exports provided: PushPrimitiveReference, PushPrimitive, Call, DynamicScope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PushPrimitiveReference", function() { return PushPrimitiveReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PushPrimitive", function() { return PushPrimitive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Call", function() { return Call; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicScope", function() { return DynamicScope; });
/* harmony import */ var _operands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _encoder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");




/**
 * Push a reference onto the stack corresponding to a statically known primitive
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */

function PushPrimitiveReference(value) {
  return [PushPrimitive(value), Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(31
  /* PrimitiveReference */
  )];
}
/**
 * Push an encoded representation of a JavaScript primitive on the stack
 *
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */

function PushPrimitive(primitive) {
  let p;

  switch (typeof primitive) {
    case 'number':
      if (Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_3__["isSmallInt"])(primitive)) {
        p = Object(_operands__WEBPACK_IMPORTED_MODULE_0__["prim"])(primitive, 0
        /* IMMEDIATE */
        );
      } else {
        p = Object(_operands__WEBPACK_IMPORTED_MODULE_0__["prim"])(primitive, 2
        /* NUMBER */
        );
      }

      break;

    case 'string':
      p = Object(_operands__WEBPACK_IMPORTED_MODULE_0__["prim"])(primitive, 1
      /* STRING */
      );
      break;

    case 'boolean':
    case 'object': // assume null

    case 'undefined':
      p = Object(_operands__WEBPACK_IMPORTED_MODULE_0__["prim"])(primitive, 0
      /* IMMEDIATE */
      );
      break;

    default:
      throw new Error('Invalid primitive passed to pushPrimitive');
  }

  return Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(30
  /* Primitive */
  , p);
}
/**
 * Invoke a foreign function (a "helper") based on a statically known handle
 *
 * @param compile.handle A handle
 * @param compile.params An optional list of expressions to compile
 * @param compile.hash An optional list of named arguments (name + expression) to compile
 */

function Call({
  handle,
  params,
  hash
}) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(0
  /* PushFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])('SimpleArgs', {
    params,
    hash,
    atNames: false
  }), Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(16
  /* Helper */
  , handle), Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(1
  /* PopFrame */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(36
  /* Fetch */
  , _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$v0"])];
}
/**
 * Evaluate statements in the context of new dynamic scope entries. Move entries from the
 * stack into named entries in the dynamic scope, then evaluate the statements, then pop
 * the dynamic scope
 *
 * @param names a list of dynamic scope names
 * @param block a function that returns a list of statements to evaluate
 */

function DynamicScope(names, block) {
  return [Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(59
  /* PushDynamicScope */
  ), Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(58
  /* BindDynamicScope */
  , Object(_operands__WEBPACK_IMPORTED_MODULE_0__["strArray"])(names)), block(), Object(_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(60
  /* PopDynamicScope */
  )];
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js ***!
  \**************************************************************************************************/
/*! exports provided: arr, strArray, serializable, templateMeta, other, label, args, option, expression, lookup, prim */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arr", function() { return arr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strArray", function() { return strArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializable", function() { return serializable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "templateMeta", function() { return templateMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "other", function() { return other; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "label", function() { return label; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "args", function() { return args; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "option", function() { return option; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expression", function() { return expression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookup", function() { return lookup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prim", function() { return prim; });
function arr(value) {
  return {
    type: 'array',
    value
  };
}
function strArray(value) {
  return {
    type: 'string-array',
    value
  };
}
function serializable(value) {
  return {
    type: 'serializable',
    value
  };
}
function templateMeta(value) {
  return {
    type: 'template-meta',
    value
  };
}
function other(value) {
  return {
    type: 'other',
    value
  };
}
function label(value) {
  return {
    type: 'label',
    value
  };
}
function args(options) {
  return {
    type: 'args',
    value: options
  };
}
function option(list) {
  return {
    type: 'option',
    value: list
  };
}
function expression(expr) {
  return {
    type: 'expr',
    value: expr
  };
}
function lookup(kind, value) {
  return {
    type: 'lookup',
    value: {
      kind,
      value
    }
  };
}
function prim(operand, type) {
  return {
    type: 'primitive',
    value: {
      primitive: operand,
      type
    }
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/stdlib.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/stdlib.js ***!
  \************************************************************************************************/
/*! exports provided: StdLib */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StdLib", function() { return StdLib; });
class StdLib {
  constructor(main, trustingGuardedAppend, cautiousGuardedAppend) {
    this.main = main;
    this.trustingGuardedAppend = trustingGuardedAppend;
    this.cautiousGuardedAppend = cautiousGuardedAppend;
  }

  get 'trusting-append'() {
    return this.trustingGuardedAppend;
  }

  get 'cautious-append'() {
    return this.cautiousGuardedAppend;
  }

  getAppend(trusting) {
    return trusting ? this.trustingGuardedAppend : this.cautiousGuardedAppend;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/partial-template.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/partial-template.js ***!
  \*******************************************************************************************/
/*! exports provided: PartialDefinitionImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PartialDefinitionImpl", function() { return PartialDefinitionImpl; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");

class PartialDefinitionImpl {
  constructor(name, // for debugging
  template) {
    this.name = name;
    this.template = template;
  }

  getPartial(context) {
    let partial = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["unwrapTemplate"])(this.template).asPartial();
    let handle = partial.compile(context);
    return {
      symbolTable: partial.symbolTable,
      handle
    };
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/program-context.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/program-context.js ***!
  \******************************************************************************************/
/*! exports provided: ProgramCompilationContext, JitProgramCompilationContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgramCompilationContext", function() { return ProgramCompilationContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JitProgramCompilationContext", function() { return JitProgramCompilationContext; });
/* harmony import */ var _glimmer_program__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/program */ "./node_modules/@glimmer/program/dist/modules/es2017/index.js");
/* harmony import */ var _opcode_builder_helpers_stdlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./opcode-builder/helpers/stdlib */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/stdlib.js");


class ProgramCompilationContext {
  constructor(delegate, mode) {
    this.mode = mode;
    this.constants = new _glimmer_program__WEBPACK_IMPORTED_MODULE_0__["WriteOnlyConstants"]();
    this.heap = new _glimmer_program__WEBPACK_IMPORTED_MODULE_0__["HeapImpl"]();
    this.resolverDelegate = delegate;
    this.stdlib = Object(_opcode_builder_helpers_stdlib__WEBPACK_IMPORTED_MODULE_1__["compileStd"])(this);
  }

}
class JitProgramCompilationContext {
  constructor(delegate) {
    this.constants = new _glimmer_program__WEBPACK_IMPORTED_MODULE_0__["JitConstants"]();
    this.heap = new _glimmer_program__WEBPACK_IMPORTED_MODULE_0__["HeapImpl"]();
    this.mode = "jit"
    /* jit */
    ;
    this.resolverDelegate = delegate;
    this.stdlib = Object(_opcode_builder_helpers_stdlib__WEBPACK_IMPORTED_MODULE_1__["compileStd"])(this);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/resolver.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/resolver.js ***!
  \***********************************************************************************/
/*! exports provided: resolveLayoutForTag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveLayoutForTag", function() { return resolveLayoutForTag; });
/* harmony import */ var _opcode_builder_delegate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opcode-builder/delegate */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/delegate.js");

function resolveLayoutForTag(tag, {
  resolver,
  meta: {
    referrer
  }
}) {
  let component = resolver.lookupComponent(tag, referrer);
  if (component === null) return component;
  let {
    handle,
    compilable,
    capabilities
  } = component;
  return {
    handle,
    compilable,
    capabilities: capabilities || _opcode_builder_delegate__WEBPACK_IMPORTED_MODULE_0__["MINIMAL_CAPABILITIES"]
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/builtins.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/builtins.js ***!
  \******************************************************************************************/
/*! exports provided: populateBuiltins */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "populateBuiltins", function() { return populateBuiltins; });
/* harmony import */ var _opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../opcode-builder/helpers/blocks */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/blocks.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../opcode-builder/encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../opcode-builder/helpers/components */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js");
/* harmony import */ var _opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../opcode-builder/helpers/conditional */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/conditional.js");
/* harmony import */ var _opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../opcode-builder/helpers/shared */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js");
/* harmony import */ var _opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../opcode-builder/helpers/vm */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/vm.js");
/* harmony import */ var _opcode_builder_operands__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../opcode-builder/operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");











function populateBuiltins(blocks, inlines) {
  blocks.add('if', (params, _hash, blocks) => {
    if (!params || params.length !== 1) {
      throw new Error("SYNTAX ERROR: #if requires a single argument");
    }

    return Object(_opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_5__["ReplayableIf"])({
      args() {
        return {
          count: 1,
          actions: [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Expr', params[0]), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(71
          /* ToBoolean */
          )]
        };
      },

      ifTrue() {
        return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('default'));
      },

      ifFalse() {
        if (blocks.has('else')) {
          return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('else'));
        } else {
          return _concat__WEBPACK_IMPORTED_MODULE_10__["NONE"];
        }
      }

    });
  });
  blocks.add('unless', (params, _hash, blocks) => {
    if (!params || params.length !== 1) {
      throw new Error("SYNTAX ERROR: #unless requires a single argument");
    }

    return Object(_opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_5__["ReplayableIf"])({
      args() {
        return {
          count: 1,
          actions: [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Expr', params[0]), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(71
          /* ToBoolean */
          )]
        };
      },

      ifTrue() {
        if (blocks.has('else')) {
          return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('else'));
        } else {
          return _concat__WEBPACK_IMPORTED_MODULE_10__["NONE"];
        }
      },

      ifFalse() {
        return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('default'));
      }

    });
  });
  blocks.add('with', (params, _hash, blocks) => {
    if (!params || params.length !== 1) {
      throw new Error("SYNTAX ERROR: #with requires a single argument");
    }

    return Object(_opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_5__["ReplayableIf"])({
      args() {
        return {
          count: 2,
          actions: [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Expr', params[0]), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(33
          /* Dup */
          , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"], 0), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(71
          /* ToBoolean */
          )]
        };
      },

      ifTrue() {
        return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlockWithStack"])(blocks.get('default'), 1);
      },

      ifFalse() {
        if (blocks.has('else')) {
          return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('else'));
        } else {
          return _concat__WEBPACK_IMPORTED_MODULE_10__["NONE"];
        }
      }

    });
  });
  blocks.add('let', (params, _hash, blocks) => {
    if (!params) {
      return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["error"])('let requires arguments', 0, 0);
    }

    let {
      count,
      actions
    } = Object(_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_6__["CompilePositional"])(params);
    return [actions, Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlockWithStack"])(blocks.get('default'), count)];
  });
  blocks.add('each', (params, hash, blocks) => {
    return Object(_opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_5__["Replayable"])({
      args() {
        let actions;

        if (hash && hash[0][0] === 'key') {
          actions = [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Expr', hash[1][0])];
        } else {
          actions = [Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_7__["PushPrimitiveReference"])(null)];
        }

        actions.push(Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Expr', params[0]));
        return {
          count: 2,
          actions
        };
      },

      body() {
        let out = [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(74
        /* PutIterator */
        ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(66
        /* JumpUnless */
        , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_8__["label"])('ELSE')), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(0
        /* PushFrame */
        ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(33
        /* Dup */
        , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$fp"], 1), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(6
        /* ReturnTo */
        , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_8__["label"])('ITER')), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(72
        /* EnterList */
        , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_8__["label"])('BODY')), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Label', 'ITER'), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(75
        /* Iterate */
        , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_8__["label"])('BREAK')), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Label', 'BODY'), Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlockWithStack"])(blocks.get('default'), 2), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(34
        /* Pop */
        , 2), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(4
        /* Jump */
        , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_8__["label"])('FINALLY')), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Label', 'BREAK'), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(73
        /* ExitList */
        ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(1
        /* PopFrame */
        ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(4
        /* Jump */
        , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_8__["label"])('FINALLY')), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Label', 'ELSE')];

        if (blocks.has('else')) {
          out.push(Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('else')));
        }

        return out;
      }

    });
  });
  blocks.add('in-element', (params, hash, blocks) => {
    if (!params || params.length !== 1) {
      throw new Error("SYNTAX ERROR: #in-element requires a single argument");
    }

    return Object(_opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_5__["ReplayableIf"])({
      args() {
        let [keys, values] = hash;
        let actions = [];

        for (let i = 0; i < keys.length; i++) {
          let key = keys[i];

          if (key === 'guid' || key === 'insertBefore') {
            actions.push(Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Expr', values[i]));
          } else {
            throw new Error("SYNTAX ERROR: #in-element does not take a `".concat(keys[0], "` option"));
          }
        }

        actions.push(Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('Expr', params[0]), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(33
        /* Dup */
        , _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"], 0));
        return {
          count: 4,
          actions
        };
      },

      ifTrue() {
        return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(50
        /* PushRemoteElement */
        ), Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('default')), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])(56
        /* PopRemoteElement */
        )];
      }

    });
  });
  blocks.add('-with-dynamic-vars', (_params, hash, blocks) => {
    if (hash) {
      let [names, expressions] = hash;
      let {
        actions
      } = Object(_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_6__["CompilePositional"])(expressions);
      return [actions, Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_7__["DynamicScope"])(names, () => {
        return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('default'));
      })];
    } else {
      return Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_0__["InvokeStaticBlock"])(blocks.get('default'));
    }
  });
  blocks.add('component', (_params, hash, blocks, context) => {
     false && false;
    let tag = _params[0];

    if (typeof tag === 'string') {
      let returned = Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_4__["StaticComponentHelper"])(context, _params[0], hash, blocks.get('default'));
      if (Object(_concat__WEBPACK_IMPORTED_MODULE_10__["isHandled"])(returned)) return returned;
    }

    let [definition, ...params] = _params;
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_3__["op"])('DynamicComponent', {
      definition,
      attrs: null,
      params,
      args: hash,
      atNames: false,
      blocks
    });
  });
  inlines.add('component', (_name, _params, hash, context) => {
     false && false;
    let tag = _params && _params[0];

    if (typeof tag === 'string') {
      let returned = Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_4__["StaticComponentHelper"])(context, tag, hash, null);
      if (returned !== _concat__WEBPACK_IMPORTED_MODULE_10__["UNHANDLED"]) return returned;
    }

    let [definition, ...params] = _params;
    return Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_4__["InvokeDynamicComponent"])(context.meta, {
      definition,
      attrs: null,
      params,
      hash,
      atNames: false,
      blocks: _utils__WEBPACK_IMPORTED_MODULE_9__["EMPTY_BLOCKS"]
    });
  });
  return {
    blocks,
    inlines
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/compilers.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/compilers.js ***!
  \*******************************************************************************************/
/*! exports provided: Compilers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compilers", function() { return Compilers; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");

class Compilers {
  constructor() {
    this.names = {};
    this.funcs = [];
  }

  add(name, func) {
    this.names[name] = this.funcs.push(func) - 1;
  }

  compile(sexp, meta) {
    let name = sexp[0];
    let index = this.names[name];
    let func = this.funcs[index];
     false && false;
    return func(sexp, meta);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js ***!
  \****************************************************************************************/
/*! exports provided: NONE, UNHANDLED, isNoAction, isHandled, concat, concatExpressions, concatStatements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NONE", function() { return NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNHANDLED", function() { return UNHANDLED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNoAction", function() { return isNoAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHandled", function() { return isHandled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return concat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatExpressions", function() { return concatExpressions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatStatements", function() { return concatStatements; });
/* harmony import */ var _push_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./push-builder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-builder.js");
/* harmony import */ var _push_compile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./push-compile */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-compile.js");
/* harmony import */ var _push_op__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./push-op */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-op.js");
/* harmony import */ var _push_resolution__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./push-resolution */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-resolution.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");





const NONE = {
  'no-action': true
};
const UNHANDLED = {
  'not-handled': true
};
function isNoAction(actions) {
  return actions && !!actions['no-action'];
}
function isHandled(actions) {
  return !actions || !actions['not-handled'];
}
function concat(context, action) {
  if (isNoAction(action)) {
    return;
  } else if (Array.isArray(action)) {
    for (let item of action) {
      concat(context, item);
    }
  } else if (action.type === 'Simple') {
    Object(_push_builder__WEBPACK_IMPORTED_MODULE_0__["default"])(context, action);
  } else {
    Object(_push_op__WEBPACK_IMPORTED_MODULE_2__["default"])(context.encoder, context.syntax.program.constants, action);
  }
}
function concatExpressions(encoder, context, action, constants) {
  if (isNoAction(action)) {
    return;
  } else if (Array.isArray(action)) {
    for (let item of action) {
      concatExpressions(encoder, context, item, constants);
    }
  } else if (action.type === 'Number') {
    Object(_push_op__WEBPACK_IMPORTED_MODULE_2__["default"])(encoder, constants, action);
  } else if (action.type === 'Resolution') {
    Object(_push_resolution__WEBPACK_IMPORTED_MODULE_3__["default"])(encoder, context, action, constants);
  } else if (action.type === 'Simple') {
    Object(_push_builder__WEBPACK_IMPORTED_MODULE_0__["default"])(context, action);
  } else if (action.type === 'Error') {
    encoder.error({
      problem: action.op1.problem,
      span: {
        start: action.op1.start,
        end: action.op1.end
      }
    });
  } else {
    throw Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_4__["assertNever"])(action, 'unexpected action kind');
  }
}
function concatStatements(context, action) {
  if (isNoAction(action)) {
    return;
  } else if (Array.isArray(action)) {
    for (let item of action) {
      concatStatements(context, item);
    }
  } else if (action.type === 'Number') {
    Object(_push_op__WEBPACK_IMPORTED_MODULE_2__["default"])(context.encoder, context.syntax.program.constants, action);
  } else {
    if (action.type === 'Compile') {
      Object(_push_compile__WEBPACK_IMPORTED_MODULE_1__["default"])(context, action);
    } else if (action.type === 'Resolution') {
      Object(_push_resolution__WEBPACK_IMPORTED_MODULE_3__["default"])(context.encoder, context, action, context.syntax.program.constants);
    } else if (action.type === 'Simple') {
      Object(_push_builder__WEBPACK_IMPORTED_MODULE_0__["default"])(context, action);
    } else if (action.type === 'Error') {} else {
      throw Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_4__["assertNever"])(action, "unexpected action type");
    }
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/expressions.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/expressions.js ***!
  \*********************************************************************************************/
/*! exports provided: EXPRESSIONS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXPRESSIONS", function() { return EXPRESSIONS; });
/* harmony import */ var _compilers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compilers */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/compilers.js");
/* harmony import */ var _opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../opcode-builder/encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../opcode-builder/helpers/vm */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/vm.js");
/* harmony import */ var _opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../opcode-builder/helpers/components */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");





const EXPRESSIONS = new _compilers__WEBPACK_IMPORTED_MODULE_0__["Compilers"]();
EXPRESSIONS.add(32
/* Concat */
, ([, parts]) => {
  let out = [];

  for (let part of parts) {
    out.push(Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', part));
  }

  out.push(Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(28
  /* Concat */
  , parts.length));
  return out;
});
EXPRESSIONS.add(31
/* Call */
, ([, start, offset, name, params, hash], meta) => {
  // TODO: triage this in the WF compiler
  if (isComponent(name, meta)) {
    if (!params || params.length === 0) {
      return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Error', {
        problem: 'component helper requires at least one argument',
        start: start,
        end: start + offset
      });
    }

    let [definition, ...restArgs] = params;
    return Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_3__["curryComponent"])({
      definition,
      params: restArgs,
      hash,
      atNames: false
    }, meta.referrer);
  }

  let nameOrError = Object(_utils__WEBPACK_IMPORTED_MODULE_4__["expectString"])(name, meta, 'Expected call head to be a string');

  if (typeof nameOrError !== 'string') {
    return nameOrError;
  }

  return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('IfResolved', {
    kind: "Helper"
    /* Helper */
    ,
    name: nameOrError,
    andThen: handle => Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_2__["Call"])({
      handle,
      params,
      hash
    }),
    span: {
      start,
      end: start + offset
    }
  });
});

function isComponent(expr, meta) {
  if (!Array.isArray(expr)) {
    return false;
  }

  if (expr[0] === 27
  /* GetPath */
  ) {
      let head = expr[1];

      if (head[0] === 26
      /* GetContextualFree */
      && meta.upvars && meta.upvars[head[1]] === 'component') {
        return true;
      } else {
        return false;
      }
    }

  return false;
}

EXPRESSIONS.add(24
/* GetSymbol */
, ([, head]) => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(22
/* GetVariable */
, head)]);
EXPRESSIONS.add(27
/* GetPath */
, ([, head, tail]) => {
  return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', head), ...tail.map(p => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(23
  /* GetProperty */
  , p))];
});
EXPRESSIONS.add(25
/* GetFree */
, ([, head]) => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('ResolveFree', head));
EXPRESSIONS.add(26
/* GetContextualFree */
, ([, head, context]) => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('ResolveContextualFree', {
  freeVar: head,
  context
}));
EXPRESSIONS.add(30
/* Undefined */
, () => Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_2__["PushPrimitiveReference"])(undefined));
EXPRESSIONS.add(28
/* HasBlock */
, ([, block]) => {
  return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', block), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(26
  /* HasBlock */
  )];
});
EXPRESSIONS.add(29
/* HasBlockParams */
, ([, block]) => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', block), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(25
/* JitSpreadBlock */
), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('JitCompileBlock'), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(27
/* HasBlockParams */
)]);

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/macros.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/macros.js ***!
  \****************************************************************************************/
/*! exports provided: MacrosImpl, Blocks, Inlines */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MacrosImpl", function() { return MacrosImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Blocks", function() { return Blocks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inlines", function() { return Inlines; });
/* harmony import */ var _builtins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./builtins */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/builtins.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");




class MacrosImpl {
  constructor() {
    let {
      blocks,
      inlines
    } = Object(_builtins__WEBPACK_IMPORTED_MODULE_0__["populateBuiltins"])(new Blocks(), new Inlines());
    this.blocks = blocks;
    this.inlines = inlines;
  }

}
class Blocks {
  constructor() {
    this.names = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["dict"])();
    this.funcs = [];
  }

  add(name, func) {
    this.funcs.push(func);
    this.names[name] = this.funcs.length - 1;
  }

  addMissing(func) {
    this.missing = func;
  }

  compile(name, params, hash, blocks, context) {
    let index = this.names[name];
    let macroContext = {
      resolver: context.syntax.program.resolverDelegate,
      meta: context.meta
    };

    if (index === undefined) {
       false && false;
      let func = this.missing;
      let handled = func(name, params, hash, blocks, macroContext);
       false && false;
      return handled;
    } else {
      let func = this.funcs[index];
      return func(params, hash, blocks, macroContext);
    }
  }

}
class Inlines {
  constructor() {
    this.names = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["dict"])();
    this.funcs = [];
  }

  add(name, func) {
    this.funcs.push(func);
    this.names[name] = this.funcs.length - 1;
  }

  addMissing(func) {
    this.missing = func;
  }

  compile(sexp, context) {
    let [,,,, value] = sexp; // TODO: Fix this so that expression macros can return
    // things like components, so that {{component foo}}
    // is the same as {{(component foo)}}

    if (!Array.isArray(value)) return _concat__WEBPACK_IMPORTED_MODULE_2__["UNHANDLED"];
    let name;
    let params;
    let hash;

    if (value[0] === 31
    /* Call */
    ) {
        let nameOrError = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["expectString"])(value[3], context.meta, 'Expected head of call to be a string');

        if (typeof nameOrError !== 'string') {
          return nameOrError;
        }

        name = nameOrError;
        params = value[4];
        hash = value[5];
      } else if (value[0] === 27
    /* GetPath */
    ) {
        let pathName = simplePathName(value, context.meta);

        if (pathName === null) {
          return _concat__WEBPACK_IMPORTED_MODULE_2__["UNHANDLED"];
        }

        name = pathName;
        params = null;
        hash = null;
      } else {
      return _concat__WEBPACK_IMPORTED_MODULE_2__["UNHANDLED"];
    }

    let index = this.names[name];
    let macroContext = {
      resolver: context.syntax.program.resolverDelegate,
      meta: context.meta
    };

    if (index === undefined && this.missing) {
      let func = this.missing;
      return func(name, params, hash, macroContext);
    } else if (index !== undefined) {
      let func = this.funcs[index];
      return func(name, params, hash, macroContext);
    } else {
      return _concat__WEBPACK_IMPORTED_MODULE_2__["UNHANDLED"];
    }
  }

}

function simplePathName([, get, tail], meta) {
  if (tail.length > 0) {
    return null;
  }

  if (get[0] === 25
  /* GetFree */
  || get[0] === 26
  /* GetContextualFree */
  ) {
      return meta.upvars[get[1]];
    }

  return null;
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-builder.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-builder.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return pushBuilderOp; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../opcode-builder/encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");



function pushBuilderOp(context, op) {
  let {
    encoder,
    syntax: {
      program: {
        mode,
        constants
      }
    }
  } = context;

  switch (op.op) {
    case "Option"
    /* Option */
    :
      return Object(_concat__WEBPACK_IMPORTED_MODULE_2__["concat"])(context, option(op));

    case "Label"
    /* Label */
    :
      return encoder.label(op.op1);

    case "StartLabels"
    /* StartLabels */
    :
      return encoder.startLabels();

    case "StopLabels"
    /* StopLabels */
    :
      return encoder.stopLabels();

    case "JitCompileBlock"
    /* JitCompileBlock */
    :
      return Object(_concat__WEBPACK_IMPORTED_MODULE_2__["concat"])(context, jitCompileBlock(mode));

    case "GetComponentLayout"
    /* GetComponentLayout */
    :
      return encoder.push(constants, compileLayoutOpcode(mode), op.op1);

    case "SetBlock"
    /* SetBlock */
    :
      return encoder.push(constants, setBlock(mode), op.op1);

    default:
      return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["exhausted"])(op);
  }
}

function option(op) {
  let value = op.op1;
  return value === null ? _concat__WEBPACK_IMPORTED_MODULE_2__["NONE"] : value;
}

function compileLayoutOpcode(mode) {
  return mode === "aot"
  /* aot */
  ? 94
  /* GetAotComponentLayout */
  : 95
  /* GetJitComponentLayout */
  ;
}

function jitCompileBlock(mode) {
  return mode === "jit"
  /* jit */
  ? Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(61
  /* CompileBlock */
  ) : _concat__WEBPACK_IMPORTED_MODULE_2__["NONE"];
}

function setBlock(mode) {
  return mode === "aot"
  /* aot */
  ? 20
  /* SetAotBlock */
  : 21
  /* SetJitBlock */
  ;
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-compile.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-compile.js ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return pushCompileOp; });
/* harmony import */ var _opcode_builder_operands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../opcode-builder/operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../opcode-builder/encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../opcode-builder/helpers/shared */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js");
/* harmony import */ var _compilable_template__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../compilable-template */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js");
/* harmony import */ var _opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../opcode-builder/helpers/components */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js");
/* harmony import */ var _resolver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resolver */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/resolver.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony import */ var _compiler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../compiler */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compiler.js");
/* harmony import */ var _opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../opcode-builder/helpers/vm */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/vm.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");











function pushCompileOp(context, action) {
  Object(_concat__WEBPACK_IMPORTED_MODULE_7__["concatStatements"])(context, compileOp(context, action));
}

function compileOp(context, action) {
  switch (action.op) {
    case "CompileBlock"
    /* CompileBlock */
    :
      return CompileBlockOp(context, action);

    case "CompileInline"
    /* CompileInline */
    :
      return CompileInlineOp(context, action);

    case "InvokeStatic"
    /* InvokeStatic */
    :
      return InvokeStatic(context.syntax, action);

    case "Args"
    /* Args */
    :
      return Object(_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_2__["CompileArgs"])(action.op1);

    case "PushCompilable"
    /* PushCompilable */
    :
      return PushCompilable(action.op1, context.syntax);

    case "DynamicComponent"
    /* DynamicComponent */
    :
      return DynamicComponent(context, action);

    case "IfResolvedComponent"
    /* IfResolvedComponent */
    :
      return IfResolvedComponent(context, action);

    default:
      return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_6__["exhausted"])(action);
  }
}

function CompileBlockOp(context, op) {
  return Object(_compiler__WEBPACK_IMPORTED_MODULE_8__["compileBlock"])(op.op1, context);
}

function CompileInlineOp(context, op) {
  let {
    inline,
    ifUnhandled
  } = op.op1;
  let returned = Object(_compiler__WEBPACK_IMPORTED_MODULE_8__["compileInline"])(inline, context);

  if (Object(_concat__WEBPACK_IMPORTED_MODULE_7__["isHandled"])(returned)) {
    return returned;
  } else {
    return ifUnhandled(inline);
  }
}

function InvokeStatic(context, action) {
  let compilable = action.op1;

  if (context.program.mode === "aot"
  /* aot */
  ) {
      let handle = compilable.compile(context);

      if (typeof handle !== 'number') {
        return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Error', {
          problem: 'Invalid block',
          start: 0,
          end: 0
        });
      } // If the handle for the invoked component is not yet known (for example,
      // because this is a recursive invocation and we're still compiling), push a
      // function that will produce the correct handle when the heap is
      // serialized.


      if (handle === _compilable_template__WEBPACK_IMPORTED_MODULE_3__["PLACEHOLDER_HANDLE"]) {
        return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(3
        /* InvokeStatic */
        , () => compilable.compile(context));
      } else {
        return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(3
        /* InvokeStatic */
        , handle);
      }
    } else {
    return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(29
    /* Constant */
    , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_0__["other"])(action.op1)), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(61
    /* CompileBlock */
    ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(2
    /* InvokeVirtual */
    )];
  }
}

function DynamicComponent(context, action) {
  let {
    definition,
    attrs,
    params,
    args,
    blocks,
    atNames
  } = action.op1;
  let attrsBlock = attrs && attrs.length > 0 ? Object(_compilable_template__WEBPACK_IMPORTED_MODULE_3__["compilableBlock"])(attrs, context.meta) : null;
  let compiled = Array.isArray(blocks) || blocks === null ? Object(_utils__WEBPACK_IMPORTED_MODULE_10__["namedBlocks"])(blocks, context.meta) : blocks;
  return Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_4__["InvokeDynamicComponent"])(context.meta, {
    definition,
    attrs: attrsBlock,
    params,
    hash: args,
    atNames,
    blocks: compiled
  });
}

function IfResolvedComponent(context, action) {
  let {
    name,
    attrs,
    blocks,
    staticTemplate,
    dynamicTemplate,
    orElse
  } = action.op1;
  let component = Object(_resolver__WEBPACK_IMPORTED_MODULE_5__["resolveLayoutForTag"])(name, {
    resolver: context.syntax.program.resolverDelegate,
    meta: context.meta
  });
  let {
    meta
  } = context;

  if (component !== null) {
    let {
      handle,
      capabilities,
      compilable
    } = component;
    let attrsBlock = Object(_compilable_template__WEBPACK_IMPORTED_MODULE_3__["compilableBlock"])(attrs, meta);
    let compilableBlocks = Object(_utils__WEBPACK_IMPORTED_MODULE_10__["namedBlocks"])(blocks, meta);

    if (compilable !== null) {
      return staticTemplate(handle, capabilities, compilable, {
        attrs: attrsBlock,
        blocks: compilableBlocks
      });
    } else {
      return dynamicTemplate(handle, capabilities, {
        attrs: attrsBlock,
        blocks: compilableBlocks
      });
    }
  } else if (orElse) {
    return orElse();
  } else {
    throw new Error("Compile Error: Cannot find component ".concat(name));
  }
}

function PushCompilable(block, context) {
  if (block === null) {
    return Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_9__["PushPrimitive"])(null);
  } else if (context.program.mode === "aot"
  /* aot */
  ) {
      let compiled = block.compile(context);

      if (typeof compiled !== 'number') {
        return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Error', {
          problem: 'Compile Error (TODO: thread better)',
          start: 0,
          end: 0
        });
      }

      return Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_9__["PushPrimitive"])(compiled);
    } else {
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(29
    /* Constant */
    , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_0__["other"])(block));
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-op.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-op.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return pushOp; });
function pushOp(encoder, constants, op) {
  if (op.op3 !== undefined) {
    encoder.push(constants, op.op, op.op1, op.op2, op.op3);
  } else if (op.op2 !== undefined) {
    encoder.push(constants, op.op, op.op1, op.op2);
  } else if (op.op1 !== undefined) {
    encoder.push(constants, op.op, op.op1);
  } else {
    encoder.push(constants, op.op);
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-resolution.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/push-resolution.js ***!
  \*************************************************************************************************/
/*! exports provided: default, expr, compileSimpleArgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return pushResolutionOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expr", function() { return expr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compileSimpleArgs", function() { return compileSimpleArgs; });
/* harmony import */ var _opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../opcode-builder/helpers/shared */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../opcode-builder/encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _opcode_builder_operands__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../opcode-builder/operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../opcode-builder/helpers/vm */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/vm.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony import */ var _expressions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./expressions */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/expressions.js");







function pushResolutionOp(encoder, context, operation, constants) {
  switch (operation.op) {
    case "SimpleArgs"
    /* SimpleArgs */
    :
      Object(_concat__WEBPACK_IMPORTED_MODULE_5__["concatExpressions"])(encoder, context, compileSimpleArgs(operation.op1.params, operation.op1.hash, operation.op1.atNames), constants);
      break;

    case "Expr"
    /* Expr */
    :
      Object(_concat__WEBPACK_IMPORTED_MODULE_5__["concatExpressions"])(encoder, context, expr(operation.op1, context.meta), constants);
      break;

    case "IfResolved"
    /* IfResolved */
    :
      {
        Object(_concat__WEBPACK_IMPORTED_MODULE_5__["concatExpressions"])(encoder, context, ifResolved(context, operation), constants);
        break;
      }

    case "ResolveFree"
    /* ResolveFree */
    :
      {
        throw new Error('Unimplemented HighLevelResolutionOpcode.ResolveFree');
      }

    case "ResolveContextualFree"
    /* ResolveContextualFree */
    :
      {
        let {
          freeVar,
          context: expressionContext
        } = operation.op1;

        if (context.meta.asPartial) {
          let name = context.meta.upvars[freeVar];
          Object(_concat__WEBPACK_IMPORTED_MODULE_5__["concatExpressions"])(encoder, context, [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(105
          /* ResolveMaybeLocal */
          , name)], constants);
          break;
        }

        switch (expressionContext) {
          case "Expression"
          /* Expression */
          :
            {
              // in classic mode, this is always a this-fallback
              let name = context.meta.upvars[freeVar];
              Object(_concat__WEBPACK_IMPORTED_MODULE_5__["concatExpressions"])(encoder, context, [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(22
              /* GetVariable */
              , 0), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(23
              /* GetProperty */
              , name)], constants);
              break;
            }

          case "AppendSingleId"
          /* AppendSingleId */
          :
            {
              let resolver = context.syntax.program.resolverDelegate;
              let name = context.meta.upvars[freeVar];
              let resolvedHelper = resolver.lookupHelper(name, context.meta.referrer);
              let expressions;

              if (resolvedHelper) {
                expressions = Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_4__["Call"])({
                  handle: resolvedHelper,
                  params: null,
                  hash: null
                });
              } else {
                // in classic mode, this is always a this-fallback
                expressions = [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(22
                /* GetVariable */
                , 0), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(23
                /* GetProperty */
                , name)];
              }

              Object(_concat__WEBPACK_IMPORTED_MODULE_5__["concatExpressions"])(encoder, context, expressions, constants);
              break;
            }

          default:
            throw new Error("unimplemented: Can't evaluate expression in context ".concat(expressionContext));
        }

        break;
      }

    default:
      return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["exhausted"])(operation);
  }
}
function expr(expression, meta) {
  if (Array.isArray(expression)) {
    return _expressions__WEBPACK_IMPORTED_MODULE_6__["EXPRESSIONS"].compile(expression, meta);
  } else {
    return [Object(_opcode_builder_helpers_vm__WEBPACK_IMPORTED_MODULE_4__["PushPrimitive"])(expression), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(31
    /* PrimitiveReference */
    )];
  }
}
function compileSimpleArgs(params, hash, atNames) {
  let out = [];
  let {
    count,
    actions
  } = Object(_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_0__["CompilePositional"])(params);
  out.push(actions);
  let flags = count << 4;
  if (atNames) flags |= 0b1000;
  let names = _glimmer_util__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ARRAY"];

  if (hash) {
    names = hash[0];
    let val = hash[1];

    for (let i = 0; i < val.length; i++) {
      out.push(Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])('Expr', val[i]));
    }
  }

  out.push(Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["op"])(84
  /* PushArgs */
  , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_3__["strArray"])(names), flags));
  return out;
}

function ifResolved(context, {
  op1
}) {
  let {
    kind,
    name,
    andThen,
    orElse,
    span
  } = op1;
  let resolved = resolve(context.syntax.program.resolverDelegate, kind, name, context.meta.referrer);

  if (resolved !== null) {
    return andThen(resolved);
  } else if (orElse) {
    return orElse();
  } else {
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["error"])("Unexpected ".concat(kind, " ").concat(name), span.start, span.end);
  }
}

function resolve(resolver, kind, name, referrer) {
  switch (kind) {
    case "Modifier"
    /* Modifier */
    :
      return resolver.lookupModifier(name, referrer);

    case "Helper"
    /* Helper */
    :
      return resolver.lookupHelper(name, referrer);

    case "ComponentDefinition"
    /* ComponentDefinition */
    :
      {
        let component = resolver.lookupComponent(name, referrer);
        return component && component.handle;
      }
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/statements.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/statements.js ***!
  \********************************************************************************************/
/*! exports provided: STATEMENTS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STATEMENTS", function() { return STATEMENTS; });
/* harmony import */ var _compilers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compilers */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/compilers.js");
/* harmony import */ var _opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../opcode-builder/encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");
/* harmony import */ var _opcode_builder_operands__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../opcode-builder/operands */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/operands.js");
/* harmony import */ var _opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../opcode-builder/helpers/components */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js");
/* harmony import */ var _opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../opcode-builder/helpers/conditional */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/conditional.js");
/* harmony import */ var _opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../opcode-builder/helpers/blocks */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/blocks.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js");









const STATEMENTS = new _compilers__WEBPACK_IMPORTED_MODULE_0__["Compilers"]();
STATEMENTS.add(2
/* Comment */
, sexp => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(42
/* Comment */
, sexp[1]));
STATEMENTS.add(11
/* CloseElement */
, () => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(55
/* CloseElement */
));
STATEMENTS.add(10
/* FlushElement */
, () => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(54
/* FlushElement */
));
STATEMENTS.add(3
/* Modifier */
, (sexp, meta) => {
  let [,,, name, params, hash] = sexp;
  let stringName = Object(_utils__WEBPACK_IMPORTED_MODULE_8__["expectString"])(name, meta, 'Expected modifier head to be a string');

  if (typeof stringName !== 'string') {
    return stringName;
  }

  return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('IfResolved', {
    kind: "Modifier"
    /* Modifier */
    ,
    name: stringName,
    andThen: handle => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(0
    /* PushFrame */
    ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('SimpleArgs', {
      params,
      hash,
      atNames: false
    }), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(57
    /* Modifier */
    , handle), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(1
    /* PopFrame */
    )],
    span: {
      start: 0,
      end: 0
    }
  });
});
STATEMENTS.add(12
/* StaticAttr */
, ([, name, value, namespace]) => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(51
/* StaticAttr */
, name, value, namespace));
STATEMENTS.add(23
/* StaticComponentAttr */
, ([, name, value, namespace]) => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(108
/* StaticComponentAttr */
, name, value, namespace));
STATEMENTS.add(13
/* DynamicAttr */
, ([, name, value, namespace]) => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', value), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(52
/* DynamicAttr */
, name, false, namespace)]);
STATEMENTS.add(20
/* TrustingDynamicAttr */
, ([, name, value, namespace]) => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', value), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(52
/* DynamicAttr */
, name, true, namespace)]);
STATEMENTS.add(14
/* ComponentAttr */
, ([, name, value, namespace]) => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', value), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(53
/* ComponentAttr */
, name, false, namespace)]);
STATEMENTS.add(21
/* TrustingComponentAttr */
, ([, name, value, namespace]) => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', value), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(53
/* ComponentAttr */
, name, true, namespace)]);
STATEMENTS.add(9
/* OpenElement */
, ([, tag, simple]) => {
  if (simple) {
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(48
    /* OpenElement */
    , tag);
  } else {
    return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(91
    /* PutComponentOperations */
    ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(48
    /* OpenElement */
    , tag)];
  }
});
STATEMENTS.add(7
/* Component */
, ([, tag, attrs, args, blocks]) => {
  if (typeof tag === 'string') {
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('IfResolvedComponent', {
      name: tag,
      attrs,
      blocks,
      staticTemplate: (layoutHandle, capabilities, template, {
        blocks,
        attrs
      }) => {
        return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(80
        /* PushComponentDefinition */
        , layoutHandle), Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_3__["InvokeStaticComponent"])({
          capabilities,
          layout: template,
          attrs,
          params: null,
          hash: args,
          blocks
        })];
      },
      dynamicTemplate: (layoutHandle, capabilities, {
        attrs,
        blocks
      }) => {
        return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(80
        /* PushComponentDefinition */
        , layoutHandle), Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_3__["InvokeComponent"])({
          capabilities,
          attrs,
          params: null,
          hash: args,
          atNames: true,
          blocks
        })];
      }
    });
  } else {
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('DynamicComponent', {
      definition: tag,
      attrs,
      params: null,
      args,
      blocks,
      atNames: true
    });
  }
});
STATEMENTS.add(17
/* Partial */
, ([, name, evalInfo], meta) => Object(_opcode_builder_helpers_conditional__WEBPACK_IMPORTED_MODULE_4__["ReplayableIf"])({
  args() {
    return {
      count: 2,
      actions: [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('Expr', name), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(33
      /* Dup */
      , _glimmer_vm__WEBPACK_IMPORTED_MODULE_7__["$sp"], 0)]
    };
  },

  ifTrue() {
    return [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(104
    /* InvokePartial */
    , Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_2__["templateMeta"])(meta.referrer), Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_2__["strArray"])(meta.evalSymbols), Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_2__["arr"])(evalInfo)), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(40
    /* PopScope */
    ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(1
    /* PopFrame */
    )];
  }

}));
STATEMENTS.add(16
/* Yield */
, ([, to, params]) => Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_5__["YieldBlock"])(to, params));
STATEMENTS.add(15
/* AttrSplat */
, ([, to]) => Object(_opcode_builder_helpers_blocks__WEBPACK_IMPORTED_MODULE_5__["YieldBlock"])(to, _glimmer_util__WEBPACK_IMPORTED_MODULE_6__["EMPTY_ARRAY"]));
STATEMENTS.add(22
/* Debugger */
, ([, evalInfo], meta) => Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(106
/* Debugger */
, Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_2__["strArray"])(meta.evalSymbols), Object(_opcode_builder_operands__WEBPACK_IMPORTED_MODULE_2__["arr"])(evalInfo)));
STATEMENTS.add(1
/* Append */
, sexp => {
  let [, trusted,,, value] = sexp;

  if (typeof value === 'string' && trusted) {
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(41
    /* Text */
    , value);
  }

  return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('CompileInline', {
    inline: sexp,
    ifUnhandled: () => [Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(0
    /* PushFrame */
    ), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])("Expr"
    /* Expr */
    , value), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(3
    /* InvokeStatic */
    , {
      type: 'stdlib',
      value: trusted ? 'trusting-append' : 'cautious-append'
    }), Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])(1
    /* PopFrame */
    )]
  });
});
STATEMENTS.add(5
/* Block */
, sexp => {
  return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_1__["op"])('CompileBlock', sexp);
});

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/template.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/template.js ***!
  \***********************************************************************************/
/*! exports provided: default, Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return templateFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _compilable_template__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compilable-template */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js");
/* harmony import */ var _wrapped_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wrapped-component */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/wrapped-component.js");



let clientId = 0;
function templateFactory({
  id: templateId,
  meta,
  block
}) {
  let parsedBlock;
  let id = templateId || "client-".concat(clientId++);

  let create = envMeta => {
    let newMeta = envMeta ? Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assign"])({}, envMeta, meta) : meta;

    if (!parsedBlock) {
      parsedBlock = JSON.parse(block);
    }

    return new TemplateImpl({
      id,
      block: parsedBlock,
      referrer: newMeta
    });
  };

  return {
    id,
    meta,
    create
  };
}

class TemplateImpl {
  constructor(parsedLayout) {
    this.parsedLayout = parsedLayout;
    this.result = 'ok';
    this.layout = null;
    this.partial = null;
    this.wrappedLayout = null;
    let {
      block
    } = parsedLayout;
    this.symbols = block.symbols;
    this.hasEval = block.hasEval;
    this.referrer = parsedLayout.referrer;
    this.id = parsedLayout.id || "client-".concat(clientId++);
  }

  asLayout() {
    if (this.layout) return this.layout;
    return this.layout = Object(_compilable_template__WEBPACK_IMPORTED_MODULE_1__["compilable"])(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assign"])({}, this.parsedLayout, {
      asPartial: false
    }));
  }

  asPartial() {
    if (this.partial) return this.partial;
    return this.layout = Object(_compilable_template__WEBPACK_IMPORTED_MODULE_1__["compilable"])(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assign"])({}, this.parsedLayout, {
      asPartial: true
    }));
  }

  asWrappedLayout() {
    if (this.wrappedLayout) return this.wrappedLayout;
    return this.wrappedLayout = new _wrapped_component__WEBPACK_IMPORTED_MODULE_2__["WrappedBuilder"](Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assign"])({}, this.parsedLayout, {
      asPartial: false
    }));
  }

}

function Component(serialized, envMeta) {
  let parsed = JSON.parse(serialized);
  let factory = templateFactory(parsed);
  let template = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["unwrapTemplate"])(factory.create(envMeta));
  return template.asLayout();
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/utils.js ***!
  \********************************************************************************/
/*! exports provided: NamedBlocksImpl, EMPTY_BLOCKS, namedBlocks, expectString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedBlocksImpl", function() { return NamedBlocksImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY_BLOCKS", function() { return EMPTY_BLOCKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "namedBlocks", function() { return namedBlocks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expectString", function() { return expectString; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _compilable_template__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compilable-template */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js");
/* harmony import */ var _opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opcode-builder/encoder */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/encoder.js");



class NamedBlocksImpl {
  constructor(blocks) {
    this.blocks = blocks;
  }

  get(name) {
    if (!this.blocks) return null;
    return this.blocks[name] || null;
  }

  has(name) {
    let {
      blocks
    } = this;
    return blocks !== null && name in blocks;
  }

  with(name, block) {
    let {
      blocks
    } = this;

    if (blocks) {
      return new NamedBlocksImpl(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assign"])({}, blocks, {
        [name]: block
      }));
    } else {
      return new NamedBlocksImpl({
        [name]: block
      });
    }
  }

  get hasAny() {
    return this.blocks !== null;
  }

}
const EMPTY_BLOCKS = new NamedBlocksImpl(null);
function namedBlocks(blocks, meta) {
  if (blocks === null) {
    return EMPTY_BLOCKS;
  }

  let out = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["dict"])();
  let [keys, values] = blocks;

  for (let i = 0; i < keys.length; i++) {
    out[keys[i]] = Object(_compilable_template__WEBPACK_IMPORTED_MODULE_1__["compilableBlock"])(values[i], meta);
  }

  return new NamedBlocksImpl(out);
}
function expectString(expr, meta, desc) {
  if (!meta.upvars) {
    return Object(_opcode_builder_encoder__WEBPACK_IMPORTED_MODULE_2__["error"])("".concat(desc, ", but there were no free variables in the template"), 0, 0);
  }

  if (!Array.isArray(expr) || expr[0] !== 27
  /* GetPath */
  ) {
      throw new Error("".concat(desc, ", got ").concat(JSON.stringify(expr)));
    }

  if (expr[2].length !== 0) {
    throw new Error("".concat(desc, ", got ").concat(JSON.stringify(expr)));
  }

  if (expr[1][0] === 26
  /* GetContextualFree */
  || expr[1][0] === 25
  /* GetFree */
  ) {
      let head = expr[1][1];
      return meta.upvars[head];
    }

  throw new Error("".concat(desc, ", got ").concat(JSON.stringify(expr)));
}

/***/ }),

/***/ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/wrapped-component.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/wrapped-component.js ***!
  \********************************************************************************************/
/*! exports provided: WrappedBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrappedBuilder", function() { return WrappedBuilder; });
/* harmony import */ var _opcode_builder_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opcode-builder/context */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/context.js");
/* harmony import */ var _opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./opcode-builder/helpers/shared */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/shared.js");
/* harmony import */ var _opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opcode-builder/helpers/components */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder/helpers/components.js");
/* harmony import */ var _compiler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./compiler */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compiler.js");
/* harmony import */ var _syntax_concat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./syntax/concat */ "./node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax/concat.js");
/* harmony import */ var _glimmer_program__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/program */ "./node_modules/@glimmer/program/dist/modules/es2017/index.js");






class WrappedBuilder {
  constructor(layout) {
    this.layout = layout;
    this.compiled = null;
    let {
      block
    } = layout;
    let symbols = block.symbols.slice(); // ensure ATTRS_BLOCK is always included (only once) in the list of symbols

    let attrsBlockIndex = symbols.indexOf(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_2__["ATTRS_BLOCK"]);

    if (attrsBlockIndex === -1) {
      this.attrsBlockNumber = symbols.push(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_2__["ATTRS_BLOCK"]);
    } else {
      this.attrsBlockNumber = attrsBlockIndex + 1;
    }

    this.symbolTable = {
      hasEval: block.hasEval,
      symbols
    };
  }

  compile(syntax) {
    if (this.compiled !== null) return this.compiled;
    let m = Object(_opcode_builder_helpers_shared__WEBPACK_IMPORTED_MODULE_1__["meta"])(this.layout);
    let context = Object(_opcode_builder_context__WEBPACK_IMPORTED_MODULE_0__["templateCompilationContext"])(syntax, m);
    let actions = Object(_opcode_builder_helpers_components__WEBPACK_IMPORTED_MODULE_2__["WrappedComponent"])(this.layout, this.attrsBlockNumber);
    Object(_syntax_concat__WEBPACK_IMPORTED_MODULE_4__["concatStatements"])(context, actions);
    let handle = context.encoder.commit(context.syntax.program.heap, m.size);

    if (typeof handle !== 'number') {
      return handle;
    }

    this.compiled = handle;

    if (false
    /* LOCAL_SHOULD_LOG */
    ) {}

    Object(_glimmer_program__WEBPACK_IMPORTED_MODULE_5__["patchStdlibs"])(context.syntax.program);
    return handle;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/program/dist/modules/es2017/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@glimmer/program/dist/modules/es2017/index.js ***!
  \********************************************************************/
/*! exports provided: WELL_KNOWN_EMPTY_ARRAY_POSITION, WriteOnlyConstants, RuntimeConstantsImpl, JitConstants, RuntimeHeapImpl, hydrateHeap, HeapImpl, RuntimeProgramImpl, hydrateProgram, RuntimeOpImpl, patchStdlibs, programArtifacts, artifacts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/constants */ "./node_modules/@glimmer/program/dist/modules/es2017/lib/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WELL_KNOWN_EMPTY_ARRAY_POSITION", function() { return _lib_constants__WEBPACK_IMPORTED_MODULE_0__["WELL_KNOWN_EMPTY_ARRAY_POSITION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WriteOnlyConstants", function() { return _lib_constants__WEBPACK_IMPORTED_MODULE_0__["WriteOnlyConstants"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RuntimeConstantsImpl", function() { return _lib_constants__WEBPACK_IMPORTED_MODULE_0__["RuntimeConstantsImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JitConstants", function() { return _lib_constants__WEBPACK_IMPORTED_MODULE_0__["JitConstants"]; });

/* harmony import */ var _lib_program__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/program */ "./node_modules/@glimmer/program/dist/modules/es2017/lib/program.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RuntimeHeapImpl", function() { return _lib_program__WEBPACK_IMPORTED_MODULE_1__["RuntimeHeapImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hydrateHeap", function() { return _lib_program__WEBPACK_IMPORTED_MODULE_1__["hydrateHeap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HeapImpl", function() { return _lib_program__WEBPACK_IMPORTED_MODULE_1__["HeapImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RuntimeProgramImpl", function() { return _lib_program__WEBPACK_IMPORTED_MODULE_1__["RuntimeProgramImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hydrateProgram", function() { return _lib_program__WEBPACK_IMPORTED_MODULE_1__["hydrateProgram"]; });

/* harmony import */ var _lib_opcode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/opcode */ "./node_modules/@glimmer/program/dist/modules/es2017/lib/opcode.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RuntimeOpImpl", function() { return _lib_opcode__WEBPACK_IMPORTED_MODULE_2__["RuntimeOpImpl"]; });

/* harmony import */ var _lib_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/helpers */ "./node_modules/@glimmer/program/dist/modules/es2017/lib/helpers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "patchStdlibs", function() { return _lib_helpers__WEBPACK_IMPORTED_MODULE_3__["patchStdlibs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "programArtifacts", function() { return _lib_helpers__WEBPACK_IMPORTED_MODULE_3__["programArtifacts"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "artifacts", function() { return _lib_helpers__WEBPACK_IMPORTED_MODULE_3__["artifacts"]; });






/***/ }),

/***/ "./node_modules/@glimmer/program/dist/modules/es2017/lib/constants.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/program/dist/modules/es2017/lib/constants.js ***!
  \****************************************************************************/
/*! exports provided: WELL_KNOWN_EMPTY_ARRAY_POSITION, WriteOnlyConstants, RuntimeConstantsImpl, JitConstants */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WELL_KNOWN_EMPTY_ARRAY_POSITION", function() { return WELL_KNOWN_EMPTY_ARRAY_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WriteOnlyConstants", function() { return WriteOnlyConstants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuntimeConstantsImpl", function() { return RuntimeConstantsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JitConstants", function() { return JitConstants; });
const UNRESOLVED = {};
const WELL_KNOWN_EMPTY_ARRAY_POSITION = 0;
const WELL_KNOW_EMPTY_ARRAY = Object.freeze([]);
class WriteOnlyConstants {
  constructor() {
    // `0` means NULL
    this.strings = [];
    this.arrays = [WELL_KNOW_EMPTY_ARRAY];
    this.tables = [];
    this.handles = [];
    this.resolved = [];
    this.numbers = [];
    this.others = [];
  }

  other(other) {
    return this.others.push(other) - 1;
  }

  string(value) {
    let index = this.strings.indexOf(value);

    if (index > -1) {
      return index;
    }

    return this.strings.push(value) - 1;
  }

  stringArray(strings) {
    let _strings = new Array(strings.length);

    for (let i = 0; i < strings.length; i++) {
      _strings[i] = this.string(strings[i]);
    }

    return this.array(_strings);
  }

  array(values) {
    if (values.length === 0) {
      return WELL_KNOWN_EMPTY_ARRAY_POSITION;
    }

    let index = this.arrays.indexOf(values);

    if (index > -1) {
      return index;
    }

    return this.arrays.push(values) - 1;
  }

  serializable(value) {
    let str = JSON.stringify(value);
    let index = this.strings.indexOf(str);

    if (index > -1) {
      return index;
    }

    return this.strings.push(str) - 1;
  }

  templateMeta(value) {
    return this.serializable(value);
  }

  number(number) {
    let index = this.numbers.indexOf(number);

    if (index > -1) {
      return index;
    }

    return this.numbers.push(number) - 1;
  }

  toPool() {
    return {
      strings: this.strings,
      arrays: this.arrays,
      handles: this.handles,
      numbers: this.numbers
    };
  }

}
class RuntimeConstantsImpl {
  constructor(pool) {
    this.strings = pool.strings;
    this.arrays = pool.arrays;
    this.handles = pool.handles;
    this.numbers = pool.numbers;
    this.others = [];
  }

  getString(value) {
    return this.strings[value];
  }

  getNumber(value) {
    return this.numbers[value];
  }

  getStringArray(value) {
    let names = this.getArray(value);

    let _names = new Array(names.length);

    for (let i = 0; i < names.length; i++) {
      let n = names[i];
      _names[i] = this.getString(n);
    }

    return _names;
  }

  getArray(value) {
    return this.arrays[value];
  }

  getSerializable(s) {
    return JSON.parse(this.strings[s]);
  }

  getTemplateMeta(m) {
    return this.getSerializable(m);
  }

  getOther(value) {
    return this.others[value];
  }

}
class JitConstants extends WriteOnlyConstants {
  constructor(pool) {
    super();
    this.metas = [];

    if (pool) {
      this.strings = pool.strings;
      this.arrays = pool.arrays;
      this.handles = pool.handles;
      this.resolved = this.handles.map(() => UNRESOLVED);
      this.numbers = pool.numbers;
    }

    this.others = [];
  }

  templateMeta(meta) {
    let index = this.metas.indexOf(meta);

    if (index > -1) {
      return index;
    }

    return this.metas.push(meta) - 1;
  }

  getNumber(value) {
    return this.numbers[value];
  }

  getString(value) {
    return this.strings[value];
  }

  getStringArray(value) {
    let names = this.getArray(value);

    let _names = new Array(names.length);

    for (let i = 0; i < names.length; i++) {
      let n = names[i];
      _names[i] = this.getString(n);
    }

    return _names;
  }

  getArray(value) {
    return this.arrays[value];
  }

  getSerializable(s) {
    return JSON.parse(this.strings[s]);
  }

  getTemplateMeta(m) {
    return this.metas[m];
  }

  getOther(value) {
    return this.others[value];
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/program/dist/modules/es2017/lib/helpers.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/program/dist/modules/es2017/lib/helpers.js ***!
  \**************************************************************************/
/*! exports provided: patchStdlibs, programArtifacts, artifacts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "patchStdlibs", function() { return patchStdlibs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "programArtifacts", function() { return programArtifacts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "artifacts", function() { return artifacts; });
function patchStdlibs(program) {
  program.heap.patchStdlibs(program.stdlib);
}
function programArtifacts(program) {
  let heap = program.heap.capture(program.stdlib);
  let constants = program.constants.toPool();
  return {
    heap,
    constants
  };
}
function artifacts(syntax) {
  return programArtifacts(syntax.program);
}

/***/ }),

/***/ "./node_modules/@glimmer/program/dist/modules/es2017/lib/opcode.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@glimmer/program/dist/modules/es2017/lib/opcode.js ***!
  \*************************************************************************/
/*! exports provided: RuntimeOpImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuntimeOpImpl", function() { return RuntimeOpImpl; });
class RuntimeOpImpl {
  constructor(heap) {
    this.heap = heap;
    this.offset = 0;
  }

  get size() {
    let rawType = this.heap.getbyaddr(this.offset);
    return ((rawType & 768
    /* OPERAND_LEN_MASK */
    ) >> 8
    /* ARG_SHIFT */
    ) + 1;
  }

  get isMachine() {
    let rawType = this.heap.getbyaddr(this.offset);
    return rawType & 1024
    /* MACHINE_MASK */
    ? 1 : 0;
  }

  get type() {
    return this.heap.getbyaddr(this.offset) & 255
    /* TYPE_MASK */
    ;
  }

  get op1() {
    return this.heap.getbyaddr(this.offset + 1);
  }

  get op2() {
    return this.heap.getbyaddr(this.offset + 2);
  }

  get op3() {
    return this.heap.getbyaddr(this.offset + 3);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/program/dist/modules/es2017/lib/program.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/program/dist/modules/es2017/lib/program.js ***!
  \**************************************************************************/
/*! exports provided: RuntimeHeapImpl, hydrateHeap, HeapImpl, RuntimeProgramImpl, hydrateProgram */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuntimeHeapImpl", function() { return RuntimeHeapImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hydrateHeap", function() { return hydrateHeap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeapImpl", function() { return HeapImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuntimeProgramImpl", function() { return RuntimeProgramImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hydrateProgram", function() { return hydrateProgram; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@glimmer/program/dist/modules/es2017/lib/constants.js");
/* harmony import */ var _opcode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./opcode */ "./node_modules/@glimmer/program/dist/modules/es2017/lib/opcode.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");




function encodeTableInfo(scopeSize, state) {
   false && false;
   false && false;
   false && false;
  return state | scopeSize << 2;
}

function changeState(info, newState) {
   false && false;
   false && false;
   false && false;
  return info | newState << 30;
}

const PAGE_SIZE = 0x100000;
class RuntimeHeapImpl {
  constructor(serializedHeap) {
    let {
      buffer,
      table
    } = serializedHeap;
    this.heap = new Int32Array(buffer);
    this.table = table;
  } // It is illegal to close over this address, as compaction
  // may move it. However, it is legal to use this address
  // multiple times between compactions.


  getaddr(handle) {
    return this.table[handle];
  }

  getbyaddr(address) {
     false && false;
    return this.heap[address];
  }

  sizeof(handle) {
    return sizeof(this.table, handle);
  }

  scopesizeof(handle) {
    return scopesizeof(this.table, handle);
  }

}
function hydrateHeap(serializedHeap) {
  return new RuntimeHeapImpl(serializedHeap);
}
/**
 * The Heap is responsible for dynamically allocating
 * memory in which we read/write the VM's instructions
 * from/to. When we malloc we pass out a VMHandle, which
 * is used as an indirect way of accessing the memory during
 * execution of the VM. Internally we track the different
 * regions of the memory in an int array known as the table.
 *
 * The table 32-bit aligned and has the following layout:
 *
 * | ... | hp (u32) |       info (u32)   | size (u32) |
 * | ... |  Handle  | Scope Size | State | Size       |
 * | ... | 32bits   | 30bits     | 2bits | 32bit      |
 *
 * With this information we effectively have the ability to
 * control when we want to free memory. That being said you
 * can not free during execution as raw address are only
 * valid during the execution. This means you cannot close
 * over them as you will have a bad memory access exception.
 */

class HeapImpl {
  constructor() {
    this.placeholders = [];
    this.stdlibs = [];
    this.offset = 0;
    this.handle = 0;
    this.capacity = PAGE_SIZE;
    this.heap = new Int32Array(PAGE_SIZE);
    this.table = [];
  }

  push(item) {
    this.sizeCheck();
    this.heap[this.offset++] = item;
  }

  sizeCheck() {
    if (this.capacity === 0) {
      let heap = slice(this.heap, 0, this.offset);
      this.heap = new Int32Array(heap.length + PAGE_SIZE);
      this.heap.set(heap, 0);
      this.capacity = PAGE_SIZE;
    }

    this.capacity--;
  }

  getbyaddr(address) {
    return this.heap[address];
  }

  setbyaddr(address, value) {
    this.heap[address] = value;
  }

  malloc() {
    // push offset, info, size
    this.table.push(this.offset, 0, 0);
    let handle = this.handle;
    this.handle += 3
    /* ENTRY_SIZE */
    ;
    return handle;
  }

  finishMalloc(handle, scopeSize) {
    if (false
    /* LOCAL_DEBUG */
    ) {}

    this.table[handle + 1
    /* INFO_OFFSET */
    ] = encodeTableInfo(scopeSize, 0
    /* Allocated */
    );
  }

  size() {
    return this.offset;
  } // It is illegal to close over this address, as compaction
  // may move it. However, it is legal to use this address
  // multiple times between compactions.


  getaddr(handle) {
    return this.table[handle];
  }

  gethandle(address) {
    this.table.push(address, encodeTableInfo(0, 3
    /* Pointer */
    ), 0);
    let handle = this.handle;
    this.handle += 3
    /* ENTRY_SIZE */
    ;
    return handle;
  }

  sizeof(handle) {
    return sizeof(this.table, handle);
  }

  scopesizeof(handle) {
    return scopesizeof(this.table, handle);
  }

  free(handle) {
    let info = this.table[handle + 1
    /* INFO_OFFSET */
    ];
    this.table[handle + 1
    /* INFO_OFFSET */
    ] = changeState(info, 1
    /* Freed */
    );
  }
  /**
   * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift
   * reachable memory to the bottom of the heap and freeable
   * memory to the top of the heap. When we have shifted all
   * the reachable memory to the top of the heap, we move the
   * offset to the next free position.
   */


  compact() {
    let compactedSize = 0;
    let {
      table,
      table: {
        length
      },
      heap
    } = this;

    for (let i = 0; i < length; i += 3
    /* ENTRY_SIZE */
    ) {
      let offset = table[i];
      let info = table[i + 1
      /* INFO_OFFSET */
      ]; // @ts-ignore (this whole function is currently unused)

      let size = info & Size.SIZE_MASK;
      let state = info & 3
      /* STATE_MASK */
      >> 30;

      if (state === 2
      /* Purged */
      ) {
          continue;
        } else if (state === 1
      /* Freed */
      ) {
          // transition to "already freed" aka "purged"
          // a good improvement would be to reuse
          // these slots
          table[i + 1
          /* INFO_OFFSET */
          ] = changeState(info, 2
          /* Purged */
          );
          compactedSize += size;
        } else if (state === 0
      /* Allocated */
      ) {
          for (let j = offset; j <= i + size; j++) {
            heap[j - compactedSize] = heap[j];
          }

          table[i] = offset - compactedSize;
        } else if (state === 3
      /* Pointer */
      ) {
          table[i] = offset - compactedSize;
        }
    }

    this.offset = this.offset - compactedSize;
  }

  pushPlaceholder(valueFunc) {
    this.sizeCheck();
    let address = this.offset++;
    this.heap[address] = 2147483647
    /* MAX_SIZE */
    ;
    this.placeholders.push([address, valueFunc]);
  }

  pushStdlib(operand) {
    this.sizeCheck();
    let address = this.offset++;
    this.heap[address] = 2147483647
    /* MAX_SIZE */
    ;
    this.stdlibs.push([address, operand]);
  }

  patchPlaceholders() {
    let {
      placeholders
    } = this;

    for (let i = 0; i < placeholders.length; i++) {
      let [address, getValue] = placeholders[i];
       false && false;
      this.setbyaddr(address, getValue());
    }
  }

  patchStdlibs(stdlib) {
    let {
      stdlibs
    } = this;

    for (let i = 0; i < stdlibs.length; i++) {
      let [address, {
        value
      }] = stdlibs[i];
       false && false;
      this.setbyaddr(address, stdlib[value]);
    }

    this.stdlibs = [];
  }

  capture(stdlib, offset = this.offset) {
    this.patchPlaceholders();
    this.patchStdlibs(stdlib); // Only called in eager mode

    let buffer = slice(this.heap, 0, offset).buffer;
    return {
      handle: this.handle,
      table: this.table,
      buffer: buffer
    };
  }

}
class RuntimeProgramImpl {
  constructor(constants, heap) {
    this.constants = constants;
    this.heap = heap;
    this._opcode = new _opcode__WEBPACK_IMPORTED_MODULE_1__["RuntimeOpImpl"](this.heap);
  }

  static hydrate(artifacts) {
    let heap = new RuntimeHeapImpl(artifacts.heap);
    let constants = new _constants__WEBPACK_IMPORTED_MODULE_0__["RuntimeConstantsImpl"](artifacts.constants);
    return new RuntimeProgramImpl(constants, heap);
  }

  opcode(offset) {
    this._opcode.offset = offset;
    return this._opcode;
  }

}
function hydrateProgram(artifacts) {
  let heap = new RuntimeHeapImpl(artifacts.heap);
  let constants = new _constants__WEBPACK_IMPORTED_MODULE_0__["RuntimeConstantsImpl"](artifacts.constants);
  return new RuntimeProgramImpl(constants, heap);
}

function slice(arr, start, end) {
  if (arr.slice !== undefined) {
    return arr.slice(start, end);
  }

  let ret = new Int32Array(end);

  for (; start < end; start++) {
    ret[start] = arr[start];
  }

  return ret;
}

function sizeof(table, handle) {
  if (false
  /* LOCAL_DEBUG */
  ) {} else {
    return -1;
  }
}

function scopesizeof(table, handle) {
  let info = table[handle + 1
  /* INFO_OFFSET */
  ];
  return info >> 2;
}

/***/ }),

/***/ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@glimmer/reference/dist/modules/es2017/index.js ***!
  \**********************************************************************/
/*! exports provided: CachedReference, ReferenceCache, isModified, ConstReference, ListItem, END, UPDATE_REFERENCED_VALUE, RootReference, ComponentRootReference, HelperRootReference, PropertyReference, IterationItemReference, IterationArtifacts, ReferenceIterator, IteratorSynchronizer, IterableImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/reference.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CachedReference", function() { return _lib_reference__WEBPACK_IMPORTED_MODULE_0__["CachedReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReferenceCache", function() { return _lib_reference__WEBPACK_IMPORTED_MODULE_0__["ReferenceCache"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isModified", function() { return _lib_reference__WEBPACK_IMPORTED_MODULE_0__["isModified"]; });

/* harmony import */ var _lib_const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/const */ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/const.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConstReference", function() { return _lib_const__WEBPACK_IMPORTED_MODULE_1__["ConstReference"]; });

/* harmony import */ var _lib_iterable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/iterable */ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/iterable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListItem", function() { return _lib_iterable__WEBPACK_IMPORTED_MODULE_2__["ListItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "END", function() { return _lib_iterable__WEBPACK_IMPORTED_MODULE_2__["END"]; });

/* harmony import */ var _lib_template__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/template */ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/template.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UPDATE_REFERENCED_VALUE", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_3__["UPDATE_REFERENCED_VALUE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RootReference", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_3__["RootReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentRootReference", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_3__["ComponentRootReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HelperRootReference", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_3__["HelperRootReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PropertyReference", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_3__["PropertyReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IterationItemReference", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_3__["IterationItemReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IterationArtifacts", function() { return _lib_iterable__WEBPACK_IMPORTED_MODULE_2__["IterationArtifacts"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReferenceIterator", function() { return _lib_iterable__WEBPACK_IMPORTED_MODULE_2__["ReferenceIterator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IteratorSynchronizer", function() { return _lib_iterable__WEBPACK_IMPORTED_MODULE_2__["IteratorSynchronizer"]; });

/* harmony import */ var _lib_iterable_impl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/iterable-impl */ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/iterable-impl.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IterableImpl", function() { return _lib_iterable_impl__WEBPACK_IMPORTED_MODULE_4__["IterableImpl"]; });








/***/ }),

/***/ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/const.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/reference/dist/modules/es2017/lib/const.js ***!
  \**************************************************************************/
/*! exports provided: ConstReference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConstReference", function() { return ConstReference; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _primitive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./primitive */ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/primitive.js");


class ConstReference {
  constructor(inner) {
    this.inner = inner;
    this.tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"];
  }

  value() {
    return this.inner;
  }

  get(_key) {
    return _primitive__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED_REFERENCE"];
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/iterable-impl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@glimmer/reference/dist/modules/es2017/lib/iterable-impl.js ***!
  \**********************************************************************************/
/*! exports provided: IterableImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IterableImpl", function() { return IterableImpl; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _template__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template */ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/template.js");


const NULL_IDENTITY = {};

const KEY = (_, index) => index;

const INDEX = (_, index) => String(index);

const IDENTITY = item => {
  if (item === null) {
    // Returning null as an identity will cause failures since the iterator
    // can't tell that it's actually supposed to be null
    return NULL_IDENTITY;
  }

  return item;
};

function keyForPath(path, getPath) {
  if ( true
  /* DEBUG */
  && path[0] === '@') {
    throw new Error("invalid keypath: '".concat(path, "', valid keys: @index, @identity, or a path"));
  }

  return uniqueKeyFor(item => getPath(item, path));
}

function makeKeyFor(key, getPath) {
  switch (key) {
    case '@key':
      return uniqueKeyFor(KEY);

    case '@index':
      return uniqueKeyFor(INDEX);

    case '@identity':
      return uniqueKeyFor(IDENTITY);

    default:
      return keyForPath(key, getPath);
  }
}

class WeakMapWithPrimitives {
  get weakMap() {
    if (this._weakMap === undefined) {
      this._weakMap = new WeakMap();
    }

    return this._weakMap;
  }

  get primitiveMap() {
    if (this._primitiveMap === undefined) {
      this._primitiveMap = new Map();
    }

    return this._primitiveMap;
  }

  set(key, value) {
    if (Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(key) || typeof key === 'function') {
      this.weakMap.set(key, value);
    } else {
      this.primitiveMap.set(key, value);
    }
  }

  get(key) {
    if (Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["isObject"])(key) || typeof key === 'function') {
      return this.weakMap.get(key);
    } else {
      return this.primitiveMap.get(key);
    }
  }

}

const IDENTITIES = new WeakMapWithPrimitives();

function identityForNthOccurence(value, count) {
  let identities = IDENTITIES.get(value);

  if (identities === undefined) {
    identities = [];
    IDENTITIES.set(value, identities);
  }

  let identity = identities[count];

  if (identity === undefined) {
    identity = {
      value,
      count
    };
    identities[count] = identity;
  }

  return identity;
}
/**
 * When iterating over a list, it's possible that an item with the same unique
 * key could be encountered twice:
 *
 * ```js
 * let arr = ['same', 'different', 'same', 'same'];
 * ```
 *
 * In general, we want to treat these items as _unique within the list_. To do
 * this, we track the occurences of every item as we iterate the list, and when
 * an item occurs more than once, we generate a new unique key just for that
 * item, and that occurence within the list. The next time we iterate the list,
 * and encounter an item for the nth time, we can get the _same_ key, and let
 * Glimmer know that it should reuse the DOM for the previous nth occurence.
 */


function uniqueKeyFor(keyFor) {
  let seen = new WeakMapWithPrimitives();
  return (value, memo) => {
    let key = keyFor(value, memo);
    let count = seen.get(value) || 0;
    seen.set(key, count + 1);

    if (count === 0) {
      return key;
    }

    return identityForNthOccurence(key, count);
  };
}

class IterableImpl {
  constructor(parentRef, key, env) {
    this.parentRef = parentRef;
    this.key = key;
    this.env = env;
    this.tag = parentRef.tag;
  }

  iterate() {
    let {
      parentRef,
      key,
      env
    } = this;
    let iterable = parentRef.value();
    let keyFor = makeKeyFor(key, env.getPath);

    if (Array.isArray(iterable)) {
      return new ArrayIterator(iterable, keyFor);
    }

    let maybeIterator = env.toIterator(iterable);

    if (maybeIterator === null) {
      return new ArrayIterator(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"], () => null);
    }

    return new IteratorWrapper(maybeIterator, keyFor);
  }

  valueReferenceFor(item) {
    let {
      parentRef,
      env
    } = this;
    return new _template__WEBPACK_IMPORTED_MODULE_1__["IterationItemReference"](parentRef, item.value, item.memo, env);
  }

  updateValueReference(reference, item) {
    reference.update(item.value);
  }

  memoReferenceFor(item) {
    let {
      parentRef,
      env
    } = this;
    return new _template__WEBPACK_IMPORTED_MODULE_1__["IterationItemReference"](parentRef, item.memo, true
    /* DEBUG */
    ? "(key: ".concat(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["debugToString"])(item.key)) : undefined, env);
  }

  updateMemoReference(reference, item) {
    reference.update(item.memo);
  }

}

class IteratorWrapper {
  constructor(inner, keyFor) {
    this.inner = inner;
    this.keyFor = keyFor;
  }

  isEmpty() {
    return this.inner.isEmpty();
  }

  next() {
    let nextValue = this.inner.next();

    if (nextValue !== null) {
      nextValue.key = this.keyFor(nextValue.value, nextValue.memo);
    }

    return nextValue;
  }

}

class ArrayIterator {
  constructor(iterator, keyFor) {
    this.iterator = iterator;
    this.keyFor = keyFor;
    this.pos = 0;

    if (iterator.length === 0) {
      this.current = {
        kind: 'empty'
      };
    } else {
      this.current = {
        kind: 'first',
        value: iterator[this.pos]
      };
    }
  }

  isEmpty() {
    return this.current.kind === 'empty';
  }

  next() {
    let value;
    let current = this.current;

    if (current.kind === 'first') {
      this.current = {
        kind: 'progress'
      };
      value = current.value;
    } else if (this.pos >= this.iterator.length - 1) {
      return null;
    } else {
      value = this.iterator[++this.pos];
    }

    let {
      keyFor
    } = this;
    let key = keyFor(value, this.pos);
    let memo = this.pos;
    return {
      key,
      value,
      memo
    };
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/iterable.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@glimmer/reference/dist/modules/es2017/lib/iterable.js ***!
  \*****************************************************************************/
/*! exports provided: ListItem, IterationArtifacts, ReferenceIterator, END, IteratorSynchronizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListItem", function() { return ListItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IterationArtifacts", function() { return IterationArtifacts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReferenceIterator", function() { return ReferenceIterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END", function() { return END; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IteratorSynchronizer", function() { return IteratorSynchronizer; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");

class ListItem extends _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["ListNode"] {
  constructor(iterable, result) {
    super(iterable.valueReferenceFor(result));
    this.retained = false;
    this.seen = false;
    this.key = result.key;
    this.iterable = iterable;
    this.memo = iterable.memoReferenceFor(result);
  }

  update(item) {
    this.retained = true;
    this.iterable.updateValueReference(this.value, item);
    this.iterable.updateMemoReference(this.memo, item);
  }

  shouldRemove() {
    return !this.retained;
  }

  reset() {
    this.retained = false;
    this.seen = false;
  }

}
class IterationArtifacts {
  constructor(iterable) {
    this.iterator = null;
    this.map = new Map();
    this.list = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["LinkedList"]();
    this.tag = iterable.tag;
    this.iterable = iterable;
  }

  isEmpty() {
    let iterator = this.iterator = this.iterable.iterate();
    return iterator.isEmpty();
  }

  iterate() {
    let iterator;

    if (this.iterator === null) {
      iterator = this.iterable.iterate();
    } else {
      iterator = this.iterator;
    }

    this.iterator = null;
    return iterator;
  }

  advanceToKey(key, current) {
    let seek = current;

    while (seek !== null && seek.key !== key) {
      seek = this.advanceNode(seek);
    }

    return seek;
  }

  has(key) {
    return this.map.has(key);
  }

  get(key) {
    return this.map.get(key);
  }

  wasSeen(key) {
    let node = this.map.get(key);
    return node !== undefined && node.seen;
  }

  update(item) {
    let found = this.get(item.key);
    found.update(item);
    return found;
  }

  append(item) {
    let {
      map,
      list,
      iterable
    } = this;
    let node = new ListItem(iterable, item);
    map.set(item.key, node);
    list.append(node);
    return node;
  }

  insertBefore(item, reference) {
    let {
      map,
      list,
      iterable
    } = this;
    let node = new ListItem(iterable, item);
    map.set(item.key, node);
    node.retained = true;
    list.insertBefore(node, reference);
    return node;
  }

  move(item, reference) {
    let {
      list
    } = this;
    item.retained = true;
    list.remove(item);
    list.insertBefore(item, reference);
  }

  remove(item) {
    let {
      list
    } = this;
    list.remove(item);
    this.map.delete(item.key);
  }

  nextNode(item) {
    return this.list.nextNode(item);
  }

  advanceNode(item) {
    item.seen = true;
    return this.list.nextNode(item);
  }

  head() {
    return this.list.head();
  }

}
class ReferenceIterator {
  // if anyone needs to construct this object with something other than
  // an iterable, let @wycats know.
  constructor(iterable) {
    this.iterator = null;
    let artifacts = new IterationArtifacts(iterable);
    this.artifacts = artifacts;
  }

  next() {
    let {
      artifacts
    } = this;
    let iterator = this.iterator = this.iterator || artifacts.iterate();
    let item = iterator.next();
    if (item === null) return null;
    return artifacts.append(item);
  }

}
var Phase;

(function (Phase) {
  Phase[Phase["Append"] = 0] = "Append";
  Phase[Phase["Prune"] = 1] = "Prune";
  Phase[Phase["Done"] = 2] = "Done";
})(Phase || (Phase = {}));

const END = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('END');
class IteratorSynchronizer {
  constructor({
    target,
    artifacts,
    env
  }) {
    this.target = target;
    this.artifacts = artifacts;
    this.iterator = artifacts.iterate();
    this.current = artifacts.head();
    this.env = env;
  }

  sync() {
    let phase = Phase.Append;

    while (true) {
      switch (phase) {
        case Phase.Append:
          phase = this.nextAppend();
          break;

        case Phase.Prune:
          phase = this.nextPrune();
          break;

        case Phase.Done:
          this.nextDone();
          return;
      }
    }
  }

  advanceToKey(key) {
    let {
      current,
      artifacts
    } = this;
    if (current === null) return;
    let next = artifacts.advanceNode(current);

    if (next.key === key) {
      this.current = artifacts.advanceNode(next);
      return;
    }

    let seek = artifacts.advanceToKey(key, current);

    if (seek) {
      this.move(seek, current);
      this.current = artifacts.nextNode(current);
    }
  }

  move(item, reference) {
    if (item.next !== reference) {
      this.artifacts.move(item, reference);
      this.target.move(this.env, item.key, item.value, item.memo, reference ? reference.key : END);
    }
  }

  nextAppend() {
    let {
      iterator,
      current,
      artifacts
    } = this;
    let item = iterator.next();

    if (item === null) {
      return this.startPrune();
    }

    let {
      key
    } = item;

    if (current !== null && current.key === key) {
      this.nextRetain(item, current);
    } else if (artifacts.has(key)) {
      this.nextMove(item);
    } else {
      this.nextInsert(item);
    }

    return Phase.Append;
  }

  nextRetain(item, current) {
    let {
      artifacts
    } = this; // current = expect(current, 'BUG: current is empty');

    current.update(item);
    this.current = artifacts.nextNode(current);
    this.target.retain(this.env, item.key, current.value, current.memo);
  }

  nextMove(item) {
    let {
      current,
      artifacts
    } = this;
    let {
      key
    } = item;
    let found = artifacts.update(item);

    if (artifacts.wasSeen(key)) {
      this.move(found, current);
    } else {
      this.advanceToKey(key);
    }
  }

  nextInsert(item) {
    let {
      artifacts,
      target,
      current
    } = this;
    let node = artifacts.insertBefore(item, current);
    target.insert(this.env, node.key, node.value, node.memo, current ? current.key : null);
  }

  startPrune() {
    this.current = this.artifacts.head();
    return Phase.Prune;
  }

  nextPrune() {
    let {
      artifacts,
      target,
      current
    } = this;

    if (current === null) {
      return Phase.Done;
    }

    let node = current;
    this.current = artifacts.nextNode(node);

    if (node.shouldRemove()) {
      artifacts.remove(node);
      target.delete(this.env, node.key);
    } else {
      node.reset();
    }

    return Phase.Prune;
  }

  nextDone() {
    this.target.done(this.env);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/primitive.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@glimmer/reference/dist/modules/es2017/lib/primitive.js ***!
  \******************************************************************************/
/*! exports provided: PrimitiveReference, UNDEFINED_REFERENCE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimitiveReference", function() { return PrimitiveReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNDEFINED_REFERENCE", function() { return UNDEFINED_REFERENCE; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");

class PrimitiveReference {
  constructor(inner) {
    this.inner = inner;
    this.tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"];
  }

  value() {
    return this.inner;
  }

  get(_key) {
    return UNDEFINED_REFERENCE;
  }

}
const UNDEFINED_REFERENCE = new PrimitiveReference(undefined);

/***/ }),

/***/ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/reference.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@glimmer/reference/dist/modules/es2017/lib/reference.js ***!
  \******************************************************************************/
/*! exports provided: CachedReference, ReferenceCache, isModified */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CachedReference", function() { return CachedReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReferenceCache", function() { return ReferenceCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isModified", function() { return isModified; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");


class CachedReference {
  constructor() {
    this.lastRevision = null;
    this.lastValue = null;
  }

  value() {
    let {
      tag,
      lastRevision,
      lastValue
    } = this;

    if (lastRevision === null || !Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["validateTag"])(tag, lastRevision)) {
      lastValue = this.lastValue = this.compute();
      this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
    }

    return lastValue;
  }

  invalidate() {
    this.lastRevision = null;
  }

} //////////

class ReferenceCache {
  constructor(reference) {
    this.lastValue = null;
    this.lastRevision = null;
    this.initialized = false;
    this.tag = reference.tag;
    this.reference = reference;
  }

  peek() {
    if (!this.initialized) {
      return this.initialize();
    }

    return this.lastValue;
  }

  revalidate() {
    if (!this.initialized) {
      return this.initialize();
    }

    let {
      reference,
      lastRevision
    } = this;
    let tag = reference.tag;
    if (Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["validateTag"])(tag, lastRevision)) return NOT_MODIFIED;
    let {
      lastValue
    } = this;
    let currentValue = reference.value();
    this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
    if (currentValue === lastValue) return NOT_MODIFIED;
    this.lastValue = currentValue;
    return currentValue;
  }

  initialize() {
    let {
      reference
    } = this;
    let currentValue = this.lastValue = reference.value();
    this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(reference.tag);
    this.initialized = true;
    return currentValue;
  }

}
const NOT_MODIFIED = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('NOT_MODIFIED');
function isModified(value) {
  return value !== NOT_MODIFIED;
}

/***/ }),

/***/ "./node_modules/@glimmer/reference/dist/modules/es2017/lib/template.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@glimmer/reference/dist/modules/es2017/lib/template.js ***!
  \*****************************************************************************/
/*! exports provided: UPDATE_REFERENCED_VALUE, RootReference, ComponentRootReference, HelperRootReference, PropertyReference, IterationItemReference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_REFERENCED_VALUE", function() { return UPDATE_REFERENCED_VALUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RootReference", function() { return RootReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentRootReference", function() { return ComponentRootReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HelperRootReference", function() { return HelperRootReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertyReference", function() { return PropertyReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IterationItemReference", function() { return IterationItemReference; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");


const UPDATE_REFERENCED_VALUE = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('UPDATE_REFERENCED_VALUE');
/**
 * RootReferences refer to a constant root value within a template. For
 * instance, the `this` in `{{this.some.prop}}`. This is typically a:
 *
 * - Component
 * - Controller
 * - Helper
 *
 * Or another "top level" template construct, if you will. PropertyReferences
 * chain off a root reference in the template, and can then be passed around and
 * used at will.
 */

class RootReference {
  constructor(env) {
    this.env = env;
    this.children = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["dict"])();
    this.tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
  }

  get(key) {
    // References should in general be identical to one another, so we can usually
    // deduplicate them in production. However, in DEBUG we need unique references
    // so we can properly key off them for the logging context.
    if (true
    /* DEBUG */
    ) {
      // We register the template debug context now since the reference is
      // created before the component itself. It shouldn't be possible to cause
      // errors when accessing the root, only subproperties of the root, so this
      // should be fine for the time being. The exception is helpers, but they
      // set their context earlier.
      //
      // TODO: This points to a need for more first class support for arguments in
      // the debugRenderTree. The fact that we can't accurately relate an argument
      // reference to its component is problematic for debug tooling.
      if (!this.didSetupDebugContext) {
        this.didSetupDebugContext = true;
        this.env.setTemplatePathDebugContext(this, this.debugLogName || 'this', null);
      }

      return new PropertyReference(this, key, this.env);
    } else {}
  }

}
class ComponentRootReference extends RootReference {
  constructor(inner, env) {
    super(env);
    this.inner = inner;
  }

  value() {
    return this.inner;
  }

}
class HelperRootReference extends RootReference {
  constructor(fn, args, env, debugName) {
    super(env);
    this.fn = fn;
    this.args = args;
    this.computeRevision = null;
    this.computeTag = null;

    if (true
    /* DEBUG */
    ) {
      let name = debugName || fn.name;
      env.setTemplatePathDebugContext(this, "(result of a `".concat(name, "` helper)"), null);
      this.didSetupDebugContext = true;
    }

    if (Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConst"])(args)) {
      this.compute();
    }

    let {
      tag,
      computeTag
    } = this;

    if (computeTag !== null && Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConstTag"])(computeTag)) {
      // If the args are constant, and the first computation is constant, then
      // the helper itself is constant and will never update.
      tag = this.tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
      this.computeRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
    } else {
      let valueTag = this.valueTag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["createUpdatableTag"])();
      tag = this.tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["combine"])([args.tag, valueTag]);

      if (computeTag !== null) {
        // We computed once, so setup the cache state correctly
        Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["updateTag"])(valueTag, computeTag);
        this.computeRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
      }
    }
  }

  compute() {
    this.computeTag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["track"])(() => {
      this.computeValue = this.fn(this.args);
    },  true
    /* DEBUG */
    && this.env.getTemplatePathDebugContext(this));
  }

  value() {
    let {
      tag,
      computeRevision
    } = this;

    if (computeRevision === null || !Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["validateTag"])(tag, computeRevision)) {
      this.compute();
      Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["updateTag"])(this.valueTag, this.computeTag);
      this.computeRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
    }

    return this.computeValue;
  }

}
/**
 * PropertyReferences represent a property that has been accessed on a root, or
 * another property (or iterable, see below). `some` and `prop` in
 * `{{this.some.prop}}` are each property references, `some` being a property of
 * `this`, and `prop` being a property of `some`. They are constructed by
 * recursively calling `get` on the previous reference as a template chain is
 * followed.
 */

class PropertyReference {
  constructor(parentReference, propertyKey, env) {
    this.parentReference = parentReference;
    this.propertyKey = propertyKey;
    this.env = env;
    this.children = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["dict"])();
    this.lastRevision = null;

    if (true
    /* DEBUG */
    ) {
      env.setTemplatePathDebugContext(this, propertyKey, parentReference);
    }

    let valueTag = this.valueTag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["createUpdatableTag"])();
    let parentReferenceTag = parentReference.tag;
    this.tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["combine"])([parentReferenceTag, valueTag]);
  }

  value() {
    let {
      tag,
      lastRevision,
      lastValue,
      parentReference,
      valueTag,
      propertyKey
    } = this;

    if (lastRevision === null || !Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["validateTag"])(tag, lastRevision)) {
      let parentValue = parentReference.value();

      if (Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["isDict"])(parentValue)) {
        let combined = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["track"])(() => {
          lastValue = this.env.getPath(parentValue, propertyKey);
        },  true
        /* DEBUG */
        && this.env.getTemplatePathDebugContext(this));
        Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["updateTag"])(valueTag, combined);
      } else {
        lastValue = undefined;
      }

      this.lastValue = lastValue;
      this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
    }

    return lastValue;
  }

  get(key) {
    // References should in general be identical to one another, so we can usually
    // deduplicate them in production. However, in DEBUG we need unique references
    // so we can properly key off them for the logging context.
    if (true
    /* DEBUG */
    ) {
      return new PropertyReference(this, key, this.env);
    } else {}
  }

  [UPDATE_REFERENCED_VALUE](value) {
    let {
      parentReference,
      propertyKey
    } = this;
    let parentValue = parentReference.value();
    this.env.setPath(parentValue, propertyKey, value);
  }

} //////////

/**
 * IterationItemReferences represent an individual item in an iterable `each`.
 * They are similar to PropertyReferences, but since iteration items need to be
 * updated they have slightly different behavior. Concretely, they are the
 * `item` in:
 *
 * ```hbs
 * {{#each this.items as |item|}}
 *   {{item.foo}}
 * {{/each}}
 * ```
 *
 * Properties can chain off an iteration item, just like with the other template
 * reference types.
 */

class IterationItemReference {
  constructor(parentReference, itemValue, itemKey, env) {
    this.parentReference = parentReference;
    this.itemValue = itemValue;
    this.env = env;
    this.tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["createUpdatableTag"])();
    this.children = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["dict"])();

    if (true
    /* DEBUG */
    ) {
      env.setTemplatePathDebugContext(this, Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["debugToString"])(itemKey), parentReference);
    }
  }

  value() {
    return this.itemValue;
  }

  update(value) {
    Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["dirtyTag"])(this.tag);
    this.itemValue = value;
  }

  get(key) {
    // References should in general be identical to one another, so we can usually
    // deduplicate them in production. However, in DEBUG we need unique references
    // so we can properly key off them for the logging context.
    if (true
    /* DEBUG */
    ) {
      return new PropertyReference(this, key, this.env);
    } else {}
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/index.js ***!
  \********************************************************************/
/*! exports provided: clear, ConcreteBounds, CursorImpl, capabilityFlagsFrom, hasCapability, resetDebuggerCallback, setDebuggerCallback, CurriedComponentDefinition, curry, isCurriedComponentDefinition, DEFAULT_CAPABILITIES, MINIMAL_CAPABILITIES, SimpleComponentManager, TEMPLATE_ONLY_COMPONENT, DOMChanges, IDOMChanges, DOMTreeConstruction, isWhitespace, normalizeProperty, DefaultDynamicScope, AotRuntime, JitRuntime, EnvironmentImpl, ScopeImpl, inTransaction, getDynamicVar, ConditionalReference, NULL_REFERENCE, PrimitiveReference, UNDEFINED_REFERENCE, renderAot, renderAotComponent, renderAotMain, renderJitComponent, renderJitMain, renderSync, UpdatingVM, LowLevelVM, EMPTY_ARGS, CapturedArgumentsImpl, CapturedNamedArgumentsImpl, CapturedPositionalArgumentsImpl, DynamicAttribute, dynamicAttribute, SimpleDynamicAttribute, clientBuilder, NewElementBuilder, UpdatableBlockImpl, RemoteLiveBlock, isSerializationFirstNode, RehydrateBuilder, rehydrationBuilder, SERIALIZATION_FIRST_NODE_STRING */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/bootstrap */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bootstrap.js");
/* harmony import */ var _lib_bounds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/bounds */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clear", function() { return _lib_bounds__WEBPACK_IMPORTED_MODULE_1__["clear"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConcreteBounds", function() { return _lib_bounds__WEBPACK_IMPORTED_MODULE_1__["ConcreteBounds"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CursorImpl", function() { return _lib_bounds__WEBPACK_IMPORTED_MODULE_1__["CursorImpl"]; });

/* harmony import */ var _lib_capabilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/capabilities */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/capabilities.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "capabilityFlagsFrom", function() { return _lib_capabilities__WEBPACK_IMPORTED_MODULE_2__["capabilityFlagsFrom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasCapability", function() { return _lib_capabilities__WEBPACK_IMPORTED_MODULE_2__["hasCapability"]; });

/* harmony import */ var _lib_compiled_opcodes_debugger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/compiled/opcodes/debugger */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/debugger.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resetDebuggerCallback", function() { return _lib_compiled_opcodes_debugger__WEBPACK_IMPORTED_MODULE_3__["resetDebuggerCallback"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setDebuggerCallback", function() { return _lib_compiled_opcodes_debugger__WEBPACK_IMPORTED_MODULE_3__["setDebuggerCallback"]; });

/* harmony import */ var _lib_component_curried_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/component/curried-component */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/curried-component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CurriedComponentDefinition", function() { return _lib_component_curried_component__WEBPACK_IMPORTED_MODULE_4__["CurriedComponentDefinition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "curry", function() { return _lib_component_curried_component__WEBPACK_IMPORTED_MODULE_4__["curry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isCurriedComponentDefinition", function() { return _lib_component_curried_component__WEBPACK_IMPORTED_MODULE_4__["isCurriedComponentDefinition"]; });

/* harmony import */ var _lib_component_interfaces__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/component/interfaces */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/interfaces.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CAPABILITIES", function() { return _lib_component_interfaces__WEBPACK_IMPORTED_MODULE_5__["DEFAULT_CAPABILITIES"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MINIMAL_CAPABILITIES", function() { return _lib_component_interfaces__WEBPACK_IMPORTED_MODULE_5__["MINIMAL_CAPABILITIES"]; });

/* harmony import */ var _lib_component_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/component/manager */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/manager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SimpleComponentManager", function() { return _lib_component_manager__WEBPACK_IMPORTED_MODULE_6__["SimpleComponentManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TEMPLATE_ONLY_COMPONENT", function() { return _lib_component_manager__WEBPACK_IMPORTED_MODULE_6__["TEMPLATE_ONLY_COMPONENT"]; });

/* harmony import */ var _lib_dom_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/dom/helper */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/helper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DOMChanges", function() { return _lib_dom_helper__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IDOMChanges", function() { return _lib_dom_helper__WEBPACK_IMPORTED_MODULE_7__["DOMChangesImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DOMTreeConstruction", function() { return _lib_dom_helper__WEBPACK_IMPORTED_MODULE_7__["DOMTreeConstruction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isWhitespace", function() { return _lib_dom_helper__WEBPACK_IMPORTED_MODULE_7__["isWhitespace"]; });

/* harmony import */ var _lib_dom_props__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/dom/props */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/props.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "normalizeProperty", function() { return _lib_dom_props__WEBPACK_IMPORTED_MODULE_8__["normalizeProperty"]; });

/* harmony import */ var _lib_dynamic_scope__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/dynamic-scope */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dynamic-scope.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultDynamicScope", function() { return _lib_dynamic_scope__WEBPACK_IMPORTED_MODULE_9__["DefaultDynamicScope"]; });

/* harmony import */ var _lib_environment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/environment */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/environment.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AotRuntime", function() { return _lib_environment__WEBPACK_IMPORTED_MODULE_10__["AotRuntime"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JitRuntime", function() { return _lib_environment__WEBPACK_IMPORTED_MODULE_10__["JitRuntime"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EnvironmentImpl", function() { return _lib_environment__WEBPACK_IMPORTED_MODULE_10__["EnvironmentImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ScopeImpl", function() { return _lib_environment__WEBPACK_IMPORTED_MODULE_10__["ScopeImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "inTransaction", function() { return _lib_environment__WEBPACK_IMPORTED_MODULE_10__["inTransaction"]; });

/* harmony import */ var _lib_helpers_get_dynamic_var__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/helpers/get-dynamic-var */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/helpers/get-dynamic-var.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDynamicVar", function() { return _lib_helpers_get_dynamic_var__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _lib_references__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConditionalReference", function() { return _lib_references__WEBPACK_IMPORTED_MODULE_12__["ConditionalReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NULL_REFERENCE", function() { return _lib_references__WEBPACK_IMPORTED_MODULE_12__["NULL_REFERENCE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrimitiveReference", function() { return _lib_references__WEBPACK_IMPORTED_MODULE_12__["PrimitiveReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UNDEFINED_REFERENCE", function() { return _lib_references__WEBPACK_IMPORTED_MODULE_12__["UNDEFINED_REFERENCE"]; });

/* harmony import */ var _lib_render__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lib/render */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/render.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderAot", function() { return _lib_render__WEBPACK_IMPORTED_MODULE_13__["renderAot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderAotComponent", function() { return _lib_render__WEBPACK_IMPORTED_MODULE_13__["renderAotComponent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderAotMain", function() { return _lib_render__WEBPACK_IMPORTED_MODULE_13__["renderAotMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderJitComponent", function() { return _lib_render__WEBPACK_IMPORTED_MODULE_13__["renderJitComponent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderJitMain", function() { return _lib_render__WEBPACK_IMPORTED_MODULE_13__["renderJitMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderSync", function() { return _lib_render__WEBPACK_IMPORTED_MODULE_13__["renderSync"]; });

/* harmony import */ var _lib_vm__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lib/vm */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdatingVM", function() { return _lib_vm__WEBPACK_IMPORTED_MODULE_14__["UpdatingVM"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LowLevelVM", function() { return _lib_vm__WEBPACK_IMPORTED_MODULE_14__["VM"]; });

/* harmony import */ var _lib_vm_arguments__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lib/vm/arguments */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/arguments.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EMPTY_ARGS", function() { return _lib_vm_arguments__WEBPACK_IMPORTED_MODULE_15__["EMPTY_ARGS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CapturedArgumentsImpl", function() { return _lib_vm_arguments__WEBPACK_IMPORTED_MODULE_15__["CapturedArgumentsImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CapturedNamedArgumentsImpl", function() { return _lib_vm_arguments__WEBPACK_IMPORTED_MODULE_15__["CapturedNamedArgumentsImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CapturedPositionalArgumentsImpl", function() { return _lib_vm_arguments__WEBPACK_IMPORTED_MODULE_15__["CapturedPositionalArgumentsImpl"]; });

/* harmony import */ var _lib_vm_attributes_dynamic__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lib/vm/attributes/dynamic */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/attributes/dynamic.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DynamicAttribute", function() { return _lib_vm_attributes_dynamic__WEBPACK_IMPORTED_MODULE_16__["DynamicAttribute"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dynamicAttribute", function() { return _lib_vm_attributes_dynamic__WEBPACK_IMPORTED_MODULE_16__["dynamicAttribute"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SimpleDynamicAttribute", function() { return _lib_vm_attributes_dynamic__WEBPACK_IMPORTED_MODULE_16__["SimpleDynamicAttribute"]; });

/* harmony import */ var _lib_vm_element_builder__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./lib/vm/element-builder */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clientBuilder", function() { return _lib_vm_element_builder__WEBPACK_IMPORTED_MODULE_17__["clientBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NewElementBuilder", function() { return _lib_vm_element_builder__WEBPACK_IMPORTED_MODULE_17__["NewElementBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdatableBlockImpl", function() { return _lib_vm_element_builder__WEBPACK_IMPORTED_MODULE_17__["UpdatableBlockImpl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RemoteLiveBlock", function() { return _lib_vm_element_builder__WEBPACK_IMPORTED_MODULE_17__["RemoteLiveBlock"]; });

/* harmony import */ var _lib_vm_rehydrate_builder__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./lib/vm/rehydrate-builder */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/rehydrate-builder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSerializationFirstNode", function() { return _lib_vm_rehydrate_builder__WEBPACK_IMPORTED_MODULE_18__["isSerializationFirstNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RehydrateBuilder", function() { return _lib_vm_rehydrate_builder__WEBPACK_IMPORTED_MODULE_18__["RehydrateBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rehydrationBuilder", function() { return _lib_vm_rehydrate_builder__WEBPACK_IMPORTED_MODULE_18__["rehydrationBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SERIALIZATION_FIRST_NODE_STRING", function() { return _lib_vm_rehydrate_builder__WEBPACK_IMPORTED_MODULE_18__["SERIALIZATION_FIRST_NODE_STRING"]; });





















/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bootstrap.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bootstrap.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _compiled_opcodes_expressions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compiled/opcodes/expressions */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/expressions.js");
/* harmony import */ var _compiled_opcodes_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compiled/opcodes/component */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/component.js");
/* harmony import */ var _compiled_opcodes_content__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./compiled/opcodes/content */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/content.js");
/* harmony import */ var _compiled_opcodes_debugger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./compiled/opcodes/debugger */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/debugger.js");
/* harmony import */ var _compiled_opcodes_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./compiled/opcodes/dom */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/dom.js");
/* harmony import */ var _compiled_opcodes_partial__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./compiled/opcodes/partial */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/partial.js");
/* harmony import */ var _compiled_opcodes_vm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./compiled/opcodes/vm */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/vm.js");
/* harmony import */ var _compiled_opcodes_lists__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./compiled/opcodes/lists */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/lists.js");










/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js ***!
  \*************************************************************************/
/*! exports provided: CursorImpl, ConcreteBounds, SingleNodeBounds, move, clear */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CursorImpl", function() { return CursorImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConcreteBounds", function() { return ConcreteBounds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleNodeBounds", function() { return SingleNodeBounds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "move", function() { return move; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clear", function() { return clear; });
class CursorImpl {
  constructor(element, nextSibling) {
    this.element = element;
    this.nextSibling = nextSibling;
  }

}
class ConcreteBounds {
  constructor(parentNode, first, last) {
    this.parentNode = parentNode;
    this.first = first;
    this.last = last;
  }

  parentElement() {
    return this.parentNode;
  }

  firstNode() {
    return this.first;
  }

  lastNode() {
    return this.last;
  }

}
class SingleNodeBounds {
  constructor(parentNode, node) {
    this.parentNode = parentNode;
    this.node = node;
  }

  parentElement() {
    return this.parentNode;
  }

  firstNode() {
    return this.node;
  }

  lastNode() {
    return this.node;
  }

}
function move(bounds, reference) {
  let parent = bounds.parentElement();
  let first = bounds.firstNode();
  let last = bounds.lastNode();
  let current = first;

  while (true) {
    let next = current.nextSibling;
    parent.insertBefore(current, reference);

    if (current === last) {
      return next;
    }

    current = next;
  }
}
function clear(bounds) {
  let parent = bounds.parentElement();
  let first = bounds.firstNode();
  let last = bounds.lastNode();
  let current = first;

  while (true) {
    let next = current.nextSibling;
    parent.removeChild(current);

    if (current === last) {
      return next;
    }

    current = next;
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/capabilities.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/capabilities.js ***!
  \*******************************************************************************/
/*! exports provided: capabilityFlagsFrom, managerHasCapability, hasCapability */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capabilityFlagsFrom", function() { return capabilityFlagsFrom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "managerHasCapability", function() { return managerHasCapability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasCapability", function() { return hasCapability; });
/**
 * Converts a ComponentCapabilities object into a 32-bit integer representation.
 */
function capabilityFlagsFrom(capabilities) {
  return 0 | (capabilities.dynamicLayout ? 1
  /* DynamicLayout */
  : 0) | (capabilities.dynamicTag ? 2
  /* DynamicTag */
  : 0) | (capabilities.prepareArgs ? 4
  /* PrepareArgs */
  : 0) | (capabilities.createArgs ? 8
  /* CreateArgs */
  : 0) | (capabilities.attributeHook ? 16
  /* AttributeHook */
  : 0) | (capabilities.elementHook ? 32
  /* ElementHook */
  : 0) | (capabilities.dynamicScope ? 64
  /* DynamicScope */
  : 0) | (capabilities.createCaller ? 128
  /* CreateCaller */
  : 0) | (capabilities.updateHook ? 256
  /* UpdateHook */
  : 0) | (capabilities.createInstance ? 512
  /* CreateInstance */
  : 0) | (capabilities.wrapped ? 1024
  /* Wrapped */
  : 0) | (capabilities.willDestroy ? 2048
  /* WillDestroy */
  : 0);
}
function managerHasCapability(_manager, capabilities, capability) {
  return !!(capabilities & capability);
}
function hasCapability(capabilities, capability) {
  return !!(capabilities & capability);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/svg-inner-html-fix.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/svg-inner-html-fix.js ***!
  \********************************************************************************************/
/*! exports provided: SVG_NAMESPACE, applySVGInnerHTMLFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SVG_NAMESPACE", function() { return SVG_NAMESPACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applySVGInnerHTMLFix", function() { return applySVGInnerHTMLFix; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _dom_operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom/operations */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/operations.js");


const SVG_NAMESPACE = "http://www.w3.org/2000/svg"
/* SVG */
; // Patch:    insertAdjacentHTML on SVG Fix
// Browsers: Safari, IE, Edge, Firefox ~33-34
// Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
//           present but throws an exception on IE and Edge. Old versions of
//           Firefox create nodes in the incorrect namespace.
// Fix:      Since IE and Edge silently fail to create SVG nodes using
//           innerHTML, and because Firefox may create nodes in the incorrect
//           namespace using innerHTML on SVG elements, an HTML-string wrapping
//           approach is used. A pre/post SVG tag is added to the string, then
//           that whole string is added to a div. The created nodes are plucked
//           out and applied to the target location on DOM.

function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
  if (!document) return DOMClass;

  if (!shouldApplyFix(document, svgNamespace)) {
    return DOMClass;
  }

  let div = document.createElement('div');
  return class DOMChangesWithSVGInnerHTMLFix extends DOMClass {
    insertHTMLBefore(parent, nextSibling, html) {
      if (html === '') {
        return super.insertHTMLBefore(parent, nextSibling, html);
      }

      if (parent.namespaceURI !== svgNamespace) {
        return super.insertHTMLBefore(parent, nextSibling, html);
      }

      return fixSVG(parent, div, html, nextSibling);
    }

  };
}

function fixSVG(parent, div, html, reference) {
   false && false;
  let source; // This is important, because decendants of the <foreignObject> integration
  // point are parsed in the HTML namespace

  if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {
    // IE, Edge: also do not correctly support using `innerHTML` on SVG
    // namespaced elements. So here a wrapper is used.
    let wrappedHtml = '<svg><foreignObject>' + html + '</foreignObject></svg>';
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["clearElement"])(div);
    div.insertAdjacentHTML("afterbegin"
    /* afterbegin */
    , wrappedHtml);
    source = div.firstChild.firstChild;
  } else {
    // IE, Edge: also do not correctly support using `innerHTML` on SVG
    // namespaced elements. So here a wrapper is used.
    let wrappedHtml = '<svg>' + html + '</svg>';
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["clearElement"])(div);
    div.insertAdjacentHTML("afterbegin"
    /* afterbegin */
    , wrappedHtml);
    source = div.firstChild;
  }

  return Object(_dom_operations__WEBPACK_IMPORTED_MODULE_1__["moveNodesBefore"])(source, parent, reference);
}

function shouldApplyFix(document, svgNamespace) {
  let svg = document.createElementNS(svgNamespace, 'svg');

  try {
    svg.insertAdjacentHTML("beforeend"
    /* beforeend */
    , '<circle></circle>');
  } catch (e) {// IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
    // Safari: Will throw, insertAdjacentHTML is not present on SVG
  } finally {
    // FF: Old versions will create a node in the wrong namespace
    if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE) {
      // The test worked as expected, no fix required
      return false;
    }

    return true;
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/text-node-merging-fix.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/text-node-merging-fix.js ***!
  \***********************************************************************************************/
/*! exports provided: applyTextNodeMergingFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyTextNodeMergingFix", function() { return applyTextNodeMergingFix; });
// Patch:    Adjacent text node merging fix
// Browsers: IE, Edge, Firefox w/o inspector open
// Reason:   These browsers will merge adjacent text nodes. For exmaple given
//           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
//           with proper behavior will populate div.childNodes with two items.
//           These browsers will populate it with one merged node instead.
// Fix:      Add these nodes to a wrapper element, then iterate the childNodes
//           of that wrapper and move the nodes to their target location. Note
//           that potential SVG bugs will have been handled before this fix.
//           Note that this fix must only apply to the previous text node, as
//           the base implementation of `insertHTMLBefore` already handles
//           following text nodes correctly.
function applyTextNodeMergingFix(document, DOMClass) {
  if (!document) return DOMClass;

  if (!shouldApplyFix(document)) {
    return DOMClass;
  }

  return class DOMChangesWithTextNodeMergingFix extends DOMClass {
    constructor(document) {
      super(document);
      this.uselessComment = document.createComment('');
    }

    insertHTMLBefore(parent, nextSibling, html) {
      if (html === '') {
        return super.insertHTMLBefore(parent, nextSibling, html);
      }

      let didSetUselessComment = false;
      let nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;

      if (nextPrevious && nextPrevious instanceof Text) {
        didSetUselessComment = true;
        parent.insertBefore(this.uselessComment, nextSibling);
      }

      let bounds = super.insertHTMLBefore(parent, nextSibling, html);

      if (didSetUselessComment) {
        parent.removeChild(this.uselessComment);
      }

      return bounds;
    }

  };
}

function shouldApplyFix(document) {
  let mergingTextDiv = document.createElement('div');
  mergingTextDiv.appendChild(document.createTextNode('first'));
  mergingTextDiv.insertAdjacentHTML("beforeend"
  /* beforeend */
  , 'second');

  if (mergingTextDiv.childNodes.length === 2) {
    // It worked as expected, no fix required
    return false;
  }

  return true;
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/expressions/concat.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/expressions/concat.js ***!
  \**********************************************************************************************/
/*! exports provided: ConcatReference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConcatReference", function() { return ConcatReference; });
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _utils_tags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/tags */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/utils/tags.js");


class ConcatReference extends _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["CachedReference"] {
  constructor(parts) {
    super();
    this.parts = parts;
    this.tag = Object(_utils_tags__WEBPACK_IMPORTED_MODULE_1__["combineTagged"])(parts);
  }

  compute() {
    let parts = new Array();

    for (let i = 0; i < this.parts.length; i++) {
      let value = this.parts[i].value();

      if (value !== null && value !== undefined) {
        parts[i] = castToString(value);
      }
    }

    if (parts.length > 0) {
      return parts.join('');
    }

    return null;
  }

}

function castToString(value) {
  if (typeof value.toString !== 'function') {
    return '';
  }

  return String(value);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/assert.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/assert.js ***!
  \******************************************************************************************/
/*! exports provided: stackAssert */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stackAssert", function() { return stackAssert; });
function stackAssert(name, top) {
  return "Expected top of stack to be ".concat(name, ", was ").concat(String(top));
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/component.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/component.js ***!
  \*********************************************************************************************/
/*! exports provided: COMPONENT_INSTANCE, ComponentElementOperations, hasStaticLayoutCapability, hasJitStaticLayoutCapability, hasDynamicLayoutCapability, UpdateComponentOpcode, DidUpdateLayoutOpcode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPONENT_INSTANCE", function() { return COMPONENT_INSTANCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentElementOperations", function() { return ComponentElementOperations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasStaticLayoutCapability", function() { return hasStaticLayoutCapability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasJitStaticLayoutCapability", function() { return hasJitStaticLayoutCapability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasDynamicLayoutCapability", function() { return hasDynamicLayoutCapability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateComponentOpcode", function() { return UpdateComponentOpcode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DidUpdateLayoutOpcode", function() { return DidUpdateLayoutOpcode; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _capabilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../capabilities */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/capabilities.js");
/* harmony import */ var _component_curried_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../component/curried-component */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/curried-component.js");
/* harmony import */ var _component_resolve__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../component/resolve */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/resolve.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _references_class_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../references/class-list */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/class-list.js");
/* harmony import */ var _references_curry_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../references/curry-component */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/curry-component.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");
/* harmony import */ var _content__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./content */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/content.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dom */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/dom.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");














/**
 * The VM creates a new ComponentInstance data structure for every component
 * invocation it encounters.
 *
 * Similar to how a ComponentDefinition contains state about all components of a
 * particular type, a ComponentInstance contains state specific to a particular
 * instance of a component type. It also contains a pointer back to its
 * component type's ComponentDefinition.
 */
const COMPONENT_INSTANCE = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["symbol"])('COMPONENT_INSTANCE');
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(77
/* IsComponent */
, vm => {
  let stack = vm.stack;
  let ref = stack.pop();
  stack.push(new _references__WEBPACK_IMPORTED_MODULE_12__["ConditionalReference"](ref, _component_curried_component__WEBPACK_IMPORTED_MODULE_4__["isCurriedComponentDefinition"]));
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(78
/* ContentType */
, vm => {
  let stack = vm.stack;
  let ref = stack.peek();
  stack.push(new _content__WEBPACK_IMPORTED_MODULE_10__["ContentTypeReference"](ref));
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(79
/* CurryComponent */
, (vm, {
  op1: _meta
}) => {
  let stack = vm.stack;
  let definition = stack.pop();
  let capturedArgs = stack.pop();
  let meta = vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getTemplateMeta(_meta);
  let resolver = vm.runtime.resolver;
  vm.loadValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$v0"], new _references_curry_component__WEBPACK_IMPORTED_MODULE_8__["default"](definition, resolver, meta, capturedArgs)); // expectStackChange(vm.stack, -args.length - 1, 'CurryComponent');
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(80
/* PushComponentDefinition */
, (vm, {
  op1: handle
}) => {
  let definition = vm.runtime.resolver.resolve(handle);
   false && false;
  let {
    manager
  } = definition;
  let capabilities = Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["capabilityFlagsFrom"])(manager.getCapabilities(definition.state));
  let instance = {
    [COMPONENT_INSTANCE]: true,
    definition,
    manager,
    capabilities,
    state: null,
    handle: null,
    table: null,
    lookup: null
  };
  vm.stack.push(instance);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(83
/* ResolveDynamicComponent */
, (vm, {
  op1: _meta
}) => {
  let stack = vm.stack;
  let component = stack.pop().value();
  let meta = vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getTemplateMeta(_meta);
  vm.loadValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t1"], null); // Clear the temp register

  let definition;

  if (typeof component === 'string') {
    let resolvedDefinition = Object(_component_resolve__WEBPACK_IMPORTED_MODULE_5__["resolveComponent"])(vm.runtime.resolver, component, meta);
    definition = resolvedDefinition;
  } else if (Object(_component_curried_component__WEBPACK_IMPORTED_MODULE_4__["isCurriedComponentDefinition"])(component)) {
    definition = component;
  } else {
    throw Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["unreachable"])();
  }

  stack.push(definition);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(81
/* PushDynamicComponentInstance */
, vm => {
  let {
    stack
  } = vm;
  let definition = stack.pop();
  let capabilities, manager;

  if (Object(_component_curried_component__WEBPACK_IMPORTED_MODULE_4__["isCurriedComponentDefinition"])(definition)) {
    manager = capabilities = null;
  } else {
    manager = definition.manager;
    capabilities = Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["capabilityFlagsFrom"])(manager.getCapabilities(definition.state));
  }

  stack.push({
    definition,
    capabilities,
    manager,
    state: null,
    handle: null,
    table: null
  });
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(82
/* PushCurriedComponent */
, vm => {
  let stack = vm.stack;
  let component = stack.pop().value();
  let definition;

  if (Object(_component_curried_component__WEBPACK_IMPORTED_MODULE_4__["isCurriedComponentDefinition"])(component)) {
    definition = component;
  } else {
    throw Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["unreachable"])();
  }

  stack.push(definition);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(84
/* PushArgs */
, (vm, {
  op1: _names,
  op2: flags
}) => {
  let stack = vm.stack;
  let names = vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getStringArray(_names);
  let positionalCount = flags >> 4;
  let atNames = flags & 0b1000;
  let blockNames = [];
  if (flags & 0b0100) blockNames.push('main');
  if (flags & 0b0010) blockNames.push('else');
  if (flags & 0b0001) blockNames.push('attrs');
  vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["ARGS"]].setup(stack, names, blockNames, positionalCount, !!atNames);
  stack.push(vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["ARGS"]]);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(85
/* PushEmptyArgs */
, vm => {
  let {
    stack
  } = vm;
  stack.push(vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["ARGS"]].empty(stack));
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(88
/* CaptureArgs */
, vm => {
  let stack = vm.stack;
  let args = stack.pop();
  let capturedArgs = args.capture();
  stack.push(capturedArgs);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(87
/* PrepareArgs */
, (vm, {
  op1: _state
}) => {
  let stack = vm.stack;
  let instance = vm.fetchValue(_state);
  let args = stack.pop();
  let {
    definition
  } = instance;

  if (Object(_component_curried_component__WEBPACK_IMPORTED_MODULE_4__["isCurriedComponentDefinition"])(definition)) {
     false && false;
    definition = resolveCurriedComponentDefinition(instance, definition, args);
  }

  let {
    manager,
    state
  } = definition;
  let capabilities = instance.capabilities;

  if (!Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(manager, capabilities, 4
  /* PrepareArgs */
  )) {
    stack.push(args);
    return;
  }

  let blocks = args.blocks.values;
  let blockNames = args.blocks.names;
  let preparedArgs = manager.prepareArgs(state, args);

  if (preparedArgs) {
    args.clear();

    for (let i = 0; i < blocks.length; i++) {
      stack.push(blocks[i]);
    }

    let {
      positional,
      named
    } = preparedArgs;
    let positionalCount = positional.length;

    for (let i = 0; i < positionalCount; i++) {
      stack.push(positional[i]);
    }

    let names = Object.keys(named);

    for (let i = 0; i < names.length; i++) {
      stack.push(named[names[i]]);
    }

    args.setup(stack, names, blockNames, positionalCount, false);
  }

  stack.push(args);
});

function resolveCurriedComponentDefinition(instance, definition, args) {
  let unwrappedDefinition = instance.definition = definition.unwrap(args);
  let {
    manager,
    state
  } = unwrappedDefinition;
   false && false;
   false && false;
  instance.manager = manager;
  instance.capabilities = Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["capabilityFlagsFrom"])(manager.getCapabilities(state));
  return unwrappedDefinition;
}

_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(89
/* CreateComponent */
, (vm, {
  op1: flags,
  op2: _state
}) => {
  let instance = vm.fetchValue(_state);
  let {
    definition,
    manager
  } = instance;
  let capabilities = instance.capabilities = Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["capabilityFlagsFrom"])(manager.getCapabilities(definition.state));

  if (!Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(manager, capabilities, 512
  /* CreateInstance */
  )) {
    throw new Error("BUG");
  }

  let dynamicScope = null;

  if (Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(manager, capabilities, 64
  /* DynamicScope */
  )) {
    dynamicScope = vm.dynamicScope();
  }

  let hasDefaultBlock = flags & 1;
  let args = null;

  if (Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(manager, capabilities, 8
  /* CreateArgs */
  )) {
    args = vm.stack.peek();
  }

  let self = null;

  if (Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(manager, capabilities, 128
  /* CreateCaller */
  )) {
    self = vm.getSelf();
  }

  let state = manager.create(vm.env, definition.state, args, dynamicScope, self, !!hasDefaultBlock); // We want to reuse the `state` POJO here, because we know that the opcodes
  // only transition at exactly one place.

  instance.state = state;
  let tag = manager.getTag(state);

  if (Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(manager, capabilities, 256
  /* UpdateHook */
  ) && !Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["isConstTag"])(tag)) {
    vm.updateWith(new UpdateComponentOpcode(tag, state, manager, dynamicScope));
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(90
/* RegisterComponentDestructor */
, (vm, {
  op1: _state
}) => {
  let {
    manager,
    state,
    capabilities
  } = vm.fetchValue(_state);
  let d = manager.getDestructor(state);

  if ( true
  /* DEBUG */
  && !Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["hasCapability"])(capabilities, 2048
  /* WillDestroy */
  ) && d !== null && typeof 'willDestroy' in d) {
    throw new Error('BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into');
  }

  if (d) vm.associateDestroyable(d);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(100
/* BeginComponentTransaction */
, vm => {
  vm.beginCacheGroup();
  vm.elements().pushSimpleBlock();
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(91
/* PutComponentOperations */
, vm => {
  vm.loadValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t0"], new ComponentElementOperations());
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(53
/* ComponentAttr */
, (vm, {
  op1: _name,
  op2: trusting,
  op3: _namespace
}) => {
  let name = vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getString(_name);
  let reference = vm.stack.pop();
  let namespace = _namespace ? vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getString(_namespace) : null;
  vm.fetchValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t0"]).setAttribute(name, reference, !!trusting, namespace);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(108
/* StaticComponentAttr */
, (vm, {
  op1: _name,
  op2: _value,
  op3: _namespace
}) => {
  let name = vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getString(_name);
  let value = vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getString(_value);
  let namespace = _namespace ? vm[_symbols__WEBPACK_IMPORTED_MODULE_9__["CONSTANTS"]].getString(_namespace) : null;
  vm.fetchValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t0"]).setStaticAttribute(name, value, namespace);
});
class ComponentElementOperations {
  constructor() {
    this.attributes = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["dict"])();
    this.classes = [];
    this.modifiers = [];
  }

  setAttribute(name, value, trusting, namespace) {
    let deferred = {
      value,
      namespace,
      trusting
    };

    if (name === 'class') {
      this.classes.push(value);
    }

    this.attributes[name] = deferred;
  }

  setStaticAttribute(name, value, namespace) {
    let deferred = {
      value,
      namespace
    };

    if (name === 'class') {
      this.classes.push(value);
    }

    this.attributes[name] = deferred;
  }

  addModifier(manager, state) {
    this.modifiers.push([manager, state]);
  }

  flush(vm) {
    let type;
    let attributes = this.attributes;

    for (let name in this.attributes) {
      if (name === 'type') {
        type = attributes[name];
        continue;
      }

      let attr = this.attributes[name];

      if (name === 'class') {
        setDeferredAttr(vm, 'class', mergeClasses(this.classes), attr.namespace, attr.trusting);
      } else {
        setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);
      }
    }

    if (type !== undefined) {
      setDeferredAttr(vm, 'type', type.value, type.namespace, type.trusting);
    }

    return this.modifiers;
  }

}

function mergeClasses(classes) {
  if (classes.length === 0) {
    return '';
  }

  if (classes.length === 1) {
    return classes[0];
  }

  if (allStringClasses(classes)) {
    return classes.join(' ');
  }

  return makeClassList(classes);
}

function makeClassList(classes) {
  for (let i = 0; i < classes.length; i++) {
    const value = classes[i];

    if (typeof value === 'string') {
      classes[i] = _references__WEBPACK_IMPORTED_MODULE_12__["PrimitiveReference"].create(value);
    }
  }

  return new _references_class_list__WEBPACK_IMPORTED_MODULE_7__["default"](classes);
}

function allStringClasses(classes) {
  for (let i = 0; i < classes.length; i++) {
    if (typeof classes[i] !== 'string') {
      return false;
    }
  }

  return true;
}

function setDeferredAttr(vm, name, value, namespace, trusting = false) {
  if (typeof value === 'string') {
    vm.elements().setStaticAttribute(name, value, namespace);
  } else {
    let attribute = vm.elements().setDynamicAttribute(name, value.value(), trusting, namespace);

    if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["isConst"])(value)) {
      vm.updateWith(new _dom__WEBPACK_IMPORTED_MODULE_11__["UpdateDynamicAttributeOpcode"](value, attribute));
    }
  }
}

_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(102
/* DidCreateElement */
, (vm, {
  op1: _state
}) => {
  let {
    definition,
    state
  } = vm.fetchValue(_state);
  let {
    manager
  } = definition;
  let operations = vm.fetchValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t0"]);
  manager.didCreateElement(state, vm.elements().constructing, operations);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(92
/* GetComponentSelf */
, (vm, {
  op1: _state
}) => {
  let {
    definition,
    state
  } = vm.fetchValue(_state);
  let {
    manager
  } = definition;
  vm.stack.push(manager.getSelf(state));
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(93
/* GetComponentTagName */
, (vm, {
  op1: _state
}) => {
  let {
    definition,
    state
  } = vm.fetchValue(_state);
  let {
    manager
  } = definition;
  vm.stack.push(manager.getTagName(state));
}); // Dynamic Invocation Only

_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(95
/* GetJitComponentLayout */
, (vm, {
  op1: _state
}) => {
  let instance = vm.fetchValue(_state);
  let manager = instance.manager;
  let {
    definition
  } = instance;
  let {
    stack
  } = vm;
  let {
    capabilities
  } = instance; // let invoke: { handle: number; symbolTable: ProgramSymbolTable };

  let layout;

  if (hasStaticLayoutCapability(capabilities, manager)) {
    layout = manager.getJitStaticLayout(definition.state, vm.runtime.resolver);
  } else if (hasDynamicLayoutCapability(capabilities, manager)) {
    let template = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["unwrapTemplate"])(manager.getJitDynamicLayout(instance.state, vm.runtime.resolver));

    if (Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["hasCapability"])(capabilities, 1024
    /* Wrapped */
    )) {
      layout = template.asWrappedLayout();
    } else {
      layout = template.asLayout();
    }
  } else {
    throw Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["unreachable"])();
  }

  let handle = layout.compile(vm.context);
  stack.push(layout.symbolTable);
  stack.push(handle);
}, 'jit'); // Dynamic Invocation Only

_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(94
/* GetAotComponentLayout */
, (vm, {
  op1: _state
}) => {
  let instance = vm.fetchValue(_state);
  let {
    manager,
    definition
  } = instance;
  let {
    stack
  } = vm;
  let {
    state: instanceState,
    capabilities
  } = instance;
  let {
    state: definitionState
  } = definition;
  let invoke;

  if (hasStaticLayoutCapability(capabilities, manager)) {
    invoke = manager.getAotStaticLayout(definitionState, vm.runtime.resolver);
  } else if (hasDynamicLayoutCapability(capabilities, manager)) {
    invoke = manager.getAotDynamicLayout(instanceState, vm.runtime.resolver);
  } else {
    throw Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["unreachable"])();
  }

  stack.push(invoke.symbolTable);
  stack.push(invoke.handle);
}); // These types are absurd here

function hasStaticLayoutCapability(capabilities, _manager) {
  return Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(_manager, capabilities, 1
  /* DynamicLayout */
  ) === false;
}
function hasJitStaticLayoutCapability(capabilities, _manager) {
  return Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(_manager, capabilities, 1
  /* DynamicLayout */
  ) === false;
}
function hasDynamicLayoutCapability(capabilities, _manager) {
  return Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(_manager, capabilities, 1
  /* DynamicLayout */
  ) === true;
}
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(76
/* Main */
, (vm, {
  op1: register
}) => {
  let definition = vm.stack.pop();
  let invocation = vm.stack.pop();
  let {
    manager
  } = definition;
  let capabilities = Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["capabilityFlagsFrom"])(manager.getCapabilities(definition.state));
  let state = {
    [COMPONENT_INSTANCE]: true,
    definition,
    manager,
    capabilities,
    state: null,
    handle: invocation.handle,
    table: invocation.symbolTable,
    lookup: null
  };
  vm.loadValue(register, state);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(98
/* PopulateLayout */
, (vm, {
  op1: _state
}) => {
  let {
    stack
  } = vm;
  let handle = stack.pop();
  let table = stack.pop();
  let state = vm.fetchValue(_state);
  state.handle = handle;
  state.table = table;
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(38
/* VirtualRootScope */
, (vm, {
  op1: _state
}) => {
  let {
    symbols
  } = vm.fetchValue(_state).table;
  vm.pushRootScope(symbols.length + 1);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(97
/* SetupForEval */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);

  if (state.table.hasEval) {
    let lookup = state.lookup = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["dict"])();
    vm.scope().bindEvalScope(lookup);
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(17
/* SetNamedVariables */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);
  let scope = vm.scope();
  let args = vm.stack.peek();
  let callerNames = args.named.atNames;

  for (let i = callerNames.length - 1; i >= 0; i--) {
    let atName = callerNames[i];
    let symbol = state.table.symbols.indexOf(callerNames[i]);
    let value = args.named.get(atName, true);
    if (symbol !== -1) scope.bindSymbol(symbol + 1, value);
    if (state.lookup) state.lookup[atName] = value;
  }
});

function bindBlock(symbolName, blockName, state, blocks, vm) {
  let symbol = state.table.symbols.indexOf(symbolName);
  let block = blocks.get(blockName);

  if (symbol !== -1) {
    vm.scope().bindBlock(symbol + 1, block);
  }

  if (state.lookup) state.lookup[symbolName] = block;
}

_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(18
/* SetBlocks */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);
  let {
    blocks
  } = vm.stack.peek();
  bindBlock('&attrs', 'attrs', state, blocks, vm);
  bindBlock('&else', 'else', state, blocks, vm);
  bindBlock('&default', 'main', state, blocks, vm);
}); // Dynamic Invocation Only

_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(99
/* InvokeComponentLayout */
, (vm, {
  op1: _state
}) => {
  let state = vm.fetchValue(_state);
  vm.call(state.handle);
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(103
/* DidRenderLayout */
, (vm, {
  op1: _state
}) => {
  let {
    manager,
    state,
    capabilities
  } = vm.fetchValue(_state);
  let bounds = vm.elements().popBlock();

  if (!Object(_capabilities__WEBPACK_IMPORTED_MODULE_3__["managerHasCapability"])(manager, capabilities, 512
  /* CreateInstance */
  )) {
    throw new Error("BUG");
  }

  let mgr = manager;
  mgr.didRenderLayout(state, bounds);
  vm.env.didCreate(state, manager);
  vm.updateWith(new DidUpdateLayoutOpcode(manager, state, bounds));
});
_opcodes__WEBPACK_IMPORTED_MODULE_6__["APPEND_OPCODES"].add(101
/* CommitComponentTransaction */
, vm => {
  vm.commitCacheGroup();
});
class UpdateComponentOpcode extends _opcodes__WEBPACK_IMPORTED_MODULE_6__["UpdatingOpcode"] {
  constructor(tag, component, manager, dynamicScope) {
    super();
    this.tag = tag;
    this.component = component;
    this.manager = manager;
    this.dynamicScope = dynamicScope;
    this.type = 'update-component';
  }

  evaluate(_vm) {
    let {
      component,
      manager,
      dynamicScope
    } = this;
    manager.update(component, dynamicScope);
  }

}
class DidUpdateLayoutOpcode extends _opcodes__WEBPACK_IMPORTED_MODULE_6__["UpdatingOpcode"] {
  constructor(manager, component, bounds) {
    super();
    this.manager = manager;
    this.component = component;
    this.bounds = bounds;
    this.type = 'did-update-layout';
    this.tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"];
  }

  evaluate(vm) {
    let {
      manager,
      component,
      bounds
    } = this;
    manager.didUpdateLayout(component, bounds);
    vm.env.didUpdate(component, manager);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/content.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/content.js ***!
  \*******************************************************************************************/
/*! exports provided: IsCurriedComponentDefinitionReference, ContentTypeReference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IsCurriedComponentDefinitionReference", function() { return IsCurriedComponentDefinitionReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentTypeReference", function() { return ContentTypeReference; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");
/* harmony import */ var _component_curried_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../component/curried-component */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/curried-component.js");
/* harmony import */ var _dom_normalize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../dom/normalize */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js");
/* harmony import */ var _vm_content_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vm/content/text */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/content/text.js");






class IsCurriedComponentDefinitionReference extends _references__WEBPACK_IMPORTED_MODULE_2__["ConditionalReference"] {
  static create(inner) {
    return new _references__WEBPACK_IMPORTED_MODULE_2__["ConditionalReference"](inner, _component_curried_component__WEBPACK_IMPORTED_MODULE_3__["isCurriedComponentDefinition"]);
  }

}
class ContentTypeReference {
  constructor(inner) {
    this.inner = inner;
    this.tag = inner.tag;
  }

  value() {
    let value = this.inner.value();

    if (Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_4__["shouldCoerce"])(value)) {
      return 1
      /* String */
      ;
    } else if (Object(_component_curried_component__WEBPACK_IMPORTED_MODULE_3__["isComponentDefinition"])(value)) {
      return 0
      /* Component */
      ;
    } else if (Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_4__["isSafeString"])(value)) {
      return 3
      /* SafeString */
      ;
    } else if (Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_4__["isFragment"])(value)) {
      return 4
      /* Fragment */
      ;
    } else if (Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_4__["isNode"])(value)) {
      return 5
      /* Node */
      ;
    } else {
        return 1
        /* String */
        ;
      }
  }

}
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(43
/* AppendHTML */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = reference.value();
  let value = Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_4__["isEmpty"])(rawValue) ? '' : String(rawValue);
  vm.elements().appendDynamicHTML(value);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(44
/* AppendSafeHTML */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = reference.value().toHTML();
  let value = Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_4__["isEmpty"])(rawValue) ? '' : rawValue;
  vm.elements().appendDynamicHTML(value);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(47
/* AppendText */
, vm => {
  let reference = vm.stack.pop();
  let rawValue = reference.value();
  let value = Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_4__["isEmpty"])(rawValue) ? '' : String(rawValue);
  let node = vm.elements().appendDynamicText(value);

  if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["isConst"])(reference)) {
    vm.updateWith(new _vm_content_text__WEBPACK_IMPORTED_MODULE_5__["default"](node, reference, value));
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(45
/* AppendDocumentFragment */
, vm => {
  let reference = vm.stack.pop();
  let value = reference.value();
  vm.elements().appendDynamicFragment(value);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(46
/* AppendNode */
, vm => {
  let reference = vm.stack.pop();
  let value = reference.value();
  vm.elements().appendDynamicNode(value);
});

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/debugger.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/debugger.js ***!
  \********************************************************************************************/
/*! exports provided: setDebuggerCallback, resetDebuggerCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDebuggerCallback", function() { return setDebuggerCallback; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetDebuggerCallback", function() { return resetDebuggerCallback; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");




function debugCallback(context, get) {
  console.info('Use `context`, and `get(<path>)` to debug this template.'); // for example...
  // eslint-disable-next-line no-unused-expressions

  context === get('this'); // eslint-disable-next-line no-debugger

  debugger;
}

let callback = debugCallback; // For testing purposes

function setDebuggerCallback(cb) {
  callback = cb;
}
function resetDebuggerCallback() {
  callback = debugCallback;
}

class ScopeInspector {
  constructor(scope, symbols, evalInfo) {
    this.scope = scope;
    this.locals = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["dict"])();

    for (let i = 0; i < evalInfo.length; i++) {
      let slot = evalInfo[i];
      let name = symbols[slot - 1];
      let ref = scope.getSymbol(slot);
      this.locals[name] = ref;
    }
  }

  get(path) {
    let {
      scope,
      locals
    } = this;
    let parts = path.split('.');
    let [head, ...tail] = path.split('.');
    let evalScope = scope.getEvalScope();
    let ref;

    if (head === 'this') {
      ref = scope.getSelf();
    } else if (locals[head]) {
      ref = locals[head];
    } else if (head.indexOf('@') === 0 && evalScope[head]) {
      ref = evalScope[head];
    } else {
      ref = this.scope.getSelf();
      tail = parts;
    }

    return tail.reduce((r, part) => r.get(part), ref);
  }

}

_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(106
/* Debugger */
, (vm, {
  op1: _symbols,
  op2: _evalInfo
}) => {
  let symbols = vm[_symbols__WEBPACK_IMPORTED_MODULE_2__["CONSTANTS"]].getStringArray(_symbols);
  let evalInfo = vm[_symbols__WEBPACK_IMPORTED_MODULE_2__["CONSTANTS"]].getArray(_evalInfo);
  let inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);
  callback(vm.getSelf().value(), path => inspector.get(path).value());
});

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/dom.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/dom.js ***!
  \***************************************************************************************/
/*! exports provided: UpdateModifierOpcode, UpdateDynamicAttributeOpcode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateModifierOpcode", function() { return UpdateModifierOpcode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateDynamicAttributeOpcode", function() { return UpdateDynamicAttributeOpcode; });
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _vm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vm */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/vm.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");






_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(41
/* Text */
, (vm, {
  op1: text
}) => {
  vm.elements().appendText(vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(text));
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(42
/* Comment */
, (vm, {
  op1: text
}) => {
  vm.elements().appendComment(vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(text));
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(48
/* OpenElement */
, (vm, {
  op1: tag
}) => {
  vm.elements().openElement(vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(tag));
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(49
/* OpenDynamicElement */
, vm => {
  let tagName = vm.stack.pop().value();
  vm.elements().openElement(tagName);
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(50
/* PushRemoteElement */
, vm => {
  let elementRef = vm.stack.pop();
  let insertBeforeRef = vm.stack.pop();
  let guidRef = vm.stack.pop();
  let element;
  let insertBefore;
  let guid = guidRef.value();

  if (Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConst"])(elementRef)) {
    element = elementRef.value();
  } else {
    let cache = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ReferenceCache"](elementRef);
    element = cache.peek();
    vm.updateWith(new _vm__WEBPACK_IMPORTED_MODULE_4__["Assert"](cache));
  }

  if (insertBeforeRef.value() !== undefined) {
    if (Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConst"])(insertBeforeRef)) {
      insertBefore = insertBeforeRef.value();
    } else {
      let cache = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ReferenceCache"](insertBeforeRef);
      insertBefore = cache.peek();
      vm.updateWith(new _vm__WEBPACK_IMPORTED_MODULE_4__["Assert"](cache));
    }
  }

  let block = vm.elements().pushRemoteElement(element, guid, insertBefore);
  if (block) vm.associateDestroyable(block);
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(56
/* PopRemoteElement */
, vm => {
  vm.elements().popRemoteElement();
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(54
/* FlushElement */
, vm => {
  let operations = vm.fetchValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t0"]);
  let modifiers = null;

  if (operations) {
    modifiers = operations.flush(vm);
    vm.loadValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t0"], null);
  }

  vm.elements().flushElement(modifiers);
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(55
/* CloseElement */
, vm => {
  let modifiers = vm.elements().closeElement();

  if (modifiers) {
    modifiers.forEach(([manager, modifier]) => {
      vm.env.scheduleInstallModifier(modifier, manager);
      let d = manager.getDestructor(modifier);

      if (d) {
        vm.associateDestroyable(d);
      }
    });
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(57
/* Modifier */
, (vm, {
  op1: handle
}) => {
  let {
    manager,
    state
  } = vm.runtime.resolver.resolve(handle);
  let stack = vm.stack;
  let args = stack.pop();
  let {
    constructing,
    updateOperations
  } = vm.elements();
  let dynamicScope = vm.dynamicScope();
  let modifier = manager.create(constructing, state, args, dynamicScope, updateOperations);
  let operations = vm.fetchValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$t0"]);
  operations.addModifier(manager, modifier);
  let tag = manager.getTag(modifier);

  if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConstTag"])(tag)) {
    vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));
  }
});
class UpdateModifierOpcode extends _opcodes__WEBPACK_IMPORTED_MODULE_3__["UpdatingOpcode"] {
  constructor(tag, manager, modifier) {
    super();
    this.tag = tag;
    this.manager = manager;
    this.modifier = modifier;
    this.type = 'update-modifier';
    this.lastUpdated = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
  }

  evaluate(vm) {
    let {
      manager,
      modifier,
      tag,
      lastUpdated
    } = this;

    if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["validateTag"])(tag, lastUpdated)) {
      vm.env.scheduleUpdateModifier(modifier, manager);
      this.lastUpdated = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
    }
  }

}
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(51
/* StaticAttr */
, (vm, {
  op1: _name,
  op2: _value,
  op3: _namespace
}) => {
  let name = vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(_name);
  let value = vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(_value);
  let namespace = _namespace ? vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(_namespace) : null;
  vm.elements().setStaticAttribute(name, value, namespace);
});
_opcodes__WEBPACK_IMPORTED_MODULE_3__["APPEND_OPCODES"].add(52
/* DynamicAttr */
, (vm, {
  op1: _name,
  op2: trusting,
  op3: _namespace
}) => {
  let name = vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(_name);
  let reference = vm.stack.pop();
  let value = reference.value();
  let namespace = _namespace ? vm[_symbols__WEBPACK_IMPORTED_MODULE_5__["CONSTANTS"]].getString(_namespace) : null;
  let attribute = vm.elements().setDynamicAttribute(name, value, !!trusting, namespace);

  if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConst"])(reference)) {
    vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute));
  }
});
class UpdateDynamicAttributeOpcode extends _opcodes__WEBPACK_IMPORTED_MODULE_3__["UpdatingOpcode"] {
  constructor(reference, attribute) {
    super();
    this.reference = reference;
    this.attribute = attribute;
    this.type = 'patch-element';
    let {
      tag
    } = reference;
    this.tag = tag;
    this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
  }

  evaluate(vm) {
    let {
      attribute,
      reference,
      tag
    } = this;

    if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["validateTag"])(tag, this.lastRevision)) {
      attribute.update(reference.value(), vm.env);
      this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
    }
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/expressions.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/expressions.js ***!
  \***********************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");
/* harmony import */ var _expressions_concat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../expressions/concat */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/expressions/concat.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./assert */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/assert.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");







_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(16
/* Helper */
, (vm, {
  op1: handle
}) => {
  let stack = vm.stack;
  let helper = vm.runtime.resolver.resolve(handle);
  let args = stack.pop();
  let value = helper(args, vm);
  vm.loadValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_0__["$v0"], value);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(22
/* GetVariable */
, (vm, {
  op1: symbol
}) => {
  let expr = vm.referenceForSymbol(symbol);
  vm.stack.push(expr);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(19
/* SetVariable */
, (vm, {
  op1: symbol
}) => {
  let expr = vm.stack.pop();
  vm.scope().bindSymbol(symbol, expr);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(21
/* SetJitBlock */
, (vm, {
  op1: symbol
}) => {
  let handle = vm.stack.pop();
  let scope = vm.stack.pop();
  let table = vm.stack.pop();
  let block = table ? [handle, scope, table] : null;
  vm.scope().bindBlock(symbol, block);
}, 'jit');
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(20
/* SetAotBlock */
, (vm, {
  op1: symbol
}) => {
  let handle = vm.stack.pop();
  let scope = vm.stack.pop();
  let table = vm.stack.pop();
  let block = table ? [handle, scope, table] : null;
  vm.scope().bindBlock(symbol, block);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(105
/* ResolveMaybeLocal */
, (vm, {
  op1: _name
}) => {
  let name = vm[_symbols__WEBPACK_IMPORTED_MODULE_6__["CONSTANTS"]].getString(_name);
  let locals = vm.scope().getPartialMap();
  let ref = locals[name];

  if (ref === undefined) {
    ref = vm.getSelf().get(name);
  }

  vm.stack.push(ref);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(37
/* RootScope */
, (vm, {
  op1: symbols
}) => {
  vm.pushRootScope(symbols);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(23
/* GetProperty */
, (vm, {
  op1: _key
}) => {
  let key = vm[_symbols__WEBPACK_IMPORTED_MODULE_6__["CONSTANTS"]].getString(_key);
  let expr = vm.stack.pop();
  vm.stack.push(expr.get(key));
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(24
/* GetBlock */
, (vm, {
  op1: _block
}) => {
  let {
    stack
  } = vm;
  let block = vm.scope().getBlock(_block);
  stack.push(block);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(25
/* JitSpreadBlock */
, vm => {
  let {
    stack
  } = vm;
  let block = stack.pop();

  if (block) {
    stack.push(block[2]);
    stack.push(block[1]);
    stack.push(block[0]);
  } else {
    stack.push(null);
    stack.push(null);
    stack.push(null);
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(26
/* HasBlock */
, vm => {
  let block = vm.stack.pop(); // TODO: We check if the block is null or UNDEFINED_REFERENCE here, but it should
  // really only check if the block is null. The UNDEFINED_REFERENCE use case is for
  // when we try to invoke a curry-component directly as a variable:
  //
  // <Foo as |bar|>{{bar}}</Foo>
  //
  // This code path does not work the same way as most components. In the future,
  // we should make sure that it does, so things are setup correctly.

  vm.stack.push(block === null || block === _references__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED_REFERENCE"] ? _references__WEBPACK_IMPORTED_MODULE_2__["FALSE_REFERENCE"] : _references__WEBPACK_IMPORTED_MODULE_2__["TRUE_REFERENCE"]);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(27
/* HasBlockParams */
, vm => {
  // FIXME(mmun): should only need to push the symbol table
  let block = vm.stack.pop();
  let scope = vm.stack.pop();
  let table = vm.stack.pop();
   false && false;
  let hasBlockParams = table && table.parameters.length;
  vm.stack.push(hasBlockParams ? _references__WEBPACK_IMPORTED_MODULE_2__["TRUE_REFERENCE"] : _references__WEBPACK_IMPORTED_MODULE_2__["FALSE_REFERENCE"]);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(28
/* Concat */
, (vm, {
  op1: count
}) => {
  let out = new Array(count);

  for (let i = count; i > 0; i--) {
    let offset = i - 1;
    out[offset] = vm.stack.pop();
  }

  vm.stack.push(new _expressions_concat__WEBPACK_IMPORTED_MODULE_3__["ConcatReference"](out));
});

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/lists.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/lists.js ***!
  \*****************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");



class IterablePresenceReference {
  constructor(artifacts) {
    this.tag = artifacts.tag;
    this.artifacts = artifacts;
  }

  value() {
    return !this.artifacts.isEmpty();
  }

}

_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(74
/* PutIterator */
, vm => {
  let stack = vm.stack;
  let listRef = stack.pop();
  let key = stack.pop();
  let iterable = vm.env.iterableFor(listRef, key.value());
  let iterator = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ReferenceIterator"](iterable);
  stack.push(iterator);
  stack.push(new IterablePresenceReference(iterator.artifacts));
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(72
/* EnterList */
, (vm, {
  op1: relativeStart
}) => {
  vm.enterList(relativeStart);
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(73
/* ExitList */
, vm => {
  vm.exitList();
});
_opcodes__WEBPACK_IMPORTED_MODULE_1__["APPEND_OPCODES"].add(75
/* Iterate */
, (vm, {
  op1: breaks
}) => {
  let stack = vm.stack;
  let item = stack.peek().next();

  if (item) {
    let tryOpcode = vm.iterate(item.memo, item.value);
    vm.enterItem(item.key, tryOpcode);
  } else {
    vm.goto(breaks);
  }
});

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/partial.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/partial.js ***!
  \*******************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");



_opcodes__WEBPACK_IMPORTED_MODULE_0__["APPEND_OPCODES"].add(104
/* InvokePartial */
, (vm, {
  op1: _meta,
  op2: _symbols,
  op3: _evalInfo
}) => {
  let {
    [_symbols__WEBPACK_IMPORTED_MODULE_2__["CONSTANTS"]]: constants,
    stack
  } = vm;
  let name = stack.pop().value();
   false && false;
  let meta = constants.getTemplateMeta(_meta);
  let outerSymbols = constants.getStringArray(_symbols);
  let evalInfo = constants.getArray(_evalInfo);
  let handle = vm.runtime.resolver.lookupPartial(name, meta);
   false && false;
  let definition = vm.runtime.resolver.resolve(handle);
  let {
    symbolTable,
    handle: vmHandle
  } = definition.getPartial(vm.context);
  {
    let partialSymbols = symbolTable.symbols;
    let outerScope = vm.scope();
    let partialScope = vm.pushRootScope(partialSymbols.length);
    let evalScope = outerScope.getEvalScope();
    partialScope.bindEvalScope(evalScope);
    partialScope.bindSelf(outerScope.getSelf());
    let locals = Object.create(outerScope.getPartialMap());

    for (let i = 0; i < evalInfo.length; i++) {
      let slot = evalInfo[i];
      let name = outerSymbols[slot - 1];
      let ref = outerScope.getSymbol(slot);
      locals[name] = ref;
    }

    if (evalScope) {
      for (let i = 0; i < partialSymbols.length; i++) {
        let name = partialSymbols[i];
        let symbol = i + 1;
        let value = evalScope[name];
        if (value !== undefined) partialScope.bind(symbol, value);
      }
    }

    partialScope.bindPartialMap(locals);
    vm.pushFrame(); // sp += 2

    vm.call(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["unwrapHandle"])(vmHandle));
  }
}, 'jit');

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/vm.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/vm.js ***!
  \**************************************************************************************/
/*! exports provided: Assert, JumpIfNotModifiedOpcode, DidModifyOpcode, LabelOpcode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Assert", function() { return Assert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JumpIfNotModifiedOpcode", function() { return JumpIfNotModifiedOpcode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DidModifyOpcode", function() { return DidModifyOpcode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelOpcode", function() { return LabelOpcode; });
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _assert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assert */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/assert.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");







_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(39
/* ChildScope */
, vm => vm.pushChildScope());
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(40
/* PopScope */
, vm => vm.popScope());
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(59
/* PushDynamicScope */
, vm => vm.pushDynamicScope());
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(60
/* PopDynamicScope */
, vm => vm.popDynamicScope());
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(29
/* Constant */
, (vm, {
  op1: other
}) => {
  vm.stack.push(vm[_symbols__WEBPACK_IMPORTED_MODULE_6__["CONSTANTS"]].getOther(other));
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(30
/* Primitive */
, (vm, {
  op1: primitive
}) => {
  let stack = vm.stack;

  if (Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["isHandle"])(primitive)) {
    let value;

    if (primitive > -1073741825
    /* NUMBER_MAX_HANDLE */
    ) {
        value = vm[_symbols__WEBPACK_IMPORTED_MODULE_6__["CONSTANTS"]].getString(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["decodeHandle"])(primitive, -1
        /* STRING_MAX_HANDLE */
        ));
      } else {
      value = vm[_symbols__WEBPACK_IMPORTED_MODULE_6__["CONSTANTS"]].getNumber(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["decodeHandle"])(primitive, -1073741825
      /* NUMBER_MAX_HANDLE */
      ));
    }

    stack.pushJs(value);
  } else {
    // is already an encoded immediate
    stack.pushRaw(primitive);
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(31
/* PrimitiveReference */
, vm => {
  let stack = vm.stack;
  stack.push(_references__WEBPACK_IMPORTED_MODULE_5__["PrimitiveReference"].create(stack.pop()));
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(32
/* ReifyU32 */
, vm => {
  let stack = vm.stack;
  stack.push(stack.peek().value());
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(33
/* Dup */
, (vm, {
  op1: register,
  op2: offset
}) => {
  let position = vm.fetchValue(register) - offset;
  vm.stack.dup(position);
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(34
/* Pop */
, (vm, {
  op1: count
}) => {
  vm.stack.pop(count);
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(35
/* Load */
, (vm, {
  op1: register
}) => {
  vm.load(register);
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(36
/* Fetch */
, (vm, {
  op1: register
}) => {
  vm.fetch(register);
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(58
/* BindDynamicScope */
, (vm, {
  op1: _names
}) => {
  let names = vm[_symbols__WEBPACK_IMPORTED_MODULE_6__["CONSTANTS"]].getArray(_names);
  vm.bindDynamicScope(names);
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(69
/* Enter */
, (vm, {
  op1: args
}) => {
  vm.enter(args);
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(70
/* Exit */
, vm => {
  vm.exit();
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(63
/* PushSymbolTable */
, (vm, {
  op1: _table
}) => {
  let stack = vm.stack;
  stack.push(vm[_symbols__WEBPACK_IMPORTED_MODULE_6__["CONSTANTS"]].getSerializable(_table));
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(62
/* PushBlockScope */
, vm => {
  let stack = vm.stack;
  stack.push(vm.scope());
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(61
/* CompileBlock */
, vm => {
  let stack = vm.stack;
  let block = stack.pop();

  if (block) {
    stack.push(vm.compile(block));
  } else {
    stack.push(null);
  }
}, 'jit');
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(64
/* InvokeYield */
, vm => {
  let {
    stack
  } = vm;
  let handle = stack.pop();
  let scope = stack.pop();
  let table = stack.pop();
   false && false;
  let args = stack.pop();

  if (table === null) {
    // To balance the pop{Frame,Scope}
    vm.pushFrame();
    vm.pushScope(scope); // Could be null but it doesnt matter as it is immediatelly popped.

    return;
  }

  let invokingScope = scope; // If necessary, create a child scope

  {
    let locals = table.parameters;
    let localsCount = locals.length;

    if (localsCount > 0) {
      invokingScope = invokingScope.child();

      for (let i = 0; i < localsCount; i++) {
        invokingScope.bindSymbol(locals[i], args.at(i));
      }
    }
  }
  vm.pushFrame();
  vm.pushScope(invokingScope);
  vm.call(handle);
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(65
/* JumpIf */
, (vm, {
  op1: target
}) => {
  let reference = vm.stack.pop();

  if (Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConst"])(reference)) {
    if (reference.value()) {
      vm.goto(target);
    }
  } else {
    let cache = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ReferenceCache"](reference);

    if (cache.peek()) {
      vm.goto(target);
    }

    vm.updateWith(new Assert(cache));
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(66
/* JumpUnless */
, (vm, {
  op1: target
}) => {
  let reference = vm.stack.pop();

  if (Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConst"])(reference)) {
    if (!reference.value()) {
      vm.goto(target);
    }
  } else {
    let cache = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ReferenceCache"](reference);

    if (!cache.peek()) {
      vm.goto(target);
    }

    vm.updateWith(new Assert(cache));
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(67
/* JumpEq */
, (vm, {
  op1: target,
  op2: comparison
}) => {
  let other = vm.stack.peek();

  if (other === comparison) {
    vm.goto(target);
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(68
/* AssertSame */
, vm => {
  let reference = vm.stack.peek();

  if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["isConst"])(reference)) {
    vm.updateWith(Assert.initialize(new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ReferenceCache"](reference)));
  }
});
_opcodes__WEBPACK_IMPORTED_MODULE_4__["APPEND_OPCODES"].add(71
/* ToBoolean */
, vm => {
  let {
    env,
    stack
  } = vm;
  stack.push(env.toConditionalReference(stack.pop()));
});
class Assert extends _opcodes__WEBPACK_IMPORTED_MODULE_4__["UpdatingOpcode"] {
  constructor(cache) {
    super();
    this.type = 'assert';
    this.tag = cache.tag;
    this.cache = cache;
  }

  static initialize(cache) {
    let assert = new Assert(cache);
    cache.peek();
    return assert;
  }

  evaluate(vm) {
    let {
      cache
    } = this;

    if (Object(_glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["isModified"])(cache.revalidate())) {
      vm.throw();
    }
  }

}
class JumpIfNotModifiedOpcode extends _opcodes__WEBPACK_IMPORTED_MODULE_4__["UpdatingOpcode"] {
  constructor(tag, target) {
    super();
    this.target = target;
    this.type = 'jump-if-not-modified';
    this.tag = tag;
    this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(tag);
  }

  evaluate(vm) {
    let {
      tag,
      target,
      lastRevision
    } = this;

    if (!vm.alwaysRevalidate && Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["validateTag"])(tag, lastRevision)) {
      vm.goto(target);
    }
  }

  didModify() {
    this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["valueForTag"])(this.tag);
  }

}
class DidModifyOpcode extends _opcodes__WEBPACK_IMPORTED_MODULE_4__["UpdatingOpcode"] {
  constructor(target) {
    super();
    this.target = target;
    this.type = 'did-modify';
    this.tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
  }

  evaluate() {
    this.target.didModify();
  }

}
class LabelOpcode {
  constructor(label) {
    this.tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
    this.type = 'label';
    this.label = null;
    this.prev = null;
    this.next = null;
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["initializeGuid"])(this);
    this.label = label;
  }

  evaluate() {}

  inspect() {
    return "".concat(this.label, " [").concat(this._guid, "]");
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/curried-component.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/curried-component.js ***!
  \**********************************************************************************************/
/*! exports provided: isCurriedComponentDefinition, isComponentDefinition, CurriedComponentDefinition, curry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCurriedComponentDefinition", function() { return isCurriedComponentDefinition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isComponentDefinition", function() { return isComponentDefinition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurriedComponentDefinition", function() { return CurriedComponentDefinition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "curry", function() { return curry; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
var _a;


const CURRIED_COMPONENT_DEFINITION_BRAND = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('CURRIED COMPONENT DEFINITION');
function isCurriedComponentDefinition(definition) {
  return !!(definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND]);
}
function isComponentDefinition(definition) {
  return !!(definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND]);
}
class CurriedComponentDefinition {
  /** @internal */
  constructor(inner, args) {
    this.inner = inner;
    this.args = args;
    this[_a] = true;
  }

  unwrap(args) {
    args.realloc(this.offset);
    let definition = this;

    while (true) {
      let {
        args: curriedArgs,
        inner
      } = definition;

      if (curriedArgs) {
        args.positional.prepend(curriedArgs.positional);
        args.named.merge(curriedArgs.named);
      }

      if (!isCurriedComponentDefinition(inner)) {
        return inner;
      }

      definition = inner;
    }
  }
  /** @internal */


  get offset() {
    let {
      inner,
      args
    } = this;
    let length = args ? args.positional.length : 0;
    return isCurriedComponentDefinition(inner) ? length + inner.offset : length;
  }

}
_a = CURRIED_COMPONENT_DEFINITION_BRAND;
function curry(spec, args = null) {
  return new CurriedComponentDefinition(spec, args);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/interfaces.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/interfaces.js ***!
  \***************************************************************************************/
/*! exports provided: hasStaticLayout, hasDynamicLayout, DEFAULT_CAPABILITIES, MINIMAL_CAPABILITIES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasStaticLayout", function() { return hasStaticLayout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasDynamicLayout", function() { return hasDynamicLayout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CAPABILITIES", function() { return DEFAULT_CAPABILITIES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MINIMAL_CAPABILITIES", function() { return MINIMAL_CAPABILITIES; });
/** @internal */
function hasStaticLayout(state, manager) {
  return manager.getCapabilities(state).dynamicLayout === false;
}
/** @internal */

function hasDynamicLayout(state, manager) {
  return manager.getCapabilities(state).dynamicLayout === true;
}
const DEFAULT_CAPABILITIES = {
  dynamicLayout: true,
  dynamicTag: true,
  prepareArgs: true,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  dynamicScope: true,
  createCaller: false,
  updateHook: true,
  createInstance: true,
  wrapped: false,
  willDestroy: false
};
const MINIMAL_CAPABILITIES = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: false,
  attributeHook: false,
  elementHook: false,
  dynamicScope: false,
  createCaller: false,
  updateHook: false,
  createInstance: false,
  wrapped: false,
  willDestroy: false
};

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/manager.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/manager.js ***!
  \************************************************************************************/
/*! exports provided: SimpleComponentManager, TEMPLATE_ONLY_COMPONENT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleComponentManager", function() { return SimpleComponentManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEMPLATE_ONLY_COMPONENT", function() { return TEMPLATE_ONLY_COMPONENT; });
/* harmony import */ var _interfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/interfaces.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");


class SimpleComponentManager {
  getCapabilities(_state) {
    return _interfaces__WEBPACK_IMPORTED_MODULE_0__["MINIMAL_CAPABILITIES"];
  }

  prepareArgs(_state, _args) {
    throw new Error("Unimplemented prepareArgs in SimpleComponentManager");
  }

  create(_env, _state, _args, _dynamicScope, _caller, _hasDefaultBlock) {
    throw new Error("Unimplemented create in SimpleComponentManager");
  }

  getSelf(_state) {
    return _references__WEBPACK_IMPORTED_MODULE_1__["UNDEFINED_REFERENCE"];
  }

  getTag(_state) {
    throw new Error("Unimplemented getTag in SimpleComponentManager");
  }

  didRenderLayout(_state, _bounds) {
    throw new Error("Unimplemented didRenderLayout in SimpleComponentManager");
  }

  didCreate(_state) {
    throw new Error("Unimplemented didCreate in SimpleComponentManager");
  }

  update(_state, _dynamicScope) {
    throw new Error("Unimplemented update in SimpleComponentManager");
  }

  didUpdateLayout(_state, _bounds) {
    throw new Error("Unimplemented didUpdateLayout in SimpleComponentManager");
  }

  didUpdate(_state) {
    throw new Error("Unimplemented didUpdate in SimpleComponentManager");
  }

  getDestructor(_state) {
    return null;
  }

}
const TEMPLATE_ONLY_COMPONENT = {
  state: null,
  manager: new SimpleComponentManager()
};

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/resolve.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/resolve.js ***!
  \************************************************************************************/
/*! exports provided: resolveComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveComponent", function() { return resolveComponent; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");

function resolveComponent(resolver, name, meta) {
  let definition = resolver.lookupComponent(name, meta);
   false && false;
  return definition;
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/helper.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/helper.js ***!
  \*****************************************************************************/
/*! exports provided: isWhitespace, DOM, DOMChangesImpl, default, DOMTreeConstruction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWhitespace", function() { return isWhitespace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOM", function() { return DOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMChangesImpl", function() { return DOMChangesImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMTreeConstruction", function() { return DOMTreeConstruction; });
/* harmony import */ var _compat_svg_inner_html_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../compat/svg-inner-html-fix */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/svg-inner-html-fix.js");
/* harmony import */ var _compat_text_node_merging_fix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../compat/text-node-merging-fix */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/text-node-merging-fix.js");
/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operations */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/operations.js");



['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(tag => _operations__WEBPACK_IMPORTED_MODULE_2__["BLACKLIST_TABLE"][tag] = 1);
const WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
let doc = typeof document === 'undefined' ? null : document;
function isWhitespace(string) {
  return WHITESPACE.test(string);
}
var DOM;

(function (DOM) {
  class TreeConstruction extends _operations__WEBPACK_IMPORTED_MODULE_2__["DOMOperations"] {
    createElementNS(namespace, tag) {
      return this.document.createElementNS(namespace, tag);
    }

    setAttribute(element, name, value, namespace = null) {
      if (namespace) {
        element.setAttributeNS(namespace, name, value);
      } else {
        element.setAttribute(name, value);
      }
    }

  }

  DOM.TreeConstruction = TreeConstruction;
  let appliedTreeContruction = TreeConstruction;
  appliedTreeContruction = Object(_compat_text_node_merging_fix__WEBPACK_IMPORTED_MODULE_1__["applyTextNodeMergingFix"])(doc, appliedTreeContruction);
  appliedTreeContruction = Object(_compat_svg_inner_html_fix__WEBPACK_IMPORTED_MODULE_0__["applySVGInnerHTMLFix"])(doc, appliedTreeContruction, "http://www.w3.org/2000/svg"
  /* SVG */
  );
  DOM.DOMTreeConstruction = appliedTreeContruction;
})(DOM || (DOM = {}));

class DOMChangesImpl extends _operations__WEBPACK_IMPORTED_MODULE_2__["DOMOperations"] {
  constructor(document) {
    super(document);
    this.document = document;
    this.namespace = null;
  }

  setAttribute(element, name, value) {
    element.setAttribute(name, value);
  }

  removeAttribute(element, name) {
    element.removeAttribute(name);
  }

  insertAfter(element, node, reference) {
    this.insertBefore(element, node, reference.nextSibling);
  }

}
let helper = DOMChangesImpl;
helper = Object(_compat_text_node_merging_fix__WEBPACK_IMPORTED_MODULE_1__["applyTextNodeMergingFix"])(doc, helper);
helper = Object(_compat_svg_inner_html_fix__WEBPACK_IMPORTED_MODULE_0__["applySVGInnerHTMLFix"])(doc, helper, "http://www.w3.org/2000/svg"
/* SVG */
);
/* harmony default export */ __webpack_exports__["default"] = (helper);
const DOMTreeConstruction = DOM.DOMTreeConstruction;

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js ***!
  \********************************************************************************/
/*! exports provided: normalizeStringValue, normalizeTrustedValue, shouldCoerce, isEmpty, isSafeString, isNode, isFragment, isString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeStringValue", function() { return normalizeStringValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeTrustedValue", function() { return normalizeTrustedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldCoerce", function() { return shouldCoerce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function() { return isEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSafeString", function() { return isSafeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNode", function() { return isNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFragment", function() { return isFragment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });
function normalizeStringValue(value) {
  if (isEmpty(value)) {
    return '';
  }

  return String(value);
}
function normalizeTrustedValue(value) {
  if (isEmpty(value)) {
    return '';
  }

  if (isString(value)) {
    return value;
  }

  if (isSafeString(value)) {
    return value.toHTML();
  }

  if (isNode(value)) {
    return value;
  }

  return String(value);
}
function shouldCoerce(value) {
  return isString(value) || isEmpty(value) || typeof value === 'boolean' || typeof value === 'number';
}
function isEmpty(value) {
  return value === null || value === undefined || typeof value.toString !== 'function';
}
function isSafeString(value) {
  return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
}
function isNode(value) {
  return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';
}
function isFragment(value) {
  return isNode(value) && value.nodeType === 11;
}
function isString(value) {
  return typeof value === 'string';
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/operations.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/operations.js ***!
  \*********************************************************************************/
/*! exports provided: BLACKLIST_TABLE, DOMOperations, moveNodesBefore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLACKLIST_TABLE", function() { return BLACKLIST_TABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMOperations", function() { return DOMOperations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moveNodesBefore", function() { return moveNodesBefore; });
/* harmony import */ var _bounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bounds */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js");
 // http://www.w3.org/TR/html/syntax.html#html-integration-point

const SVG_INTEGRATION_POINTS = {
  foreignObject: 1,
  desc: 1,
  title: 1
}; // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
// TODO: Adjust SVG attributes
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
// TODO: Adjust SVG elements
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign

const BLACKLIST_TABLE = Object.create(null);
class DOMOperations {
  constructor(document) {
    this.document = document;
    this.setupUselessElement();
  } // split into seperate method so that NodeDOMTreeConstruction
  // can override it.


  setupUselessElement() {
    this.uselessElement = this.document.createElement('div');
  }

  createElement(tag, context) {
    let isElementInSVGNamespace, isHTMLIntegrationPoint;

    if (context) {
      isElementInSVGNamespace = context.namespaceURI === "http://www.w3.org/2000/svg"
      /* SVG */
      || tag === 'svg';
      isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName];
    } else {
      isElementInSVGNamespace = tag === 'svg';
      isHTMLIntegrationPoint = false;
    }

    if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
      // FIXME: This does not properly handle <font> with color, face, or
      // size attributes, which is also disallowed by the spec. We should fix
      // this.
      if (BLACKLIST_TABLE[tag]) {
        throw new Error("Cannot create a ".concat(tag, " inside an SVG context"));
      }

      return this.document.createElementNS("http://www.w3.org/2000/svg"
      /* SVG */
      , tag);
    } else {
      return this.document.createElement(tag);
    }
  }

  insertBefore(parent, node, reference) {
    parent.insertBefore(node, reference);
  }

  insertHTMLBefore(parent, nextSibling, html) {
    if (html === '') {
      let comment = this.createComment('');
      parent.insertBefore(comment, nextSibling);
      return new _bounds__WEBPACK_IMPORTED_MODULE_0__["ConcreteBounds"](parent, comment, comment);
    }

    let prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
    let last;

    if (nextSibling === null) {
      parent.insertAdjacentHTML("beforeend"
      /* beforeend */
      , html);
      last = parent.lastChild;
    } else if (nextSibling instanceof HTMLElement) {
      nextSibling.insertAdjacentHTML('beforebegin', html);
      last = nextSibling.previousSibling;
    } else {
      // Non-element nodes do not support insertAdjacentHTML, so add an
      // element and call it on that element. Then remove the element.
      //
      // This also protects Edge, IE and Firefox w/o the inspector open
      // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
      let {
        uselessElement
      } = this;
      parent.insertBefore(uselessElement, nextSibling);
      uselessElement.insertAdjacentHTML("beforebegin"
      /* beforebegin */
      , html);
      last = uselessElement.previousSibling;
      parent.removeChild(uselessElement);
    }

    let first = prev ? prev.nextSibling : parent.firstChild;
    return new _bounds__WEBPACK_IMPORTED_MODULE_0__["ConcreteBounds"](parent, first, last);
  }

  createTextNode(text) {
    return this.document.createTextNode(text);
  }

  createComment(data) {
    return this.document.createComment(data);
  }

}
function moveNodesBefore(source, target, nextSibling) {
  let first = source.firstChild;
  let last = first;
  let current = first;

  while (current) {
    let next = current.nextSibling;
    target.insertBefore(current, nextSibling);
    last = current;
    current = next;
  }

  return new _bounds__WEBPACK_IMPORTED_MODULE_0__["ConcreteBounds"](target, first, last);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/props.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/props.js ***!
  \****************************************************************************/
/*! exports provided: normalizeProperty, normalizePropertyValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeProperty", function() { return normalizeProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizePropertyValue", function() { return normalizePropertyValue; });
/*
 * @method normalizeProperty
 * @param element {HTMLElement}
 * @param slotName {String}
 * @returns {Object} { name, type }
 */
function normalizeProperty(element, slotName) {
  let type, normalized;

  if (slotName in element) {
    normalized = slotName;
    type = 'prop';
  } else {
    let lower = slotName.toLowerCase();

    if (lower in element) {
      type = 'prop';
      normalized = lower;
    } else {
      type = 'attr';
      normalized = slotName;
    }
  }

  if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {
    type = 'attr';
  }

  return {
    normalized,
    type
  };
}
function normalizePropertyValue(value) {
  if (value === '') {
    return true;
  }

  return value;
} // properties that MUST be set as attributes, due to:
// * browser bug
// * strange spec outlier

const ATTR_OVERRIDES = {
  INPUT: {
    form: true,
    // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
    // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
    // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
    autocorrect: true,
    // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
    // Safari 9.1.3: 'list' in document.createElement('input') === false
    list: true
  },
  // element.form is actually a legitimate readOnly property, that is to be
  // mutated, but must be mutated by setAttribute...
  SELECT: {
    form: true
  },
  OPTION: {
    form: true
  },
  TEXTAREA: {
    form: true
  },
  LABEL: {
    form: true
  },
  FIELDSET: {
    form: true
  },
  LEGEND: {
    form: true
  },
  OBJECT: {
    form: true
  },
  BUTTON: {
    form: true
  }
};

function preferAttr(tagName, propName) {
  let tag = ATTR_OVERRIDES[tagName.toUpperCase()];
  return tag && tag[propName.toLowerCase()] || false;
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/sanitized-values.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/sanitized-values.js ***!
  \***************************************************************************************/
/*! exports provided: requiresSanitization, sanitizeAttributeValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requiresSanitization", function() { return requiresSanitization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sanitizeAttributeValue", function() { return sanitizeAttributeValue; });
/* harmony import */ var _dom_normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom/normalize */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js");

const badProtocols = ['javascript:', 'vbscript:'];
const badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];
const badTagsForDataURI = ['EMBED'];
const badAttributes = ['href', 'src', 'background', 'action'];
const badAttributesForDataURI = ['src'];

function has(array, item) {
  return array.indexOf(item) !== -1;
}

function checkURI(tagName, attribute) {
  return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);
}

function checkDataURI(tagName, attribute) {
  if (tagName === null) return false;
  return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);
}

function requiresSanitization(tagName, attribute) {
  return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
}
function sanitizeAttributeValue(env, element, attribute, value) {
  let tagName = null;

  if (value === null || value === undefined) {
    return value;
  }

  if (Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_0__["isSafeString"])(value)) {
    return value.toHTML();
  }

  if (!element) {
    tagName = null;
  } else {
    tagName = element.tagName.toUpperCase();
  }

  let str = Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_0__["normalizeStringValue"])(value);

  if (checkURI(tagName, attribute)) {
    let protocol = env.protocolForURL(str);

    if (has(badProtocols, protocol)) {
      return "unsafe:".concat(str);
    }
  }

  if (checkDataURI(tagName, attribute)) {
    return "unsafe:".concat(str);
  }

  return str;
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dynamic-scope.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dynamic-scope.js ***!
  \********************************************************************************/
/*! exports provided: DefaultDynamicScope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultDynamicScope", function() { return DefaultDynamicScope; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");

class DefaultDynamicScope {
  constructor(bucket) {
    if (bucket) {
      this.bucket = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["assign"])({}, bucket);
    } else {
      this.bucket = {};
    }
  }

  get(key) {
    return this.bucket[key];
  }

  set(key, reference) {
    return this.bucket[key] = reference;
  }

  child() {
    return new DefaultDynamicScope(this.bucket);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/environment.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/environment.js ***!
  \******************************************************************************/
/*! exports provided: isScopeReference, ScopeImpl, TRANSACTION, EnvironmentImpl, DefaultRuntimeResolver, AotRuntime, JitRuntime, inTransaction, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isScopeReference", function() { return isScopeReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScopeImpl", function() { return ScopeImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSACTION", function() { return TRANSACTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EnvironmentImpl", function() { return EnvironmentImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultRuntimeResolver", function() { return DefaultRuntimeResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AotRuntime", function() { return AotRuntime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JitRuntime", function() { return JitRuntime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inTransaction", function() { return inTransaction; });
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _dom_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom/helper */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/helper.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");
/* harmony import */ var _vm_attributes_dynamic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vm/attributes/dynamic */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/attributes/dynamic.js");
/* harmony import */ var _glimmer_program__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/program */ "./node_modules/@glimmer/program/dist/modules/es2017/index.js");
var _a;







function isScopeReference(s) {
  if (s === null || Array.isArray(s)) return false;
  return true;
}
class ScopeImpl {
  constructor( // the 0th slot is `self`
  slots, callerScope, // named arguments and blocks passed to a layout that uses eval
  evalScope, // locals in scope when the partial was invoked
  partialMap) {
    this.slots = slots;
    this.callerScope = callerScope;
    this.evalScope = evalScope;
    this.partialMap = partialMap;
  }

  static root(self, size = 0) {
    let refs = new Array(size + 1);

    for (let i = 0; i <= size; i++) {
      refs[i] = _references__WEBPACK_IMPORTED_MODULE_3__["UNDEFINED_REFERENCE"];
    }

    return new ScopeImpl(refs, null, null, null).init({
      self
    });
  }

  static sized(size = 0) {
    let refs = new Array(size + 1);

    for (let i = 0; i <= size; i++) {
      refs[i] = _references__WEBPACK_IMPORTED_MODULE_3__["UNDEFINED_REFERENCE"];
    }

    return new ScopeImpl(refs, null, null, null);
  }

  init({
    self
  }) {
    this.slots[0] = self;
    return this;
  }

  getSelf() {
    return this.get(0);
  }

  getSymbol(symbol) {
    return this.get(symbol);
  }

  getBlock(symbol) {
    let block = this.get(symbol);
    return block === _references__WEBPACK_IMPORTED_MODULE_3__["UNDEFINED_REFERENCE"] ? null : block;
  }

  getEvalScope() {
    return this.evalScope;
  }

  getPartialMap() {
    return this.partialMap;
  }

  bind(symbol, value) {
    this.set(symbol, value);
  }

  bindSelf(self) {
    this.set(0, self);
  }

  bindSymbol(symbol, value) {
    this.set(symbol, value);
  }

  bindBlock(symbol, value) {
    this.set(symbol, value);
  }

  bindEvalScope(map) {
    this.evalScope = map;
  }

  bindPartialMap(map) {
    this.partialMap = map;
  }

  bindCallerScope(scope) {
    this.callerScope = scope;
  }

  getCallerScope() {
    return this.callerScope;
  }

  child() {
    return new ScopeImpl(this.slots.slice(), this.callerScope, this.evalScope, this.partialMap);
  }

  get(index) {
    if (index >= this.slots.length) {
      throw new RangeError("BUG: cannot get $".concat(index, " from scope; length=").concat(this.slots.length));
    }

    return this.slots[index];
  }

  set(index, value) {
    if (index >= this.slots.length) {
      throw new RangeError("BUG: cannot get $".concat(index, " from scope; length=").concat(this.slots.length));
    }

    this.slots[index] = value;
  }

}
const TRANSACTION = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["symbol"])('TRANSACTION');

class TransactionImpl {
  constructor() {
    this.scheduledInstallManagers = [];
    this.scheduledInstallModifiers = [];
    this.scheduledUpdateModifierManagers = [];
    this.scheduledUpdateModifiers = [];
    this.createdComponents = [];
    this.createdManagers = [];
    this.updatedComponents = [];
    this.updatedManagers = [];
    this.destructors = [];
  }

  didCreate(component, manager) {
    this.createdComponents.push(component);
    this.createdManagers.push(manager);
  }

  didUpdate(component, manager) {
    this.updatedComponents.push(component);
    this.updatedManagers.push(manager);
  }

  scheduleInstallModifier(modifier, manager) {
    this.scheduledInstallModifiers.push(modifier);
    this.scheduledInstallManagers.push(manager);
  }

  scheduleUpdateModifier(modifier, manager) {
    this.scheduledUpdateModifiers.push(modifier);
    this.scheduledUpdateModifierManagers.push(manager);
  }

  willDestroy(d) {
    d[_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["WILL_DROP"]]();
  }

  didDestroy(d) {
    this.destructors.push(d);
  }

  commit() {
    let {
      createdComponents,
      createdManagers
    } = this;

    for (let i = 0; i < createdComponents.length; i++) {
      let component = createdComponents[i];
      let manager = createdManagers[i];
      manager.didCreate(component);
    }

    let {
      updatedComponents,
      updatedManagers
    } = this;

    for (let i = 0; i < updatedComponents.length; i++) {
      let component = updatedComponents[i];
      let manager = updatedManagers[i];
      manager.didUpdate(component);
    }

    let {
      destructors
    } = this;

    for (let i = 0; i < destructors.length; i++) {
      destructors[i][_glimmer_util__WEBPACK_IMPORTED_MODULE_1__["DID_DROP"]]();
    }

    let {
      scheduledInstallManagers,
      scheduledInstallModifiers
    } = this;

    for (let i = 0; i < scheduledInstallManagers.length; i++) {
      let modifier = scheduledInstallModifiers[i];
      let manager = scheduledInstallManagers[i];
      manager.install(modifier);
    }

    let {
      scheduledUpdateModifierManagers,
      scheduledUpdateModifiers
    } = this;

    for (let i = 0; i < scheduledUpdateModifierManagers.length; i++) {
      let modifier = scheduledUpdateModifiers[i];
      let manager = scheduledUpdateModifierManagers[i];
      manager.update(modifier);
    }
  }

}

function defaultDelegateFn(delegateFn, delegateDefault) {
  let defaultFn = delegateFn !== undefined ? delegateFn : delegateDefault;

  if (true
  /* DEBUG */
  ) {
    // Bind to `null` in DEBUG since these methods are assumed to be pure
    // functions, so we can reassign them.
    return defaultFn.bind(null);
  }

  return defaultFn;
}

class EnvironmentImpl {
  constructor(options, delegate) {
    this.delegate = delegate;
    this[_a] = null; // Delegate methods and values

    this.extra = this.delegate.extra;
    this.isInteractive = typeof this.delegate.isInteractive === 'boolean' ? this.delegate.isInteractive : true;
    this.protocolForURL = defaultDelegateFn(this.delegate.protocolForURL, defaultGetProtocolForURL);
    this.attributeFor = defaultDelegateFn(this.delegate.attributeFor, defaultAttributeFor);
    this.getPath = defaultDelegateFn(this.delegate.getPath, defaultGetPath);
    this.setPath = defaultDelegateFn(this.delegate.setPath, defaultSetPath);
    this.toBool = defaultDelegateFn(this.delegate.toBool, defaultToBool);
    this.toIterator = defaultDelegateFn(this.delegate.toIterator, defaultToIterator);

    if (options.appendOperations) {
      this.appendOperations = options.appendOperations;
      this.updateOperations = options.updateOperations;
    } else if (options.document) {
      this.appendOperations = new _dom_helper__WEBPACK_IMPORTED_MODULE_2__["DOMTreeConstruction"](options.document);
      this.updateOperations = new _dom_helper__WEBPACK_IMPORTED_MODULE_2__["DOMChangesImpl"](options.document);
    } else if (true
    /* DEBUG */
    ) {
      throw new Error('you must pass document or appendOperations to a new runtime');
    }
  }

  getTemplatePathDebugContext(ref) {
    if (this.delegate.getTemplatePathDebugContext !== undefined) {
      return this.delegate.getTemplatePathDebugContext(ref);
    }

    return '';
  }

  setTemplatePathDebugContext(ref, desc, parentRef) {
    if (this.delegate.setTemplatePathDebugContext !== undefined) {
      this.delegate.setTemplatePathDebugContext(ref, desc, parentRef);
    }
  }

  iterableFor(ref, inputKey) {
    // TODO: We should add an assertion here to verify that we are passed a
    // TemplatePathReference, but we can only do that once we remove
    // or significantly rewrite @glimmer/object-reference
    let key = inputKey === null ? '@identity' : String(inputKey);
    return new _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["IterableImpl"](ref, key, this);
  }

  toConditionalReference(input) {
    return new _references__WEBPACK_IMPORTED_MODULE_3__["ConditionalReference"](input, this.delegate.toBool);
  }

  getAppendOperations() {
    return this.appendOperations;
  }

  getDOM() {
    return this.updateOperations;
  }

  begin() {
     false && false;

    if (this.delegate.onTransactionBegin !== undefined) {
      this.delegate.onTransactionBegin();
    }

    this[TRANSACTION] = new TransactionImpl();
  }

  get transaction() {
    return this[TRANSACTION];
  }

  didCreate(component, manager) {
    this.transaction.didCreate(component, manager);
  }

  didUpdate(component, manager) {
    this.transaction.didUpdate(component, manager);
  }

  scheduleInstallModifier(modifier, manager) {
    if (this.isInteractive) {
      this.transaction.scheduleInstallModifier(modifier, manager);
    }
  }

  scheduleUpdateModifier(modifier, manager) {
    if (this.isInteractive) {
      this.transaction.scheduleUpdateModifier(modifier, manager);
    }
  }

  willDestroy(d) {
    this.transaction.willDestroy(d);
  }

  didDestroy(d) {
    this.transaction.didDestroy(d);
  }

  commit() {
    let transaction = this.transaction;
    this[TRANSACTION] = null;
    transaction.commit();

    if (this.delegate.onTransactionCommit !== undefined) {
      this.delegate.onTransactionCommit();
    }
  }

}
_a = TRANSACTION;

function defaultGetProtocolForURL(url) {
  if (typeof URL === 'object' || typeof URL === 'undefined') {
    return legacyProtocolForURL(url);
  } else if (typeof document !== 'undefined') {
    return new URL(url, document.baseURI).protocol;
  } else {
    return new URL(url, 'https://www.example.com').protocol;
  }
}

function defaultAttributeFor(element, attr, _isTrusting, namespace) {
  return Object(_vm_attributes_dynamic__WEBPACK_IMPORTED_MODULE_4__["dynamicAttribute"])(element, attr, namespace);
}

function defaultGetPath(obj, key) {
  return obj[key];
}

function defaultSetPath(obj, key, value) {
  return obj[key] = value;
}

function defaultToBool(value) {
  return Boolean(value);
}

function defaultToIterator(value) {
  if (value && value[Symbol.iterator]) {
    return value[Symbol.iterator]();
  }

  return null;
}

function legacyProtocolForURL(url) {
  if (typeof window === 'undefined') {
    let match = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i.exec(url);
    return match && match[1] ? match[1].toLowerCase() : '';
  }

  let anchor = window.document.createElement('a');
  anchor.href = url;
  return anchor.protocol;
}

class DefaultRuntimeResolver {
  constructor(inner) {
    this.inner = inner;
  }

  lookupComponent(name, referrer) {
    if (this.inner.lookupComponent) {
      let component = this.inner.lookupComponent(name, referrer);

      if (component === undefined) {
        throw new Error("Unexpected component ".concat(name, " (from ").concat(referrer, ") (lookupComponent returned undefined)"));
      }

      return component;
    } else {
      throw new Error('lookupComponent not implemented on RuntimeResolver.');
    }
  }

  lookupPartial(name, referrer) {
    if (this.inner.lookupPartial) {
      let partial = this.inner.lookupPartial(name, referrer);

      if (partial === undefined) {
        throw new Error("Unexpected partial ".concat(name, " (from ").concat(referrer, ") (lookupPartial returned undefined)"));
      }

      return partial;
    } else {
      throw new Error('lookupPartial not implemented on RuntimeResolver.');
    }
  }

  resolve(handle) {
    if (this.inner.resolve) {
      let resolved = this.inner.resolve(handle);

      if (resolved === undefined) {
        throw new Error("Unexpected handle ".concat(handle, " (resolve returned undefined)"));
      }

      return resolved;
    } else {
      throw new Error('resolve not implemented on RuntimeResolver.');
    }
  }

  compilable(locator) {
    if (this.inner.compilable) {
      let resolved = this.inner.compilable(locator);

      if (resolved === undefined) {
        throw new Error("Unable to compile ".concat(name, " (compilable returned undefined)"));
      }

      return resolved;
    } else {
      throw new Error('compilable not implemented on RuntimeResolver.');
    }
  }

  getInvocation(locator) {
    if (this.inner.getInvocation) {
      let invocation = this.inner.getInvocation(locator);

      if (invocation === undefined) {
        throw new Error("Unable to get invocation for ".concat(JSON.stringify(locator), " (getInvocation returned undefined)"));
      }

      return invocation;
    } else {
      throw new Error('getInvocation not implemented on RuntimeResolver.');
    }
  }

}
function AotRuntime(options, program, resolver = {}, delegate = {}) {
  let env = new EnvironmentImpl(options, delegate);
  return {
    env,
    resolver: new DefaultRuntimeResolver(resolver),
    program: _glimmer_program__WEBPACK_IMPORTED_MODULE_5__["RuntimeProgramImpl"].hydrate(program)
  };
}
function JitRuntime(options, delegate = {}, context, resolver = {}) {
  return {
    env: new EnvironmentImpl(options, delegate),
    program: new _glimmer_program__WEBPACK_IMPORTED_MODULE_5__["RuntimeProgramImpl"](context.program.constants, context.program.heap),
    resolver: new DefaultRuntimeResolver(resolver)
  };
}
function inTransaction(env, cb) {
  if (!env[TRANSACTION]) {
    env.begin();

    try {
      cb();
    } finally {
      env.commit();
    }
  } else {
    cb();
  }
}
/* harmony default export */ __webpack_exports__["default"] = (EnvironmentImpl);

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/helpers/get-dynamic-var.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/helpers/get-dynamic-var.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");


class DynamicVarReference {
  constructor(scope, nameRef) {
    this.scope = scope;
    this.nameRef = nameRef;
    let varTag = this.varTag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["createUpdatableTag"])();
    this.tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["combine"])([nameRef.tag, varTag]);
  }

  value() {
    return this.getVar().value();
  }

  get(key) {
    return this.getVar().get(key);
  }

  getVar() {
    let name = String(this.nameRef.value());
    let ref = this.scope.get(name);
    Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["updateTag"])(this.varTag, ref.tag);
    return ref;
  }

}

function getDynamicVar(args, vm) {
  let scope = vm.dynamicScope();
  let nameRef = args.positional.at(0);
  return new DynamicVarReference(scope, nameRef);
}

/* harmony default export */ __webpack_exports__["default"] = (getDynamicVar);

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/lifetime.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/lifetime.js ***!
  \***************************************************************************/
/*! exports provided: legacySyncReset, asyncReset, legacySyncDestroy, asyncDestroy, detach, detachChildren */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "legacySyncReset", function() { return legacySyncReset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asyncReset", function() { return asyncReset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "legacySyncDestroy", function() { return legacySyncDestroy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asyncDestroy", function() { return asyncDestroy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detach", function() { return detach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detachChildren", function() { return detachChildren; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _bounds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bounds */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js");


function legacySyncReset(parent, env) {
  let linked = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["peekAssociated"])(parent);

  if (linked !== null) {
    env.willDestroy(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["snapshot"])(linked));
  }
}
function asyncReset(parent, env) {
  let linked = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["takeAssociated"])(parent);

  if (linked !== null) {
    env.didDestroy(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["snapshot"])(linked));
  }
}
function legacySyncDestroy(parent, env) {
  if (false
  /* LOCAL_SHOULD_LOG */
  ) {}

  env.willDestroy(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["destructor"])(parent));
}
function asyncDestroy(parent, env) {
  if (false
  /* LOCAL_SHOULD_LOG */
  ) {}

  env.didDestroy(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["destructor"])(parent));
}
function detach(parent, env) {
  if (false
  /* LOCAL_SHOULD_LOG */
  ) {}

  legacySyncDestroy(parent, env);
  Object(_bounds__WEBPACK_IMPORTED_MODULE_1__["clear"])(parent);
  asyncDestroy(parent, env);
}
function detachChildren(parent, env) {
  if (false
  /* LOCAL_SHOULD_LOG */
  ) {}

  legacySyncReset(parent, env);
  asyncReset(parent, env);
  return Object(_bounds__WEBPACK_IMPORTED_MODULE_1__["clear"])(parent);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js ***!
  \**************************************************************************/
/*! exports provided: AppendOpcodes, APPEND_OPCODES, AbstractOpcode, UpdatingOpcode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendOpcodes", function() { return AppendOpcodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APPEND_OPCODES", function() { return APPEND_OPCODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractOpcode", function() { return AbstractOpcode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdatingOpcode", function() { return UpdatingOpcode; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");
/* harmony import */ var _vm_element_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vm/element-builder */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/environment.js");





class AppendOpcodes {
  constructor() {
    this.evaluateOpcode = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["fillNulls"])(107
    /* Size */
    ).slice();
  }

  add(name, evaluate, kind = 'syscall') {
    this.evaluateOpcode[name] = {
      syscall: kind !== 'machine',
      evaluate
    };
  }

  debugBefore(vm, opcode) {
    let params = undefined;
    let opName = undefined;

    if (false
    /* LOCAL_SHOULD_LOG */
    ) {}

    let sp;

    if (false
    /* LOCAL_DEBUG */
    ) {}

    return {
      sp: sp,
      pc: vm.fetchValue(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]),
      name: opName,
      params,
      type: opcode.type,
      isMachine: opcode.isMachine,
      size: opcode.size,
      state: undefined
    };
  }

  debugAfter(vm, pre) {
    let {
      sp,
      type,
      isMachine,
      pc
    } = pre;

    if (false
    /* LOCAL_DEBUG */
    ) {}
  }

  evaluate(vm, opcode, type) {
    let operation = this.evaluateOpcode[type];

    if (operation.syscall) {
       false && false;
      operation.evaluate(vm, opcode);
    } else {
       false && false;
      operation.evaluate(vm[_symbols__WEBPACK_IMPORTED_MODULE_2__["INNER_VM"]], opcode);
    }
  }

}
const APPEND_OPCODES = new AppendOpcodes();
class AbstractOpcode {
  constructor() {
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["initializeGuid"])(this);
  }

}
class UpdatingOpcode extends AbstractOpcode {
  constructor() {
    super(...arguments);
    this.next = null;
    this.prev = null;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js ***!
  \*****************************************************************************/
/*! exports provided: PrimitiveReference, UNDEFINED_REFERENCE, NULL_REFERENCE, TRUE_REFERENCE, FALSE_REFERENCE, ConditionalReference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrimitiveReference", function() { return PrimitiveReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNDEFINED_REFERENCE", function() { return UNDEFINED_REFERENCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NULL_REFERENCE", function() { return NULL_REFERENCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRUE_REFERENCE", function() { return TRUE_REFERENCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FALSE_REFERENCE", function() { return FALSE_REFERENCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionalReference", function() { return ConditionalReference; });
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");

class PrimitiveReference extends _glimmer_reference__WEBPACK_IMPORTED_MODULE_0__["ConstReference"] {
  static create(value) {
    if (value === undefined) {
      return UNDEFINED_REFERENCE;
    } else if (value === null) {
      return NULL_REFERENCE;
    } else if (value === true) {
      return TRUE_REFERENCE;
    } else if (value === false) {
      return FALSE_REFERENCE;
    } else if (typeof value === 'number') {
      return new ValueReference(value);
    } else {
      return new StringReference(value);
    }
  }

  constructor(value) {
    super(value);
  }

  get(_key) {
    return UNDEFINED_REFERENCE;
  }

}

class StringReference extends PrimitiveReference {
  constructor() {
    super(...arguments);
    this.lengthReference = null;
  }

  get(key) {
    if (key === 'length') {
      let {
        lengthReference
      } = this;

      if (lengthReference === null) {
        lengthReference = this.lengthReference = new ValueReference(this.inner.length);
      }

      return lengthReference;
    } else {
      return super.get(key);
    }
  }

}

class ValueReference extends PrimitiveReference {
  constructor(value) {
    super(value);
  }

}

const UNDEFINED_REFERENCE = new ValueReference(undefined);
const NULL_REFERENCE = new ValueReference(null);
const TRUE_REFERENCE = new ValueReference(true);
const FALSE_REFERENCE = new ValueReference(false);
class ConditionalReference {
  constructor(inner, toBool = defaultToBool) {
    this.inner = inner;
    this.toBool = toBool;
    this.tag = inner.tag;
  }

  value() {
    return this.toBool(this.inner.value());
  }

}

function defaultToBool(value) {
  return !!value;
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/class-list.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/class-list.js ***!
  \****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ClassListReference; });
/* harmony import */ var _utils_tags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/tags */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/utils/tags.js");
/* harmony import */ var _dom_normalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom/normalize */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js");


class ClassListReference {
  constructor(list) {
    this.list = list;
    this.tag = Object(_utils_tags__WEBPACK_IMPORTED_MODULE_0__["combineTagged"])(list);
    this.list = list;
  }

  value() {
    let ret = [];
    let {
      list
    } = this;

    for (let i = 0; i < list.length; i++) {
      let value = Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_1__["normalizeStringValue"])(list[i].value());
      if (value) ret.push(value);
    }

    return ret.length === 0 ? null : ret.join(' ');
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/curry-component.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/curry-component.js ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CurryComponentReference; });
/* harmony import */ var _component_curried_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component/curried-component */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/curried-component.js");
/* harmony import */ var _component_resolve__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../component/resolve */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/resolve.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");



class CurryComponentReference {
  constructor(inner, resolver, meta, args) {
    this.inner = inner;
    this.resolver = resolver;
    this.meta = meta;
    this.args = args;
    this.tag = inner.tag;
    this.lastValue = null;
    this.lastDefinition = null;
  }

  value() {
    let {
      inner,
      lastValue
    } = this;
    let value = inner.value();

    if (value === lastValue) {
      return this.lastDefinition;
    }

    let definition = null;

    if (Object(_component_curried_component__WEBPACK_IMPORTED_MODULE_0__["isCurriedComponentDefinition"])(value)) {
      definition = value;
    } else if (typeof value === 'string' && value) {
      let {
        resolver,
        meta
      } = this;
      definition = Object(_component_resolve__WEBPACK_IMPORTED_MODULE_1__["resolveComponent"])(resolver, value, meta);
    }

    definition = this.curry(definition);
    this.lastValue = value;
    this.lastDefinition = definition;
    return definition;
  }

  get() {
    return _references__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED_REFERENCE"];
  }

  curry(definition) {
    let {
      args
    } = this;

    if (!args && Object(_component_curried_component__WEBPACK_IMPORTED_MODULE_0__["isCurriedComponentDefinition"])(definition)) {
      return definition;
    } else if (!definition) {
      return null;
    } else {
      return new _component_curried_component__WEBPACK_IMPORTED_MODULE_0__["CurriedComponentDefinition"](definition, args);
    }
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/render.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/render.js ***!
  \*************************************************************************/
/*! exports provided: renderSync, renderAotMain, renderAot, renderJitMain, renderAotComponent, renderJitComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderSync", function() { return renderSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderAotMain", function() { return renderAotMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderAot", function() { return renderAot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderJitMain", function() { return renderJitMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderAotComponent", function() { return renderAotComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderJitComponent", function() { return renderJitComponent; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _capabilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./capabilities */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/capabilities.js");
/* harmony import */ var _compiled_opcodes_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compiled/opcodes/component */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/component.js");
/* harmony import */ var _component_resolve__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./component/resolve */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/resolve.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");
/* harmony import */ var _vm_append__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vm/append */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/append.js");
/* harmony import */ var _vm_element_builder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vm/element-builder */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js");
/* harmony import */ var _dynamic_scope__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dynamic-scope */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dynamic-scope.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");










class TemplateIteratorImpl {
  constructor(vm) {
    this.vm = vm;
  }

  next() {
    return this.vm.next();
  }

  sync() {
    return renderSync(this.vm.runtime.env, this);
  }

}

function renderSync(env, iterator) {
  env.begin();
  let iteratorResult;

  do {
    iteratorResult = iterator.next();
  } while (!iteratorResult.done);

  let result = iteratorResult.value;
  env.commit();
  return result;
}
function renderAotMain(runtime, self, treeBuilder, handle, dynamicScope = new _dynamic_scope__WEBPACK_IMPORTED_MODULE_7__["DefaultDynamicScope"]()) {
  let vm = _vm_append__WEBPACK_IMPORTED_MODULE_5__["AotVM"].initial(runtime, {
    self,
    dynamicScope,
    treeBuilder,
    handle
  });
  return new TemplateIteratorImpl(vm);
}
function renderAot(runtime, handle, cursor, self = _references__WEBPACK_IMPORTED_MODULE_8__["UNDEFINED_REFERENCE"]) {
  let treeBuilder = _vm_element_builder__WEBPACK_IMPORTED_MODULE_6__["NewElementBuilder"].forInitialRender(runtime.env, cursor);
  let dynamicScope = new _dynamic_scope__WEBPACK_IMPORTED_MODULE_7__["DefaultDynamicScope"]();
  let vm = _vm_append__WEBPACK_IMPORTED_MODULE_5__["AotVM"].initial(runtime, {
    self,
    dynamicScope,
    treeBuilder,
    handle
  });
  return new TemplateIteratorImpl(vm);
}
function renderJitMain(runtime, context, self, treeBuilder, handle, dynamicScope = new _dynamic_scope__WEBPACK_IMPORTED_MODULE_7__["DefaultDynamicScope"]()) {
  let vm = _vm_append__WEBPACK_IMPORTED_MODULE_5__["JitVM"].initial(runtime, context, {
    self,
    dynamicScope,
    treeBuilder,
    handle
  });
  return new TemplateIteratorImpl(vm);
}

function renderInvocation(vm, invocation, definition, args) {
  // Get a list of tuples of argument names and references, like
  // [['title', reference], ['name', reference]]
  const argList = Object.keys(args).map(key => [key, args[key]]);
  const blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

  const argNames = argList.map(([name]) => "@".concat(name));
  vm.pushFrame(); // Push blocks on to the stack, three stack values per block

  for (let i = 0; i < 3 * blockNames.length; i++) {
    vm.stack.push(null);
  }

  vm.stack.push(null); // For each argument, push its backing reference on to the stack

  argList.forEach(([, reference]) => {
    vm.stack.push(reference);
  }); // Configure VM based on blocks and args just pushed on to the stack.

  vm[_symbols__WEBPACK_IMPORTED_MODULE_4__["ARGS"]].setup(vm.stack, argNames, blockNames, 0, true); // Needed for the Op.Main opcode: arguments, component invocation object, and
  // component definition.

  vm.stack.push(vm[_symbols__WEBPACK_IMPORTED_MODULE_4__["ARGS"]]);
  vm.stack.push(invocation);
  vm.stack.push(definition);
  return new TemplateIteratorImpl(vm);
}

function renderAotComponent(runtime, treeBuilder, main, name, args = {}, dynamicScope = new _dynamic_scope__WEBPACK_IMPORTED_MODULE_7__["DefaultDynamicScope"]()) {
  let vm = _vm_append__WEBPACK_IMPORTED_MODULE_5__["AotVM"].empty(runtime, {
    treeBuilder,
    handle: main,
    dynamicScope
  });
  const definition = Object(_component_resolve__WEBPACK_IMPORTED_MODULE_3__["resolveComponent"])(vm.runtime.resolver, name);
  const {
    manager,
    state
  } = definition;
  const capabilities = Object(_capabilities__WEBPACK_IMPORTED_MODULE_1__["capabilityFlagsFrom"])(manager.getCapabilities(state));
  let invocation;

  if (Object(_compiled_opcodes_component__WEBPACK_IMPORTED_MODULE_2__["hasStaticLayoutCapability"])(capabilities, manager)) {
    invocation = manager.getAotStaticLayout(state, vm.runtime.resolver);
  } else {
    throw new Error('Cannot invoke components with dynamic layouts as a root component.');
  }

  return renderInvocation(vm, invocation, definition, args);
}
function renderJitComponent(runtime, treeBuilder, context, main, name, args = {}, dynamicScope = new _dynamic_scope__WEBPACK_IMPORTED_MODULE_7__["DefaultDynamicScope"]()) {
  let vm = _vm_append__WEBPACK_IMPORTED_MODULE_5__["JitVM"].empty(runtime, {
    treeBuilder,
    handle: main,
    dynamicScope
  }, context);
  const definition = Object(_component_resolve__WEBPACK_IMPORTED_MODULE_3__["resolveComponent"])(vm.runtime.resolver, name);
  const {
    manager,
    state
  } = definition;
  const capabilities = Object(_capabilities__WEBPACK_IMPORTED_MODULE_1__["capabilityFlagsFrom"])(manager.getCapabilities(state));
  let invocation;

  if (Object(_compiled_opcodes_component__WEBPACK_IMPORTED_MODULE_2__["hasStaticLayoutCapability"])(capabilities, manager)) {
    let layout = manager.getJitStaticLayout(state, vm.runtime.resolver);
    let handle = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["unwrapHandle"])(layout.compile(context));

    if (Array.isArray(handle)) {
      let error = handle[0];
      throw new Error("Compile Error: ".concat(error.problem, " ").concat(error.span.start, "..").concat(error.span.end, " :: TODO (thread better)"));
    }

    invocation = {
      handle,
      symbolTable: layout.symbolTable
    };
  } else {
    throw new Error('Cannot invoke components with dynamic layouts as a root component.');
  }

  return renderInvocation(vm, invocation, definition, args);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js ***!
  \**************************************************************************/
/*! exports provided: INNER_VM, DESTRUCTOR_STACK, STACKS, REGISTERS, HEAP, CONSTANTS, ARGS, PC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INNER_VM", function() { return INNER_VM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DESTRUCTOR_STACK", function() { return DESTRUCTOR_STACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STACKS", function() { return STACKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REGISTERS", function() { return REGISTERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HEAP", function() { return HEAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONSTANTS", function() { return CONSTANTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARGS", function() { return ARGS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PC", function() { return PC; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
 // These symbols represent "friend" properties that are used inside of
// the VM in other classes, but are not intended to be a part of
// Glimmer's API.

const INNER_VM = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('INNER_VM');
const DESTRUCTOR_STACK = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('DESTRUCTOR_STACK');
const STACKS = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('STACKS');
const REGISTERS = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('REGISTERS');
const HEAP = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('HEAP');
const CONSTANTS = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('CONSTANTS');
const ARGS = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('ARGS');
const PC = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('PC');

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/utils/tags.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/utils/tags.js ***!
  \*****************************************************************************/
/*! exports provided: combineTagged, combineSlice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineTagged", function() { return combineTagged; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineSlice", function() { return combineSlice; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");

/**
 * These utility functions are related to @glimmer/validator, but they aren't
 * meant to be consumed publicly. They exist as an optimization, and pull in
 * types that are otherwise unrelated to the validation system. Keeping them
 * here keeps the validation system isolated, and allows it to avoid pulling in
 * extra type information (which can lead to issues in public types).
 */

function combineTagged(tagged) {
  let optimized = [];

  for (let i = 0, l = tagged.length; i < l; i++) {
    let tag = tagged[i].tag;
    if (tag === _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"]) continue;
    optimized.push(tag);
  }

  return Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["createCombinatorTag"])(optimized);
}
function combineSlice(slice) {
  let optimized = [];
  let node = slice.head();

  while (node !== null) {
    let tag = node.tag;
    if (tag !== _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"]) optimized.push(tag);
    node = slice.nextNode(node);
  }

  return Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["createCombinatorTag"])(optimized);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm.js ***!
  \*********************************************************************/
/*! exports provided: VM, LowLevelVM, UpdatingVM */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vm_append__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vm/append */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/append.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VM", function() { return _vm_append__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _vm_low_level__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vm/low-level */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/low-level.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LowLevelVM", function() { return _vm_low_level__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _vm_update__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vm/update */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/update.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UpdatingVM", function() { return _vm_update__WEBPACK_IMPORTED_MODULE_2__["default"]; });





/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/append.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/append.js ***!
  \****************************************************************************/
/*! exports provided: default, AotVM, JitVM */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AotVM", function() { return AotVM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JitVM", function() { return JitVM; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _utils_tags__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/tags */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/utils/tags.js");
/* harmony import */ var _compiled_opcodes_vm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../compiled/opcodes/vm */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/vm.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../environment */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/environment.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");
/* harmony import */ var _arguments__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./arguments */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/arguments.js");
/* harmony import */ var _low_level__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./low-level */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/low-level.js");
/* harmony import */ var _render_result__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./render-result */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/render-result.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stack */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/stack.js");
/* harmony import */ var _update__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./update */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/update.js");
var _a, _b;
















class Stacks {
  constructor() {
    this.scope = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.dynamicScope = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.updating = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.cache = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.list = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
  }

}

class VM {
  /**
   * End of migrated.
   */
  constructor(runtime, {
    pc,
    scope,
    dynamicScope,
    stack
  }, elementStack) {
    this.runtime = runtime;
    this.elementStack = elementStack;
    this[_a] = new Stacks();
    this[_b] = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.s0 = null;
    this.s1 = null;
    this.t0 = null;
    this.t1 = null;
    this.v0 = null;
    let evalStack = _stack__WEBPACK_IMPORTED_MODULE_11__["default"].restore(stack);
     false && false;
    evalStack[_symbols__WEBPACK_IMPORTED_MODULE_7__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]] = pc;
    evalStack[_symbols__WEBPACK_IMPORTED_MODULE_7__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$sp"]] = stack.length - 1;
    evalStack[_symbols__WEBPACK_IMPORTED_MODULE_7__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$fp"]] = -1;
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["HEAP"]] = this.program.heap;
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["CONSTANTS"]] = this.program.constants;
    this.elementStack = elementStack;
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].scope.push(scope);
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].dynamicScope.push(dynamicScope);
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["ARGS"]] = new _arguments__WEBPACK_IMPORTED_MODULE_8__["VMArgumentsImpl"]();
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]] = new _low_level__WEBPACK_IMPORTED_MODULE_9__["default"](evalStack, this[_symbols__WEBPACK_IMPORTED_MODULE_7__["HEAP"]], runtime.program, {
      debugBefore: opcode => {
        return _opcodes__WEBPACK_IMPORTED_MODULE_5__["APPEND_OPCODES"].debugBefore(this, opcode);
      },
      debugAfter: state => {
        _opcodes__WEBPACK_IMPORTED_MODULE_5__["APPEND_OPCODES"].debugAfter(this, state);
      }
    }, evalStack[_symbols__WEBPACK_IMPORTED_MODULE_7__["REGISTERS"]]);
    this.destructor = {};
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["DESTRUCTOR_STACK"]].push(this.destructor);
  }

  get stack() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].stack;
  }

  currentBlock() {
    return this.elements().block();
  }
  /* Registers */


  get pc() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].fetchRegister(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]);
  } // Fetch a value from a register onto the stack


  fetch(register) {
    this.stack.push(this.fetchValue(register));
  } // Load a value from the stack into a register


  load(register) {
    let value = this.stack.pop();
    this.loadValue(register, value);
  }

  fetchValue(register) {
    if (Object(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["isLowLevelRegister"])(register)) {
      return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].fetchRegister(register);
    }

    switch (register) {
      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$s0"]:
        return this.s0;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$s1"]:
        return this.s1;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$t0"]:
        return this.t0;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$t1"]:
        return this.t1;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$v0"]:
        return this.v0;
    }
  } // Load a value into a register


  loadValue(register, value) {
    if (Object(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["isLowLevelRegister"])(register)) {
      this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].loadRegister(register, value);
    }

    switch (register) {
      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$s0"]:
        this.s0 = value;
        break;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$s1"]:
        this.s1 = value;
        break;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$t0"]:
        this.t0 = value;
        break;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$t1"]:
        this.t1 = value;
        break;

      case _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$v0"]:
        this.v0 = value;
        break;
    }
  }
  /**
   * Migrated to Inner
   */
  // Start a new frame and save $ra and $fp on the stack


  pushFrame() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].pushFrame();
  } // Restore $ra, $sp and $fp


  popFrame() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].popFrame();
  } // Jump to an address in `program`


  goto(offset) {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].goto(offset);
  } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)


  call(handle) {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].call(handle);
  } // Put a specific `program` address in $ra


  returnTo(offset) {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].returnTo(offset);
  } // Return to the `program` address stored in $ra


  return() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].return();
  }

  get program() {
    return this.runtime.program;
  }

  get env() {
    return this.runtime.env;
  }

  captureState(args, pc = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].fetchRegister(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"])) {
    return {
      pc,
      dynamicScope: this.dynamicScope(),
      scope: this.scope(),
      stack: this.stack.capture(args)
    };
  }

  beginCacheGroup() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].cache.push(this.updating().tail());
  }

  commitCacheGroup() {
    let END = new _compiled_opcodes_vm__WEBPACK_IMPORTED_MODULE_3__["LabelOpcode"]('END');
    let opcodes = this.updating();
    let marker = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].cache.pop();
    let head = marker ? opcodes.nextNode(marker) : opcodes.head();
    let tail = opcodes.tail();
    let tag = Object(_utils_tags__WEBPACK_IMPORTED_MODULE_2__["combineSlice"])(new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["ListSlice"](head, tail));
    let guard = new _compiled_opcodes_vm__WEBPACK_IMPORTED_MODULE_3__["JumpIfNotModifiedOpcode"](tag, END);
    opcodes.insertBefore(guard, head);
    opcodes.append(new _compiled_opcodes_vm__WEBPACK_IMPORTED_MODULE_3__["DidModifyOpcode"](guard));
    opcodes.append(END);
  }

  enter(args) {
    let updating = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["LinkedList"]();
    let state = this.capture(args);
    let block = this.elements().pushUpdatableBlock();
    let tryOpcode = new _update__WEBPACK_IMPORTED_MODULE_12__["TryOpcode"](state, this.runtime, block, updating);
    this.didEnter(tryOpcode);
  }

  iterate(memo, value) {
    let stack = this.stack;
    stack.push(value);
    stack.push(memo);
    let state = this.capture(2);
    let block = this.elements().pushUpdatableBlock(); // let ip = this.ip;
    // this.ip = end + 4;
    // this.frames.push(ip);

    return new _update__WEBPACK_IMPORTED_MODULE_12__["TryOpcode"](state, this.runtime, block, new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["LinkedList"]());
  }

  enterItem(key, opcode) {
    this.listBlock().map.set(key, opcode);
    this.didEnter(opcode);
  }

  enterList(offset) {
    let updating = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["LinkedList"]();
    let addr = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].target(offset);
    let state = this.capture(0, addr);
    let list = this.elements().pushBlockList(updating);
    let artifacts = this.stack.peek().artifacts;
    let opcode = new _update__WEBPACK_IMPORTED_MODULE_12__["ListBlockOpcode"](state, this.runtime, list, updating, artifacts);
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].list.push(opcode);
    this.didEnter(opcode);
  }

  didEnter(opcode) {
    this.associateDestructor(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["destructor"])(opcode));
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["DESTRUCTOR_STACK"]].push(opcode);
    this.updateWith(opcode);
    this.pushUpdating(opcode.children);
  }

  exit() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["DESTRUCTOR_STACK"]].pop();
    this.elements().popBlock();
    this.popUpdating();
    let parent = this.updating().tail();
    parent.didInitializeChildren();
  }

  exitList() {
    this.exit();
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].list.pop();
  }

  pushUpdating(list = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["LinkedList"]()) {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].updating.push(list);
  }

  popUpdating() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].updating.pop();
  }

  updateWith(opcode) {
    this.updating().append(opcode);
  }

  listBlock() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].list.current;
  }

  associateDestructor(child) {
    if (!Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["isDrop"])(child)) return;
    let parent = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["DESTRUCTOR_STACK"]].current;
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["associateDestructor"])(parent, child);
  }

  associateDestroyable(child) {
    this.associateDestructor(Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["destructor"])(child));
  }

  tryUpdating() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].updating.current;
  }

  updating() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].updating.current;
  }

  elements() {
    return this.elementStack;
  }

  scope() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].scope.current;
  }

  dynamicScope() {
    return this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].dynamicScope.current;
  }

  pushChildScope() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].scope.push(this.scope().child());
  }

  pushDynamicScope() {
    let child = this.dynamicScope().child();
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].dynamicScope.push(child);
    return child;
  }

  pushRootScope(size) {
    let scope = _environment__WEBPACK_IMPORTED_MODULE_4__["ScopeImpl"].sized(size);
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].scope.push(scope);
    return scope;
  }

  pushScope(scope) {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].scope.push(scope);
  }

  popScope() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].scope.pop();
  }

  popDynamicScope() {
    this[_symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"]].dynamicScope.pop();
  } /// SCOPE HELPERS


  getSelf() {
    return this.scope().getSelf();
  }

  referenceForSymbol(symbol) {
    return this.scope().getSymbol(symbol);
  } /// EXECUTION


  execute(initialize) {
    if (false
    /* LOCAL_SHOULD_LOG */
    ) {}

    if (initialize) initialize(this);
    let result;

    while (true) {
      result = this.next();
      if (result.done) break;
    }

    return result.value;
  }

  next() {
    let {
      env,
      elementStack
    } = this;
    let opcode = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].nextStatement();
    let result;

    if (opcode !== null) {
      this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].evaluateOuter(opcode, this);
      result = {
        done: false,
        value: null
      };
    } else {
      // Unload the stack
      this.stack.reset();
      result = {
        done: true,
        value: new _render_result__WEBPACK_IMPORTED_MODULE_10__["default"](env, this.popUpdating(), elementStack.popBlock(), this.destructor)
      };
    }

    return result;
  }

  bindDynamicScope(names) {
    let scope = this.dynamicScope();

    for (let i = names.length - 1; i >= 0; i--) {
      let name = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["CONSTANTS"]].getString(names[i]);
      scope.set(name, this.stack.pop());
    }
  }

}
_a = _symbols__WEBPACK_IMPORTED_MODULE_7__["STACKS"], _b = _symbols__WEBPACK_IMPORTED_MODULE_7__["DESTRUCTOR_STACK"];

function vmState(pc, scope = _environment__WEBPACK_IMPORTED_MODULE_4__["ScopeImpl"].root(_references__WEBPACK_IMPORTED_MODULE_6__["UNDEFINED_REFERENCE"], 0), dynamicScope) {
  return {
    pc,
    scope,
    dynamicScope,
    stack: []
  };
}

class AotVM extends VM {
  static empty(runtime, {
    handle,
    treeBuilder,
    dynamicScope
  }) {
    let vm = initAOT(runtime, vmState(runtime.program.heap.getaddr(handle), _environment__WEBPACK_IMPORTED_MODULE_4__["ScopeImpl"].root(_references__WEBPACK_IMPORTED_MODULE_6__["UNDEFINED_REFERENCE"], 0), dynamicScope), treeBuilder);
    vm.pushUpdating();
    return vm;
  }

  static initial(runtime, {
    handle,
    self,
    treeBuilder,
    dynamicScope
  }) {
    let scopeSize = runtime.program.heap.scopesizeof(handle);
    let scope = _environment__WEBPACK_IMPORTED_MODULE_4__["ScopeImpl"].root(self, scopeSize);
    let pc = runtime.program.heap.getaddr(handle);
    let state = vmState(pc, scope, dynamicScope);
    let vm = initAOT(runtime, state, treeBuilder);
    vm.pushUpdating();
    return vm;
  }

  capture(args, pc = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].fetchRegister(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"])) {
    return new _update__WEBPACK_IMPORTED_MODULE_12__["ResumableVMStateImpl"](this.captureState(args, pc), initAOT);
  }

}

function initAOT(runtime, state, builder) {
  return new AotVM(runtime, state, builder);
}

function initJIT(context) {
  return (runtime, state, builder) => new JitVM(runtime, state, builder, context);
}

class JitVM extends VM {
  constructor(runtime, state, elementStack, context) {
    super(runtime, state, elementStack);
    this.context = context;
    this.resume = initJIT(this.context);
  }

  static initial(runtime, context, {
    handle,
    self,
    dynamicScope,
    treeBuilder
  }) {
    let scopeSize = runtime.program.heap.scopesizeof(handle);
    let scope = _environment__WEBPACK_IMPORTED_MODULE_4__["ScopeImpl"].root(self, scopeSize);
    let state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);
    let vm = initJIT(context)(runtime, state, treeBuilder);
    vm.pushUpdating();
    return vm;
  }

  static empty(runtime, {
    handle,
    treeBuilder,
    dynamicScope
  }, context) {
    let vm = initJIT(context)(runtime, vmState(runtime.program.heap.getaddr(handle), _environment__WEBPACK_IMPORTED_MODULE_4__["ScopeImpl"].root(_references__WEBPACK_IMPORTED_MODULE_6__["UNDEFINED_REFERENCE"], 0), dynamicScope), treeBuilder);
    vm.pushUpdating();
    return vm;
  }

  capture(args, pc = this[_symbols__WEBPACK_IMPORTED_MODULE_7__["INNER_VM"]].fetchRegister(_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"])) {
    return new _update__WEBPACK_IMPORTED_MODULE_12__["ResumableVMStateImpl"](this.captureState(args, pc), this.resume);
  }

  compile(block) {
    let handle = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["unwrapHandle"])(block.compile(this.context));
    return handle;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/arguments.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/arguments.js ***!
  \*******************************************************************************/
/*! exports provided: VMArgumentsImpl, PositionalArgumentsImpl, CapturedPositionalArgumentsImpl, NamedArgumentsImpl, CapturedNamedArgumentsImpl, BlockArgumentsImpl, CapturedArgumentsImpl, EMPTY_ARGS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VMArgumentsImpl", function() { return VMArgumentsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionalArgumentsImpl", function() { return PositionalArgumentsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CapturedPositionalArgumentsImpl", function() { return CapturedPositionalArgumentsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedArgumentsImpl", function() { return NamedArgumentsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CapturedNamedArgumentsImpl", function() { return CapturedNamedArgumentsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockArgumentsImpl", function() { return BlockArgumentsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CapturedArgumentsImpl", function() { return CapturedArgumentsImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY_ARGS", function() { return EMPTY_ARGS; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../references */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js");
/* harmony import */ var _utils_tags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/tags */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/utils/tags.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");






/*
  The calling convention is:

  * 0-N block arguments at the bottom
  * 0-N positional arguments next (left-to-right)
  * 0-N named arguments next
*/

class VMArgumentsImpl {
  constructor() {
    this.stack = null;
    this.positional = new PositionalArgumentsImpl();
    this.named = new NamedArgumentsImpl();
    this.blocks = new BlockArgumentsImpl();
  }

  empty(stack) {
    let base = stack[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_5__["$sp"]] + 1;
    this.named.empty(stack, base);
    this.positional.empty(stack, base);
    this.blocks.empty(stack, base);
    return this;
  }

  setup(stack, names, blockNames, positionalCount, atNames) {
    this.stack = stack;
    /*
           | ... | blocks      | positional  | named |
           | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
     index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                   ^             ^             ^  ^
                 bbase         pbase       nbase  sp
    */

    let named = this.named;
    let namedCount = names.length;
    let namedBase = stack[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_5__["$sp"]] - namedCount + 1;
    named.setup(stack, namedBase, namedCount, names, atNames);
    let positional = this.positional;
    let positionalBase = namedBase - positionalCount;
    positional.setup(stack, positionalBase, positionalCount);
    let blocks = this.blocks;
    let blocksCount = blockNames.length;
    let blocksBase = positionalBase - blocksCount * 3;
    blocks.setup(stack, blocksBase, blocksCount, blockNames);
  }

  get tag() {
    return Object(_utils_tags__WEBPACK_IMPORTED_MODULE_3__["combineTagged"])([this.positional, this.named]);
  }

  get base() {
    return this.blocks.base;
  }

  get length() {
    return this.positional.length + this.named.length + this.blocks.length * 3;
  }

  at(pos) {
    return this.positional.at(pos);
  }

  realloc(offset) {
    let {
      stack
    } = this;

    if (offset > 0 && stack !== null) {
      let {
        positional,
        named
      } = this;
      let newBase = positional.base + offset;
      let length = positional.length + named.length;

      for (let i = length - 1; i >= 0; i--) {
        stack.copy(i + positional.base, i + newBase);
      }

      positional.base += offset;
      named.base += offset;
      stack[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_5__["$sp"]] += offset;
    }
  }

  capture() {
    let positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();
    let named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
    return new CapturedArgumentsImpl(this.tag, positional, named, this.length);
  }

  clear() {
    let {
      stack,
      length
    } = this;
    if (length > 0 && stack !== null) stack.pop(length);
  }

}
class PositionalArgumentsImpl {
  constructor() {
    this.base = 0;
    this.length = 0;
    this.stack = null;
    this._tag = null;
    this._references = null;
  }

  empty(stack, base) {
    this.stack = stack;
    this.base = base;
    this.length = 0;
    this._tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
    this._references = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
  }

  setup(stack, base, length) {
    this.stack = stack;
    this.base = base;
    this.length = length;

    if (length === 0) {
      this._tag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
      this._references = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    } else {
      this._tag = null;
      this._references = null;
    }
  }

  get tag() {
    let tag = this._tag;

    if (!tag) {
      tag = this._tag = Object(_utils_tags__WEBPACK_IMPORTED_MODULE_3__["combineTagged"])(this.references);
    }

    return tag;
  }

  at(position) {
    let {
      base,
      length,
      stack
    } = this;

    if (position < 0 || position >= length) {
      return _references__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED_REFERENCE"];
    }

    return stack.get(position, base);
  }

  capture() {
    return new CapturedPositionalArgumentsImpl(this.tag, this.references);
  }

  prepend(other) {
    let additions = other.length;

    if (additions > 0) {
      let {
        base,
        length,
        stack
      } = this;
      this.base = base = base - additions;
      this.length = length + additions;

      for (let i = 0; i < additions; i++) {
        stack.set(other.at(i), i, base);
      }

      this._tag = null;
      this._references = null;
    }
  }

  get references() {
    let references = this._references;

    if (!references) {
      let {
        stack,
        base,
        length
      } = this;
      references = this._references = stack.sliceArray(base, base + length);
    }

    return references;
  }

}
class CapturedPositionalArgumentsImpl {
  constructor(tag, references, length = references.length) {
    this.tag = tag;
    this.references = references;
    this.length = length;
  }

  static empty() {
    return new CapturedPositionalArgumentsImpl(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"], _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"], 0);
  }

  at(position) {
    return this.references[position];
  }

  value() {
    return this.references.map(this.valueOf);
  }

  get(name) {
    let {
      references,
      length
    } = this;

    if (name === 'length') {
      return _references__WEBPACK_IMPORTED_MODULE_2__["PrimitiveReference"].create(length);
    } else {
      let idx = parseInt(name, 10);

      if (idx < 0 || idx >= length) {
        return _references__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED_REFERENCE"];
      } else {
        return references[idx];
      }
    }
  }

  valueOf(reference) {
    return reference.value();
  }

}
class NamedArgumentsImpl {
  constructor() {
    this.base = 0;
    this.length = 0;
    this._references = null;
    this._names = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    this._atNames = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
  }

  empty(stack, base) {
    this.stack = stack;
    this.base = base;
    this.length = 0;
    this._references = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    this._names = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    this._atNames = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
  }

  setup(stack, base, length, names, atNames) {
    this.stack = stack;
    this.base = base;
    this.length = length;

    if (length === 0) {
      this._references = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
      this._names = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
      this._atNames = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    } else {
      this._references = null;

      if (atNames) {
        this._names = null;
        this._atNames = names;
      } else {
        this._names = names;
        this._atNames = null;
      }
    }
  }

  get tag() {
    return Object(_utils_tags__WEBPACK_IMPORTED_MODULE_3__["combineTagged"])(this.references);
  }

  get names() {
    let names = this._names;

    if (!names) {
      names = this._names = this._atNames.map(this.toSyntheticName);
    }

    return names;
  }

  get atNames() {
    let atNames = this._atNames;

    if (!atNames) {
      atNames = this._atNames = this._names.map(this.toAtName);
    }

    return atNames;
  }

  has(name) {
    return this.names.indexOf(name) !== -1;
  }

  get(name, atNames = false) {
    let {
      base,
      stack
    } = this;
    let names = atNames ? this.atNames : this.names;
    let idx = names.indexOf(name);

    if (idx === -1) {
      return _references__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED_REFERENCE"];
    }

    return stack.get(idx, base);
  }

  capture() {
    return new CapturedNamedArgumentsImpl(this.tag, this.names, this.references);
  }

  merge(other) {
    let {
      length: extras
    } = other;

    if (extras > 0) {
      let {
        names,
        length,
        stack
      } = this;
      let {
        names: extraNames
      } = other;

      if (Object.isFrozen(names) && names.length === 0) {
        names = [];
      }

      for (let i = 0; i < extras; i++) {
        let name = extraNames[i];
        let idx = names.indexOf(name);

        if (idx === -1) {
          length = names.push(name);
          stack.push(other.references[i]);
        }
      }

      this.length = length;
      this._references = null;
      this._names = names;
      this._atNames = null;
    }
  }

  get references() {
    let references = this._references;

    if (!references) {
      let {
        base,
        length,
        stack
      } = this;
      references = this._references = stack.sliceArray(base, base + length);
    }

    return references;
  }

  toSyntheticName(name) {
    return name.slice(1);
  }

  toAtName(name) {
    return "@".concat(name);
  }

}
class CapturedNamedArgumentsImpl {
  constructor(tag, names, references) {
    this.tag = tag;
    this.names = names;
    this.references = references;
    this.length = names.length;
    this._map = null;
  }

  get map() {
    let map = this._map;

    if (!map) {
      let {
        names,
        references
      } = this;
      map = this._map = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["dict"])();

      for (let i = 0; i < names.length; i++) {
        let name = names[i];
        map[name] = references[i];
      }
    }

    return map;
  }

  has(name) {
    return this.names.indexOf(name) !== -1;
  }

  get(name) {
    let {
      names,
      references
    } = this;
    let idx = names.indexOf(name);

    if (idx === -1) {
      return _references__WEBPACK_IMPORTED_MODULE_2__["UNDEFINED_REFERENCE"];
    } else {
      return references[idx];
    }
  }

  value() {
    let {
      names,
      references
    } = this;
    let out = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["dict"])();

    for (let i = 0; i < names.length; i++) {
      let name = names[i];
      out[name] = references[i].value();
    }

    return out;
  }

}
class BlockArgumentsImpl {
  constructor() {
    this.internalValues = null;
    this.internalTag = null;
    this.names = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    this.length = 0;
    this.base = 0;
  }

  empty(stack, base) {
    this.stack = stack;
    this.names = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    this.base = base;
    this.length = 0;
    this.internalTag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
    this.internalValues = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
  }

  setup(stack, base, length, names) {
    this.stack = stack;
    this.names = names;
    this.base = base;
    this.length = length;

    if (length === 0) {
      this.internalTag = _glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"];
      this.internalValues = _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"];
    } else {
      this.internalTag = null;
      this.internalValues = null;
    }
  }

  get values() {
    let values = this.internalValues;

    if (!values) {
      let {
        base,
        length,
        stack
      } = this;
      values = this.internalValues = stack.sliceArray(base, base + length * 3);
    }

    return values;
  }

  has(name) {
    return this.names.indexOf(name) !== -1;
  }

  get(name) {
    let idx = this.names.indexOf(name);

    if (idx === -1) {
      return null;
    }

    let {
      base,
      stack
    } = this;
    let table = stack.get(idx * 3, base);
    let scope = stack.get(idx * 3 + 1, base);
    let handle = stack.get(idx * 3 + 2, base);
    return handle === null ? null : [handle, scope, table];
  }

  capture() {
    return new CapturedBlockArgumentsImpl(this.names, this.values);
  }

}

class CapturedBlockArgumentsImpl {
  constructor(names, values) {
    this.names = names;
    this.values = values;
    this.length = names.length;
  }

  has(name) {
    return this.names.indexOf(name) !== -1;
  }

  get(name) {
    let idx = this.names.indexOf(name);
    if (idx === -1) return null;
    return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];
  }

}

class CapturedArgumentsImpl {
  constructor(tag, positional, named, length) {
    this.tag = tag;
    this.positional = positional;
    this.named = named;
    this.length = length;
  }

  value() {
    return {
      named: this.named.value(),
      positional: this.positional.value()
    };
  }

}
const EMPTY_NAMED = new CapturedNamedArgumentsImpl(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"], _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"], _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"]);
const EMPTY_POSITIONAL = new CapturedPositionalArgumentsImpl(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"], _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"]);
const EMPTY_ARGS = new CapturedArgumentsImpl(_glimmer_validator__WEBPACK_IMPORTED_MODULE_1__["CONSTANT_TAG"], EMPTY_POSITIONAL, EMPTY_NAMED, 0);

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/attributes/dynamic.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/attributes/dynamic.js ***!
  \****************************************************************************************/
/*! exports provided: dynamicAttribute, DynamicAttribute, SimpleDynamicAttribute, DefaultDynamicProperty, SafeDynamicProperty, SafeDynamicAttribute, InputValueDynamicAttribute, OptionSelectedDynamicAttribute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dynamicAttribute", function() { return dynamicAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicAttribute", function() { return DynamicAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleDynamicAttribute", function() { return SimpleDynamicAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultDynamicProperty", function() { return DefaultDynamicProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SafeDynamicProperty", function() { return SafeDynamicProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SafeDynamicAttribute", function() { return SafeDynamicAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputValueDynamicAttribute", function() { return InputValueDynamicAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OptionSelectedDynamicAttribute", function() { return OptionSelectedDynamicAttribute; });
/* harmony import */ var _dom_normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom/normalize */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js");
/* harmony import */ var _dom_props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom/props */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/props.js");
/* harmony import */ var _dom_sanitized_values__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom/sanitized-values */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/sanitized-values.js");



function dynamicAttribute(element, attr, namespace) {
  let {
    tagName,
    namespaceURI
  } = element;
  let attribute = {
    element,
    name: attr,
    namespace
  };

  if (namespaceURI === "http://www.w3.org/2000/svg"
  /* SVG */
  ) {
      return buildDynamicAttribute(tagName, attr, attribute);
    }

  let {
    type,
    normalized
  } = Object(_dom_props__WEBPACK_IMPORTED_MODULE_1__["normalizeProperty"])(element, attr);

  if (type === 'attr') {
    return buildDynamicAttribute(tagName, normalized, attribute);
  } else {
    return buildDynamicProperty(tagName, normalized, attribute);
  }
}

function buildDynamicAttribute(tagName, name, attribute) {
  if (Object(_dom_sanitized_values__WEBPACK_IMPORTED_MODULE_2__["requiresSanitization"])(tagName, name)) {
    return new SafeDynamicAttribute(attribute);
  } else {
    return new SimpleDynamicAttribute(attribute);
  }
}

function buildDynamicProperty(tagName, name, attribute) {
  if (Object(_dom_sanitized_values__WEBPACK_IMPORTED_MODULE_2__["requiresSanitization"])(tagName, name)) {
    return new SafeDynamicProperty(name, attribute);
  }

  if (isUserInputValue(tagName, name)) {
    return new InputValueDynamicAttribute(name, attribute);
  }

  if (isOptionSelected(tagName, name)) {
    return new OptionSelectedDynamicAttribute(name, attribute);
  }

  return new DefaultDynamicProperty(name, attribute);
}

class DynamicAttribute {
  constructor(attribute) {
    this.attribute = attribute;
  }

}
class SimpleDynamicAttribute extends DynamicAttribute {
  set(dom, value, _env) {
    let normalizedValue = normalizeValue(value);

    if (normalizedValue !== null) {
      let {
        name,
        namespace
      } = this.attribute;

      dom.__setAttribute(name, normalizedValue, namespace);
    }
  }

  update(value, _env) {
    let normalizedValue = normalizeValue(value);
    let {
      element,
      name
    } = this.attribute;

    if (normalizedValue === null) {
      element.removeAttribute(name);
    } else {
      element.setAttribute(name, normalizedValue);
    }
  }

}
class DefaultDynamicProperty extends DynamicAttribute {
  constructor(normalizedName, attribute) {
    super(attribute);
    this.normalizedName = normalizedName;
  }

  set(dom, value, _env) {
    if (value !== null && value !== undefined) {
      this.value = value;

      dom.__setProperty(this.normalizedName, value);
    }
  }

  update(value, _env) {
    let {
      element
    } = this.attribute;

    if (this.value !== value) {
      element[this.normalizedName] = this.value = value;

      if (value === null || value === undefined) {
        this.removeAttribute();
      }
    }
  }

  removeAttribute() {
    // TODO this sucks but to preserve properties first and to meet current
    // semantics we must do this.
    let {
      element,
      namespace
    } = this.attribute;

    if (namespace) {
      element.removeAttributeNS(namespace, this.normalizedName);
    } else {
      element.removeAttribute(this.normalizedName);
    }
  }

}
class SafeDynamicProperty extends DefaultDynamicProperty {
  set(dom, value, env) {
    let {
      element,
      name
    } = this.attribute;
    let sanitized = Object(_dom_sanitized_values__WEBPACK_IMPORTED_MODULE_2__["sanitizeAttributeValue"])(env, element, name, value);
    super.set(dom, sanitized, env);
  }

  update(value, env) {
    let {
      element,
      name
    } = this.attribute;
    let sanitized = Object(_dom_sanitized_values__WEBPACK_IMPORTED_MODULE_2__["sanitizeAttributeValue"])(env, element, name, value);
    super.update(sanitized, env);
  }

}
class SafeDynamicAttribute extends SimpleDynamicAttribute {
  set(dom, value, env) {
    let {
      element,
      name
    } = this.attribute;
    let sanitized = Object(_dom_sanitized_values__WEBPACK_IMPORTED_MODULE_2__["sanitizeAttributeValue"])(env, element, name, value);
    super.set(dom, sanitized, env);
  }

  update(value, env) {
    let {
      element,
      name
    } = this.attribute;
    let sanitized = Object(_dom_sanitized_values__WEBPACK_IMPORTED_MODULE_2__["sanitizeAttributeValue"])(env, element, name, value);
    super.update(sanitized, env);
  }

}
class InputValueDynamicAttribute extends DefaultDynamicProperty {
  set(dom, value) {
    dom.__setProperty('value', Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_0__["normalizeStringValue"])(value));
  }

  update(value) {
    let input = this.attribute.element;
    let currentValue = input.value;
    let normalizedValue = Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_0__["normalizeStringValue"])(value);

    if (currentValue !== normalizedValue) {
      input.value = normalizedValue;
    }
  }

}
class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {
  set(dom, value) {
    if (value !== null && value !== undefined && value !== false) {
      dom.__setProperty('selected', true);
    }
  }

  update(value) {
    let option = this.attribute.element;

    if (value) {
      option.selected = true;
    } else {
      option.selected = false;
    }
  }

}

function isOptionSelected(tagName, attribute) {
  return tagName === 'OPTION' && attribute === 'selected';
}

function isUserInputValue(tagName, attribute) {
  return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
}

function normalizeValue(value) {
  if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {
    return null;
  }

  if (value === true) {
    return '';
  } // onclick function etc in SSR


  if (typeof value === 'function') {
    return null;
  }

  return String(value);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/content/text.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/content/text.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DynamicTextContent; });
/* harmony import */ var _dom_normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom/normalize */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");



class DynamicTextContent extends _opcodes__WEBPACK_IMPORTED_MODULE_1__["UpdatingOpcode"] {
  constructor(node, reference, lastValue) {
    super();
    this.node = node;
    this.reference = reference;
    this.lastValue = lastValue;
    this.type = 'dynamic-text';
    this.tag = reference.tag;
    this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__["valueForTag"])(this.tag);
  }

  evaluate() {
    let {
      reference,
      tag
    } = this;

    if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__["validateTag"])(tag, this.lastRevision)) {
      this.lastRevision = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_2__["valueForTag"])(tag);
      this.update(reference.value());
    }
  }

  update(value) {
    let {
      lastValue
    } = this;
    if (value === lastValue) return;
    let normalized;

    if (Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(value)) {
      normalized = '';
    } else if (Object(_dom_normalize__WEBPACK_IMPORTED_MODULE_0__["isString"])(value)) {
      normalized = value;
    } else {
      normalized = String(value);
    }

    if (normalized !== lastValue) {
      let textNode = this.node;
      textNode.nodeValue = this.lastValue = normalized;
    }
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js ***!
  \*************************************************************************************/
/*! exports provided: Fragment, CURSOR_STACK, NewElementBuilder, SimpleLiveBlock, RemoteLiveBlock, UpdatableBlockImpl, clientBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fragment", function() { return Fragment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CURSOR_STACK", function() { return CURSOR_STACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewElementBuilder", function() { return NewElementBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleLiveBlock", function() { return SimpleLiveBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RemoteLiveBlock", function() { return RemoteLiveBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdatableBlockImpl", function() { return UpdatableBlockImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clientBuilder", function() { return clientBuilder; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _bounds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bounds */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js");
/* harmony import */ var _lifetime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifetime */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/lifetime.js");
var _a;





class First {
  constructor(node) {
    this.node = node;
  }

  firstNode() {
    return this.node;
  }

}

class Last {
  constructor(node) {
    this.node = node;
  }

  lastNode() {
    return this.node;
  }

}

class Fragment {
  constructor(bounds) {
    this.bounds = bounds;
  }

  parentElement() {
    return this.bounds.parentElement();
  }

  firstNode() {
    return this.bounds.firstNode();
  }

  lastNode() {
    return this.bounds.lastNode();
  }

}
const CURSOR_STACK = Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["symbol"])('CURSOR_STACK');
class NewElementBuilder {
  constructor(env, parentNode, nextSibling) {
    this.constructing = null;
    this.operations = null;
    this[_a] = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.modifierStack = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.blockStack = new _glimmer_util__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
    this.pushElement(parentNode, nextSibling);
    this.env = env;
    this.dom = env.getAppendOperations();
    this.updateOperations = env.getDOM();
  }

  static forInitialRender(env, cursor) {
    return new this(env, cursor.element, cursor.nextSibling).initialize();
  }

  static resume(env, block) {
    let parentNode = block.parentElement();
    let nextSibling = block.reset(env);
    let stack = new this(env, parentNode, nextSibling).initialize();
    stack.pushLiveBlock(block);
    return stack;
  }

  initialize() {
    this.pushSimpleBlock();
    return this;
  }

  debugBlocks() {
    return this.blockStack.toArray();
  }

  get element() {
    return this[CURSOR_STACK].current.element;
  }

  get nextSibling() {
    return this[CURSOR_STACK].current.nextSibling;
  }

  block() {
    return this.blockStack.current;
  }

  popElement() {
    this[CURSOR_STACK].pop();
    this[CURSOR_STACK].current;
  }

  pushSimpleBlock() {
    return this.pushLiveBlock(new SimpleLiveBlock(this.element));
  }

  pushUpdatableBlock() {
    return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
  }

  pushBlockList(list) {
    return this.pushLiveBlock(new LiveBlockList(this.element, list));
  }

  pushLiveBlock(block, isRemote = false) {
    let current = this.blockStack.current;

    if (current !== null) {
      if (!isRemote) {
        current.didAppendBounds(block);
      }
    }

    this.__openBlock();

    this.blockStack.push(block);
    return block;
  }

  popBlock() {
    this.block().finalize(this);

    this.__closeBlock();

    return this.blockStack.pop();
  }

  __openBlock() {}

  __closeBlock() {} // todo return seems unused


  openElement(tag) {
    let element = this.__openElement(tag);

    this.constructing = element;
    return element;
  }

  __openElement(tag) {
    return this.dom.createElement(tag, this.element);
  }

  flushElement(modifiers) {
    let parent = this.element;
    let element = this.constructing;

    this.__flushElement(parent, element);

    this.constructing = null;
    this.operations = null;
    this.pushModifiers(modifiers);
    this.pushElement(element, null);
    this.didOpenElement(element);
  }

  __flushElement(parent, constructing) {
    this.dom.insertBefore(parent, constructing, this.nextSibling);
  }

  closeElement() {
    this.willCloseElement();
    this.popElement();
    return this.popModifiers();
  }

  pushRemoteElement(element, guid, insertBefore) {
    return this.__pushRemoteElement(element, guid, insertBefore);
  }

  __pushRemoteElement(element, _guid, insertBefore) {
    this.pushElement(element, insertBefore);

    if (insertBefore === undefined) {
      while (element.lastChild) {
        element.removeChild(element.lastChild);
      }
    }

    let block = new RemoteLiveBlock(element);
    return this.pushLiveBlock(block, true);
  }

  popRemoteElement() {
    this.popBlock();
    this.popElement();
  }

  pushElement(element, nextSibling = null) {
    this[CURSOR_STACK].push(new _bounds__WEBPACK_IMPORTED_MODULE_1__["CursorImpl"](element, nextSibling));
  }

  pushModifiers(modifiers) {
    this.modifierStack.push(modifiers);
  }

  popModifiers() {
    return this.modifierStack.pop();
  }

  didAppendBounds(bounds) {
    this.block().didAppendBounds(bounds);
    return bounds;
  }

  didAppendNode(node) {
    this.block().didAppendNode(node);
    return node;
  }

  didOpenElement(element) {
    this.block().openElement(element);
    return element;
  }

  willCloseElement() {
    this.block().closeElement();
  }

  appendText(string) {
    return this.didAppendNode(this.__appendText(string));
  }

  __appendText(text) {
    let {
      dom,
      element,
      nextSibling
    } = this;
    let node = dom.createTextNode(text);
    dom.insertBefore(element, node, nextSibling);
    return node;
  }

  __appendNode(node) {
    this.dom.insertBefore(this.element, node, this.nextSibling);
    return node;
  }

  __appendFragment(fragment) {
    let first = fragment.firstChild;

    if (first) {
      let ret = new _bounds__WEBPACK_IMPORTED_MODULE_1__["ConcreteBounds"](this.element, first, fragment.lastChild);
      this.dom.insertBefore(this.element, fragment, this.nextSibling);
      return ret;
    } else {
      return new _bounds__WEBPACK_IMPORTED_MODULE_1__["SingleNodeBounds"](this.element, this.__appendComment(''));
    }
  }

  __appendHTML(html) {
    return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
  }

  appendDynamicHTML(value) {
    let bounds = this.trustedContent(value);
    this.didAppendBounds(bounds);
  }

  appendDynamicText(value) {
    let node = this.untrustedContent(value);
    this.didAppendNode(node);
    return node;
  }

  appendDynamicFragment(value) {
    let bounds = this.__appendFragment(value);

    this.didAppendBounds(bounds);
  }

  appendDynamicNode(value) {
    let node = this.__appendNode(value);

    let bounds = new _bounds__WEBPACK_IMPORTED_MODULE_1__["SingleNodeBounds"](this.element, node);
    this.didAppendBounds(bounds);
  }

  trustedContent(value) {
    return this.__appendHTML(value);
  }

  untrustedContent(value) {
    return this.__appendText(value);
  }

  appendComment(string) {
    return this.didAppendNode(this.__appendComment(string));
  }

  __appendComment(string) {
    let {
      dom,
      element,
      nextSibling
    } = this;
    let node = dom.createComment(string);
    dom.insertBefore(element, node, nextSibling);
    return node;
  }

  __setAttribute(name, value, namespace) {
    this.dom.setAttribute(this.constructing, name, value, namespace);
  }

  __setProperty(name, value) {
    this.constructing[name] = value;
  }

  setStaticAttribute(name, value, namespace) {
    this.__setAttribute(name, value, namespace);
  }

  setDynamicAttribute(name, value, trusting, namespace) {
    let element = this.constructing;
    let attribute = this.env.attributeFor(element, name, trusting, namespace);
    attribute.set(this, value, this.env);
    return attribute;
  }

}
_a = CURSOR_STACK;
class SimpleLiveBlock {
  constructor(parent) {
    this.parent = parent;
    this.first = null;
    this.last = null;
    this.destroyables = null;
    this.nesting = 0;
  }

  parentElement() {
    return this.parent;
  }

  firstNode() {
    let first = this.first;
    return first.firstNode();
  }

  lastNode() {
    let last = this.last;
    return last.lastNode();
  }

  openElement(element) {
    this.didAppendNode(element);
    this.nesting++;
  }

  closeElement() {
    this.nesting--;
  }

  didAppendNode(node) {
    if (this.nesting !== 0) return;

    if (!this.first) {
      this.first = new First(node);
    }

    this.last = new Last(node);
  }

  didAppendBounds(bounds) {
    if (this.nesting !== 0) return;

    if (!this.first) {
      this.first = bounds;
    }

    this.last = bounds;
  }

  finalize(stack) {
    if (this.first === null) {
      stack.appendComment('');
    }
  }

}
class RemoteLiveBlock extends SimpleLiveBlock {
  [_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["DESTROY"]]() {
    // In general, you only need to clear the root of a hierarchy, and should never
    // need to clear any child nodes. This is an important constraint that gives us
    // a strong guarantee that clearing a subtree is a single DOM operation.
    //
    // Because remote blocks are not normally physically nested inside of the tree
    // that they are logically nested inside, we manually clear remote blocks when
    // a logical parent is cleared.
    //
    // HOWEVER, it is currently possible for a remote block to be physically nested
    // inside of the block it is logically contained inside of. This happens when
    // the remote block is appended to the end of the application's entire element.
    //
    // The problem with that scenario is that Glimmer believes that it owns more of
    // the DOM than it actually does. The code is attempting to write past the end
    // of the Glimmer-managed root, but Glimmer isn't aware of that.
    //
    // The correct solution to that problem is for Glimmer to be aware of the end
    // of the bounds that it owns, and once we make that change, this check could
    // be removed.
    //
    // For now, a more targeted fix is to check whether the node was already removed
    // and avoid clearing the node if it was. In most cases this shouldn't happen,
    // so this might hide bugs where the code clears nested nodes unnecessarily,
    // so we should eventually try to do the correct fix.
    if (this.parentElement() === this.firstNode().parentNode) {
      Object(_bounds__WEBPACK_IMPORTED_MODULE_1__["clear"])(this);
    }
  }

}
class UpdatableBlockImpl extends SimpleLiveBlock {
  reset(env) {
    let nextSibling = Object(_lifetime__WEBPACK_IMPORTED_MODULE_2__["detachChildren"])(this, env); // let nextSibling = clear(this);

    this.first = null;
    this.last = null;
    this.destroyables = null;
    this.nesting = 0;
    return nextSibling;
  }

} // FIXME: All the noops in here indicate a modelling problem

class LiveBlockList {
  constructor(parent, boundList) {
    this.parent = parent;
    this.boundList = boundList;
    this.parent = parent;
    this.boundList = boundList;
  }

  parentElement() {
    return this.parent;
  }

  firstNode() {
    let head = this.boundList.head();
    return head.firstNode();
  }

  lastNode() {
    let tail = this.boundList.tail();
    return tail.lastNode();
  }

  openElement(_element) {
     false && false;
  }

  closeElement() {
     false && false;
  }

  didAppendNode(_node) {
     false && false;
  }

  didAppendBounds(_bounds) {}

  finalize(_stack) {
     false && false;
  }

}

function clientBuilder(env, cursor) {
  return NewElementBuilder.forInitialRender(env, cursor);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/low-level.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/low-level.js ***!
  \*******************************************************************************/
/*! exports provided: initializeRegisters, initializeRegistersWithSP, initializeRegistersWithPC, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeRegisters", function() { return initializeRegisters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeRegistersWithSP", function() { return initializeRegistersWithSP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeRegistersWithPC", function() { return initializeRegistersWithPC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LowLevelVM; });
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");



function initializeRegisters() {
  return [0, -1, 0, 0];
}
function initializeRegistersWithSP(sp) {
  return [0, -1, sp, 0];
}
function initializeRegistersWithPC(pc) {
  return [pc, -1, 0, 0];
}
class LowLevelVM {
  constructor(stack, heap, program, externs, registers) {
    this.stack = stack;
    this.heap = heap;
    this.program = program;
    this.externs = externs;
    this.registers = registers;
    this.currentOpSize = 0;
  }

  fetchRegister(register) {
    return this.registers[register];
  }

  loadRegister(register, value) {
    this.registers[register] = value;
  }

  setPc(pc) {
     false && false;
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]] = pc;
  } // Start a new frame and save $ra and $fp on the stack


  pushFrame() {
    this.stack.push(this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$ra"]]);
    this.stack.push(this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$fp"]]);
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$fp"]] = this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$sp"]] - 1;
  } // Restore $ra, $sp and $fp


  popFrame() {
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$sp"]] = this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$fp"]] - 1;
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$ra"]] = this.stack.get(0);
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$fp"]] = this.stack.get(1);
  }

  pushSmallFrame() {
    this.stack.push(this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$ra"]]);
  }

  popSmallFrame() {
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$ra"]] = this.stack.pop();
  } // Jump to an address in `program`


  goto(offset) {
    this.setPc(this.target(offset));
  }

  target(offset) {
    return this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]] + offset - this.currentOpSize;
  } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)


  call(handle) {
     false && false;
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$ra"]] = this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]];
    this.setPc(this.heap.getaddr(handle));
  } // Put a specific `program` address in $ra


  returnTo(offset) {
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$ra"]] = this.target(offset);
  } // Return to the `program` address stored in $ra


  return() {
    this.setPc(this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$ra"]]);
  }

  nextStatement() {
    let {
      registers,
      program
    } = this;
    let pc = registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]];
     false && false;

    if (pc === -1) {
      return null;
    } // We have to save off the current operations size so that
    // when we do a jump we can calculate the correct offset
    // to where we are going. We can't simply ask for the size
    // in a jump because we have have already incremented the
    // program counter to the next instruction prior to executing.


    let opcode = program.opcode(pc);
    let operationSize = this.currentOpSize = opcode.size;
    this.registers[_glimmer_vm__WEBPACK_IMPORTED_MODULE_1__["$pc"]] += operationSize;
    return opcode;
  }

  evaluateOuter(opcode, vm) {
    if (false
    /* LOCAL_DEBUG */
    ) {} else {
      this.evaluateInner(opcode, vm);
    }
  }

  evaluateInner(opcode, vm) {
    if (opcode.isMachine) {
      this.evaluateMachine(opcode);
    } else {
      this.evaluateSyscall(opcode, vm);
    }
  }

  evaluateMachine(opcode) {
    switch (opcode.type) {
      case 0
      /* PushFrame */
      :
        return this.pushFrame();

      case 1
      /* PopFrame */
      :
        return this.popFrame();

      case 3
      /* InvokeStatic */
      :
        return this.call(opcode.op1);

      case 2
      /* InvokeVirtual */
      :
        return this.call(this.stack.pop());

      case 4
      /* Jump */
      :
        return this.goto(opcode.op1);

      case 5
      /* Return */
      :
        return this.return();

      case 6
      /* ReturnTo */
      :
        return this.returnTo(opcode.op1);
    }
  }

  evaluateSyscall(opcode, vm) {
    _opcodes__WEBPACK_IMPORTED_MODULE_0__["APPEND_OPCODES"].evaluate(vm, opcode, opcode.type);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/rehydrate-builder.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/rehydrate-builder.js ***!
  \***************************************************************************************/
/*! exports provided: SERIALIZATION_FIRST_NODE_STRING, isSerializationFirstNode, RehydratingCursor, RehydrateBuilder, rehydrationBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SERIALIZATION_FIRST_NODE_STRING", function() { return SERIALIZATION_FIRST_NODE_STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSerializationFirstNode", function() { return isSerializationFirstNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RehydratingCursor", function() { return RehydratingCursor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RehydrateBuilder", function() { return RehydrateBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rehydrationBuilder", function() { return rehydrationBuilder; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _bounds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bounds */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js");
/* harmony import */ var _element_builder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element-builder */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js");



const SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
function isSerializationFirstNode(node) {
  return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
}
class RehydratingCursor extends _bounds__WEBPACK_IMPORTED_MODULE_1__["CursorImpl"] {
  constructor(element, nextSibling, startingBlockDepth) {
    super(element, nextSibling);
    this.startingBlockDepth = startingBlockDepth;
    this.candidate = null;
    this.injectedOmittedNode = false;
    this.openBlockDepth = startingBlockDepth - 1;
  }

}
class RehydrateBuilder extends _element_builder__WEBPACK_IMPORTED_MODULE_2__["NewElementBuilder"] {
  constructor(env, parentNode, nextSibling) {
    super(env, parentNode, nextSibling);
    this.unmatchedAttributes = null;
    this.blockDepth = 0;
    if (nextSibling) throw new Error('Rehydration with nextSibling not supported');
    let node = this.currentCursor.element.firstChild;

    while (node !== null) {
      if (isComment(node) && isSerializationFirstNode(node)) {
        break;
      }

      node = node.nextSibling;
    }

     false && false;
    this.candidate = node;
  }

  get currentCursor() {
    return this[_element_builder__WEBPACK_IMPORTED_MODULE_2__["CURSOR_STACK"]].current;
  }

  get candidate() {
    if (this.currentCursor) {
      return this.currentCursor.candidate;
    }

    return null;
  }

  set candidate(node) {
    let currentCursor = this.currentCursor;
    currentCursor.candidate = node;
  }

  disableRehydration(nextSibling) {
    let currentCursor = this.currentCursor; // rehydration will be disabled until we either:
    // * hit popElement (and return to using the parent elements cursor)
    // * hit closeBlock and the next sibling is a close block comment
    //   matching the expected openBlockDepth

    currentCursor.candidate = null;
    currentCursor.nextSibling = nextSibling;
  }

  enableRehydration(candidate) {
    let currentCursor = this.currentCursor;
    currentCursor.candidate = candidate;
    currentCursor.nextSibling = null;
  }

  pushElement(element, nextSibling = null) {
    let cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);
    /**
     * <div>   <---------------  currentCursor.element
     *   <!--%+b:1%--> <-------  would have been removed during openBlock
     *   <div> <---------------  currentCursor.candidate -> cursor.element
     *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
     *     Foo
     *     <!--%-b:2%-->
     *   </div>
     *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
     */

    if (this.candidate !== null) {
      cursor.candidate = element.firstChild;
      this.candidate = element.nextSibling;
    }

    this[_element_builder__WEBPACK_IMPORTED_MODULE_2__["CURSOR_STACK"]].push(cursor);
  } // clears until the end of the current container
  // either the current open block or higher


  clearMismatch(candidate) {
    let current = candidate;
    let currentCursor = this.currentCursor;

    if (currentCursor !== null) {
      let openBlockDepth = currentCursor.openBlockDepth;

      if (openBlockDepth >= currentCursor.startingBlockDepth) {
        while (current) {
          if (isCloseBlock(current)) {
            let closeBlockDepth = getBlockDepth(current);

            if (openBlockDepth >= closeBlockDepth) {
              break;
            }
          }

          current = this.remove(current);
        }
      } else {
        while (current !== null) {
          current = this.remove(current);
        }
      } // current cursor parentNode should be openCandidate if element
      // or openCandidate.parentNode if comment


      this.disableRehydration(current);
    }
  }

  __openBlock() {
    let {
      currentCursor
    } = this;
    if (currentCursor === null) return;
    let blockDepth = this.blockDepth;
    this.blockDepth++;
    let {
      candidate
    } = currentCursor;
    if (candidate === null) return;
    let {
      tagName
    } = currentCursor.element;

    if (isOpenBlock(candidate) && getBlockDepth(candidate) === blockDepth) {
      this.candidate = this.remove(candidate);
      currentCursor.openBlockDepth = blockDepth;
    } else if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {
      this.clearMismatch(candidate);
    }
  }

  __closeBlock() {
    let {
      currentCursor
    } = this;
    if (currentCursor === null) return; // openBlock is the last rehydrated open block

    let openBlockDepth = currentCursor.openBlockDepth; // this currently is the expected next open block depth

    this.blockDepth--;
    let {
      candidate
    } = currentCursor;
    let isRehydrating = false;

    if (candidate !== null) {
      isRehydrating = true; //assert(
      //  openBlockDepth === this.blockDepth,
      //  'when rehydrating, openBlockDepth should match this.blockDepth here'
      //);

      if (isCloseBlock(candidate) && getBlockDepth(candidate) === openBlockDepth) {
        let nextSibling = this.remove(candidate);
        this.candidate = nextSibling;
        currentCursor.openBlockDepth--;
      } else {
        // close the block and clear mismatch in parent container
        // we will be either at the end of the element
        // or at the end of our containing block
        this.clearMismatch(candidate);
        isRehydrating = false;
      }
    }

    if (isRehydrating === false) {
      // check if nextSibling matches our expected close block
      // if so, we remove the close block comment and
      // restore rehydration after clearMismatch disabled
      let nextSibling = currentCursor.nextSibling;

      if (nextSibling !== null && isCloseBlock(nextSibling) && getBlockDepth(nextSibling) === this.blockDepth) {
        // restore rehydration state
        let candidate = this.remove(nextSibling);
        this.enableRehydration(candidate);
        currentCursor.openBlockDepth--;
      }
    }
  }

  __appendNode(node) {
    let {
      candidate
    } = this; // This code path is only used when inserting precisely one node. It needs more
    // comparison logic, but we can probably lean on the cases where this code path
    // is actually used.

    if (candidate) {
      return candidate;
    } else {
      return super.__appendNode(node);
    }
  }

  __appendHTML(html) {
    let candidateBounds = this.markerBounds();

    if (candidateBounds) {
      let first = candidateBounds.firstNode();
      let last = candidateBounds.lastNode();
      let newBounds = new _bounds__WEBPACK_IMPORTED_MODULE_1__["ConcreteBounds"](this.element, first.nextSibling, last.previousSibling);
      let possibleEmptyMarker = this.remove(first);
      this.remove(last);

      if (possibleEmptyMarker !== null && isEmpty(possibleEmptyMarker)) {
        this.candidate = this.remove(possibleEmptyMarker);

        if (this.candidate !== null) {
          this.clearMismatch(this.candidate);
        }
      }

      return newBounds;
    } else {
      return super.__appendHTML(html);
    }
  }

  remove(node) {
    let element = node.parentNode;
    let next = node.nextSibling;
    element.removeChild(node);
    return next;
  }

  markerBounds() {
    let _candidate = this.candidate;

    if (_candidate && isMarker(_candidate)) {
      let first = _candidate;
      let last = first.nextSibling;

      while (last && !isMarker(last)) {
        last = last.nextSibling;
      }

      return new _bounds__WEBPACK_IMPORTED_MODULE_1__["ConcreteBounds"](this.element, first, last);
    } else {
      return null;
    }
  }

  __appendText(string) {
    let {
      candidate
    } = this;

    if (candidate) {
      if (isTextNode(candidate)) {
        if (candidate.nodeValue !== string) {
          candidate.nodeValue = string;
        }

        this.candidate = candidate.nextSibling;
        return candidate;
      } else if (isSeparator(candidate)) {
        this.candidate = this.remove(candidate);
        return this.__appendText(string);
      } else if (isEmpty(candidate) && string === '') {
        this.candidate = this.remove(candidate);
        return this.__appendText(string);
      } else {
        this.clearMismatch(candidate);
        return super.__appendText(string);
      }
    } else {
      return super.__appendText(string);
    }
  }

  __appendComment(string) {
    let _candidate = this.candidate;

    if (_candidate && isComment(_candidate)) {
      if (_candidate.nodeValue !== string) {
        _candidate.nodeValue = string;
      }

      this.candidate = _candidate.nextSibling;
      return _candidate;
    } else if (_candidate) {
      this.clearMismatch(_candidate);
    }

    return super.__appendComment(string);
  }

  __openElement(tag) {
    let _candidate = this.candidate;

    if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {
      this.unmatchedAttributes = [].slice.call(_candidate.attributes);
      return _candidate;
    } else if (_candidate) {
      if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
        this.pushElement(_candidate, null);
        this.currentCursor.injectedOmittedNode = true;
        return this.__openElement(tag);
      }

      this.clearMismatch(_candidate);
    }

    return super.__openElement(tag);
  }

  __setAttribute(name, value, namespace) {
    let unmatched = this.unmatchedAttributes;

    if (unmatched) {
      let attr = findByName(unmatched, name);

      if (attr) {
        if (attr.value !== value) {
          attr.value = value;
        }

        unmatched.splice(unmatched.indexOf(attr), 1);
        return;
      }
    }

    return super.__setAttribute(name, value, namespace);
  }

  __setProperty(name, value) {
    let unmatched = this.unmatchedAttributes;

    if (unmatched) {
      let attr = findByName(unmatched, name);

      if (attr) {
        if (attr.value !== value) {
          attr.value = value;
        }

        unmatched.splice(unmatched.indexOf(attr), 1);
        return;
      }
    }

    return super.__setProperty(name, value);
  }

  __flushElement(parent, constructing) {
    let {
      unmatchedAttributes: unmatched
    } = this;

    if (unmatched) {
      for (let i = 0; i < unmatched.length; i++) {
        this.constructing.removeAttribute(unmatched[i].name);
      }

      this.unmatchedAttributes = null;
    } else {
      super.__flushElement(parent, constructing);
    }
  }

  willCloseElement() {
    let {
      candidate,
      currentCursor
    } = this;

    if (candidate !== null) {
      this.clearMismatch(candidate);
    }

    if (currentCursor && currentCursor.injectedOmittedNode) {
      this.popElement();
    }

    super.willCloseElement();
  }

  getMarker(element, guid) {
    let marker = element.querySelector("script[glmr=\"".concat(guid, "\"]"));

    if (marker) {
      return marker;
    }

    return null;
  }

  __pushRemoteElement(element, cursorId, insertBefore) {
    let marker = this.getMarker(element, cursorId);
     false && false; // when insertBefore is not present, we clear the element

    if (insertBefore === undefined) {
      while (element.firstChild !== null && element.firstChild !== marker) {
        this.remove(element.firstChild);
      }

      insertBefore = null;
    }

    let cursor = new RehydratingCursor(element, null, this.blockDepth);
    this[_element_builder__WEBPACK_IMPORTED_MODULE_2__["CURSOR_STACK"]].push(cursor);

    if (marker === null) {
      this.disableRehydration(insertBefore);
    } else {
      this.candidate = this.remove(marker);
    }

    let block = new _element_builder__WEBPACK_IMPORTED_MODULE_2__["RemoteLiveBlock"](element);
    return this.pushLiveBlock(block, true);
  }

  didAppendBounds(bounds) {
    super.didAppendBounds(bounds);

    if (this.candidate) {
      let last = bounds.lastNode();
      this.candidate = last && last.nextSibling;
    }

    return bounds;
  }

}

function isTextNode(node) {
  return node.nodeType === 3;
}

function isComment(node) {
  return node.nodeType === 8;
}

function isOpenBlock(node) {
  return node.nodeType === 8
  /* COMMENT_NODE */
  && node.nodeValue.lastIndexOf('%+b:', 0) === 0;
}

function isCloseBlock(node) {
  return node.nodeType === 8
  /* COMMENT_NODE */
  && node.nodeValue.lastIndexOf('%-b:', 0) === 0;
}

function getBlockDepth(node) {
  return parseInt(node.nodeValue.slice(4), 10);
}

function isElement(node) {
  return node.nodeType === 1;
}

function isMarker(node) {
  return node.nodeType === 8 && node.nodeValue === '%glmr%';
}

function isSeparator(node) {
  return node.nodeType === 8 && node.nodeValue === '%|%';
}

function isEmpty(node) {
  return node.nodeType === 8 && node.nodeValue === '% %';
}

function isSameNodeType(candidate, tag) {
  if (candidate.namespaceURI === "http://www.w3.org/2000/svg"
  /* SVG */
  ) {
      return candidate.tagName === tag;
    }

  return candidate.tagName === tag.toUpperCase();
}

function findByName(array, name) {
  for (let i = 0; i < array.length; i++) {
    let attr = array[i];
    if (attr.name === name) return attr;
  }

  return undefined;
}

function rehydrationBuilder(env, cursor) {
  return RehydrateBuilder.forInitialRender(env, cursor);
}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/render-result.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/render-result.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderResultImpl; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _bounds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bounds */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../environment */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/environment.js");
/* harmony import */ var _lifetime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lifetime */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/lifetime.js");
/* harmony import */ var _update__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./update */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/update.js");





class RenderResultImpl {
  constructor(env, updating, bounds, drop) {
    this.env = env;
    this.updating = updating;
    this.bounds = bounds;
    this.drop = drop;
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["associate"])(this, drop);
  }

  rerender({
    alwaysRevalidate = false
  } = {
    alwaysRevalidate: false
  }) {
    let {
      env,
      updating
    } = this;
    let vm = new _update__WEBPACK_IMPORTED_MODULE_4__["default"](env, {
      alwaysRevalidate
    });
    vm.execute(updating, this);
  }

  parentElement() {
    return this.bounds.parentElement();
  }

  firstNode() {
    return this.bounds.firstNode();
  }

  lastNode() {
    return this.bounds.lastNode();
  }

  handleException() {
    throw 'this should never happen';
  }

  [_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["DESTROY"]]() {
    Object(_bounds__WEBPACK_IMPORTED_MODULE_1__["clear"])(this.bounds);
  } // compat, as this is a user-exposed API


  destroy() {
    Object(_environment__WEBPACK_IMPORTED_MODULE_2__["inTransaction"])(this.env, () => {
      Object(_lifetime__WEBPACK_IMPORTED_MODULE_3__["legacySyncDestroy"])(this, this.env);
      Object(_lifetime__WEBPACK_IMPORTED_MODULE_3__["asyncDestroy"])(this, this.env);
    });
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/stack.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/stack.js ***!
  \***************************************************************************/
/*! exports provided: InnerStack, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InnerStack", function() { return InnerStack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EvaluationStackImpl; });
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_low_level__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/low-level */ "./node_modules/@glimmer/low-level/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_vm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/vm */ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js");
/* harmony import */ var _low_level__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./low-level */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/low-level.js");
/* harmony import */ var _symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../symbols */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/symbols.js");





class InnerStack {
  constructor(inner = new _glimmer_low_level__WEBPACK_IMPORTED_MODULE_1__["Stack"](), js = []) {
    this.inner = inner;
    this.js = js;
  }

  slice(start, end) {
    let inner;

    if (typeof start === 'number' && typeof end === 'number') {
      inner = this.inner.slice(start, end);
    } else if (typeof start === 'number' && end === undefined) {
      inner = this.inner.sliceFrom(start);
    } else {
      inner = this.inner.clone();
    }

    return new InnerStack(inner, this.js.slice(start, end));
  }

  sliceInner(start, end) {
    let out = [];

    if (start === -1) {
      return out;
    }

    for (let i = start; i < end; i++) {
      out.push(this.get(i));
    }

    return out;
  }

  copy(from, to) {
    this.inner.copy(from, to);
  }

  write(pos, value) {
    switch (typeof value) {
      case 'boolean':
      case 'undefined':
        this.writeRaw(pos, Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["encodeImmediate"])(value));
        break;

      case 'number':
        if (Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["isSmallInt"])(value)) {
          this.writeRaw(pos, Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["encodeImmediate"])(value));
          break;
        }

      case 'object':
        if (value === null) {
          this.writeRaw(pos, Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["encodeImmediate"])(value));
          break;
        }

      default:
        this.writeJs(pos, value);
    }
  }

  writeJs(pos, value) {
    let idx = this.js.length;
    this.js.push(value);
    this.inner.writeRaw(pos, Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["encodeHandle"])(idx));
  }

  writeRaw(pos, value) {
    this.inner.writeRaw(pos, value);
  }

  get(pos) {
    let value = this.inner.getRaw(pos);

    if (Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["isHandle"])(value)) {
      return this.js[Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["decodeHandle"])(value)];
    } else {
      return Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_0__["decodeImmediate"])(value);
    }
  }

  reset() {
    this.inner.reset();
    this.js.length = 0;
  }

  get length() {
    return this.inner.len();
  }

}
class EvaluationStackImpl {
  // fp -> sp
  constructor(stack, registers) {
    this.stack = stack;
    this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]] = registers;

    if (false
    /* LOCAL_DEBUG */
    ) {}
  }

  static restore(snapshot) {
    let stack = new InnerStack();

    for (let i = 0; i < snapshot.length; i++) {
      stack.write(i, snapshot[i]);
    }

    return new this(stack, Object(_low_level__WEBPACK_IMPORTED_MODULE_3__["initializeRegistersWithSP"])(snapshot.length - 1));
  }

  push(value) {
    this.stack.write(++this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]], value);
  }

  pushJs(value) {
    this.stack.writeJs(++this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]], value);
  }

  pushRaw(value) {
    this.stack.writeRaw(++this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]], value);
  }

  dup(position = this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]]) {
    this.stack.copy(position, ++this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]]);
  }

  copy(from, to) {
    this.stack.copy(from, to);
  }

  pop(n = 1) {
    let top = this.stack.get(this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]]);
    this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]] -= n;
    return top;
  }

  peek(offset = 0) {
    return this.stack.get(this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]] - offset);
  }

  get(offset, base = this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$fp"]]) {
    return this.stack.get(base + offset);
  }

  set(value, offset, base = this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$fp"]]) {
    this.stack.write(base + offset, value);
  }

  slice(start, end) {
    return this.stack.slice(start, end);
  }

  sliceArray(start, end) {
    return this.stack.sliceInner(start, end);
  }

  capture(items) {
    let end = this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]] + 1;
    let start = end - items;
    return this.stack.sliceInner(start, end);
  }

  reset() {
    this.stack.reset();
  }

  toArray() {
    console.log(this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]]);
    return this.stack.sliceInner(this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$fp"]], this[_symbols__WEBPACK_IMPORTED_MODULE_4__["REGISTERS"]][_glimmer_vm__WEBPACK_IMPORTED_MODULE_2__["$sp"]] + 1);
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/update.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/update.js ***!
  \****************************************************************************/
/*! exports provided: default, ResumableVMStateImpl, BlockOpcode, TryOpcode, ListBlockOpcode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return UpdatingVM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResumableVMStateImpl", function() { return ResumableVMStateImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockOpcode", function() { return BlockOpcode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TryOpcode", function() { return TryOpcode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBlockOpcode", function() { return ListBlockOpcode; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/reference */ "./node_modules/@glimmer/reference/dist/modules/es2017/index.js");
/* harmony import */ var _glimmer_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/util */ "./node_modules/@glimmer/util/dist/modules/es2017/index.js");
/* harmony import */ var _bounds__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bounds */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js");
/* harmony import */ var _lifetime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lifetime */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/lifetime.js");
/* harmony import */ var _utils_tags__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/tags */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/utils/tags.js");
/* harmony import */ var _opcodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../opcodes */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js");
/* harmony import */ var _element_builder__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./element-builder */ "./node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js");








class UpdatingVM {
  constructor(env, {
    alwaysRevalidate = false
  }) {
    this.frameStack = new _glimmer_util__WEBPACK_IMPORTED_MODULE_2__["Stack"]();
    this.env = env;
    this.dom = env.getDOM();
    this.alwaysRevalidate = alwaysRevalidate;
  }

  execute(opcodes, handler) {
    let {
      frameStack
    } = this;
    this.try(opcodes, handler);

    while (true) {
      if (frameStack.isEmpty()) break;
      let opcode = this.frame.nextStatement();

      if (opcode === null) {
        frameStack.pop();
        continue;
      }

      opcode.evaluate(this);
    }
  }

  get frame() {
    return this.frameStack.current;
  }

  goto(op) {
    this.frame.goto(op);
  }

  try(ops, handler) {
    this.frameStack.push(new UpdatingVMFrame(ops, handler));
  }

  throw() {
    this.frame.handleException();
    this.frameStack.pop();
  }

}
class ResumableVMStateImpl {
  constructor(state, resumeCallback) {
    this.state = state;
    this.resumeCallback = resumeCallback;
  }

  resume(runtime, builder) {
    return this.resumeCallback(runtime, this.state, builder);
  }

}
class BlockOpcode extends _opcodes__WEBPACK_IMPORTED_MODULE_6__["UpdatingOpcode"] {
  constructor(state, runtime, bounds, children) {
    super();
    this.state = state;
    this.runtime = runtime;
    this.type = 'block';
    this.next = null;
    this.prev = null;
    this.children = children;
    this.bounds = bounds;
  }

  parentElement() {
    return this.bounds.parentElement();
  }

  firstNode() {
    return this.bounds.firstNode();
  }

  lastNode() {
    return this.bounds.lastNode();
  }

  evaluate(vm) {
    vm.try(this.children, null);
  }

}
class TryOpcode extends BlockOpcode {
  constructor(state, runtime, bounds, children) {
    super(state, runtime, bounds, children);
    this.type = 'try';
    this.tag = this._tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["createUpdatableTag"])();
  }

  didInitializeChildren() {
    Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["updateTag"])(this._tag, Object(_utils_tags__WEBPACK_IMPORTED_MODULE_5__["combineSlice"])(this.children));
  }

  evaluate(vm) {
    vm.try(this.children, this);
  }

  handleException() {
    let {
      state,
      bounds,
      children,
      prev,
      next,
      runtime
    } = this;
    Object(_lifetime__WEBPACK_IMPORTED_MODULE_4__["legacySyncReset"])(this, runtime.env);
    children.clear();
    Object(_lifetime__WEBPACK_IMPORTED_MODULE_4__["asyncReset"])(this, runtime.env);
    let elementStack = _element_builder__WEBPACK_IMPORTED_MODULE_7__["NewElementBuilder"].resume(runtime.env, bounds);
    let vm = state.resume(runtime, elementStack);
    let updating = new _glimmer_util__WEBPACK_IMPORTED_MODULE_2__["LinkedList"]();
    let result = vm.execute(vm => {
      vm.pushUpdating(updating);
      vm.updateWith(this);
      vm.pushUpdating(children);
    });
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["associate"])(this, result.drop);
    this.prev = prev;
    this.next = next;
  }

}

class ListRevalidationDelegate {
  constructor(opcode, marker) {
    this.opcode = opcode;
    this.marker = marker;
    this.didInsert = false;
    this.didDelete = false;
    this.map = opcode.map;
    this.updating = opcode['children'];
  }

  insert(_env, key, item, memo, before) {
    let {
      map,
      opcode,
      updating
    } = this;
    let nextSibling = null;
    let reference = null;
    reference = map.get(before);
    nextSibling = reference !== undefined ? reference['bounds'].firstNode() : this.marker;
    let vm = opcode.vmForInsertion(nextSibling);
    let tryOpcode = null;
    let result = vm.execute(vm => {
      tryOpcode = vm.iterate(memo, item);
      map.set(key, tryOpcode);
      vm.pushUpdating(new _glimmer_util__WEBPACK_IMPORTED_MODULE_2__["LinkedList"]());
      vm.updateWith(tryOpcode);
      vm.pushUpdating(tryOpcode.children);
    });
    updating.insertBefore(tryOpcode, reference);
    Object(_glimmer_util__WEBPACK_IMPORTED_MODULE_2__["associate"])(opcode, result.drop);
    this.didInsert = true;
  }

  retain(_env, _key, _item, _memo) {}

  move(_env, key, _item, _memo, before) {
    let {
      map,
      updating
    } = this;
    let entry = map.get(key);

    if (before === _glimmer_reference__WEBPACK_IMPORTED_MODULE_1__["END"]) {
      Object(_bounds__WEBPACK_IMPORTED_MODULE_3__["move"])(entry, this.marker);
      updating.remove(entry);
      updating.append(entry);
    } else {
      let reference = map.get(before);
      Object(_bounds__WEBPACK_IMPORTED_MODULE_3__["move"])(entry, reference.firstNode());
      updating.remove(entry);
      updating.insertBefore(entry, reference);
    }
  }

  delete(env, key) {
    let {
      map,
      updating
    } = this;
    let opcode = map.get(key);
    Object(_lifetime__WEBPACK_IMPORTED_MODULE_4__["detach"])(opcode, env);
    updating.remove(opcode);
    map.delete(key);
    this.didDelete = true;
  }

  done() {
    this.opcode.didInitializeChildren(this.didInsert || this.didDelete);
  }

}

class ListBlockOpcode extends BlockOpcode {
  constructor(state, runtime, bounds, children, artifacts) {
    super(state, runtime, bounds, children);
    this.type = 'list-block';
    this.map = new Map();
    this.lastIterated = _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["INITIAL"];
    this.artifacts = artifacts;

    let _tag = this._tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["createUpdatableTag"])();

    this.tag = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["combine"])([artifacts.tag, _tag]);
  }

  didInitializeChildren(listDidChange = true) {
    this.lastIterated = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["valueForTag"])(this.artifacts.tag);

    if (listDidChange) {
      Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["updateTag"])(this._tag, Object(_utils_tags__WEBPACK_IMPORTED_MODULE_5__["combineSlice"])(this.children));
    }
  }

  evaluate(vm) {
    let {
      artifacts,
      lastIterated
    } = this;

    if (!Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["validateTag"])(artifacts.tag, lastIterated)) {
      let {
        bounds
      } = this;
      let {
        dom
      } = vm;
      let marker = dom.createComment('');
      dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
      let target = new ListRevalidationDelegate(this, marker);
      let synchronizer = new _glimmer_reference__WEBPACK_IMPORTED_MODULE_1__["IteratorSynchronizer"]({
        target,
        artifacts,
        env: vm.env
      });
      synchronizer.sync();
      this.parentElement().removeChild(marker);
    } // Run now-updated updating opcodes


    super.evaluate(vm);
  }

  vmForInsertion(nextSibling) {
    let {
      bounds,
      state,
      runtime
    } = this;
    let elementStack = _element_builder__WEBPACK_IMPORTED_MODULE_7__["NewElementBuilder"].forInitialRender(runtime.env, {
      element: bounds.parentElement(),
      nextSibling
    });
    return state.resume(runtime, elementStack);
  }

}

class UpdatingVMFrame {
  constructor(ops, exceptionHandler) {
    this.ops = ops;
    this.exceptionHandler = exceptionHandler;
    this.current = ops.head();
  }

  goto(op) {
    this.current = op;
  }

  nextStatement() {
    let {
      current,
      ops
    } = this;
    if (current) this.current = ops.nextNode(current);
    return current;
  }

  handleException() {
    if (this.exceptionHandler) {
      this.exceptionHandler.handleException();
    }
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/tracking/dist/modules/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@glimmer/tracking/dist/modules/index.js ***!
  \**************************************************************/
/*! exports provided: setPropertyDidChange, tracked */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setPropertyDidChange", function() { return _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["setPropertyDidChange"]; });

/* harmony import */ var _src_tracked__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/tracked */ "./node_modules/@glimmer/tracking/dist/modules/src/tracked.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tracked", function() { return _src_tracked__WEBPACK_IMPORTED_MODULE_1__["tracked"]; });




/***/ }),

/***/ "./node_modules/@glimmer/tracking/dist/modules/src/tracked.js":
/*!********************************************************************!*\
  !*** ./node_modules/@glimmer/tracking/dist/modules/src/tracked.js ***!
  \********************************************************************/
/*! exports provided: tracked */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tracked", function() { return tracked; });
/* harmony import */ var _glimmer_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/validator */ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js");

/**
 * @decorator
 *
 * Marks a property as tracked.
 *
 * By default, a component's properties are expected to be static,
 * meaning you are not able to update them and have the template update accordingly.
 * Marking a property as tracked means that when that property changes,
 * a rerender of the component is scheduled so the template is kept up to date.
 *
 * @example
 *
 * ```typescript
 * import Component from '@glimmer/component';
 * import { tracked } from '@glimmer/tracking';
 *
 * export default class MyComponent extends Component {
 *    @tracked
 *    remainingApples = 10
 * }
 * ```
 *
 * When something changes the component's `remainingApples` property, the rerender
 * will be scheduled.
 *
 * @example Computed Properties
 *
 * In the case that you have a getter that depends on other properties, tracked
 * properties accessed within the getter will automatically be tracked for you.
 * That means when any of those dependent tracked properties is changed, a
 * rerender of the component will be scheduled.
 *
 * In the following example we have two properties,
 * `eatenApples`, and `remainingApples`.
 *
 *
 * ```typescript
 * import Component from '@glimmer/component';
 * import { tracked } from '@glimmer/tracking';
 *
 * const totalApples = 100;
 *
 * export default class MyComponent extends Component {
 *    @tracked
 *    eatenApples = 0
 *
 *    get remainingApples() {
 *      return totalApples - this.eatenApples;
 *    }
 *
 *    increment() {
 *      this.eatenApples = this.eatenApples + 1;
 *    }
 *  }
 * ```
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

const tracked = (...args) => {
  const [target, key, descriptor] = args; // Error on `@tracked()`, `@tracked(...args)`, and `@tracked get propName()`

  if ( true
  /* DEBUG */
  && typeof target === 'string') throwTrackedWithArgumentsError(args);
  if ( true
  /* DEBUG */
  && target === undefined) throwTrackedWithEmptyArgumentsError();
  if ( true
  /* DEBUG */
  && descriptor && descriptor.get) throwTrackedComputedPropertyError();

  if (descriptor) {
    return descriptorForField(target, key, descriptor);
  } // In TypeScript's implementation, decorators on simple class fields do not
  // receive a descriptor, so we define the property on the target directly.


  Object.defineProperty(target, key, descriptorForField(target, key));
};

function throwTrackedComputedPropertyError() {
  throw new Error("The @tracked decorator does not need to be applied to getters. Properties implemented using a getter will recompute automatically when any tracked properties they access change.");
}

function throwTrackedWithArgumentsError(args) {
  throw new Error("You attempted to use @tracked with ".concat(args.length > 1 ? 'arguments' : 'an argument', " ( @tracked(").concat(args.map(d => "'".concat(d, "'")).join(', '), ") ), which is no longer necessary nor supported. Dependencies are now automatically tracked, so you can just use ", '`@tracked`', "."));
}

function throwTrackedWithEmptyArgumentsError() {
  throw new Error('You attempted to use @tracked(), which is no longer necessary nor supported. Remove the parentheses and you will be good to go!');
}

function descriptorForField(_target, key, desc) {
  if ( true
  /* DEBUG */
  && desc && (desc.value || desc.get || desc.set)) {
    throw new Error("You attempted to use @tracked on ".concat(key, ", but that element is not a class field. @tracked is only usable on class fields. Native getters and setters will autotrack add any tracked fields they encounter, so there is no need mark getters and setters with @tracked."));
  }

  const {
    getter,
    setter
  } = Object(_glimmer_validator__WEBPACK_IMPORTED_MODULE_0__["trackedData"])(key, desc && desc.initializer);
  return {
    enumerable: true,
    configurable: true,

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get() {
      return getter(this);
    },

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    set(newValue) {
      setter(this, newValue);
    }

  };
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/index.js ***!
  \*****************************************************************/
/*! exports provided: EMPTY_ARRAY, assert, deprecate, dict, DictSet, isDict, isObject, Stack, DESTROY, isDestroyable, isStringDestroyable, clearElement, ensureGuid, initializeGuid, isSerializationFirstNode, SERIALIZATION_FIRST_NODE_STRING, LINKED, WILL_DROP, DID_DROP, CHILDREN, DESTRUCTORS, isDrop, associate, associateDestructor, peekAssociated, takeAssociated, willDestroyAssociated, didDestroyAssociated, destructor, snapshot, ListContentsDestructor, debugDropTree, printDropTree, printDrop, EMPTY_SLICE, LinkedList, ListNode, ListSlice, assign, fillNulls, values, keys, unwrap, expect, unreachable, exhausted, tuple, symbol, strip, encodeImmediate, decodeImmediate, isSmallInt, isHandle, encodeHandle, decodeHandle, unwrapHandle, unwrapTemplate, extractHandle, isOkHandle, isErrHandle, debugToString, assertNever */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertNever", function() { return assertNever; });
/* harmony import */ var _lib_array_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/array-utils */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/array-utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EMPTY_ARRAY", function() { return _lib_array_utils__WEBPACK_IMPORTED_MODULE_0__["EMPTY_ARRAY"]; });

/* harmony import */ var _lib_assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/assert */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/assert.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assert", function() { return _lib_assert__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecate", function() { return _lib_assert__WEBPACK_IMPORTED_MODULE_1__["deprecate"]; });

/* harmony import */ var _lib_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/collections */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/collections.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dict", function() { return _lib_collections__WEBPACK_IMPORTED_MODULE_2__["dict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DictSet", function() { return _lib_collections__WEBPACK_IMPORTED_MODULE_2__["DictSet"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDict", function() { return _lib_collections__WEBPACK_IMPORTED_MODULE_2__["isDict"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return _lib_collections__WEBPACK_IMPORTED_MODULE_2__["isObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Stack", function() { return _lib_collections__WEBPACK_IMPORTED_MODULE_2__["StackImpl"]; });

/* harmony import */ var _lib_destroy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/destroy */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/destroy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DESTROY", function() { return _lib_destroy__WEBPACK_IMPORTED_MODULE_3__["DESTROY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDestroyable", function() { return _lib_destroy__WEBPACK_IMPORTED_MODULE_3__["isDestroyable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isStringDestroyable", function() { return _lib_destroy__WEBPACK_IMPORTED_MODULE_3__["isStringDestroyable"]; });

/* harmony import */ var _lib_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/dom */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/dom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clearElement", function() { return _lib_dom__WEBPACK_IMPORTED_MODULE_4__["clearElement"]; });

/* harmony import */ var _lib_guid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/guid */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/guid.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ensureGuid", function() { return _lib_guid__WEBPACK_IMPORTED_MODULE_5__["ensureGuid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "initializeGuid", function() { return _lib_guid__WEBPACK_IMPORTED_MODULE_5__["initializeGuid"]; });

/* harmony import */ var _lib_is_serialization_first_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/is-serialization-first-node */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/is-serialization-first-node.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSerializationFirstNode", function() { return _lib_is_serialization_first_node__WEBPACK_IMPORTED_MODULE_6__["isSerializationFirstNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SERIALIZATION_FIRST_NODE_STRING", function() { return _lib_is_serialization_first_node__WEBPACK_IMPORTED_MODULE_6__["SERIALIZATION_FIRST_NODE_STRING"]; });

/* harmony import */ var _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/lifetimes */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/lifetimes.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LINKED", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["LINKED"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WILL_DROP", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["WILL_DROP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DID_DROP", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["DID_DROP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CHILDREN", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["CHILDREN"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DESTRUCTORS", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["DESTRUCTORS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDrop", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["isDrop"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "associate", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["associate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "associateDestructor", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["associateDestructor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "peekAssociated", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["peekAssociated"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "takeAssociated", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["takeAssociated"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "willDestroyAssociated", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["willDestroyAssociated"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "didDestroyAssociated", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["didDestroyAssociated"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "destructor", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["destructor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "snapshot", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["snapshot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListContentsDestructor", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["ListContentsDestructor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "debugDropTree", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["debugDropTree"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "printDropTree", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["printDropTree"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "printDrop", function() { return _lib_lifetimes__WEBPACK_IMPORTED_MODULE_7__["printDrop"]; });

/* harmony import */ var _lib_list_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/list-utils */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/list-utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EMPTY_SLICE", function() { return _lib_list_utils__WEBPACK_IMPORTED_MODULE_8__["EMPTY_SLICE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LinkedList", function() { return _lib_list_utils__WEBPACK_IMPORTED_MODULE_8__["LinkedList"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListNode", function() { return _lib_list_utils__WEBPACK_IMPORTED_MODULE_8__["ListNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListSlice", function() { return _lib_list_utils__WEBPACK_IMPORTED_MODULE_8__["ListSlice"]; });

/* harmony import */ var _lib_object_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/object-utils */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/object-utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assign", function() { return _lib_object_utils__WEBPACK_IMPORTED_MODULE_9__["assign"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fillNulls", function() { return _lib_object_utils__WEBPACK_IMPORTED_MODULE_9__["fillNulls"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "values", function() { return _lib_object_utils__WEBPACK_IMPORTED_MODULE_9__["values"]; });

/* harmony import */ var _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/platform-utils */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/platform-utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keys", function() { return _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__["keys"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__["unwrap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expect", function() { return _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__["expect"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unreachable", function() { return _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__["unreachable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exhausted", function() { return _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__["exhausted"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tuple", function() { return _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__["tuple"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "symbol", function() { return _lib_platform_utils__WEBPACK_IMPORTED_MODULE_10__["symbol"]; });

/* harmony import */ var _lib_string__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/string */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/string.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "strip", function() { return _lib_string__WEBPACK_IMPORTED_MODULE_11__["strip"]; });

/* harmony import */ var _lib_immediate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/immediate */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/immediate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "encodeImmediate", function() { return _lib_immediate__WEBPACK_IMPORTED_MODULE_12__["encodeImmediate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "decodeImmediate", function() { return _lib_immediate__WEBPACK_IMPORTED_MODULE_12__["decodeImmediate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSmallInt", function() { return _lib_immediate__WEBPACK_IMPORTED_MODULE_12__["isSmallInt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isHandle", function() { return _lib_immediate__WEBPACK_IMPORTED_MODULE_12__["isHandle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "encodeHandle", function() { return _lib_immediate__WEBPACK_IMPORTED_MODULE_12__["encodeHandle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "decodeHandle", function() { return _lib_immediate__WEBPACK_IMPORTED_MODULE_12__["decodeHandle"]; });

/* harmony import */ var _lib_template__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lib/template */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/template.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwrapHandle", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_13__["unwrapHandle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwrapTemplate", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_13__["unwrapTemplate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractHandle", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_13__["extractHandle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isOkHandle", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_13__["isOkHandle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isErrHandle", function() { return _lib_template__WEBPACK_IMPORTED_MODULE_13__["isErrHandle"]; });

/* harmony import */ var _lib_debug_to_string__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lib/debug-to-string */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/debug-to-string.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "debugToString", function() { return _lib_debug_to_string__WEBPACK_IMPORTED_MODULE_14__["default"]; });
















function assertNever(value, desc = 'unexpected unreachable branch') {
  console.log('unreachable', value);
  console.trace("".concat(desc, " :: ").concat(JSON.stringify(value), " (").concat(value, ")"));
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/array-utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/array-utils.js ***!
  \***************************************************************************/
/*! exports provided: EMPTY_ARRAY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY_ARRAY", function() { return EMPTY_ARRAY; });
const EMPTY_ARRAY = Object.freeze([]);

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/assert.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/assert.js ***!
  \**********************************************************************/
/*! exports provided: debugAssert, prodAssert, deprecate, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debugAssert", function() { return debugAssert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prodAssert", function() { return prodAssert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deprecate", function() { return deprecate; });
// import Logger from './logger';
// let alreadyWarned = false;
function debugAssert(test, msg) {
  // if (!alreadyWarned) {
  //   alreadyWarned = true;
  //   Logger.warn("Don't leave debug assertions on in public builds");
  // }
  if (!test) {
    throw new Error(msg || 'assertion failure');
  }
}
function prodAssert() {}
function deprecate(desc) {
  console.warn("DEPRECATION: ".concat(desc));
}
/* harmony default export */ __webpack_exports__["default"] = (debugAssert);

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/collections.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/collections.js ***!
  \***************************************************************************/
/*! exports provided: dict, isDict, isObject, DictSet, StackImpl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dict", function() { return dict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDict", function() { return isDict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DictSet", function() { return DictSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StackImpl", function() { return StackImpl; });
/* harmony import */ var _guid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./guid */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/guid.js");

function dict() {
  return Object.create(null);
}
function isDict(u) {
  return u !== null && u !== undefined;
}
function isObject(u) {
  return typeof u === 'object' && u !== null;
}
class DictSet {
  constructor() {
    this.dict = dict();
  }

  add(obj) {
    if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[Object(_guid__WEBPACK_IMPORTED_MODULE_0__["ensureGuid"])(obj)] = obj;
    return this;
  }

  delete(obj) {
    if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
  }

}
class StackImpl {
  constructor() {
    this.stack = [];
    this.current = null;
  }

  get size() {
    return this.stack.length;
  }

  push(item) {
    this.current = item;
    this.stack.push(item);
  }

  pop() {
    let item = this.stack.pop();
    let len = this.stack.length;
    this.current = len === 0 ? null : this.stack[len - 1];
    return item === undefined ? null : item;
  }

  nth(from) {
    let len = this.stack.length;
    return len < from ? null : this.stack[len - from];
  }

  isEmpty() {
    return this.stack.length === 0;
  }

  toArray() {
    return this.stack;
  }

}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/debug-to-string.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/debug-to-string.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
let debugToString;

if (true
/* DEBUG */
) {
  let getFunctionName = fn => {
    let functionName = fn.name;

    if (functionName === undefined) {
      let match = Function.prototype.toString.call(fn).match(/function (\w+)\s*\(/);
      functionName = match && match[1] || '';
    }

    return functionName.replace(/^bound /, '');
  };

  let getObjectName = obj => {
    let name;
    let className;

    if (obj.constructor && obj.constructor !== Object) {
      className = getFunctionName(obj.constructor);
    }

    if ('toString' in obj && obj.toString !== Object.prototype.toString && obj.toString !== Function.prototype.toString) {
      name = obj.toString();
    } // If the class has a decent looking name, and the `toString` is one of the
    // default Ember toStrings, replace the constructor portion of the toString
    // with the class name. We check the length of the class name to prevent doing
    // this when the value is minified.


    if (name && name.match(/<.*:ember\d+>/) && className && className[0] !== '_' && className.length > 2 && className !== 'Class') {
      return name.replace(/<.*:/, "<".concat(className, ":"));
    }

    return name || className;
  };

  let getPrimitiveName = value => {
    return String(value);
  };

  debugToString = value => {
    if (typeof value === 'function') {
      return getFunctionName(value) || "(unknown function)";
    } else if (typeof value === 'object' && value !== null) {
      return getObjectName(value) || "(unknown object)";
    } else {
      return getPrimitiveName(value);
    }
  };
}

/* harmony default export */ __webpack_exports__["default"] = (debugToString);

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/destroy.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/destroy.js ***!
  \***********************************************************************/
/*! exports provided: DESTROY, isDestroyable, isStringDestroyable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DESTROY", function() { return DESTROY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDestroyable", function() { return isDestroyable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStringDestroyable", function() { return isStringDestroyable; });
/* harmony import */ var _platform_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform-utils */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/platform-utils.js");

const DESTROY = Object(_platform_utils__WEBPACK_IMPORTED_MODULE_0__["symbol"])('DESTROY');
function isDestroyable(value) {
  return !!(value && value[DESTROY] !== undefined);
}
function isStringDestroyable(value) {
  return !!(value && typeof value === 'object' && typeof value.destroy === 'function');
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/dom.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/dom.js ***!
  \*******************************************************************/
/*! exports provided: clearElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearElement", function() { return clearElement; });
function clearElement(parent) {
  let current = parent.firstChild;

  while (current) {
    let next = current.nextSibling;
    parent.removeChild(current);
    current = next;
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/guid.js":
/*!********************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/guid.js ***!
  \********************************************************************/
/*! exports provided: initializeGuid, ensureGuid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeGuid", function() { return initializeGuid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureGuid", function() { return ensureGuid; });
let GUID = 0;
function initializeGuid(object) {
  return object._guid = ++GUID;
}
function ensureGuid(object) {
  return object._guid || initializeGuid(object);
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/immediate.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/immediate.js ***!
  \*************************************************************************/
/*! exports provided: encodeImmediate, decodeImmediate, isSmallInt, isHandle, encodeHandle, decodeHandle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeImmediate", function() { return encodeImmediate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeImmediate", function() { return decodeImmediate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSmallInt", function() { return isSmallInt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHandle", function() { return isHandle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeHandle", function() { return encodeHandle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeHandle", function() { return decodeHandle; });
/* harmony import */ var _platform_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform-utils */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/platform-utils.js");

let checkInt;

if (false
/* LOCAL_DEBUG */
) {}
/**
 * Encodes a value that can be stored directly instead of being a handle.
 *
 * Immediates use the positive half of 32bits
 *
 * @param value - the value to be encoded.
 */


function encodeImmediate(value) {
  if (typeof value === 'number') {
    if (false
    /* LOCAL_DEBUG */
    ) {} // map -1 to -1073741820 onto 1073741828 to 2147483647
    // 1073741827 - (-1) == 1073741828
    // 1073741827 - (-1073741820) == 2147483647
    // positive it stays as is
    // 0 - 1073741823


    return value < 0 ? 1073741827
    /* NEGATIVE_BASE */
    - value : value;
  }

  if (value === false) {
    return 1073741824
    /* FALSE */
    ;
  }

  if (value === true) {
    return 1073741825
    /* TRUE */
    ;
  }

  if (value === null) {
    return 1073741826
    /* NULL */
    ;
  }

  if (value === undefined) {
    return 1073741827
    /* UNDEFINED */
    ;
  }

  return Object(_platform_utils__WEBPACK_IMPORTED_MODULE_0__["exhausted"])(value);
}
/**
 * Decodes an immediate into its value.
 *
 * @param value - the encoded immediate value
 */

function decodeImmediate(value) {
  if (false
  /* LOCAL_DEBUG */
  ) {}

  if (value > 1073741823
  /* MAX_INT */
  ) {
      switch (value) {
        case 1073741824
        /* FALSE */
        :
          return false;

        case 1073741825
        /* TRUE */
        :
          return true;

        case 1073741826
        /* NULL */
        :
          return null;

        case 1073741827
        /* UNDEFINED */
        :
          return undefined;

        default:
          // map 1073741828 to 2147483647 to -1 to -1073741820
          // 1073741827 - 1073741828 == -1
          // 1073741827 - 2147483647 == -1073741820
          return 1073741827
          /* NEGATIVE_BASE */
          - value;
      }
    }

  return value;
}
/**
 * True if the number can be stored directly or false if it needs a handle.
 *
 * This is used on any number type to see if it can be directly encoded.
 */

function isSmallInt(num) {
  return isInt(num, -1073741820
  /* MIN_INT */
  , 1073741823
  /* MAX_INT */
  );
}
/**
 * True if the encoded int32 operand or encoded stack int32 is a handle.
 */

function isHandle(encoded) {
  if (false
  /* LOCAL_DEBUG */
  ) {}

  return encoded < 0;
}
/**
 * Encodes an index to an operand or stack handle.
 */

function encodeHandle(index, maxIndex = 2147483647
/* MAX_INDEX */
, maxHandle = -1
/* MAX_HANDLE */
) {
  if (false
  /* LOCAL_DEBUG */
  ) {}

  if (index > maxIndex) {
    throw new Error("index ".concat(index, " overflowed range 0 to ").concat(maxIndex));
  } // -1 - 0 == -1
  // -1 - 1073741823 == -1073741824
  // -1073741825 - 0 == -1073741825
  // -1073741825 - 1073741823 == -2147483648


  return maxHandle - index;
}
/**
 * Decodes the index from the specified operand or stack handle.
 */

function decodeHandle(handle, maxHandle = -1
/* MAX_HANDLE */
) {
  if (false
  /* LOCAL_DEBUG */
  ) {} // -1 - -1 == 0
  // -1 - -1073741824 == 1073741823
  // -1073741825 - -1073741825 == 0
  // -1073741825 - -2147483648 == 1073741823


  return maxHandle - handle;
}

function isInt(num, min, max) {
  // this is the same as Math.floor(num) === num
  // also NaN % 1 is NaN and Infinity % 1 is NaN so both should fail
  return num % 1 === 0 && num >= min && num <= max;
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/is-serialization-first-node.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/is-serialization-first-node.js ***!
  \*******************************************************************************************/
/*! exports provided: SERIALIZATION_FIRST_NODE_STRING, isSerializationFirstNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SERIALIZATION_FIRST_NODE_STRING", function() { return SERIALIZATION_FIRST_NODE_STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSerializationFirstNode", function() { return isSerializationFirstNode; });
const SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
function isSerializationFirstNode(node) {
  return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/lifetimes.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/lifetimes.js ***!
  \*************************************************************************/
/*! exports provided: LINKED, WILL_DROP, DID_DROP, CHILDREN, DESTRUCTORS, isDrop, associate, associateDestructor, peekAssociated, takeAssociated, willDestroyAssociated, didDestroyAssociated, destructor, snapshot, ListContentsDestructor, debugDropTree, printDropTree, printDrop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LINKED", function() { return LINKED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WILL_DROP", function() { return WILL_DROP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DID_DROP", function() { return DID_DROP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHILDREN", function() { return CHILDREN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DESTRUCTORS", function() { return DESTRUCTORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDrop", function() { return isDrop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "associate", function() { return associate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "associateDestructor", function() { return associateDestructor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "peekAssociated", function() { return peekAssociated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeAssociated", function() { return takeAssociated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "willDestroyAssociated", function() { return willDestroyAssociated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "didDestroyAssociated", function() { return didDestroyAssociated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destructor", function() { return destructor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snapshot", function() { return snapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListContentsDestructor", function() { return ListContentsDestructor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debugDropTree", function() { return debugDropTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printDropTree", function() { return printDropTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printDrop", function() { return printDrop; });
/* harmony import */ var _destroy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./destroy */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/destroy.js");
/* harmony import */ var _platform_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform-utils */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/platform-utils.js");


const LINKED = new WeakMap();
const WILL_DROP = Object(_platform_utils__WEBPACK_IMPORTED_MODULE_1__["symbol"])('WILL_DROP');
const DID_DROP = Object(_platform_utils__WEBPACK_IMPORTED_MODULE_1__["symbol"])('DID_DROP');
const CHILDREN = Object(_platform_utils__WEBPACK_IMPORTED_MODULE_1__["symbol"])('CHILDREN');
const DESTRUCTORS = new WeakMap();
function isDrop(value) {
  if (value === null || typeof value !== 'object') return false;
  return value[DID_DROP] !== undefined;
}
function associate(parent, child) {
  associateDestructor(parent, destructor(child));
}
function associateDestructor(parent, child) {
  let associated = LINKED.get(parent);

  if (!associated) {
    associated = new Set();
    LINKED.set(parent, associated);
  }

  associated.add(child);
}
function peekAssociated(parent) {
  return LINKED.get(parent) || null;
}
function takeAssociated(parent) {
  let linked = LINKED.get(parent);

  if (linked && linked.size > 0) {
    LINKED.delete(parent);
    return linked;
  } else {
    return null;
  }
}
function willDestroyAssociated(parent) {
  let associated = LINKED.get(parent);

  if (associated) {
    associated.forEach(item => {
      item[WILL_DROP]();
    });
  }
}
function didDestroyAssociated(parent) {
  let associated = LINKED.get(parent);

  if (associated) {
    associated.forEach(item => {
      item[DID_DROP]();
      associated.delete(item);
    });
  }
}
function destructor(value) {
  let d = DESTRUCTORS.get(value);

  if (!d) {
    if (Object(_destroy__WEBPACK_IMPORTED_MODULE_0__["isDestroyable"])(value)) {
      d = new DestroyableDestructor(value);
    } else if (Object(_destroy__WEBPACK_IMPORTED_MODULE_0__["isStringDestroyable"])(value)) {
      d = new StringDestroyableDestructor(value);
    } else {
      d = new SimpleDestructor(value);
    }

    DESTRUCTORS.set(value, d);
  }

  return d;
}
function snapshot(values) {
  return new SnapshotDestructor(values);
}

class SnapshotDestructor {
  constructor(destructors) {
    this.destructors = destructors;
  }

  [WILL_DROP]() {
    this.destructors.forEach(item => item[WILL_DROP]());
  }

  [DID_DROP]() {
    this.destructors.forEach(item => item[DID_DROP]());
  }

  get [CHILDREN]() {
    return this.destructors;
  }

  toString() {
    return 'SnapshotDestructor';
  }

}

class DestroyableDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    willDestroyAssociated(this.inner);
  }

  [DID_DROP]() {
    this.inner[_destroy__WEBPACK_IMPORTED_MODULE_0__["DESTROY"]]();
    didDestroyAssociated(this.inner);
  }

  get [CHILDREN]() {
    return LINKED.get(this.inner) || [];
  }

  toString() {
    return 'DestroyableDestructor';
  }

}

class StringDestroyableDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    if (typeof this.inner.willDestroy === 'function') {
      this.inner.willDestroy();
    }

    willDestroyAssociated(this.inner);
  }

  [DID_DROP]() {
    this.inner.destroy();
    didDestroyAssociated(this.inner);
  }

  get [CHILDREN]() {
    return LINKED.get(this.inner) || [];
  }

  toString() {
    return 'StringDestroyableDestructor';
  }

}

class SimpleDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    willDestroyAssociated(this.inner);
  }

  [DID_DROP]() {
    didDestroyAssociated(this.inner);
  }

  get [CHILDREN]() {
    return LINKED.get(this.inner) || [];
  }

  toString() {
    return 'SimpleDestructor';
  }

}

class ListContentsDestructor {
  constructor(inner) {
    this.inner = inner;
  }

  [WILL_DROP]() {
    this.inner.forEachNode(d => destructor(d)[WILL_DROP]());
  }

  [DID_DROP]() {
    this.inner.forEachNode(d => destructor(d)[DID_DROP]());
  }

  get [CHILDREN]() {
    let out = [];
    this.inner.forEachNode(d => out.push(...destructor(d)[CHILDREN]));
    return out;
  }

  toString() {
    return 'ListContentsDestructor';
  }

}
function debugDropTree(inner) {
  let hasDrop = isDrop(inner);
  let rawChildren = LINKED.get(inner) || null;
  let children = null;

  if (rawChildren) {
    children = [];

    for (let child of rawChildren) {
      children.push(debugDropTree(child));
    }
  }

  let obj = Object.create(null);
  obj.inner = inner;

  if (children) {
    obj.children = children;
  }

  obj.hasDrop = hasDrop;
  return obj;
}
function printDropTree(inner) {
  printDrop(destructor(inner));
}
function printDrop(inner) {
  console.group(String(inner));
  console.log(inner);
  let children = inner[CHILDREN] || null;

  if (children) {
    for (let child of children) {
      printDrop(child);
    }
  }

  console.groupEnd();
}

if (false) {}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/list-utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/list-utils.js ***!
  \**************************************************************************/
/*! exports provided: ListNode, LinkedList, ListSlice, EMPTY_SLICE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListNode", function() { return ListNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkedList", function() { return LinkedList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListSlice", function() { return ListSlice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY_SLICE", function() { return EMPTY_SLICE; });
/* harmony import */ var _lifetimes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lifetimes */ "./node_modules/@glimmer/util/dist/modules/es2017/lib/lifetimes.js");

class ListNode {
  constructor(value) {
    this.next = null;
    this.prev = null;
    this.value = value;
  }

}
class LinkedList {
  constructor() {
    this.clear();
  }

  head() {
    return this._head;
  }

  tail() {
    return this._tail;
  }

  clear() {
    this._head = this._tail = null;
  }

  toArray() {
    let out = [];
    this.forEachNode(n => out.push(n));
    return out;
  }

  nextNode(node) {
    return node.next;
  }

  forEachNode(callback) {
    let node = this._head;

    while (node !== null) {
      callback(node);
      node = node.next;
    }
  }

  insertBefore(node, reference = null) {
    if (reference === null) return this.append(node);
    if (reference.prev) reference.prev.next = node;else this._head = node;
    node.prev = reference.prev;
    node.next = reference;
    reference.prev = node;
    return node;
  }

  append(node) {
    let tail = this._tail;

    if (tail) {
      tail.next = node;
      node.prev = tail;
      node.next = null;
    } else {
      this._head = node;
    }

    return this._tail = node;
  }

  remove(node) {
    if (node.prev) node.prev.next = node.next;else this._head = node.next;
    if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
    return node;
  }

  [_lifetimes__WEBPACK_IMPORTED_MODULE_0__["WILL_DROP"]]() {
    this.forEachNode(d => Object(_lifetimes__WEBPACK_IMPORTED_MODULE_0__["destructor"])(d)[_lifetimes__WEBPACK_IMPORTED_MODULE_0__["WILL_DROP"]]());
  }

  [_lifetimes__WEBPACK_IMPORTED_MODULE_0__["DID_DROP"]]() {
    this.forEachNode(d => Object(_lifetimes__WEBPACK_IMPORTED_MODULE_0__["destructor"])(d)[_lifetimes__WEBPACK_IMPORTED_MODULE_0__["DID_DROP"]]());
  }

  get [_lifetimes__WEBPACK_IMPORTED_MODULE_0__["CHILDREN"]]() {
    let out = [];
    this.forEachNode(d => out.push(...Object(_lifetimes__WEBPACK_IMPORTED_MODULE_0__["destructor"])(d)[_lifetimes__WEBPACK_IMPORTED_MODULE_0__["CHILDREN"]]));
    return out;
  }

}
class ListSlice {
  constructor(head, tail) {
    this._head = head;
    this._tail = tail;
  }

  forEachNode(callback) {
    let node = this._head;

    while (node !== null) {
      callback(node);
      node = this.nextNode(node);
    }
  }

  head() {
    return this._head;
  }

  tail() {
    return this._tail;
  }

  toArray() {
    let out = [];
    this.forEachNode(n => out.push(n));
    return out;
  }

  nextNode(node) {
    if (node === this._tail) return null;
    return node.next;
  }

}
const EMPTY_SLICE = new ListSlice(null, null);

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/object-utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/object-utils.js ***!
  \****************************************************************************/
/*! exports provided: assign, fillNulls, values */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assign", function() { return assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fillNulls", function() { return fillNulls; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "values", function() { return values; });
const {
  keys: objKeys
} = Object;
function assign(obj) {
  for (let i = 1; i < arguments.length; i++) {
    let assignment = arguments[i];
    if (assignment === null || typeof assignment !== 'object') continue;
    let keys = objKeys(assignment);

    for (let j = 0; j < keys.length; j++) {
      let key = keys[j];
      obj[key] = assignment[key];
    }
  }

  return obj;
}
function fillNulls(count) {
  let arr = new Array(count);

  for (let i = 0; i < count; i++) {
    arr[i] = null;
  }

  return arr;
}
function values(obj) {
  const vals = [];

  for (const key in obj) {
    vals.push(obj[key]);
  }

  return vals;
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/platform-utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/platform-utils.js ***!
  \******************************************************************************/
/*! exports provided: keys, unwrap, expect, unreachable, exhausted, tuple, symbol */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keys", function() { return keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return unwrap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expect", function() { return expect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unreachable", function() { return unreachable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exhausted", function() { return exhausted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function() { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "symbol", function() { return symbol; });
function keys(obj) {
  return Object.keys(obj);
}
function unwrap(val) {
  if (val === null || val === undefined) throw new Error("Expected value to be present");
  return val;
}
function expect(val, message) {
  if (val === null || val === undefined) throw new Error(message);
  return val;
}
function unreachable(message = 'unreachable') {
  return new Error(message);
}
function exhausted(value) {
  throw new Error("Exhausted ".concat(value));
}
const tuple = (...args) => args;
const symbol = typeof Symbol !== 'undefined' ? Symbol : key => "__".concat(key).concat(Math.floor(Math.random() * Date.now()), "__");

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/string.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/string.js ***!
  \**********************************************************************/
/*! exports provided: strip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strip", function() { return strip; });
function strip(strings, ...args) {
  let out = '';

  for (let i = 0; i < strings.length; i++) {
    let string = strings[i];
    let dynamic = args[i] !== undefined ? String(args[i]) : '';
    out += "".concat(string).concat(dynamic);
  }

  let lines = out.split('\n');

  while (lines.length && lines[0].match(/^\s*$/)) {
    lines.shift();
  }

  while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
    lines.pop();
  }

  let min = Infinity;

  for (let line of lines) {
    let leading = line.match(/^\s*/)[0].length;
    min = Math.min(min, leading);
  }

  let stripped = [];

  for (let line of lines) {
    stripped.push(line.slice(min));
  }

  return stripped.join('\n');
}

/***/ }),

/***/ "./node_modules/@glimmer/util/dist/modules/es2017/lib/template.js":
/*!************************************************************************!*\
  !*** ./node_modules/@glimmer/util/dist/modules/es2017/lib/template.js ***!
  \************************************************************************/
/*! exports provided: unwrapHandle, unwrapTemplate, extractHandle, isOkHandle, isErrHandle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrapHandle", function() { return unwrapHandle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrapTemplate", function() { return unwrapTemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractHandle", function() { return extractHandle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOkHandle", function() { return isOkHandle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isErrHandle", function() { return isErrHandle; });
function unwrapHandle(handle) {
  if (typeof handle === 'number') {
    return handle;
  } else {
    let error = handle.errors[0];
    throw new Error("Compile Error: ".concat(error.problem, " @ ").concat(error.span.start, "..").concat(error.span.end));
  }
}
function unwrapTemplate(template) {
  if (template.result === 'error') {
    throw new Error("Compile Error: ".concat(template.problem, " @ ").concat(template.span.start, "..").concat(template.span.end));
  }

  return template;
}
function extractHandle(handle) {
  if (typeof handle === 'number') {
    return handle;
  } else {
    return handle.handle;
  }
}
function isOkHandle(handle) {
  return typeof handle === 'number';
}
function isErrHandle(handle) {
  return typeof handle === 'number';
}

/***/ }),

/***/ "./node_modules/@glimmer/validator/dist/modules/es2017/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@glimmer/validator/dist/modules/es2017/index.js ***!
  \**********************************************************************/
/*! exports provided: ALLOW_CYCLES, bump, combine, COMPUTE, CONSTANT_TAG, CONSTANT, createCombinatorTag, createTag, createUpdatableTag, CurrentTag, CURRENT_TAG, dirtyTag, INITIAL, isConst, isConstTag, updateTag, validateTag, valueForTag, VolatileTag, VOLATILE_TAG, VOLATILE, dirtyTagFor, tagFor, setPropertyDidChange, beginTrackFrame, endTrackFrame, consumeTag, EPOCH, isTracking, track, trackedData, memoizeTracked, untrack, isConstMemo, setAutotrackingTransactionEnv, runInAutotrackingTransaction, deprecateMutationsInAutotrackingTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/validators */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/validators.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ALLOW_CYCLES", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["ALLOW_CYCLES"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bump", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["bump"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "combine", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["combine"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "COMPUTE", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["COMPUTE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CONSTANT_TAG", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CONSTANT", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["CONSTANT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createCombinatorTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["createCombinatorTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["createTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createUpdatableTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["createUpdatableTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CurrentTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["CurrentTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CURRENT_TAG", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["CURRENT_TAG"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dirtyTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["dirtyTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "INITIAL", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["INITIAL"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isConst", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["isConst"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isConstTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["isConstTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "updateTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["updateTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validateTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["validateTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "valueForTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["valueForTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VolatileTag", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["VolatileTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VOLATILE_TAG", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["VOLATILE_TAG"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VOLATILE", function() { return _lib_validators__WEBPACK_IMPORTED_MODULE_0__["VOLATILE"]; });

/* harmony import */ var _lib_meta__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/meta */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/meta.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dirtyTagFor", function() { return _lib_meta__WEBPACK_IMPORTED_MODULE_1__["dirtyTagFor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tagFor", function() { return _lib_meta__WEBPACK_IMPORTED_MODULE_1__["tagFor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setPropertyDidChange", function() { return _lib_meta__WEBPACK_IMPORTED_MODULE_1__["setPropertyDidChange"]; });

/* harmony import */ var _lib_tracking__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/tracking */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/tracking.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beginTrackFrame", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["beginTrackFrame"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "endTrackFrame", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["endTrackFrame"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "consumeTag", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["consumeTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EPOCH", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["EPOCH"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isTracking", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["isTracking"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "track", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["track"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trackedData", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["trackedData"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoizeTracked", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["memoizeTracked"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "untrack", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["untrack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isConstMemo", function() { return _lib_tracking__WEBPACK_IMPORTED_MODULE_2__["isConstMemo"]; });

/* harmony import */ var _lib_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/debug */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/debug.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setAutotrackingTransactionEnv", function() { return _lib_debug__WEBPACK_IMPORTED_MODULE_3__["setAutotrackingTransactionEnv"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "runInAutotrackingTransaction", function() { return _lib_debug__WEBPACK_IMPORTED_MODULE_3__["runInAutotrackingTransaction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deprecateMutationsInAutotrackingTransaction", function() { return _lib_debug__WEBPACK_IMPORTED_MODULE_3__["deprecateMutationsInAutotrackingTransaction"]; });






/***/ }),

/***/ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/debug.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/validator/dist/modules/es2017/lib/debug.js ***!
  \**************************************************************************/
/*! exports provided: runInAutotrackingTransaction, deprecateMutationsInAutotrackingTransaction, setAutotrackingTransactionEnv, assertTagNotConsumed, markTagAsConsumed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runInAutotrackingTransaction", function() { return runInAutotrackingTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deprecateMutationsInAutotrackingTransaction", function() { return deprecateMutationsInAutotrackingTransaction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAutotrackingTransactionEnv", function() { return setAutotrackingTransactionEnv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertTagNotConsumed", function() { return assertTagNotConsumed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "markTagAsConsumed", function() { return markTagAsConsumed; });
let runInAutotrackingTransaction;
let deprecateMutationsInAutotrackingTransaction;
let setAutotrackingTransactionEnv;
let assertTagNotConsumed;
let markTagAsConsumed;

if (true
/* DEBUG */
) {
  let DEPRECATE_IN_AUTOTRACKING_TRANSACTION = false;
  let AUTOTRACKING_TRANSACTION = null;
  let debuggingContexts = []; /////////

  let TRANSACTION_ENV = {
    assert(message) {
      throw new Error(message);
    },

    deprecate(message) {
      console.warn(message);
    },

    debugMessage(obj, keyName) {
      let objName;

      if (typeof obj === 'function') {
        objName = obj.name;
      } else if (typeof obj === 'object' && obj !== null) {
        let className = obj.constructor && obj.constructor.name || '(unknown class)';
        objName = "(an instance of ".concat(className, ")");
      } else if (obj === undefined) {
        objName = '(an unknown tag)';
      } else {
        objName = String(obj);
      }

      let dirtyString = keyName ? "`".concat(keyName, "` on `").concat(objName, "`") : "`".concat(objName, "`");
      return "You attempted to update ".concat(dirtyString, ", but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.");
    }

  };

  setAutotrackingTransactionEnv = env => Object.assign(TRANSACTION_ENV, env);
  /**
   * Creates a global autotracking transaction. This will prevent any backflow
   * in any `track` calls within the transaction, even if they are not
   * externally consumed.
   *
   * `runInAutotrackingTransaction` can be called within itself, and it will add
   * onto the existing transaction if one exists.
   *
   * TODO: Only throw an error if the `track` is consumed.
   */


  runInAutotrackingTransaction = (fn, debuggingContext) => {
    let previousDeprecateState = DEPRECATE_IN_AUTOTRACKING_TRANSACTION;
    let previousTransactionState = AUTOTRACKING_TRANSACTION;
    DEPRECATE_IN_AUTOTRACKING_TRANSACTION = false;

    if (previousTransactionState === null) {
      // if there was no transaction start it. Otherwise, the transaction already exists.
      AUTOTRACKING_TRANSACTION = new WeakMap();
    }

    if (debuggingContext) {
      debuggingContexts.unshift(debuggingContext);
    }

    try {
      fn();
    } finally {
      if (debuggingContext) {
        debuggingContexts.shift();
      }

      DEPRECATE_IN_AUTOTRACKING_TRANSACTION = previousDeprecateState;
      AUTOTRACKING_TRANSACTION = previousTransactionState;
    }
  };
  /**
   * Switches to deprecating within an autotracking transaction, if one exists.
   * If `runInAutotrackingTransaction` is called within the callback of this
   * method, it switches back to throwing an error, allowing zebra-striping of
   * the types of errors that are thrown.
   *
   * Does not start an autotracking transaction.
   *
   * NOTE: For Ember usage only, in general you should assert that these
   * invariants are true.
   */


  deprecateMutationsInAutotrackingTransaction = fn => {
    let previousDeprecateState = DEPRECATE_IN_AUTOTRACKING_TRANSACTION;
    DEPRECATE_IN_AUTOTRACKING_TRANSACTION = true;

    try {
      fn();
    } finally {
      DEPRECATE_IN_AUTOTRACKING_TRANSACTION = previousDeprecateState;
    }
  };

  let nthIndex = (str, pattern, n, startingPos = -1) => {
    let i = startingPos;

    while (n-- > 0 && i++ < str.length) {
      i = str.indexOf(pattern, i);
      if (i < 0) break;
    }

    return i;
  };

  let makeAutotrackingErrorMessage = (sourceData, obj, keyName) => {
    let message = [TRANSACTION_ENV.debugMessage(obj, keyName && String(keyName))];

    if (sourceData.context) {
      message.push("`".concat(String(keyName), "` was first used:\n\n").concat(sourceData.context));
    }

    message.push("Stack trace for the update:");
    return message.join('\n\n');
  };

  markTagAsConsumed = _tag => {
    if (!AUTOTRACKING_TRANSACTION || AUTOTRACKING_TRANSACTION.has(_tag)) return;
    AUTOTRACKING_TRANSACTION.set(_tag, {
      context: debuggingContexts.map(c => c.replace(/^/gm, '  ').replace(/^ /, '-')).join('\n\n')
    }); // We need to mark the tag and all of its subtags as consumed, so we need to
    // cast it and access its internals. In the future this shouldn't be necessary,
    // this is only for computed properties.

    let tag = _tag;

    if (tag.subtag) {
      markTagAsConsumed(tag.subtag);
    }

    if (tag.subtags) {
      tag.subtags.forEach(tag => markTagAsConsumed(tag));
    }
  };

  assertTagNotConsumed = (tag, obj, keyName, forceHardError = false) => {
    if (AUTOTRACKING_TRANSACTION === null) return;
    let sourceData = AUTOTRACKING_TRANSACTION.get(tag);
    if (!sourceData) return;

    if (DEPRECATE_IN_AUTOTRACKING_TRANSACTION && !forceHardError) {
      TRANSACTION_ENV.deprecate(makeAutotrackingErrorMessage(sourceData, obj, keyName));
    } else {
      // This hack makes the assertion message nicer, we can cut off the first
      // few lines of the stack trace and let users know where the actual error
      // occurred.
      try {
        TRANSACTION_ENV.assert(makeAutotrackingErrorMessage(sourceData, obj, keyName));
      } catch (e) {
        if (e.stack) {
          let updateStackBegin = e.stack.indexOf('Stack trace for the update:');

          if (updateStackBegin !== -1) {
            let start = nthIndex(e.stack, '\n', 1, updateStackBegin);
            let end = nthIndex(e.stack, '\n', 4, updateStackBegin);
            e.stack = e.stack.substr(0, start) + e.stack.substr(end);
          }
        }

        throw e;
      }
    }
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/meta.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@glimmer/validator/dist/modules/es2017/lib/meta.js ***!
  \*************************************************************************/
/*! exports provided: propertyDidChange, setPropertyDidChange, dirtyTagFor, tagFor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "propertyDidChange", function() { return propertyDidChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPropertyDidChange", function() { return setPropertyDidChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dirtyTagFor", function() { return dirtyTagFor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tagFor", function() { return tagFor; });
/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validators */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/validators.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/debug.js");


let propertyDidChange = function () {};
function setPropertyDidChange(cb) {
  propertyDidChange = cb;
}

function isObject(u) {
  return typeof u === 'object' && u !== null || typeof u === 'function';
}

const TRACKED_TAGS = new WeakMap();
function dirtyTagFor(obj, key) {
  if (isObject(obj)) {
    let tags = TRACKED_TAGS.get(obj); // No tags have been setup for this object yet, return

    if (tags === undefined) return; // Dirty the tag for the specific property if it exists

    let propertyTag = tags.get(key);

    if (propertyTag !== undefined) {
      if (true
      /* DEBUG */
      ) {
        Object(_debug__WEBPACK_IMPORTED_MODULE_1__["assertTagNotConsumed"])(propertyTag, obj, key);
      }

      Object(_validators__WEBPACK_IMPORTED_MODULE_0__["dirtyTag"])(propertyTag);
      propertyDidChange();
    }
  } else {
    throw new Error("BUG: Can't update a tag for a primitive");
  }
}
function tagFor(obj, key) {
  if (isObject(obj)) {
    let tags = TRACKED_TAGS.get(obj);

    if (tags === undefined) {
      tags = new Map();
      TRACKED_TAGS.set(obj, tags);
    } else if (tags.has(key)) {
      return tags.get(key);
    }

    let tag = Object(_validators__WEBPACK_IMPORTED_MODULE_0__["createUpdatableTag"])();
    tags.set(key, tag);
    return tag;
  } else {
    return _validators__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"];
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/tracking.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@glimmer/validator/dist/modules/es2017/lib/tracking.js ***!
  \*****************************************************************************/
/*! exports provided: beginTrackFrame, endTrackFrame, memoizeTracked, isConstMemo, track, consumeTag, isTracking, untrack, EPOCH, trackedData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beginTrackFrame", function() { return beginTrackFrame; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endTrackFrame", function() { return endTrackFrame; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoizeTracked", function() { return memoizeTracked; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isConstMemo", function() { return isConstMemo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "track", function() { return track; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "consumeTag", function() { return consumeTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTracking", function() { return isTracking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untrack", function() { return untrack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPOCH", function() { return EPOCH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trackedData", function() { return trackedData; });
/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validators */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/validators.js");
/* harmony import */ var _meta__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./meta */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/meta.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/debug.js");



/**
 * An object that that tracks @tracked properties that were consumed.
 */

class Tracker {
  constructor() {
    this.tags = new Set();
    this.last = null;
  }

  add(tag) {
    this.tags.add(tag);

    if (true
    /* DEBUG */
    ) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_2__["markTagAsConsumed"])(tag);
    }

    this.last = tag;
  }

  combine() {
    let {
      tags
    } = this;

    if (tags.size === 0) {
      return _validators__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"];
    } else if (tags.size === 1) {
      return this.last;
    } else {
      let tagsArr = [];
      tags.forEach(tag => tagsArr.push(tag));
      return Object(_validators__WEBPACK_IMPORTED_MODULE_0__["combine"])(tagsArr);
    }
  }

}
/**
 * Whenever a tracked computed property is entered, the current tracker is
 * saved off and a new tracker is replaced.
 *
 * Any tracked properties consumed are added to the current tracker.
 *
 * When a tracked computed property is exited, the tracker's tags are
 * combined and added to the parent tracker.
 *
 * The consequence is that each tracked computed property has a tag
 * that corresponds to the tracked properties consumed inside of
 * itself, including child tracked computed properties.
 */


let CURRENT_TRACKER = null;
const OPEN_TRACK_FRAMES = [];
function beginTrackFrame() {
  if (CURRENT_TRACKER !== null) {
    OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
  }

  CURRENT_TRACKER = new Tracker();
}
function endTrackFrame() {
  let current = CURRENT_TRACKER;

  if ( true
  /* DEBUG */
  && !CURRENT_TRACKER) {
    throw new Error('attempted to close a tracking frame, but one was not open');
  }

  CURRENT_TRACKER = OPEN_TRACK_FRAMES.length > 0 ? OPEN_TRACK_FRAMES.pop() : null;
  return current.combine();
} //////////

const IS_CONST_MAP = new WeakMap();
function memoizeTracked(callback, debuggingContext) {
  let lastValue;
  let tag;
  let snapshot;

  let memoized = (...args) => {
    if (!tag || !Object(_validators__WEBPACK_IMPORTED_MODULE_0__["validateTag"])(tag, snapshot)) {
      beginTrackFrame();

      try {
        if (true
        /* DEBUG */
        ) {
          Object(_debug__WEBPACK_IMPORTED_MODULE_2__["runInAutotrackingTransaction"])(() => lastValue = callback(...args), debuggingContext);
        } else {}
      } finally {
        tag = endTrackFrame();
        snapshot = Object(_validators__WEBPACK_IMPORTED_MODULE_0__["valueForTag"])(tag);
        consumeTag(tag); // If the final tag is constant, then we know for sure that this
        // memoized function can never change. There are times when this
        // information is useful externally (i.e. in the append VM, it tells us
        // whether or not to emit opcodes) so we expose it via a metadata weakmap.

        if (tag === _validators__WEBPACK_IMPORTED_MODULE_0__["CONSTANT_TAG"]) {
          IS_CONST_MAP.set(memoized, true);
        } else if (true
        /* DEBUG */
        ) {
          // In DEBUG, set the value to false explicitly. This way we can throw
          // if someone attempts to call `isConst(memoized)` before running
          // `memoized()` at least once.
          IS_CONST_MAP.set(memoized, false);
        }
      }
    } else {
      consumeTag(tag);
    }

    return lastValue;
  };

  if (true
  /* DEBUG */
  ) {
    IS_CONST_MAP.set(memoized, undefined);
  }

  return memoized;
}
function isConstMemo(memoized) {
  if ( true
  /* DEBUG */
  && IS_CONST_MAP.has(memoized) && IS_CONST_MAP.get(memoized) === undefined) {
    throw new Error('Attempted to call `isConstMemo` on a memoized function, but the function has not been run at least once yet. You cannot know if a memoized function is constant or not until it has been run at least once. Call the function, then pass it to `isConstMemo`.');
  }

  return IS_CONST_MAP.get(memoized) === true;
} //////////

function track(callback, debuggingContext) {
  beginTrackFrame();
  let tag;

  try {
    if (true
    /* DEBUG */
    ) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_2__["runInAutotrackingTransaction"])(callback, debuggingContext);
    } else {}
  } finally {
    tag = endTrackFrame();
  }

  return tag;
}
function consumeTag(tag) {
  if (CURRENT_TRACKER !== null) {
    CURRENT_TRACKER.add(tag);
  }
}
function isTracking() {
  return CURRENT_TRACKER !== null;
}
function untrack(callback) {
  let parent = CURRENT_TRACKER;
  CURRENT_TRACKER = null;

  try {
    callback();
  } finally {
    CURRENT_TRACKER = parent;
  }
} //////////

const EPOCH = Object(_validators__WEBPACK_IMPORTED_MODULE_0__["createTag"])();
function trackedData(key, initializer) {
  let values = new WeakMap();
  let hasInitializer = typeof initializer === 'function';

  function getter(self) {
    consumeTag(Object(_meta__WEBPACK_IMPORTED_MODULE_1__["tagFor"])(self, key));
    let value; // If the field has never been initialized, we should initialize it

    if (hasInitializer && !values.has(self)) {
      value = initializer.call(self);
      values.set(self, value);
    } else {
      value = values.get(self);
    }

    return value;
  }

  function setter(self, value) {
    if (true
    /* DEBUG */
    ) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_2__["assertTagNotConsumed"])(Object(_meta__WEBPACK_IMPORTED_MODULE_1__["tagFor"])(self, key), self, key, true);
    }

    Object(_validators__WEBPACK_IMPORTED_MODULE_0__["dirtyTag"])(EPOCH);
    Object(_meta__WEBPACK_IMPORTED_MODULE_1__["dirtyTagFor"])(self, key);
    values.set(self, value);
  }

  return {
    getter,
    setter
  };
}

/***/ }),

/***/ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@glimmer/validator/dist/modules/es2017/lib/utils.js ***!
  \**************************************************************************/
/*! exports provided: symbol */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "symbol", function() { return symbol; });
// This is a duplicate utility from @glimmer/util because `@glimmer/validator`
// should not depend on any other @glimmer packages, in order to avoid pulling
// in types and prevent regressions in `@glimmer/tracking` (which has public types).
const symbol = typeof Symbol !== 'undefined' ? Symbol : key => "__".concat(key).concat(Math.floor(Math.random() * Date.now()), "__");

/***/ }),

/***/ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/validators.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@glimmer/validator/dist/modules/es2017/lib/validators.js ***!
  \*******************************************************************************/
/*! exports provided: CONSTANT, INITIAL, VOLATILE, bump, COMPUTE, valueForTag, validateTag, ALLOW_CYCLES, dirtyTag, updateTag, createTag, createUpdatableTag, CONSTANT_TAG, isConst, isConstTag, VolatileTag, VOLATILE_TAG, CurrentTag, CURRENT_TAG, combine, createCombinatorTag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONSTANT", function() { return CONSTANT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INITIAL", function() { return INITIAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLATILE", function() { return VOLATILE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bump", function() { return bump; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPUTE", function() { return COMPUTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valueForTag", function() { return valueForTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateTag", function() { return validateTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALLOW_CYCLES", function() { return ALLOW_CYCLES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dirtyTag", function() { return dirtyTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateTag", function() { return updateTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTag", function() { return createTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createUpdatableTag", function() { return createUpdatableTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONSTANT_TAG", function() { return CONSTANT_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isConst", function() { return isConst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isConstTag", function() { return isConstTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VolatileTag", function() { return VolatileTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VOLATILE_TAG", function() { return VOLATILE_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrentTag", function() { return CurrentTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CURRENT_TAG", function() { return CURRENT_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combine", function() { return combine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCombinatorTag", function() { return createCombinatorTag; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/utils.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */ "./node_modules/@glimmer/validator/dist/modules/es2017/lib/debug.js");


const CONSTANT = 0;
const INITIAL = 1;
const VOLATILE = 9007199254740991; // MAX_INT

let $REVISION = INITIAL;
function bump() {
  $REVISION++;
} //////////

const COMPUTE = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["symbol"])('TAG_COMPUTE'); //////////

/**
 * `value` receives a tag and returns an opaque Revision based on that tag. This
 * snapshot can then later be passed to `validate` with the same tag to
 * determine if the tag has changed at all since the time that `value` was
 * called.
 *
 * The current implementation returns the global revision count directly for
 * performance reasons. This is an implementation detail, and should not be
 * relied on directly by users of these APIs. Instead, Revisions should be
 * treated as if they are opaque/unknown, and should only be interacted with via
 * the `value`/`validate` API.
 *
 * @param tag
 */

function valueForTag(_tag) {
  return $REVISION;
}
/**
 * `validate` receives a tag and a snapshot from a previous call to `value` with
 * the same tag, and determines if the tag is still valid compared to the
 * snapshot. If the tag's state has changed at all since then, `validate` will
 * return false, otherwise it will return true. This is used to determine if a
 * calculation related to the tags should be rerun.
 *
 * @param tag
 * @param snapshot
 */

function validateTag(tag, snapshot) {
  return snapshot >= tag[COMPUTE]();
}
const TYPE = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["symbol"])('TAG_TYPE');
let ALLOW_CYCLES;

if (true
/* DEBUG */
) {
  ALLOW_CYCLES = new WeakMap();
}

class MonomorphicTagImpl {
  constructor(type) {
    this.revision = INITIAL;
    this.lastChecked = INITIAL;
    this.lastValue = INITIAL;
    this.isUpdating = false;
    this.subtags = null;
    this.subtag = null;
    this.subtagBufferCache = null;
    this[TYPE] = type;
  }

  [COMPUTE]() {
    let {
      lastChecked
    } = this;

    if (this.isUpdating === true) {
      if ( true
      /* DEBUG */
      && !ALLOW_CYCLES.has(this)) {
        throw new Error('Cycles in tags are not allowed');
      }

      this.lastChecked = ++$REVISION;
    } else if (lastChecked !== $REVISION) {
      this.isUpdating = true;
      this.lastChecked = $REVISION;

      try {
        let {
          subtags,
          subtag,
          subtagBufferCache,
          lastValue,
          revision
        } = this;

        if (subtag !== null) {
          let subtagValue = subtag[COMPUTE]();

          if (subtagValue === subtagBufferCache) {
            revision = Math.max(revision, lastValue);
          } else {
            // Clear the temporary buffer cache
            this.subtagBufferCache = null;
            revision = Math.max(revision, subtagValue);
          }
        }

        if (subtags !== null) {
          for (let i = 0; i < subtags.length; i++) {
            let value = subtags[i][COMPUTE]();
            revision = Math.max(value, revision);
          }
        }

        this.lastValue = revision;
      } finally {
        this.isUpdating = false;
      }
    }

    return this.lastValue;
  }

  static updateTag(_tag, _subtag) {
    if ( true
    /* DEBUG */
    && _tag[TYPE] !== 1
    /* Updatable */
    ) {
        throw new Error('Attempted to update a tag that was not updatable');
      } // TODO: TS 3.7 should allow us to do this via assertion


    let tag = _tag;
    let subtag = _subtag;

    if (subtag === CONSTANT_TAG) {
      tag.subtag = null;
    } else {
      // There are two different possibilities when updating a subtag:
      //
      // 1. subtag[COMPUTE]() <= tag[COMPUTE]();
      // 2. subtag[COMPUTE]() > tag[COMPUTE]();
      //
      // The first possibility is completely fine within our caching model, but
      // the second possibility presents a problem. If the parent tag has
      // already been read, then it's value is cached and will not update to
      // reflect the subtag's greater value. Next time the cache is busted, the
      // subtag's value _will_ be read, and it's value will be _greater_ than
      // the saved snapshot of the parent, causing the resulting calculation to
      // be rerun erroneously.
      //
      // In order to prevent this, when we first update to a new subtag we store
      // its computed value, and then check against that computed value on
      // subsequent updates. If its value hasn't changed, then we return the
      // parent's previous value. Once the subtag changes for the first time,
      // we clear the cache and everything is finally in sync with the parent.
      tag.subtagBufferCache = subtag[COMPUTE]();
      tag.subtag = subtag;
    }
  }

  static dirtyTag(tag) {
    if ( true
    /* DEBUG */
    && !(tag[TYPE] === 1
    /* Updatable */
    || tag[TYPE] === 0
    /* Dirtyable */
    )) {
      throw new Error('Attempted to dirty a tag that was not dirtyable');
    }

    if (true
    /* DEBUG */
    ) {
      // Usually by this point, we've already asserted with better error information,
      // but this is our last line of defense.
      Object(_debug__WEBPACK_IMPORTED_MODULE_1__["assertTagNotConsumed"])(tag);
    }

    tag.revision = ++$REVISION;
  }

}

const dirtyTag = MonomorphicTagImpl.dirtyTag;
const updateTag = MonomorphicTagImpl.updateTag; //////////

function createTag() {
  return new MonomorphicTagImpl(0
  /* Dirtyable */
  );
}
function createUpdatableTag() {
  return new MonomorphicTagImpl(1
  /* Updatable */
  );
} //////////

const CONSTANT_TAG = new MonomorphicTagImpl(3
/* Constant */
);
function isConst({
  tag
}) {
  return tag === CONSTANT_TAG;
}
function isConstTag(tag) {
  return tag === CONSTANT_TAG;
} //////////

class VolatileTag {
  [COMPUTE]() {
    return VOLATILE;
  }

}
const VOLATILE_TAG = new VolatileTag(); //////////

class CurrentTag {
  [COMPUTE]() {
    return $REVISION;
  }

}
const CURRENT_TAG = new CurrentTag(); //////////

function combine(tags) {
  let optimized = [];

  for (let i = 0, l = tags.length; i < l; i++) {
    let tag = tags[i];
    if (tag === CONSTANT_TAG) continue;
    optimized.push(tag);
  }

  return createCombinatorTag(optimized);
}
function createCombinatorTag(tags) {
  switch (tags.length) {
    case 0:
      return CONSTANT_TAG;

    case 1:
      return tags[0];

    default:
      let tag = new MonomorphicTagImpl(2
      /* Combinator */
      );
      tag.subtags = tags;
      return tag;
  }
}

/***/ }),

/***/ "./node_modules/@glimmer/vm/dist/modules/es2017/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@glimmer/vm/dist/modules/es2017/index.js ***!
  \***************************************************************/
/*! exports provided: isMachineOp, isOp, SavedRegister, TemporaryRegister, isLowLevelRegister, $pc, $fp, $ra, $sp, $s0, $s1, $t0, $t1, $v0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_opcodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/opcodes */ "./node_modules/@glimmer/vm/dist/modules/es2017/lib/opcodes.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isMachineOp", function() { return _lib_opcodes__WEBPACK_IMPORTED_MODULE_0__["isMachineOp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isOp", function() { return _lib_opcodes__WEBPACK_IMPORTED_MODULE_0__["isOp"]; });

/* harmony import */ var _lib_registers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/registers */ "./node_modules/@glimmer/vm/dist/modules/es2017/lib/registers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SavedRegister", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["SavedRegister"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TemporaryRegister", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["TemporaryRegister"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isLowLevelRegister", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["isLowLevelRegister"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$pc", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$pc"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$fp", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$fp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$ra", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$ra"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$sp", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$sp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$s0", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$s0"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$s1", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$s1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$t0", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$t0"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$t1", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$t1"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "$v0", function() { return _lib_registers__WEBPACK_IMPORTED_MODULE_1__["$v0"]; });




/***/ }),

/***/ "./node_modules/@glimmer/vm/dist/modules/es2017/lib/opcodes.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@glimmer/vm/dist/modules/es2017/lib/opcodes.js ***!
  \*********************************************************************/
/*! exports provided: isMachineOp, isOp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMachineOp", function() { return isMachineOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOp", function() { return isOp; });
/* This file is generated by build/debug.js */
function isMachineOp(value) {
  return value >= 0 && value <= 15;
}
function isOp(value) {
  return value >= 16;
}

/***/ }),

/***/ "./node_modules/@glimmer/vm/dist/modules/es2017/lib/registers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@glimmer/vm/dist/modules/es2017/lib/registers.js ***!
  \***********************************************************************/
/*! exports provided: $pc, $ra, $fp, $sp, $s0, $s1, $t0, $t1, $v0, isLowLevelRegister, SavedRegister, TemporaryRegister */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$pc", function() { return $pc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$ra", function() { return $ra; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$fp", function() { return $fp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$sp", function() { return $sp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$s0", function() { return $s0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$s1", function() { return $s1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$t0", function() { return $t0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$t1", function() { return $t1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$v0", function() { return $v0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLowLevelRegister", function() { return isLowLevelRegister; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SavedRegister", function() { return SavedRegister; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemporaryRegister", function() { return TemporaryRegister; });
/**
 * Registers
 *
 * For the most part, these follows MIPS naming conventions, however the
 * register numbers are different.
 */
// $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
const $pc = 0; // $1 or $ra (return address): pointer into `program` for the return

const $ra = 1; // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack

const $fp = 2; // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack

const $sp = 3; // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers

const $s0 = 4;
const $s1 = 5; // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers

const $t0 = 6;
const $t1 = 7; // $8 or $v0 (return value)

const $v0 = 8;
function isLowLevelRegister(register) {
  return register <= $sp;
}
var SavedRegister;

(function (SavedRegister) {
  SavedRegister[SavedRegister["s0"] = 4] = "s0";
  SavedRegister[SavedRegister["s1"] = 5] = "s1";
})(SavedRegister || (SavedRegister = {}));

var TemporaryRegister;

(function (TemporaryRegister) {
  TemporaryRegister[TemporaryRegister["t0"] = 6] = "t0";
  TemporaryRegister[TemporaryRegister["t1"] = 7] = "t1";
})(TemporaryRegister || (TemporaryRegister = {}));

/***/ }),

/***/ "./node_modules/@glimmerx/component/dist/modules/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@glimmerx/component/dist/modules/index.js ***!
  \****************************************************************/
/*! exports provided: default, tracked, hbs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hbs", function() { return hbs; });
/* harmony import */ var _glimmer_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/component */ "./node_modules/@glimmer/component/dist/modules/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _glimmer_component__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _glimmer_tracking__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @glimmer/tracking */ "./node_modules/@glimmer/tracking/dist/modules/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tracked", function() { return _glimmer_tracking__WEBPACK_IMPORTED_MODULE_1__["tracked"]; });



function hbs(_strings) {
  throw new Error('hbs template should have been compiled at build time');
}

/***/ }),

/***/ "./node_modules/@glimmerx/core/dist/modules/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@glimmerx/core/dist/modules/index.js ***!
  \***********************************************************/
/*! exports provided: Owner, renderComponent, setComponentTemplate, componentCapabilities, setComponentManager, helperCapabilities, setHelperManager, modifierCapabilities, setModifierManager, setOwner, getOwner, didRender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_owner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/owner */ "./node_modules/@glimmerx/core/dist/modules/src/owner.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Owner", function() { return _src_owner__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _src_renderComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/renderComponent */ "./node_modules/@glimmerx/core/dist/modules/src/renderComponent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "renderComponent", function() { return _src_renderComponent__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setComponentTemplate", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["setComponentTemplate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "componentCapabilities", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["componentCapabilities"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setComponentManager", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["setComponentManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "helperCapabilities", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["helperCapabilities"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setHelperManager", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["setHelperManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modifierCapabilities", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["modifierCapabilities"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setModifierManager", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["setModifierManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setOwner", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["setOwner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOwner", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["getOwner"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "didRender", function() { return _glimmer_core__WEBPACK_IMPORTED_MODULE_2__["didRender"]; });





/***/ }),

/***/ "./node_modules/@glimmerx/core/dist/modules/src/owner.js":
/*!***************************************************************!*\
  !*** ./node_modules/@glimmerx/core/dist/modules/src/owner.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Owner; });
const SERVICES = Symbol('Services');
class Owner {
  constructor(services) {
    this[SERVICES] = services;
  }

  lookup({
    type,
    name
  }) {
    if ( true
    /* DEBUG */
    && type !== 'service') {
      throw new Error('The only supported lookups are for services');
    }

    if ( true
    /* DEBUG */
    && this[SERVICES][name] === undefined) {
      throw new Error("Attempted to lookup service '".concat(name, "', but it did not exist. Did you pass it into renderComponent()?"));
    }

    return this[SERVICES][name];
  }

}

/***/ }),

/***/ "./node_modules/@glimmerx/core/dist/modules/src/renderComponent.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@glimmerx/core/dist/modules/src/renderComponent.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return renderComponent; });
/* harmony import */ var _glimmer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/core */ "./node_modules/@glimmer/core/dist/modules/index.js");
/* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./owner */ "./node_modules/@glimmerx/core/dist/modules/src/owner.js");


function renderComponent(ComponentClass, optionsOrElement) {
  if (optionsOrElement instanceof Element) {
    return Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["renderComponent"])(ComponentClass, optionsOrElement);
  }

  const {
    element,
    args,
    services
  } = optionsOrElement;
  const owner = new _owner__WEBPACK_IMPORTED_MODULE_1__["default"](services !== null && services !== void 0 ? services : {});
  return Object(_glimmer_core__WEBPACK_IMPORTED_MODULE_0__["renderComponent"])(ComponentClass, {
    element,
    args,
    owner
  });
}

/***/ }),

/***/ "./node_modules/@glimmerx/modifier/dist/modules/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@glimmerx/modifier/dist/modules/index.js ***!
  \***************************************************************/
/*! exports provided: on, action */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _glimmer_modifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmer/modifier */ "./node_modules/@glimmer/modifier/dist/modules/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "on", function() { return _glimmer_modifier__WEBPACK_IMPORTED_MODULE_0__["on"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "action", function() { return _glimmer_modifier__WEBPACK_IMPORTED_MODULE_0__["action"]; });



/***/ }),

/***/ "./node_modules/@glimmerx/service/dist/modules/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@glimmerx/service/dist/modules/index.js ***!
  \**************************************************************/
/*! exports provided: service, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Service; });
/* harmony import */ var _src_decorator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/decorator */ "./node_modules/@glimmerx/service/dist/modules/src/decorator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "service", function() { return _src_decorator__WEBPACK_IMPORTED_MODULE_0__["service"]; });


class Service {}

/***/ }),

/***/ "./node_modules/@glimmerx/service/dist/modules/src/decorator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@glimmerx/service/dist/modules/src/decorator.js ***!
  \**********************************************************************/
/*! exports provided: service */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "service", function() { return service; });
/* harmony import */ var _glimmerx_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glimmerx/core */ "./node_modules/@glimmerx/core/dist/modules/index.js");


function makeServiceDecorator(name) {
  return () => ({
    enumerable: true,
    configurable: false,

    get() {
      return Object(_glimmerx_core__WEBPACK_IMPORTED_MODULE_0__["getOwner"])(this).lookup({
        type: 'service',
        name
      });
    }

  });
}

function service(targetOrServiceName, key) {
  if (typeof targetOrServiceName === 'string') {
    return makeServiceDecorator(targetOrServiceName);
  }

  return makeServiceDecorator(key)(targetOrServiceName, key);
}

/***/ }),

/***/ "./node_modules/ansi-html/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ansi-html/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML; // Reference to https://github.com/sindresorhus/ansi-regex

var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/;
var _defColors = {
  reset: ['fff', '000'],
  // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
};
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
};
var _openTags = {
  '1': 'font-weight:bold',
  // bold
  '2': 'opacity:0.5',
  // dim
  '3': '<i>',
  // italic
  '4': '<u>',
  // underscore
  '8': 'display:none',
  // hidden
  '9': '<del>' // delete

};
var _closeTags = {
  '23': '</i>',
  // reset italic
  '24': '</u>',
  // reset underscore
  '29': '</del>' // reset delete

};
[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>';
});
/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */

function ansiHTML(text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text;
  } // Cache opened sequence.


  var ansiCodes = []; // Replace with markup.

  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq];

    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) {
        // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop();
        return '</span>';
      } // Open tag.


      ansiCodes.push(seq);
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">';
    }

    var ct = _closeTags[seq];

    if (ct) {
      // Pop sequence
      ansiCodes.pop();
      return ct;
    }

    return '';
  }); // Make sure tags are closed.

  var l = ansiCodes.length;
  l > 0 && (ret += Array(l + 1).join('</span>'));
  return ret;
}
/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */


ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.');
  }

  var _finalColors = {};

  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null;

    if (!hex) {
      _finalColors[key] = _defColors[key];
      continue;
    }

    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex];
      }

      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string';
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000');
      }

      var defHexColor = _defColors[key];

      if (!hex[0]) {
        hex[0] = defHexColor[0];
      }

      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]];
        hex.push(defHexColor[1]);
      }

      hex = hex.slice(0, 2);
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000');
    }

    _finalColors[key] = hex;
  }

  _setTags(_finalColors);
};
/**
 * Reset colors.
 */


ansiHTML.reset = function () {
  _setTags(_defColors);
};
/**
 * Expose tags, including open and close.
 * @type {Object}
 */


ansiHTML.tags = {};

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () {
      return _openTags;
    }
  });
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () {
      return _closeTags;
    }
  });
} else {
  ansiHTML.tags.open = _openTags;
  ansiHTML.tags.close = _closeTags;
}

function _setTags(colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]; // inverse

  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]; // dark grey

  _openTags['90'] = 'color:#' + colors.darkgrey;

  for (var code in _styles) {
    var color = _styles[code];
    var oriColor = colors[color] || '000';
    _openTags[code] = 'color:#' + oriColor;
    code = parseInt(code);
    _openTags[(code + 10).toString()] = 'background:#' + oriColor;
  }
}

ansiHTML.reset();

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

/***/ }),

/***/ "./node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./docs/docs.html":
/*!*********************************************************************************!*\
  !*** ./node_modules/file-loader/dist/cjs.js?name=[name].[ext]!./docs/docs.html ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "docs.html");

/***/ }),

/***/ "./node_modules/html-entities/index.js":
/*!*********************************************!*\
  !*** ./node_modules/html-entities/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  XmlEntities: __webpack_require__(/*! ./lib/xml-entities.js */ "./node_modules/html-entities/lib/xml-entities.js"),
  Html4Entities: __webpack_require__(/*! ./lib/html4-entities.js */ "./node_modules/html-entities/lib/html4-entities.js"),
  Html5Entities: __webpack_require__(/*! ./lib/html5-entities.js */ "./node_modules/html-entities/lib/html5-entities.js"),
  AllHtmlEntities: __webpack_require__(/*! ./lib/html5-entities.js */ "./node_modules/html-entities/lib/html5-entities.js")
};

/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html4-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];
var alphaIndex = {};
var numIndex = {};
var i = 0;
var length = HTML_ALPHA.length;

while (i < length) {
  var a = HTML_ALPHA[i];
  var c = HTML_CODES[i];
  alphaIndex[a] = String.fromCharCode(c);
  numIndex[c] = a;
  i++;
}
/**
 * @constructor
 */


function Html4Entities() {}
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.prototype.decode = function (str) {
  if (!str || !str.length) {
    return '';
  }

  return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
    var chr;

    if (entity.charAt(0) === "#") {
      var code = entity.charAt(1).toLowerCase() === 'x' ? parseInt(entity.substr(2), 16) : parseInt(entity.substr(1));

      if (!(isNaN(code) || code < -32768 || code > 65535)) {
        chr = String.fromCharCode(code);
      }
    } else {
      chr = alphaIndex[entity];
    }

    return chr || s;
  });
};
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.decode = function (str) {
  return new Html4Entities().decode(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.prototype.encode = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLength = str.length;
  var result = '';
  var i = 0;

  while (i < strLength) {
    var alpha = numIndex[str.charCodeAt(i)];
    result += alpha ? "&" + alpha + ";" : str.charAt(i);
    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.encode = function (str) {
  return new Html4Entities().encode(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.prototype.encodeNonUTF = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLength = str.length;
  var result = '';
  var i = 0;

  while (i < strLength) {
    var cc = str.charCodeAt(i);
    var alpha = numIndex[cc];

    if (alpha) {
      result += "&" + alpha + ";";
    } else if (cc < 32 || cc > 126) {
      result += "&#" + cc + ";";
    } else {
      result += str.charAt(i);
    }

    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.encodeNonUTF = function (str) {
  return new Html4Entities().encodeNonUTF(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.prototype.encodeNonASCII = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLength = str.length;
  var result = '';
  var i = 0;

  while (i < strLength) {
    var c = str.charCodeAt(i);

    if (c <= 255) {
      result += str[i++];
      continue;
    }

    result += '&#' + c + ';';
    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


Html4Entities.encodeNonASCII = function (str) {
  return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;

/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html5-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];
var alphaIndex = {};
var charIndex = {};
createIndexes(alphaIndex, charIndex);
/**
 * @constructor
 */

function Html5Entities() {}
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.prototype.decode = function (str) {
  if (!str || !str.length) {
    return '';
  }

  return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
    var chr;

    if (entity.charAt(0) === "#") {
      var code = entity.charAt(1) === 'x' ? parseInt(entity.substr(2).toLowerCase(), 16) : parseInt(entity.substr(1));

      if (!(isNaN(code) || code < -32768 || code > 65535)) {
        chr = String.fromCharCode(code);
      }
    } else {
      chr = alphaIndex[entity];
    }

    return chr || s;
  });
};
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.decode = function (str) {
  return new Html5Entities().decode(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.prototype.encode = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLength = str.length;
  var result = '';
  var i = 0;

  while (i < strLength) {
    var charInfo = charIndex[str.charCodeAt(i)];

    if (charInfo) {
      var alpha = charInfo[str.charCodeAt(i + 1)];

      if (alpha) {
        i++;
      } else {
        alpha = charInfo[''];
      }

      if (alpha) {
        result += "&" + alpha + ";";
        i++;
        continue;
      }
    }

    result += str.charAt(i);
    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.encode = function (str) {
  return new Html5Entities().encode(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.prototype.encodeNonUTF = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLength = str.length;
  var result = '';
  var i = 0;

  while (i < strLength) {
    var c = str.charCodeAt(i);
    var charInfo = charIndex[c];

    if (charInfo) {
      var alpha = charInfo[str.charCodeAt(i + 1)];

      if (alpha) {
        i++;
      } else {
        alpha = charInfo[''];
      }

      if (alpha) {
        result += "&" + alpha + ";";
        i++;
        continue;
      }
    }

    if (c < 32 || c > 126) {
      result += '&#' + c + ';';
    } else {
      result += str.charAt(i);
    }

    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.encodeNonUTF = function (str) {
  return new Html5Entities().encodeNonUTF(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.prototype.encodeNonASCII = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLength = str.length;
  var result = '';
  var i = 0;

  while (i < strLength) {
    var c = str.charCodeAt(i);

    if (c <= 255) {
      result += str[i++];
      continue;
    }

    result += '&#' + c + ';';
    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


Html5Entities.encodeNonASCII = function (str) {
  return new Html5Entities().encodeNonASCII(str);
};
/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */


function createIndexes(alphaIndex, charIndex) {
  var i = ENTITIES.length;
  var _results = [];

  while (i--) {
    var e = ENTITIES[i];
    var alpha = e[0];
    var chars = e[1];
    var chr = chars[0];
    var addChar = chr < 32 || chr > 126 || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
    var charInfo;

    if (addChar) {
      charInfo = charIndex[chr] = charIndex[chr] || {};
    }

    if (chars[1]) {
      var chr2 = chars[1];
      alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);

      _results.push(addChar && (charInfo[chr2] = alpha));
    } else {
      alphaIndex[alpha] = String.fromCharCode(chr);

      _results.push(addChar && (charInfo[''] = alpha));
    }
  }
}

module.exports = Html5Entities;

/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/*!********************************************************!*\
  !*** ./node_modules/html-entities/lib/xml-entities.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ALPHA_INDEX = {
  '&lt': '<',
  '&gt': '>',
  '&quot': '"',
  '&apos': '\'',
  '&amp': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&apos;': '\'',
  '&amp;': '&'
};
var CHAR_INDEX = {
  60: 'lt',
  62: 'gt',
  34: 'quot',
  39: 'apos',
  38: 'amp'
};
var CHAR_S_INDEX = {
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  '\'': '&apos;',
  '&': '&amp;'
};
/**
 * @constructor
 */

function XmlEntities() {}
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.prototype.encode = function (str) {
  if (!str || !str.length) {
    return '';
  }

  return str.replace(/<|>|"|'|&/g, function (s) {
    return CHAR_S_INDEX[s];
  });
};
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.encode = function (str) {
  return new XmlEntities().encode(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.prototype.decode = function (str) {
  if (!str || !str.length) {
    return '';
  }

  return str.replace(/&#?[0-9a-zA-Z]+;?/g, function (s) {
    if (s.charAt(1) === '#') {
      var code = s.charAt(2).toLowerCase() === 'x' ? parseInt(s.substr(3), 16) : parseInt(s.substr(2));

      if (isNaN(code) || code < -32768 || code > 65535) {
        return '';
      }

      return String.fromCharCode(code);
    }

    return ALPHA_INDEX[s] || s;
  });
};
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.decode = function (str) {
  return new XmlEntities().decode(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.prototype.encodeNonUTF = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLength = str.length;
  var result = '';
  var i = 0;

  while (i < strLength) {
    var c = str.charCodeAt(i);
    var alpha = CHAR_INDEX[c];

    if (alpha) {
      result += "&" + alpha + ";";
      i++;
      continue;
    }

    if (c < 32 || c > 126) {
      result += '&#' + c + ';';
    } else {
      result += str.charAt(i);
    }

    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.encodeNonUTF = function (str) {
  return new XmlEntities().encodeNonUTF(str);
};
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.prototype.encodeNonASCII = function (str) {
  if (!str || !str.length) {
    return '';
  }

  var strLenght = str.length;
  var result = '';
  var i = 0;

  while (i < strLenght) {
    var c = str.charCodeAt(i);

    if (c <= 255) {
      result += str[i++];
      continue;
    }

    result += '&#' + c + ';';
    i++;
  }

  return result;
};
/**
 * @param {String} str
 * @returns {String}
 */


XmlEntities.encodeNonASCII = function (str) {
  return new XmlEntities().encodeNonASCII(str);
};

module.exports = XmlEntities;

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
  "use strict";

  if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function () {
  "use strict"; // Slightly dubious tricks to cut down minimized file size

  var noop = function () {};

  var undefinedType = "undefined";
  var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
  var logMethods = ["trace", "debug", "info", "warn", "error"]; // Cross-browser bind equivalent that works at least back to IE6

  function bindMethod(obj, methodName) {
    var method = obj[methodName];

    if (typeof method.bind === 'function') {
      return method.bind(obj);
    } else {
      try {
        return Function.prototype.bind.call(method, obj);
      } catch (e) {
        // Missing bind shim or IE8 + Modernizr, fallback to wrapping
        return function () {
          return Function.prototype.apply.apply(method, [obj, arguments]);
        };
      }
    }
  } // Trace() doesn't print the message in IE, so for that case we need to wrap it


  function traceForIE() {
    if (console.log) {
      if (console.log.apply) {
        console.log.apply(console, arguments);
      } else {
        // In old IE, native console methods themselves don't have apply().
        Function.prototype.apply.apply(console.log, [console, arguments]);
      }
    }

    if (console.trace) console.trace();
  } // Build the best logging method possible for this env
  // Wherever possible we want to bind, not wrap, to preserve stack traces


  function realMethod(methodName) {
    if (methodName === 'debug') {
      methodName = 'log';
    }

    if (typeof console === undefinedType) {
      return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
    } else if (methodName === 'trace' && isIE) {
      return traceForIE;
    } else if (console[methodName] !== undefined) {
      return bindMethod(console, methodName);
    } else if (console.log !== undefined) {
      return bindMethod(console, 'log');
    } else {
      return noop;
    }
  } // These private functions always need `this` to be set properly


  function replaceLoggingMethods(level, loggerName) {
    /*jshint validthis:true */
    for (var i = 0; i < logMethods.length; i++) {
      var methodName = logMethods[i];
      this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);
    } // Define log.log as an alias for log.debug


    this.log = this.debug;
  } // In old IE versions, the console isn't present until you first open it.
  // We build realMethod() replacements here that regenerate logging methods


  function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
    return function () {
      if (typeof console !== undefinedType) {
        replaceLoggingMethods.call(this, level, loggerName);
        this[methodName].apply(this, arguments);
      }
    };
  } // By default, we use closely bound real methods wherever possible, and
  // otherwise we wait for a console to appear, and then try again.


  function defaultMethodFactory(methodName, level, loggerName) {
    /*jshint validthis:true */
    return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
  }

  function Logger(name, defaultLevel, factory) {
    var self = this;
    var currentLevel;
    var storageKey = "loglevel";

    if (name) {
      storageKey += ":" + name;
    }

    function persistLevelIfPossible(levelNum) {
      var levelName = (logMethods[levelNum] || 'silent').toUpperCase();
      if (typeof window === undefinedType) return; // Use localStorage if available

      try {
        window.localStorage[storageKey] = levelName;
        return;
      } catch (ignore) {} // Use session cookie as fallback


      try {
        window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
      } catch (ignore) {}
    }

    function getPersistedLevel() {
      var storedLevel;
      if (typeof window === undefinedType) return;

      try {
        storedLevel = window.localStorage[storageKey];
      } catch (ignore) {} // Fallback to cookies if local storage gives us nothing


      if (typeof storedLevel === undefinedType) {
        try {
          var cookie = window.document.cookie;
          var location = cookie.indexOf(encodeURIComponent(storageKey) + "=");

          if (location !== -1) {
            storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
          }
        } catch (ignore) {}
      } // If the stored level is not valid, treat it as if nothing was stored.


      if (self.levels[storedLevel] === undefined) {
        storedLevel = undefined;
      }

      return storedLevel;
    }
    /*
     *
     * Public logger API - see https://github.com/pimterry/loglevel for details
     *
     */


    self.name = name;
    self.levels = {
      "TRACE": 0,
      "DEBUG": 1,
      "INFO": 2,
      "WARN": 3,
      "ERROR": 4,
      "SILENT": 5
    };
    self.methodFactory = factory || defaultMethodFactory;

    self.getLevel = function () {
      return currentLevel;
    };

    self.setLevel = function (level, persist) {
      if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
        level = self.levels[level.toUpperCase()];
      }

      if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
        currentLevel = level;

        if (persist !== false) {
          // defaults to true
          persistLevelIfPossible(level);
        }

        replaceLoggingMethods.call(self, level, name);

        if (typeof console === undefinedType && level < self.levels.SILENT) {
          return "No console available for logging";
        }
      } else {
        throw "log.setLevel() called with invalid level: " + level;
      }
    };

    self.setDefaultLevel = function (level) {
      if (!getPersistedLevel()) {
        self.setLevel(level, false);
      }
    };

    self.enableAll = function (persist) {
      self.setLevel(self.levels.TRACE, persist);
    };

    self.disableAll = function (persist) {
      self.setLevel(self.levels.SILENT, persist);
    }; // Initialize with the right level


    var initialLevel = getPersistedLevel();

    if (initialLevel == null) {
      initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
    }

    self.setLevel(initialLevel, false);
  }
  /*
   *
   * Top-level API
   *
   */


  var defaultLogger = new Logger();
  var _loggersByName = {};

  defaultLogger.getLogger = function getLogger(name) {
    if (typeof name !== "string" || name === "") {
      throw new TypeError("You must supply a name when creating a logger.");
    }

    var logger = _loggersByName[name];

    if (!logger) {
      logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);
    }

    return logger;
  }; // Grab the current global log variable in case of overwrite


  var _log = typeof window !== undefinedType ? window.log : undefined;

  defaultLogger.noConflict = function () {
    if (typeof window !== undefinedType && window.log === defaultLogger) {
      window.log = _log;
    }

    return defaultLogger;
  };

  defaultLogger.getLoggers = function getLoggers() {
    return _loggersByName;
  };

  return defaultLogger;
});

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;

(function (root) {
  /** Detect free variables */
  var freeExports =  true && exports && !exports.nodeType && exports;
  var freeModule =  true && module && !module.nodeType && module;
  var freeGlobal = typeof global == 'object' && global;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }
  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */


  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647,
      // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
      tMin = 1,
      tMax = 26,
      skew = 38,
      damp = 700,
      initialBias = 72,
      initialN = 128,
      // 0x80
  delimiter = '-',
      // '\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
      regexNonASCII = /[^\x20-\x7E]/,
      // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
      // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
      floor = Math.floor,
      stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
      return output;
    }).join('');
  }
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }

    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }

    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }

    return base;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,

    /** Cached calculation results */
    baseMinusT; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;
      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output

      output.splice(i++, 0, n);
    }

    return ucs2encode(output);
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.4.1',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
 // If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }

  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }

  return res;
};

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");

/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/dist/sockjs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.4.0 | http://sockjs.org | MIT license */
(function (f) {
  if (true) {
    module.exports = f();
  } else { var g; }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return require(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var transportList = require('./transport-list');

        module.exports = require('./main')(transportList); // TODO can't get rid of this until all servers do

        if ('_sockjs_onload' in global) {
          setTimeout(global._sockjs_onload, 1);
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./main": 14,
      "./transport-list": 16
    }],
    2: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          Event = require('./event');

      function CloseEvent() {
        Event.call(this);
        this.initEvent('close', false, false);
        this.wasClean = false;
        this.code = 0;
        this.reason = '';
      }

      inherits(CloseEvent, Event);
      module.exports = CloseEvent;
    }, {
      "./event": 4,
      "inherits": 57
    }],
    3: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          EventTarget = require('./eventtarget');

      function EventEmitter() {
        EventTarget.call(this);
      }

      inherits(EventEmitter, EventTarget);

      EventEmitter.prototype.removeAllListeners = function (type) {
        if (type) {
          delete this._listeners[type];
        } else {
          this._listeners = {};
        }
      };

      EventEmitter.prototype.once = function (type, listener) {
        var self = this,
            fired = false;

        function g() {
          self.removeListener(type, g);

          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }

        this.on(type, g);
      };

      EventEmitter.prototype.emit = function () {
        var type = arguments[0];
        var listeners = this._listeners[type];

        if (!listeners) {
          return;
        } // equivalent of Array.prototype.slice.call(arguments, 1);


        var l = arguments.length;
        var args = new Array(l - 1);

        for (var ai = 1; ai < l; ai++) {
          args[ai - 1] = arguments[ai];
        }

        for (var i = 0; i < listeners.length; i++) {
          listeners[i].apply(this, args);
        }
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
      EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;
      module.exports.EventEmitter = EventEmitter;
    }, {
      "./eventtarget": 5,
      "inherits": 57
    }],
    4: [function (require, module, exports) {
      'use strict';

      function Event(eventType) {
        this.type = eventType;
      }

      Event.prototype.initEvent = function (eventType, canBubble, cancelable) {
        this.type = eventType;
        this.bubbles = canBubble;
        this.cancelable = cancelable;
        this.timeStamp = +new Date();
        return this;
      };

      Event.prototype.stopPropagation = function () {};

      Event.prototype.preventDefault = function () {};

      Event.CAPTURING_PHASE = 1;
      Event.AT_TARGET = 2;
      Event.BUBBLING_PHASE = 3;
      module.exports = Event;
    }, {}],
    5: [function (require, module, exports) {
      'use strict';
      /* Simplified implementation of DOM2 EventTarget.
       *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
       */

      function EventTarget() {
        this._listeners = {};
      }

      EventTarget.prototype.addEventListener = function (eventType, listener) {
        if (!(eventType in this._listeners)) {
          this._listeners[eventType] = [];
        }

        var arr = this._listeners[eventType]; // #4

        if (arr.indexOf(listener) === -1) {
          // Make a copy so as not to interfere with a current dispatchEvent.
          arr = arr.concat([listener]);
        }

        this._listeners[eventType] = arr;
      };

      EventTarget.prototype.removeEventListener = function (eventType, listener) {
        var arr = this._listeners[eventType];

        if (!arr) {
          return;
        }

        var idx = arr.indexOf(listener);

        if (idx !== -1) {
          if (arr.length > 1) {
            // Make a copy so as not to interfere with a current dispatchEvent.
            this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
          } else {
            delete this._listeners[eventType];
          }

          return;
        }
      };

      EventTarget.prototype.dispatchEvent = function () {
        var event = arguments[0];
        var t = event.type; // equivalent of Array.prototype.slice.call(arguments, 0);

        var args = arguments.length === 1 ? [event] : Array.apply(null, arguments); // TODO: This doesn't match the real behavior; per spec, onfoo get
        // their place in line from the /first/ time they're set from
        // non-null. Although WebKit bumps it to the end every time it's
        // set.

        if (this['on' + t]) {
          this['on' + t].apply(this, args);
        }

        if (t in this._listeners) {
          // Grab a reference to the listeners list. removeEventListener may alter the list.
          var listeners = this._listeners[t];

          for (var i = 0; i < listeners.length; i++) {
            listeners[i].apply(this, args);
          }
        }
      };

      module.exports = EventTarget;
    }, {}],
    6: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          Event = require('./event');

      function TransportMessageEvent(data) {
        Event.call(this);
        this.initEvent('message', false, false);
        this.data = data;
      }

      inherits(TransportMessageEvent, Event);
      module.exports = TransportMessageEvent;
    }, {
      "./event": 4,
      "inherits": 57
    }],
    7: [function (require, module, exports) {
      'use strict';

      var JSON3 = require('json3'),
          iframeUtils = require('./utils/iframe');

      function FacadeJS(transport) {
        this._transport = transport;
        transport.on('message', this._transportMessage.bind(this));
        transport.on('close', this._transportClose.bind(this));
      }

      FacadeJS.prototype._transportClose = function (code, reason) {
        iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
      };

      FacadeJS.prototype._transportMessage = function (frame) {
        iframeUtils.postMessage('t', frame);
      };

      FacadeJS.prototype._send = function (data) {
        this._transport.send(data);
      };

      FacadeJS.prototype._close = function () {
        this._transport.close();

        this._transport.removeAllListeners();
      };

      module.exports = FacadeJS;
    }, {
      "./utils/iframe": 47,
      "json3": 58
    }],
    8: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var urlUtils = require('./utils/url'),
            eventUtils = require('./utils/event'),
            JSON3 = require('json3'),
            FacadeJS = require('./facade'),
            InfoIframeReceiver = require('./info-iframe-receiver'),
            iframeUtils = require('./utils/iframe'),
            loc = require('./location');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:iframe-bootstrap');
        }

        module.exports = function (SockJS, availableTransports) {
          var transportMap = {};
          availableTransports.forEach(function (at) {
            if (at.facadeTransport) {
              transportMap[at.facadeTransport.transportName] = at.facadeTransport;
            }
          }); // hard-coded for the info iframe
          // TODO see if we can make this more dynamic

          transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
          var parentOrigin;
          /* eslint-disable camelcase */

          SockJS.bootstrap_iframe = function () {
            /* eslint-enable camelcase */
            var facade;
            iframeUtils.currentWindowId = loc.hash.slice(1);

            var onMessage = function (e) {
              if (e.source !== parent) {
                return;
              }

              if (typeof parentOrigin === 'undefined') {
                parentOrigin = e.origin;
              }

              if (e.origin !== parentOrigin) {
                return;
              }

              var iframeMessage;

              try {
                iframeMessage = JSON3.parse(e.data);
              } catch (ignored) {
                debug('bad json', e.data);
                return;
              }

              if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
                return;
              }

              switch (iframeMessage.type) {
                case 's':
                  var p;

                  try {
                    p = JSON3.parse(iframeMessage.data);
                  } catch (ignored) {
                    debug('bad json', iframeMessage.data);
                    break;
                  }

                  var version = p[0];
                  var transport = p[1];
                  var transUrl = p[2];
                  var baseUrl = p[3];
                  debug(version, transport, transUrl, baseUrl); // change this to semver logic

                  if (version !== SockJS.version) {
                    throw new Error('Incompatible SockJS! Main site uses:' + ' "' + version + '", the iframe:' + ' "' + SockJS.version + '".');
                  }

                  if (!urlUtils.isOriginEqual(transUrl, loc.href) || !urlUtils.isOriginEqual(baseUrl, loc.href)) {
                    throw new Error('Can\'t connect to different domain from within an ' + 'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
                  }

                  facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
                  break;

                case 'm':
                  facade._send(iframeMessage.data);

                  break;

                case 'c':
                  if (facade) {
                    facade._close();
                  }

                  facade = null;
                  break;
              }
            };

            eventUtils.attachEvent('message', onMessage); // Start

            iframeUtils.postMessage('s');
          };
        };
      }).call(this, {
        env: {}
      });
    }, {
      "./facade": 7,
      "./info-iframe-receiver": 10,
      "./location": 13,
      "./utils/event": 46,
      "./utils/iframe": 47,
      "./utils/url": 52,
      "debug": 55,
      "json3": 58
    }],
    9: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            JSON3 = require('json3'),
            objectUtils = require('./utils/object');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:info-ajax');
        }

        function InfoAjax(url, AjaxObject) {
          EventEmitter.call(this);
          var self = this;
          var t0 = +new Date();
          this.xo = new AjaxObject('GET', url);
          this.xo.once('finish', function (status, text) {
            var info, rtt;

            if (status === 200) {
              rtt = +new Date() - t0;

              if (text) {
                try {
                  info = JSON3.parse(text);
                } catch (e) {
                  debug('bad json', text);
                }
              }

              if (!objectUtils.isObject(info)) {
                info = {};
              }
            }

            self.emit('finish', info, rtt);
            self.removeAllListeners();
          });
        }

        inherits(InfoAjax, EventEmitter);

        InfoAjax.prototype.close = function () {
          this.removeAllListeners();
          this.xo.close();
        };

        module.exports = InfoAjax;
      }).call(this, {
        env: {}
      });
    }, {
      "./utils/object": 49,
      "debug": 55,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    10: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          EventEmitter = require('events').EventEmitter,
          JSON3 = require('json3'),
          XHRLocalObject = require('./transport/sender/xhr-local'),
          InfoAjax = require('./info-ajax');

      function InfoReceiverIframe(transUrl) {
        var self = this;
        EventEmitter.call(this);
        this.ir = new InfoAjax(transUrl, XHRLocalObject);
        this.ir.once('finish', function (info, rtt) {
          self.ir = null;
          self.emit('message', JSON3.stringify([info, rtt]));
        });
      }

      inherits(InfoReceiverIframe, EventEmitter);
      InfoReceiverIframe.transportName = 'iframe-info-receiver';

      InfoReceiverIframe.prototype.close = function () {
        if (this.ir) {
          this.ir.close();
          this.ir = null;
        }

        this.removeAllListeners();
      };

      module.exports = InfoReceiverIframe;
    }, {
      "./info-ajax": 9,
      "./transport/sender/xhr-local": 37,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    11: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            JSON3 = require('json3'),
            utils = require('./utils/event'),
            IframeTransport = require('./transport/iframe'),
            InfoReceiverIframe = require('./info-iframe-receiver');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:info-iframe');
        }

        function InfoIframe(baseUrl, url) {
          var self = this;
          EventEmitter.call(this);

          var go = function () {
            var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);
            ifr.once('message', function (msg) {
              if (msg) {
                var d;

                try {
                  d = JSON3.parse(msg);
                } catch (e) {
                  debug('bad json', msg);
                  self.emit('finish');
                  self.close();
                  return;
                }

                var info = d[0],
                    rtt = d[1];
                self.emit('finish', info, rtt);
              }

              self.close();
            });
            ifr.once('close', function () {
              self.emit('finish');
              self.close();
            });
          }; // TODO this seems the same as the 'needBody' from transports


          if (!global.document.body) {
            utils.attachEvent('load', go);
          } else {
            go();
          }
        }

        inherits(InfoIframe, EventEmitter);

        InfoIframe.enabled = function () {
          return IframeTransport.enabled();
        };

        InfoIframe.prototype.close = function () {
          if (this.ifr) {
            this.ifr.close();
          }

          this.removeAllListeners();
          this.ifr = null;
        };

        module.exports = InfoIframe;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./info-iframe-receiver": 10,
      "./transport/iframe": 22,
      "./utils/event": 46,
      "debug": 55,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    12: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            urlUtils = require('./utils/url'),
            XDR = require('./transport/sender/xdr'),
            XHRCors = require('./transport/sender/xhr-cors'),
            XHRLocal = require('./transport/sender/xhr-local'),
            XHRFake = require('./transport/sender/xhr-fake'),
            InfoIframe = require('./info-iframe'),
            InfoAjax = require('./info-ajax');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:info-receiver');
        }

        function InfoReceiver(baseUrl, urlInfo) {
          debug(baseUrl);
          var self = this;
          EventEmitter.call(this);
          setTimeout(function () {
            self.doXhr(baseUrl, urlInfo);
          }, 0);
        }

        inherits(InfoReceiver, EventEmitter); // TODO this is currently ignoring the list of available transports and the whitelist

        InfoReceiver._getReceiver = function (baseUrl, url, urlInfo) {
          // determine method of CORS support (if needed)
          if (urlInfo.sameOrigin) {
            return new InfoAjax(url, XHRLocal);
          }

          if (XHRCors.enabled) {
            return new InfoAjax(url, XHRCors);
          }

          if (XDR.enabled && urlInfo.sameScheme) {
            return new InfoAjax(url, XDR);
          }

          if (InfoIframe.enabled()) {
            return new InfoIframe(baseUrl, url);
          }

          return new InfoAjax(url, XHRFake);
        };

        InfoReceiver.prototype.doXhr = function (baseUrl, urlInfo) {
          var self = this,
              url = urlUtils.addPath(baseUrl, '/info');
          debug('doXhr', url);
          this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);
          this.timeoutRef = setTimeout(function () {
            debug('timeout');

            self._cleanup(false);

            self.emit('finish');
          }, InfoReceiver.timeout);
          this.xo.once('finish', function (info, rtt) {
            debug('finish', info, rtt);

            self._cleanup(true);

            self.emit('finish', info, rtt);
          });
        };

        InfoReceiver.prototype._cleanup = function (wasClean) {
          debug('_cleanup');
          clearTimeout(this.timeoutRef);
          this.timeoutRef = null;

          if (!wasClean && this.xo) {
            this.xo.close();
          }

          this.xo = null;
        };

        InfoReceiver.prototype.close = function () {
          debug('close');
          this.removeAllListeners();

          this._cleanup(false);
        };

        InfoReceiver.timeout = 8000;
        module.exports = InfoReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "./info-ajax": 9,
      "./info-iframe": 11,
      "./transport/sender/xdr": 34,
      "./transport/sender/xhr-cors": 35,
      "./transport/sender/xhr-fake": 36,
      "./transport/sender/xhr-local": 37,
      "./utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    13: [function (require, module, exports) {
      (function (global) {
        'use strict';

        module.exports = global.location || {
          origin: 'http://localhost:80',
          protocol: 'http:',
          host: 'localhost',
          port: 80,
          href: 'http://localhost/',
          hash: ''
        };
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    14: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        require('./shims');

        var URL = require('url-parse'),
            inherits = require('inherits'),
            JSON3 = require('json3'),
            random = require('./utils/random'),
            escape = require('./utils/escape'),
            urlUtils = require('./utils/url'),
            eventUtils = require('./utils/event'),
            transport = require('./utils/transport'),
            objectUtils = require('./utils/object'),
            browser = require('./utils/browser'),
            log = require('./utils/log'),
            Event = require('./event/event'),
            EventTarget = require('./event/eventtarget'),
            loc = require('./location'),
            CloseEvent = require('./event/close'),
            TransportMessageEvent = require('./event/trans-message'),
            InfoReceiver = require('./info-receiver');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:main');
        }

        var transports; // follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface

        function SockJS(url, protocols, options) {
          if (!(this instanceof SockJS)) {
            return new SockJS(url, protocols, options);
          }

          if (arguments.length < 1) {
            throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
          }

          EventTarget.call(this);
          this.readyState = SockJS.CONNECTING;
          this.extensions = '';
          this.protocol = ''; // non-standard extension

          options = options || {};

          if (options.protocols_whitelist) {
            log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
          }

          this._transportsWhitelist = options.transports;
          this._transportOptions = options.transportOptions || {};
          this._timeout = options.timeout || 0;
          var sessionId = options.sessionId || 8;

          if (typeof sessionId === 'function') {
            this._generateSessionId = sessionId;
          } else if (typeof sessionId === 'number') {
            this._generateSessionId = function () {
              return random.string(sessionId);
            };
          } else {
            throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
          }

          this._server = options.server || random.numberString(1000); // Step 1 of WS spec - parse and validate the url. Issue #8

          var parsedUrl = new URL(url);

          if (!parsedUrl.host || !parsedUrl.protocol) {
            throw new SyntaxError("The URL '" + url + "' is invalid");
          } else if (parsedUrl.hash) {
            throw new SyntaxError('The URL must not contain a fragment');
          } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
            throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
          }

          var secure = parsedUrl.protocol === 'https:'; // Step 2 - don't allow secure origin with an insecure protocol

          if (loc.protocol === 'https:' && !secure) {
            throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
          } // Step 3 - check port access - no need here
          // Step 4 - parse protocols argument


          if (!protocols) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            protocols = [protocols];
          } // Step 5 - check protocols argument


          var sortedProtocols = protocols.sort();
          sortedProtocols.forEach(function (proto, i) {
            if (!proto) {
              throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
            }

            if (i < sortedProtocols.length - 1 && proto === sortedProtocols[i + 1]) {
              throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
            }
          }); // Step 6 - convert origin

          var o = urlUtils.getOrigin(loc.href);
          this._origin = o ? o.toLowerCase() : null; // remove the trailing slash

          parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, '')); // store the sanitized url

          this.url = parsedUrl.href;
          debug('using url', this.url); // Step 7 - start connection in background
          // obtain server info
          // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26

          this._urlInfo = {
            nullOrigin: !browser.hasDomain(),
            sameOrigin: urlUtils.isOriginEqual(this.url, loc.href),
            sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
          };
          this._ir = new InfoReceiver(this.url, this._urlInfo);

          this._ir.once('finish', this._receiveInfo.bind(this));
        }

        inherits(SockJS, EventTarget);

        function userSetCode(code) {
          return code === 1000 || code >= 3000 && code <= 4999;
        }

        SockJS.prototype.close = function (code, reason) {
          // Step 1
          if (code && !userSetCode(code)) {
            throw new Error('InvalidAccessError: Invalid code');
          } // Step 2.4 states the max is 123 bytes, but we are just checking length


          if (reason && reason.length > 123) {
            throw new SyntaxError('reason argument has an invalid length');
          } // Step 3.1


          if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
            return;
          } // TODO look at docs to determine how to set this


          var wasClean = true;

          this._close(code || 1000, reason || 'Normal closure', wasClean);
        };

        SockJS.prototype.send = function (data) {
          // #13 - convert anything non-string to string
          // TODO this currently turns objects into [object Object]
          if (typeof data !== 'string') {
            data = '' + data;
          }

          if (this.readyState === SockJS.CONNECTING) {
            throw new Error('InvalidStateError: The connection has not been established yet');
          }

          if (this.readyState !== SockJS.OPEN) {
            return;
          }

          this._transport.send(escape.quote(data));
        };

        SockJS.version = require('./version');
        SockJS.CONNECTING = 0;
        SockJS.OPEN = 1;
        SockJS.CLOSING = 2;
        SockJS.CLOSED = 3;

        SockJS.prototype._receiveInfo = function (info, rtt) {
          debug('_receiveInfo', rtt);
          this._ir = null;

          if (!info) {
            this._close(1002, 'Cannot connect to server');

            return;
          } // establish a round-trip timeout (RTO) based on the
          // round-trip time (RTT)


          this._rto = this.countRTO(rtt); // allow server to override url used for the actual transport

          this._transUrl = info.base_url ? info.base_url : this.url;
          info = objectUtils.extend(info, this._urlInfo);
          debug('info', info); // determine list of desired and supported transports

          var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
          this._transports = enabledTransports.main;
          debug(this._transports.length + ' enabled transports');

          this._connect();
        };

        SockJS.prototype._connect = function () {
          for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
            debug('attempt', Transport.transportName);

            if (Transport.needBody) {
              if (!global.document.body || typeof global.document.readyState !== 'undefined' && global.document.readyState !== 'complete' && global.document.readyState !== 'interactive') {
                debug('waiting for body');

                this._transports.unshift(Transport);

                eventUtils.attachEvent('load', this._connect.bind(this));
                return;
              }
            } // calculate timeout based on RTO and round trips. Default to 5s


            var timeoutMs = Math.max(this._timeout, this._rto * Transport.roundTrips || 5000);
            this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
            debug('using timeout', timeoutMs);
            var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
            var options = this._transportOptions[Transport.transportName];
            debug('transport url', transportUrl);
            var transportObj = new Transport(transportUrl, this._transUrl, options);
            transportObj.on('message', this._transportMessage.bind(this));
            transportObj.once('close', this._transportClose.bind(this));
            transportObj.transportName = Transport.transportName;
            this._transport = transportObj;
            return;
          }

          this._close(2000, 'All transports failed', false);
        };

        SockJS.prototype._transportTimeout = function () {
          debug('_transportTimeout');

          if (this.readyState === SockJS.CONNECTING) {
            if (this._transport) {
              this._transport.close();
            }

            this._transportClose(2007, 'Transport timed out');
          }
        };

        SockJS.prototype._transportMessage = function (msg) {
          debug('_transportMessage', msg);
          var self = this,
              type = msg.slice(0, 1),
              content = msg.slice(1),
              payload; // first check for messages that don't need a payload

          switch (type) {
            case 'o':
              this._open();

              return;

            case 'h':
              this.dispatchEvent(new Event('heartbeat'));
              debug('heartbeat', this.transport);
              return;
          }

          if (content) {
            try {
              payload = JSON3.parse(content);
            } catch (e) {
              debug('bad json', content);
            }
          }

          if (typeof payload === 'undefined') {
            debug('empty payload', content);
            return;
          }

          switch (type) {
            case 'a':
              if (Array.isArray(payload)) {
                payload.forEach(function (p) {
                  debug('message', self.transport, p);
                  self.dispatchEvent(new TransportMessageEvent(p));
                });
              }

              break;

            case 'm':
              debug('message', this.transport, payload);
              this.dispatchEvent(new TransportMessageEvent(payload));
              break;

            case 'c':
              if (Array.isArray(payload) && payload.length === 2) {
                this._close(payload[0], payload[1], true);
              }

              break;
          }
        };

        SockJS.prototype._transportClose = function (code, reason) {
          debug('_transportClose', this.transport, code, reason);

          if (this._transport) {
            this._transport.removeAllListeners();

            this._transport = null;
            this.transport = null;
          }

          if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
            this._connect();

            return;
          }

          this._close(code, reason);
        };

        SockJS.prototype._open = function () {
          debug('_open', this._transport && this._transport.transportName, this.readyState);

          if (this.readyState === SockJS.CONNECTING) {
            if (this._transportTimeoutId) {
              clearTimeout(this._transportTimeoutId);
              this._transportTimeoutId = null;
            }

            this.readyState = SockJS.OPEN;
            this.transport = this._transport.transportName;
            this.dispatchEvent(new Event('open'));
            debug('connected', this.transport);
          } else {
            // The server might have been restarted, and lost track of our
            // connection.
            this._close(1006, 'Server lost session');
          }
        };

        SockJS.prototype._close = function (code, reason, wasClean) {
          debug('_close', this.transport, code, reason, wasClean, this.readyState);
          var forceFail = false;

          if (this._ir) {
            forceFail = true;

            this._ir.close();

            this._ir = null;
          }

          if (this._transport) {
            this._transport.close();

            this._transport = null;
            this.transport = null;
          }

          if (this.readyState === SockJS.CLOSED) {
            throw new Error('InvalidStateError: SockJS has already been closed');
          }

          this.readyState = SockJS.CLOSING;
          setTimeout(function () {
            this.readyState = SockJS.CLOSED;

            if (forceFail) {
              this.dispatchEvent(new Event('error'));
            }

            var e = new CloseEvent('close');
            e.wasClean = wasClean || false;
            e.code = code || 1000;
            e.reason = reason;
            this.dispatchEvent(e);
            this.onmessage = this.onclose = this.onerror = null;
            debug('disconnected');
          }.bind(this), 0);
        }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
        // and RFC 2988.


        SockJS.prototype.countRTO = function (rtt) {
          // In a local environment, when using IE8/9 and the `jsonp-polling`
          // transport the time needed to establish a connection (the time that pass
          // from the opening of the transport to the call of `_dispatchOpen`) is
          // around 200msec (the lower bound used in the article above) and this
          // causes spurious timeouts. For this reason we calculate a value slightly
          // larger than that used in the article.
          if (rtt > 100) {
            return 4 * rtt; // rto > 400msec
          }

          return 300 + rtt; // 300msec < rto <= 400msec
        };

        module.exports = function (availableTransports) {
          transports = transport(availableTransports);

          require('./iframe-bootstrap')(SockJS, availableTransports);

          return SockJS;
        };
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./event/close": 2,
      "./event/event": 4,
      "./event/eventtarget": 5,
      "./event/trans-message": 6,
      "./iframe-bootstrap": 8,
      "./info-receiver": 12,
      "./location": 13,
      "./shims": 15,
      "./utils/browser": 44,
      "./utils/escape": 45,
      "./utils/event": 46,
      "./utils/log": 48,
      "./utils/object": 49,
      "./utils/random": 50,
      "./utils/transport": 51,
      "./utils/url": 52,
      "./version": 53,
      "debug": 55,
      "inherits": 57,
      "json3": 58,
      "url-parse": 61
    }],
    15: [function (require, module, exports) {
      /* eslint-disable */

      /* jscs: disable */
      'use strict'; // pulled specific shims from https://github.com/es-shims/es5-shim

      var ArrayPrototype = Array.prototype;
      var ObjectPrototype = Object.prototype;
      var FunctionPrototype = Function.prototype;
      var StringPrototype = String.prototype;
      var array_slice = ArrayPrototype.slice;
      var _toString = ObjectPrototype.toString;

      var isFunction = function (val) {
        return ObjectPrototype.toString.call(val) === '[object Function]';
      };

      var isArray = function isArray(obj) {
        return _toString.call(obj) === '[object Array]';
      };

      var isString = function isString(obj) {
        return _toString.call(obj) === '[object String]';
      };

      var supportsDescriptors = Object.defineProperty && function () {
        try {
          Object.defineProperty({}, 'x', {});
          return true;
        } catch (e) {
          /* this is ES3 */
          return false;
        }
      }(); // Define configurable, writable and non-enumerable props
      // if they don't exist.


      var defineProperty;

      if (supportsDescriptors) {
        defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && name in object) {
            return;
          }

          Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
          });
        };
      } else {
        defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && name in object) {
            return;
          }

          object[name] = method;
        };
      }

      var defineProperties = function (object, map, forceAssign) {
        for (var name in map) {
          if (ObjectPrototype.hasOwnProperty.call(map, name)) {
            defineProperty(object, name, map[name], forceAssign);
          }
        }
      };

      var toObject = function (o) {
        if (o == null) {
          // this matches both null and undefined
          throw new TypeError("can't convert " + o + ' to object');
        }

        return Object(o);
      }; //
      // Util
      // ======
      //
      // ES5 9.4
      // http://es5.github.com/#x9.4
      // http://jsperf.com/to-integer


      function toInteger(num) {
        var n = +num;

        if (n !== n) {
          // isNaN
          n = 0;
        } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {
          n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }

        return n;
      }

      function ToUint32(x) {
        return x >>> 0;
      } //
      // Function
      // ========
      //
      // ES-5 15.3.4.5
      // http://es5.github.com/#x15.3.4.5


      function Empty() {}

      defineProperties(FunctionPrototype, {
        bind: function bind(that) {
          // .length is 1
          // 1. Let Target be the this value.
          var target = this; // 2. If IsCallable(Target) is false, throw a TypeError exception.

          if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
          } // 3. Let A be a new (possibly empty) internal list of all of the
          //   argument values provided after thisArg (arg1, arg2 etc), in order.
          // XXX slicedArgs will stand in for "A" if used


          var args = array_slice.call(arguments, 1); // for normal call
          // 4. Let F be a new native ECMAScript object.
          // 11. Set the [[Prototype]] internal property of F to the standard
          //   built-in Function prototype object as specified in 15.3.3.1.
          // 12. Set the [[Call]] internal property of F as described in
          //   15.3.4.5.1.
          // 13. Set the [[Construct]] internal property of F as described in
          //   15.3.4.5.2.
          // 14. Set the [[HasInstance]] internal property of F as described in
          //   15.3.4.5.3.

          var binder = function () {
            if (this instanceof bound) {
              // 15.3.4.5.2 [[Construct]]
              // When the [[Construct]] internal method of a function object,
              // F that was created using the bind function is called with a
              // list of arguments ExtraArgs, the following steps are taken:
              // 1. Let target be the value of F's [[TargetFunction]]
              //   internal property.
              // 2. If target has no [[Construct]] internal method, a
              //   TypeError exception is thrown.
              // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
              //   property.
              // 4. Let args be a new list containing the same values as the
              //   list boundArgs in the same order followed by the same
              //   values as the list ExtraArgs in the same order.
              // 5. Return the result of calling the [[Construct]] internal
              //   method of target providing args as the arguments.
              var result = target.apply(this, args.concat(array_slice.call(arguments)));

              if (Object(result) === result) {
                return result;
              }

              return this;
            } else {
              // 15.3.4.5.1 [[Call]]
              // When the [[Call]] internal method of a function object, F,
              // which was created using the bind function is called with a
              // this value and a list of arguments ExtraArgs, the following
              // steps are taken:
              // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
              //   property.
              // 2. Let boundThis be the value of F's [[BoundThis]] internal
              //   property.
              // 3. Let target be the value of F's [[TargetFunction]] internal
              //   property.
              // 4. Let args be a new list containing the same values as the
              //   list boundArgs in the same order followed by the same
              //   values as the list ExtraArgs in the same order.
              // 5. Return the result of calling the [[Call]] internal method
              //   of target providing boundThis as the this value and
              //   providing args as the arguments.
              // equiv: target.call(this, ...boundArgs, ...args)
              return target.apply(that, args.concat(array_slice.call(arguments)));
            }
          }; // 15. If the [[Class]] internal property of Target is "Function", then
          //     a. Let L be the length property of Target minus the length of A.
          //     b. Set the length own property of F to either 0 or L, whichever is
          //       larger.
          // 16. Else set the length own property of F to 0.


          var boundLength = Math.max(0, target.length - args.length); // 17. Set the attributes of the length own property of F to the values
          //   specified in 15.3.5.1.

          var boundArgs = [];

          for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
          } // XXX Build a dynamic function with desired amount of arguments is the only
          // way to set the length property of a function.
          // In environments where Content Security Policies enabled (Chrome extensions,
          // for ex.) all use of eval or Function costructor throws an exception.
          // However in all of these environments Function.prototype.bind exists
          // and so this code will never be executed.


          var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

          if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty(); // Clean up dangling references.

            Empty.prototype = null;
          } // TODO
          // 18. Set the [[Extensible]] internal property of F to true.
          // TODO
          // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
          // 20. Call the [[DefineOwnProperty]] internal method of F with
          //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
          //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
          //   false.
          // 21. Call the [[DefineOwnProperty]] internal method of F with
          //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
          //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
          //   and false.
          // TODO
          // NOTE Function objects created using Function.prototype.bind do not
          // have a prototype property or the [[Code]], [[FormalParameters]], and
          // [[Scope]] internal properties.
          // XXX can't delete prototype in pure-js.
          // 22. Return F.


          return bound;
        }
      }); //
      // Array
      // =====
      //
      // ES5 15.4.3.2
      // http://es5.github.com/#x15.4.3.2
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray

      defineProperties(Array, {
        isArray: isArray
      });
      var boxedString = Object('a');
      var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

      var properlyBoxesContext = function properlyBoxed(method) {
        // Check node 0.6.21 bug where third parameter is not boxed
        var properlyBoxesNonStrict = true;
        var properlyBoxesStrict = true;

        if (method) {
          method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') {
              properlyBoxesNonStrict = false;
            }
          });
          method.call([1], function () {
            'use strict';

            properlyBoxesStrict = typeof this === 'string';
          }, 'x');
        }

        return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
      };

      defineProperties(ArrayPrototype, {
        forEach: function forEach(fun
        /*, thisp*/
        ) {
          var object = toObject(this),
              self = splitString && isString(this) ? this.split('') : object,
              thisp = arguments[1],
              i = -1,
              length = self.length >>> 0; // If no callback function or if callback is not a callable function

          if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
          }

          while (++i < length) {
            if (i in self) {
              // Invoke the callback function with call, passing arguments:
              // context, property value, property key, thisArg object
              // context
              fun.call(thisp, self[i], i, object);
            }
          }
        }
      }, !properlyBoxesContext(ArrayPrototype.forEach)); // ES5 15.4.4.14
      // http://es5.github.com/#x15.4.4.14
      // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf

      var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
      defineProperties(ArrayPrototype, {
        indexOf: function indexOf(sought
        /*, fromIndex */
        ) {
          var self = splitString && isString(this) ? this.split('') : toObject(this),
              length = self.length >>> 0;

          if (!length) {
            return -1;
          }

          var i = 0;

          if (arguments.length > 1) {
            i = toInteger(arguments[1]);
          } // handle negative indices


          i = i >= 0 ? i : Math.max(0, length + i);

          for (; i < length; i++) {
            if (i in self && self[i] === sought) {
              return i;
            }
          }

          return -1;
        }
      }, hasFirefox2IndexOfBug); //
      // String
      // ======
      //
      // ES5 15.5.4.14
      // http://es5.github.com/#x15.5.4.14
      // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
      // Many browsers do not split properly with regular expressions or they
      // do not perform the split correctly under obscure conditions.
      // See http://blog.stevenlevithan.com/archives/cross-browser-split
      // I've tested in many browsers and this seems to cover the deviant ones:
      //    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
      //    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
      //    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
      //       [undefined, "t", undefined, "e", ...]
      //    ''.split(/.?/) should be [], not [""]
      //    '.'.split(/()()/) should be ["."], not ["", "", "."]

      var string_split = StringPrototype.split;

      if ('ab'.split(/(?:ab)*/).length !== 2 || '.'.split(/(.?)(.?)/).length !== 4 || 'tesst'.split(/(s)*/)[1] === 't' || 'test'.split(/(?:)/, -1).length !== 4 || ''.split(/.?/).length || '.'.split(/()()/).length > 1) {
        (function () {
          var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

          StringPrototype.split = function (separator, limit) {
            var string = this;

            if (separator === void 0 && limit === 0) {
              return [];
            } // If `separator` is not a regex, use native split


            if (_toString.call(separator) !== '[object RegExp]') {
              return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.extended ? 'x' : '') + ( // Proposed for ES6
            separator.sticky ? 'y' : ''),
                // Firefox 3+
            lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
            separator2,
                match,
                lastIndex,
                lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert

            if (!compliantExecNpcg) {
              // Doesn't need flags gy, but they don't hurt
              separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */


            limit = limit === void 0 ? -1 >>> 0 : // Math.pow(2, 32) - 1
            ToUint32(limit);

            while (match = separator.exec(string)) {
              // `separator.lastIndex` is not reliable cross-browser
              lastIndex = match.index + match[0].length;

              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index)); // Fix browsers whose `exec` methods don't consistently return `undefined` for
                // nonparticipating capturing groups

                if (!compliantExecNpcg && match.length > 1) {
                  match[0].replace(separator2, function () {
                    for (var i = 1; i < arguments.length - 2; i++) {
                      if (arguments[i] === void 0) {
                        match[i] = void 0;
                      }
                    }
                  });
                }

                if (match.length > 1 && match.index < string.length) {
                  ArrayPrototype.push.apply(output, match.slice(1));
                }

                lastLength = match[0].length;
                lastLastIndex = lastIndex;

                if (output.length >= limit) {
                  break;
                }
              }

              if (separator.lastIndex === match.index) {
                separator.lastIndex++; // Avoid an infinite loop
              }
            }

            if (lastLastIndex === string.length) {
              if (lastLength || !separator.test('')) {
                output.push('');
              }
            } else {
              output.push(string.slice(lastLastIndex));
            }

            return output.length > limit ? output.slice(0, limit) : output;
          };
        })(); // [bugfix, chrome]
        // If separator is undefined, then the result array contains just one String,
        // which is the this value (converted to a String). If limit is not undefined,
        // then the output array is truncated so that it contains no more than limit
        // elements.
        // "0".split(undefined, 0) -> []

      } else if ('0'.split(void 0, 0).length) {
        StringPrototype.split = function split(separator, limit) {
          if (separator === void 0 && limit === 0) {
            return [];
          }

          return string_split.call(this, separator, limit);
        };
      } // ECMA-262, 3rd B.2.3
      // Not an ECMAScript standard, although ECMAScript 3rd Edition has a
      // non-normative section suggesting uniform semantics and it should be
      // normalized across all browsers
      // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE


      var string_substr = StringPrototype.substr;
      var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
      defineProperties(StringPrototype, {
        substr: function substr(start, length) {
          return string_substr.call(this, start < 0 ? (start = this.length + start) < 0 ? 0 : start : start, length);
        }
      }, hasNegativeSubstrBug);
    }, {}],
    16: [function (require, module, exports) {
      'use strict';

      module.exports = [// streaming transports
      require('./transport/websocket'), require('./transport/xhr-streaming'), require('./transport/xdr-streaming'), require('./transport/eventsource'), require('./transport/lib/iframe-wrap')(require('./transport/eventsource')) // polling transports
      , require('./transport/htmlfile'), require('./transport/lib/iframe-wrap')(require('./transport/htmlfile')), require('./transport/xhr-polling'), require('./transport/xdr-polling'), require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling')), require('./transport/jsonp-polling')];
    }, {
      "./transport/eventsource": 20,
      "./transport/htmlfile": 21,
      "./transport/jsonp-polling": 23,
      "./transport/lib/iframe-wrap": 26,
      "./transport/websocket": 38,
      "./transport/xdr-polling": 39,
      "./transport/xdr-streaming": 40,
      "./transport/xhr-polling": 41,
      "./transport/xhr-streaming": 42
    }],
    17: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            utils = require('../../utils/event'),
            urlUtils = require('../../utils/url'),
            XHR = global.XMLHttpRequest;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:browser:xhr');
        }

        function AbstractXHRObject(method, url, payload, opts) {
          debug(method, url);
          var self = this;
          EventEmitter.call(this);
          setTimeout(function () {
            self._start(method, url, payload, opts);
          }, 0);
        }

        inherits(AbstractXHRObject, EventEmitter);

        AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
          var self = this;

          try {
            this.xhr = new XHR();
          } catch (x) {// intentionally empty
          }

          if (!this.xhr) {
            debug('no xhr');
            this.emit('finish', 0, 'no xhr support');

            this._cleanup();

            return;
          } // several browsers cache POSTs


          url = urlUtils.addQuery(url, 't=' + +new Date()); // Explorer tends to keep connection open, even after the
          // tab gets closed: http://bugs.jquery.com/ticket/5280

          this.unloadRef = utils.unloadAdd(function () {
            debug('unload cleanup');

            self._cleanup(true);
          });

          try {
            this.xhr.open(method, url, true);

            if (this.timeout && 'timeout' in this.xhr) {
              this.xhr.timeout = this.timeout;

              this.xhr.ontimeout = function () {
                debug('xhr timeout');
                self.emit('finish', 0, '');

                self._cleanup(false);
              };
            }
          } catch (e) {
            debug('exception', e); // IE raises an exception on wrong port.

            this.emit('finish', 0, '');

            this._cleanup(false);

            return;
          }

          if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
            debug('withCredentials'); // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
            // "This never affects same-site requests."

            this.xhr.withCredentials = true;
          }

          if (opts && opts.headers) {
            for (var key in opts.headers) {
              this.xhr.setRequestHeader(key, opts.headers[key]);
            }
          }

          this.xhr.onreadystatechange = function () {
            if (self.xhr) {
              var x = self.xhr;
              var text, status;
              debug('readyState', x.readyState);

              switch (x.readyState) {
                case 3:
                  // IE doesn't like peeking into responseText or status
                  // on Microsoft.XMLHTTP and readystate=3
                  try {
                    status = x.status;
                    text = x.responseText;
                  } catch (e) {// intentionally empty
                  }

                  debug('status', status); // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                  if (status === 1223) {
                    status = 204;
                  } // IE does return readystate == 3 for 404 answers.


                  if (status === 200 && text && text.length > 0) {
                    debug('chunk');
                    self.emit('chunk', status, text);
                  }

                  break;

                case 4:
                  status = x.status;
                  debug('status', status); // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                  if (status === 1223) {
                    status = 204;
                  } // IE returns this for a bad port
                  // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx


                  if (status === 12005 || status === 12029) {
                    status = 0;
                  }

                  debug('finish', status, x.responseText);
                  self.emit('finish', status, x.responseText);

                  self._cleanup(false);

                  break;
              }
            }
          };

          try {
            self.xhr.send(payload);
          } catch (e) {
            self.emit('finish', 0, '');

            self._cleanup(false);
          }
        };

        AbstractXHRObject.prototype._cleanup = function (abort) {
          debug('cleanup');

          if (!this.xhr) {
            return;
          }

          this.removeAllListeners();
          utils.unloadDel(this.unloadRef); // IE needs this field to be a function

          this.xhr.onreadystatechange = function () {};

          if (this.xhr.ontimeout) {
            this.xhr.ontimeout = null;
          }

          if (abort) {
            try {
              this.xhr.abort();
            } catch (x) {// intentionally empty
            }
          }

          this.unloadRef = this.xhr = null;
        };

        AbstractXHRObject.prototype.close = function () {
          debug('close');

          this._cleanup(true);
        };

        AbstractXHRObject.enabled = !!XHR; // override XMLHttpRequest for IE6/7
        // obfuscate to avoid firewalls

        var axo = ['Active'].concat('Object').join('X');

        if (!AbstractXHRObject.enabled && axo in global) {
          debug('overriding xmlhttprequest');

          XHR = function () {
            try {
              return new global[axo]('Microsoft.XMLHTTP');
            } catch (e) {
              return null;
            }
          };

          AbstractXHRObject.enabled = !!new XHR();
        }

        var cors = false;

        try {
          cors = 'withCredentials' in new XHR();
        } catch (ignored) {// intentionally empty
        }

        AbstractXHRObject.supportsCORS = cors;
        module.exports = AbstractXHRObject;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/event": 46,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    18: [function (require, module, exports) {
      (function (global) {
        module.exports = global.EventSource;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    19: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var Driver = global.WebSocket || global.MozWebSocket;

        if (Driver) {
          module.exports = function WebSocketBrowserDriver(url) {
            return new Driver(url);
          };
        } else {
          module.exports = undefined;
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    20: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          EventSourceReceiver = require('./receiver/eventsource'),
          XHRCorsObject = require('./sender/xhr-cors'),
          EventSourceDriver = require('eventsource');

      function EventSourceTransport(transUrl) {
        if (!EventSourceTransport.enabled()) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
      }

      inherits(EventSourceTransport, AjaxBasedTransport);

      EventSourceTransport.enabled = function () {
        return !!EventSourceDriver;
      };

      EventSourceTransport.transportName = 'eventsource';
      EventSourceTransport.roundTrips = 2;
      module.exports = EventSourceTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/eventsource": 29,
      "./sender/xhr-cors": 35,
      "eventsource": 18,
      "inherits": 57
    }],
    21: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          HtmlfileReceiver = require('./receiver/htmlfile'),
          XHRLocalObject = require('./sender/xhr-local'),
          AjaxBasedTransport = require('./lib/ajax-based');

      function HtmlFileTransport(transUrl) {
        if (!HtmlfileReceiver.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
      }

      inherits(HtmlFileTransport, AjaxBasedTransport);

      HtmlFileTransport.enabled = function (info) {
        return HtmlfileReceiver.enabled && info.sameOrigin;
      };

      HtmlFileTransport.transportName = 'htmlfile';
      HtmlFileTransport.roundTrips = 2;
      module.exports = HtmlFileTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/htmlfile": 30,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    22: [function (require, module, exports) {
      (function (process) {
        'use strict'; // Few cool transports do work only for same-origin. In order to make
        // them work cross-domain we shall use iframe, served from the
        // remote domain. New browsers have capabilities to communicate with
        // cross domain iframe using postMessage(). In IE it was implemented
        // from IE 8+, but of course, IE got some details wrong:
        //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
        //    http://stevesouders.com/misc/test-postmessage.php

        var inherits = require('inherits'),
            JSON3 = require('json3'),
            EventEmitter = require('events').EventEmitter,
            version = require('../version'),
            urlUtils = require('../utils/url'),
            iframeUtils = require('../utils/iframe'),
            eventUtils = require('../utils/event'),
            random = require('../utils/random');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:transport:iframe');
        }

        function IframeTransport(transport, transUrl, baseUrl) {
          if (!IframeTransport.enabled()) {
            throw new Error('Transport created when disabled');
          }

          EventEmitter.call(this);
          var self = this;
          this.origin = urlUtils.getOrigin(baseUrl);
          this.baseUrl = baseUrl;
          this.transUrl = transUrl;
          this.transport = transport;
          this.windowId = random.string(8);
          var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
          debug(transport, transUrl, iframeUrl);
          this.iframeObj = iframeUtils.createIframe(iframeUrl, function (r) {
            debug('err callback');
            self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
            self.close();
          });
          this.onmessageCallback = this._message.bind(this);
          eventUtils.attachEvent('message', this.onmessageCallback);
        }

        inherits(IframeTransport, EventEmitter);

        IframeTransport.prototype.close = function () {
          debug('close');
          this.removeAllListeners();

          if (this.iframeObj) {
            eventUtils.detachEvent('message', this.onmessageCallback);

            try {
              // When the iframe is not loaded, IE raises an exception
              // on 'contentWindow'.
              this.postMessage('c');
            } catch (x) {// intentionally empty
            }

            this.iframeObj.cleanup();
            this.iframeObj = null;
            this.onmessageCallback = this.iframeObj = null;
          }
        };

        IframeTransport.prototype._message = function (e) {
          debug('message', e.data);

          if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
            debug('not same origin', e.origin, this.origin);
            return;
          }

          var iframeMessage;

          try {
            iframeMessage = JSON3.parse(e.data);
          } catch (ignored) {
            debug('bad json', e.data);
            return;
          }

          if (iframeMessage.windowId !== this.windowId) {
            debug('mismatched window id', iframeMessage.windowId, this.windowId);
            return;
          }

          switch (iframeMessage.type) {
            case 's':
              this.iframeObj.loaded(); // window global dependency

              this.postMessage('s', JSON3.stringify([version, this.transport, this.transUrl, this.baseUrl]));
              break;

            case 't':
              this.emit('message', iframeMessage.data);
              break;

            case 'c':
              var cdata;

              try {
                cdata = JSON3.parse(iframeMessage.data);
              } catch (ignored) {
                debug('bad json', iframeMessage.data);
                return;
              }

              this.emit('close', cdata[0], cdata[1]);
              this.close();
              break;
          }
        };

        IframeTransport.prototype.postMessage = function (type, data) {
          debug('postMessage', type, data);
          this.iframeObj.post(JSON3.stringify({
            windowId: this.windowId,
            type: type,
            data: data || ''
          }), this.origin);
        };

        IframeTransport.prototype.send = function (message) {
          debug('send', message);
          this.postMessage('m', message);
        };

        IframeTransport.enabled = function () {
          return iframeUtils.iframeEnabled;
        };

        IframeTransport.transportName = 'iframe';
        IframeTransport.roundTrips = 2;
        module.exports = IframeTransport;
      }).call(this, {
        env: {}
      });
    }, {
      "../utils/event": 46,
      "../utils/iframe": 47,
      "../utils/random": 50,
      "../utils/url": 52,
      "../version": 53,
      "debug": 55,
      "events": 3,
      "inherits": 57,
      "json3": 58
    }],
    23: [function (require, module, exports) {
      (function (global) {
        'use strict'; // The simplest and most robust transport, using the well-know cross
        // domain hack - JSONP. This transport is quite inefficient - one
        // message could use up to one http request. But at least it works almost
        // everywhere.
        // Known limitations:
        //   o you will get a spinning cursor
        //   o for Konqueror a dumb timer is needed to detect errors

        var inherits = require('inherits'),
            SenderReceiver = require('./lib/sender-receiver'),
            JsonpReceiver = require('./receiver/jsonp'),
            jsonpSender = require('./sender/jsonp');

        function JsonPTransport(transUrl) {
          if (!JsonPTransport.enabled()) {
            throw new Error('Transport created when disabled');
          }

          SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
        }

        inherits(JsonPTransport, SenderReceiver);

        JsonPTransport.enabled = function () {
          return !!global.document;
        };

        JsonPTransport.transportName = 'jsonp-polling';
        JsonPTransport.roundTrips = 1;
        JsonPTransport.needBody = true;
        module.exports = JsonPTransport;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./lib/sender-receiver": 28,
      "./receiver/jsonp": 31,
      "./sender/jsonp": 33,
      "inherits": 57
    }],
    24: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            urlUtils = require('../../utils/url'),
            SenderReceiver = require('./sender-receiver');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:ajax-based');
        }

        function createAjaxSender(AjaxObject) {
          return function (url, payload, callback) {
            debug('create ajax sender', url, payload);
            var opt = {};

            if (typeof payload === 'string') {
              opt.headers = {
                'Content-type': 'text/plain'
              };
            }

            var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
            var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
            xo.once('finish', function (status) {
              debug('finish', status);
              xo = null;

              if (status !== 200 && status !== 204) {
                return callback(new Error('http status ' + status));
              }

              callback();
            });
            return function () {
              debug('abort');
              xo.close();
              xo = null;
              var err = new Error('Aborted');
              err.code = 1000;
              callback(err);
            };
          };
        }

        function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
          SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
        }

        inherits(AjaxBasedTransport, SenderReceiver);
        module.exports = AjaxBasedTransport;
      }).call(this, {
        env: {}
      });
    }, {
      "../../utils/url": 52,
      "./sender-receiver": 28,
      "debug": 55,
      "inherits": 57
    }],
    25: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:buffered-sender');
        }

        function BufferedSender(url, sender) {
          debug(url);
          EventEmitter.call(this);
          this.sendBuffer = [];
          this.sender = sender;
          this.url = url;
        }

        inherits(BufferedSender, EventEmitter);

        BufferedSender.prototype.send = function (message) {
          debug('send', message);
          this.sendBuffer.push(message);

          if (!this.sendStop) {
            this.sendSchedule();
          }
        }; // For polling transports in a situation when in the message callback,
        // new message is being send. If the sending connection was started
        // before receiving one, it is possible to saturate the network and
        // timeout due to the lack of receiving socket. To avoid that we delay
        // sending messages by some small time, in order to let receiving
        // connection be started beforehand. This is only a halfmeasure and
        // does not fix the big problem, but it does make the tests go more
        // stable on slow networks.


        BufferedSender.prototype.sendScheduleWait = function () {
          debug('sendScheduleWait');
          var self = this;
          var tref;

          this.sendStop = function () {
            debug('sendStop');
            self.sendStop = null;
            clearTimeout(tref);
          };

          tref = setTimeout(function () {
            debug('timeout');
            self.sendStop = null;
            self.sendSchedule();
          }, 25);
        };

        BufferedSender.prototype.sendSchedule = function () {
          debug('sendSchedule', this.sendBuffer.length);
          var self = this;

          if (this.sendBuffer.length > 0) {
            var payload = '[' + this.sendBuffer.join(',') + ']';
            this.sendStop = this.sender(this.url, payload, function (err) {
              self.sendStop = null;

              if (err) {
                debug('error', err);
                self.emit('close', err.code || 1006, 'Sending error: ' + err);
                self.close();
              } else {
                self.sendScheduleWait();
              }
            });
            this.sendBuffer = [];
          }
        };

        BufferedSender.prototype._cleanup = function () {
          debug('_cleanup');
          this.removeAllListeners();
        };

        BufferedSender.prototype.close = function () {
          debug('close');

          this._cleanup();

          if (this.sendStop) {
            this.sendStop();
            this.sendStop = null;
          }
        };

        module.exports = BufferedSender;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    26: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var inherits = require('inherits'),
            IframeTransport = require('../iframe'),
            objectUtils = require('../../utils/object');

        module.exports = function (transport) {
          function IframeWrapTransport(transUrl, baseUrl) {
            IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
          }

          inherits(IframeWrapTransport, IframeTransport);

          IframeWrapTransport.enabled = function (url, info) {
            if (!global.document) {
              return false;
            }

            var iframeInfo = objectUtils.extend({}, info);
            iframeInfo.sameOrigin = true;
            return transport.enabled(iframeInfo) && IframeTransport.enabled();
          };

          IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
          IframeWrapTransport.needBody = true;
          IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

          IframeWrapTransport.facadeTransport = transport;
          return IframeWrapTransport;
        };
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/object": 49,
      "../iframe": 22,
      "inherits": 57
    }],
    27: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:polling');
        }

        function Polling(Receiver, receiveUrl, AjaxObject) {
          debug(receiveUrl);
          EventEmitter.call(this);
          this.Receiver = Receiver;
          this.receiveUrl = receiveUrl;
          this.AjaxObject = AjaxObject;

          this._scheduleReceiver();
        }

        inherits(Polling, EventEmitter);

        Polling.prototype._scheduleReceiver = function () {
          debug('_scheduleReceiver');
          var self = this;
          var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);
          poll.on('message', function (msg) {
            debug('message', msg);
            self.emit('message', msg);
          });
          poll.once('close', function (code, reason) {
            debug('close', code, reason, self.pollIsClosing);
            self.poll = poll = null;

            if (!self.pollIsClosing) {
              if (reason === 'network') {
                self._scheduleReceiver();
              } else {
                self.emit('close', code || 1006, reason);
                self.removeAllListeners();
              }
            }
          });
        };

        Polling.prototype.abort = function () {
          debug('abort');
          this.removeAllListeners();
          this.pollIsClosing = true;

          if (this.poll) {
            this.poll.abort();
          }
        };

        module.exports = Polling;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    28: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            urlUtils = require('../../utils/url'),
            BufferedSender = require('./buffered-sender'),
            Polling = require('./polling');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:sender-receiver');
        }

        function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
          var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
          debug(pollUrl);
          var self = this;
          BufferedSender.call(this, transUrl, senderFunc);
          this.poll = new Polling(Receiver, pollUrl, AjaxObject);
          this.poll.on('message', function (msg) {
            debug('poll message', msg);
            self.emit('message', msg);
          });
          this.poll.once('close', function (code, reason) {
            debug('poll close', code, reason);
            self.poll = null;
            self.emit('close', code, reason);
            self.close();
          });
        }

        inherits(SenderReceiver, BufferedSender);

        SenderReceiver.prototype.close = function () {
          BufferedSender.prototype.close.call(this);
          debug('close');
          this.removeAllListeners();

          if (this.poll) {
            this.poll.abort();
            this.poll = null;
          }
        };

        module.exports = SenderReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "../../utils/url": 52,
      "./buffered-sender": 25,
      "./polling": 27,
      "debug": 55,
      "inherits": 57
    }],
    29: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter,
            EventSourceDriver = require('eventsource');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:eventsource');
        }

        function EventSourceReceiver(url) {
          debug(url);
          EventEmitter.call(this);
          var self = this;
          var es = this.es = new EventSourceDriver(url);

          es.onmessage = function (e) {
            debug('message', e.data);
            self.emit('message', decodeURI(e.data));
          };

          es.onerror = function (e) {
            debug('error', es.readyState, e); // ES on reconnection has readyState = 0 or 1.
            // on network error it's CLOSED = 2

            var reason = es.readyState !== 2 ? 'network' : 'permanent';

            self._cleanup();

            self._close(reason);
          };
        }

        inherits(EventSourceReceiver, EventEmitter);

        EventSourceReceiver.prototype.abort = function () {
          debug('abort');

          this._cleanup();

          this._close('user');
        };

        EventSourceReceiver.prototype._cleanup = function () {
          debug('cleanup');
          var es = this.es;

          if (es) {
            es.onmessage = es.onerror = null;
            es.close();
            this.es = null;
          }
        };

        EventSourceReceiver.prototype._close = function (reason) {
          debug('close', reason);
          var self = this; // Safari and chrome < 15 crash if we close window before
          // waiting for ES cleanup. See:
          // https://code.google.com/p/chromium/issues/detail?id=89155

          setTimeout(function () {
            self.emit('close', null, reason);
            self.removeAllListeners();
          }, 200);
        };

        module.exports = EventSourceReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "eventsource": 18,
      "inherits": 57
    }],
    30: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var inherits = require('inherits'),
            iframeUtils = require('../../utils/iframe'),
            urlUtils = require('../../utils/url'),
            EventEmitter = require('events').EventEmitter,
            random = require('../../utils/random');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:htmlfile');
        }

        function HtmlfileReceiver(url) {
          debug(url);
          EventEmitter.call(this);
          var self = this;
          iframeUtils.polluteGlobalNamespace();
          this.id = 'a' + random.string(6);
          url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));
          debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
          var constructFunc = HtmlfileReceiver.htmlfileEnabled ? iframeUtils.createHtmlfile : iframeUtils.createIframe;
          global[iframeUtils.WPrefix][this.id] = {
            start: function () {
              debug('start');
              self.iframeObj.loaded();
            },
            message: function (data) {
              debug('message', data);
              self.emit('message', data);
            },
            stop: function () {
              debug('stop');

              self._cleanup();

              self._close('network');
            }
          };
          this.iframeObj = constructFunc(url, function () {
            debug('callback');

            self._cleanup();

            self._close('permanent');
          });
        }

        inherits(HtmlfileReceiver, EventEmitter);

        HtmlfileReceiver.prototype.abort = function () {
          debug('abort');

          this._cleanup();

          this._close('user');
        };

        HtmlfileReceiver.prototype._cleanup = function () {
          debug('_cleanup');

          if (this.iframeObj) {
            this.iframeObj.cleanup();
            this.iframeObj = null;
          }

          delete global[iframeUtils.WPrefix][this.id];
        };

        HtmlfileReceiver.prototype._close = function (reason) {
          debug('_close', reason);
          this.emit('close', null, reason);
          this.removeAllListeners();
        };

        HtmlfileReceiver.htmlfileEnabled = false; // obfuscate to avoid firewalls

        var axo = ['Active'].concat('Object').join('X');

        if (axo in global) {
          try {
            HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
          } catch (x) {// intentionally empty
          }
        }

        HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;
        module.exports = HtmlfileReceiver;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/iframe": 47,
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    31: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var utils = require('../../utils/iframe'),
            random = require('../../utils/random'),
            browser = require('../../utils/browser'),
            urlUtils = require('../../utils/url'),
            inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:jsonp');
        }

        function JsonpReceiver(url) {
          debug(url);
          var self = this;
          EventEmitter.call(this);
          utils.polluteGlobalNamespace();
          this.id = 'a' + random.string(6);
          var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));
          global[utils.WPrefix][this.id] = this._callback.bind(this);

          this._createScript(urlWithId); // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.


          this.timeoutId = setTimeout(function () {
            debug('timeout');

            self._abort(new Error('JSONP script loaded abnormally (timeout)'));
          }, JsonpReceiver.timeout);
        }

        inherits(JsonpReceiver, EventEmitter);

        JsonpReceiver.prototype.abort = function () {
          debug('abort');

          if (global[utils.WPrefix][this.id]) {
            var err = new Error('JSONP user aborted read');
            err.code = 1000;

            this._abort(err);
          }
        };

        JsonpReceiver.timeout = 35000;
        JsonpReceiver.scriptErrorTimeout = 1000;

        JsonpReceiver.prototype._callback = function (data) {
          debug('_callback', data);

          this._cleanup();

          if (this.aborting) {
            return;
          }

          if (data) {
            debug('message', data);
            this.emit('message', data);
          }

          this.emit('close', null, 'network');
          this.removeAllListeners();
        };

        JsonpReceiver.prototype._abort = function (err) {
          debug('_abort', err);

          this._cleanup();

          this.aborting = true;
          this.emit('close', err.code, err.message);
          this.removeAllListeners();
        };

        JsonpReceiver.prototype._cleanup = function () {
          debug('_cleanup');
          clearTimeout(this.timeoutId);

          if (this.script2) {
            this.script2.parentNode.removeChild(this.script2);
            this.script2 = null;
          }

          if (this.script) {
            var script = this.script; // Unfortunately, you can't really abort script loading of
            // the script.

            script.parentNode.removeChild(script);
            script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
            this.script = null;
          }

          delete global[utils.WPrefix][this.id];
        };

        JsonpReceiver.prototype._scriptError = function () {
          debug('_scriptError');
          var self = this;

          if (this.errorTimer) {
            return;
          }

          this.errorTimer = setTimeout(function () {
            if (!self.loadedOkay) {
              self._abort(new Error('JSONP script loaded abnormally (onerror)'));
            }
          }, JsonpReceiver.scriptErrorTimeout);
        };

        JsonpReceiver.prototype._createScript = function (url) {
          debug('_createScript', url);
          var self = this;
          var script = this.script = global.document.createElement('script');
          var script2; // Opera synchronous load trick.

          script.id = 'a' + random.string(8);
          script.src = url;
          script.type = 'text/javascript';
          script.charset = 'UTF-8';
          script.onerror = this._scriptError.bind(this);

          script.onload = function () {
            debug('onload');

            self._abort(new Error('JSONP script loaded abnormally (onload)'));
          }; // IE9 fires 'error' event after onreadystatechange or before, in random order.
          // Use loadedOkay to determine if actually errored


          script.onreadystatechange = function () {
            debug('onreadystatechange', script.readyState);

            if (/loaded|closed/.test(script.readyState)) {
              if (script && script.htmlFor && script.onclick) {
                self.loadedOkay = true;

                try {
                  // In IE, actually execute the script.
                  script.onclick();
                } catch (x) {// intentionally empty
                }
              }

              if (script) {
                self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
              }
            }
          }; // IE: event/htmlFor/onclick trick.
          // One can't rely on proper order for onreadystatechange. In order to
          // make sure, set a 'htmlFor' and 'event' properties, so that
          // script code will be installed as 'onclick' handler for the
          // script object. Later, onreadystatechange, manually execute this
          // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
          // set. For reference see:
          //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
          // Also, read on that about script ordering:
          //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order


          if (typeof script.async === 'undefined' && global.document.attachEvent) {
            // According to mozilla docs, in recent browsers script.async defaults
            // to 'true', so we may use it to detect a good browser:
            // https://developer.mozilla.org/en/HTML/Element/script
            if (!browser.isOpera()) {
              // Naively assume we're in IE
              try {
                script.htmlFor = script.id;
                script.event = 'onclick';
              } catch (x) {// intentionally empty
              }

              script.async = true;
            } else {
              // Opera, second sync script hack
              script2 = this.script2 = global.document.createElement('script');
              script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
              script.async = script2.async = false;
            }
          }

          if (typeof script.async !== 'undefined') {
            script.async = true;
          }

          var head = global.document.getElementsByTagName('head')[0];
          head.insertBefore(script, head.firstChild);

          if (script2) {
            head.insertBefore(script2, head.firstChild);
          }
        };

        module.exports = JsonpReceiver;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/browser": 44,
      "../../utils/iframe": 47,
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    32: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter;

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:receiver:xhr');
        }

        function XhrReceiver(url, AjaxObject) {
          debug(url);
          EventEmitter.call(this);
          var self = this;
          this.bufferPosition = 0;
          this.xo = new AjaxObject('POST', url, null);
          this.xo.on('chunk', this._chunkHandler.bind(this));
          this.xo.once('finish', function (status, text) {
            debug('finish', status, text);

            self._chunkHandler(status, text);

            self.xo = null;
            var reason = status === 200 ? 'network' : 'permanent';
            debug('close', reason);
            self.emit('close', null, reason);

            self._cleanup();
          });
        }

        inherits(XhrReceiver, EventEmitter);

        XhrReceiver.prototype._chunkHandler = function (status, text) {
          debug('_chunkHandler', status);

          if (status !== 200 || !text) {
            return;
          }

          for (var idx = -1;; this.bufferPosition += idx + 1) {
            var buf = text.slice(this.bufferPosition);
            idx = buf.indexOf('\n');

            if (idx === -1) {
              break;
            }

            var msg = buf.slice(0, idx);

            if (msg) {
              debug('message', msg);
              this.emit('message', msg);
            }
          }
        };

        XhrReceiver.prototype._cleanup = function () {
          debug('_cleanup');
          this.removeAllListeners();
        };

        XhrReceiver.prototype.abort = function () {
          debug('abort');

          if (this.xo) {
            this.xo.close();
            debug('close');
            this.emit('close', null, 'user');
            this.xo = null;
          }

          this._cleanup();
        };

        module.exports = XhrReceiver;
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    33: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var random = require('../../utils/random'),
            urlUtils = require('../../utils/url');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:sender:jsonp');
        }

        var form, area;

        function createIframe(id) {
          debug('createIframe', id);

          try {
            // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
            return global.document.createElement('<iframe name="' + id + '">');
          } catch (x) {
            var iframe = global.document.createElement('iframe');
            iframe.name = id;
            return iframe;
          }
        }

        function createForm() {
          debug('createForm');
          form = global.document.createElement('form');
          form.style.display = 'none';
          form.style.position = 'absolute';
          form.method = 'POST';
          form.enctype = 'application/x-www-form-urlencoded';
          form.acceptCharset = 'UTF-8';
          area = global.document.createElement('textarea');
          area.name = 'd';
          form.appendChild(area);
          global.document.body.appendChild(form);
        }

        module.exports = function (url, payload, callback) {
          debug(url, payload);

          if (!form) {
            createForm();
          }

          var id = 'a' + random.string(8);
          form.target = id;
          form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);
          var iframe = createIframe(id);
          iframe.id = id;
          iframe.style.display = 'none';
          form.appendChild(iframe);

          try {
            area.value = payload;
          } catch (e) {// seriously broken browsers get here
          }

          form.submit();

          var completed = function (err) {
            debug('completed', id, err);

            if (!iframe.onerror) {
              return;
            }

            iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
            // immediately, thus this timeout.

            setTimeout(function () {
              debug('cleaning up', id);
              iframe.parentNode.removeChild(iframe);
              iframe = null;
            }, 500);
            area.value = ''; // It is not possible to detect if the iframe succeeded or
            // failed to submit our form.

            callback(err);
          };

          iframe.onerror = function () {
            debug('onerror', id);
            completed();
          };

          iframe.onload = function () {
            debug('onload', id);
            completed();
          };

          iframe.onreadystatechange = function (e) {
            debug('onreadystatechange', id, iframe.readyState, e);

            if (iframe.readyState === 'complete') {
              completed();
            }
          };

          return function () {
            debug('aborted', id);
            completed(new Error('Aborted'));
          };
        };
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/random": 50,
      "../../utils/url": 52,
      "debug": 55
    }],
    34: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var EventEmitter = require('events').EventEmitter,
            inherits = require('inherits'),
            eventUtils = require('../../utils/event'),
            browser = require('../../utils/browser'),
            urlUtils = require('../../utils/url');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:sender:xdr');
        } // References:
        //   http://ajaxian.com/archives/100-line-ajax-wrapper
        //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx


        function XDRObject(method, url, payload) {
          debug(method, url);
          var self = this;
          EventEmitter.call(this);
          setTimeout(function () {
            self._start(method, url, payload);
          }, 0);
        }

        inherits(XDRObject, EventEmitter);

        XDRObject.prototype._start = function (method, url, payload) {
          debug('_start');
          var self = this;
          var xdr = new global.XDomainRequest(); // IE caches even POSTs

          url = urlUtils.addQuery(url, 't=' + +new Date());

          xdr.onerror = function () {
            debug('onerror');

            self._error();
          };

          xdr.ontimeout = function () {
            debug('ontimeout');

            self._error();
          };

          xdr.onprogress = function () {
            debug('progress', xdr.responseText);
            self.emit('chunk', 200, xdr.responseText);
          };

          xdr.onload = function () {
            debug('load');
            self.emit('finish', 200, xdr.responseText);

            self._cleanup(false);
          };

          this.xdr = xdr;
          this.unloadRef = eventUtils.unloadAdd(function () {
            self._cleanup(true);
          });

          try {
            // Fails with AccessDenied if port number is bogus
            this.xdr.open(method, url);

            if (this.timeout) {
              this.xdr.timeout = this.timeout;
            }

            this.xdr.send(payload);
          } catch (x) {
            this._error();
          }
        };

        XDRObject.prototype._error = function () {
          this.emit('finish', 0, '');

          this._cleanup(false);
        };

        XDRObject.prototype._cleanup = function (abort) {
          debug('cleanup', abort);

          if (!this.xdr) {
            return;
          }

          this.removeAllListeners();
          eventUtils.unloadDel(this.unloadRef);
          this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;

          if (abort) {
            try {
              this.xdr.abort();
            } catch (x) {// intentionally empty
            }
          }

          this.unloadRef = this.xdr = null;
        };

        XDRObject.prototype.close = function () {
          debug('close');

          this._cleanup(true);
        }; // IE 8/9 if the request target uses the same scheme - #79


        XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());
        module.exports = XDRObject;
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../utils/browser": 44,
      "../../utils/event": 46,
      "../../utils/url": 52,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    35: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          XhrDriver = require('../driver/xhr');

      function XHRCorsObject(method, url, payload, opts) {
        XhrDriver.call(this, method, url, payload, opts);
      }

      inherits(XHRCorsObject, XhrDriver);
      XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;
      module.exports = XHRCorsObject;
    }, {
      "../driver/xhr": 17,
      "inherits": 57
    }],
    36: [function (require, module, exports) {
      'use strict';

      var EventEmitter = require('events').EventEmitter,
          inherits = require('inherits');

      function XHRFake()
      /* method, url, payload, opts */
      {
        var self = this;
        EventEmitter.call(this);
        this.to = setTimeout(function () {
          self.emit('finish', 200, '{}');
        }, XHRFake.timeout);
      }

      inherits(XHRFake, EventEmitter);

      XHRFake.prototype.close = function () {
        clearTimeout(this.to);
      };

      XHRFake.timeout = 2000;
      module.exports = XHRFake;
    }, {
      "events": 3,
      "inherits": 57
    }],
    37: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          XhrDriver = require('../driver/xhr');

      function XHRLocalObject(method, url, payload
      /*, opts */
      ) {
        XhrDriver.call(this, method, url, payload, {
          noCredentials: true
        });
      }

      inherits(XHRLocalObject, XhrDriver);
      XHRLocalObject.enabled = XhrDriver.enabled;
      module.exports = XHRLocalObject;
    }, {
      "../driver/xhr": 17,
      "inherits": 57
    }],
    38: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var utils = require('../utils/event'),
            urlUtils = require('../utils/url'),
            inherits = require('inherits'),
            EventEmitter = require('events').EventEmitter,
            WebsocketDriver = require('./driver/websocket');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:websocket');
        }

        function WebSocketTransport(transUrl, ignore, options) {
          if (!WebSocketTransport.enabled()) {
            throw new Error('Transport created when disabled');
          }

          EventEmitter.call(this);
          debug('constructor', transUrl);
          var self = this;
          var url = urlUtils.addPath(transUrl, '/websocket');

          if (url.slice(0, 5) === 'https') {
            url = 'wss' + url.slice(5);
          } else {
            url = 'ws' + url.slice(4);
          }

          this.url = url;
          this.ws = new WebsocketDriver(this.url, [], options);

          this.ws.onmessage = function (e) {
            debug('message event', e.data);
            self.emit('message', e.data);
          }; // Firefox has an interesting bug. If a websocket connection is
          // created after onunload, it stays alive even when user
          // navigates away from the page. In such situation let's lie -
          // let's not open the ws connection at all. See:
          // https://github.com/sockjs/sockjs-client/issues/28
          // https://bugzilla.mozilla.org/show_bug.cgi?id=696085


          this.unloadRef = utils.unloadAdd(function () {
            debug('unload');
            self.ws.close();
          });

          this.ws.onclose = function (e) {
            debug('close event', e.code, e.reason);
            self.emit('close', e.code, e.reason);

            self._cleanup();
          };

          this.ws.onerror = function (e) {
            debug('error event', e);
            self.emit('close', 1006, 'WebSocket connection broken');

            self._cleanup();
          };
        }

        inherits(WebSocketTransport, EventEmitter);

        WebSocketTransport.prototype.send = function (data) {
          var msg = '[' + data + ']';
          debug('send', msg);
          this.ws.send(msg);
        };

        WebSocketTransport.prototype.close = function () {
          debug('close');
          var ws = this.ws;

          this._cleanup();

          if (ws) {
            ws.close();
          }
        };

        WebSocketTransport.prototype._cleanup = function () {
          debug('_cleanup');
          var ws = this.ws;

          if (ws) {
            ws.onmessage = ws.onclose = ws.onerror = null;
          }

          utils.unloadDel(this.unloadRef);
          this.unloadRef = this.ws = null;
          this.removeAllListeners();
        };

        WebSocketTransport.enabled = function () {
          debug('enabled');
          return !!WebsocketDriver;
        };

        WebSocketTransport.transportName = 'websocket'; // In theory, ws should require 1 round trip. But in chrome, this is
        // not very stable over SSL. Most likely a ws connection requires a
        // separate SSL connection, in which case 2 round trips are an
        // absolute minumum.

        WebSocketTransport.roundTrips = 2;
        module.exports = WebSocketTransport;
      }).call(this, {
        env: {}
      });
    }, {
      "../utils/event": 46,
      "../utils/url": 52,
      "./driver/websocket": 19,
      "debug": 55,
      "events": 3,
      "inherits": 57
    }],
    39: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          XdrStreamingTransport = require('./xdr-streaming'),
          XhrReceiver = require('./receiver/xhr'),
          XDRObject = require('./sender/xdr');

      function XdrPollingTransport(transUrl) {
        if (!XDRObject.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
      }

      inherits(XdrPollingTransport, AjaxBasedTransport);
      XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
      XdrPollingTransport.transportName = 'xdr-polling';
      XdrPollingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XdrPollingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xdr": 34,
      "./xdr-streaming": 40,
      "inherits": 57
    }],
    40: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          XhrReceiver = require('./receiver/xhr'),
          XDRObject = require('./sender/xdr'); // According to:
      //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
      //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/


      function XdrStreamingTransport(transUrl) {
        if (!XDRObject.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
      }

      inherits(XdrStreamingTransport, AjaxBasedTransport);

      XdrStreamingTransport.enabled = function (info) {
        if (info.cookie_needed || info.nullOrigin) {
          return false;
        }

        return XDRObject.enabled && info.sameScheme;
      };

      XdrStreamingTransport.transportName = 'xdr-streaming';
      XdrStreamingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XdrStreamingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xdr": 34,
      "inherits": 57
    }],
    41: [function (require, module, exports) {
      'use strict';

      var inherits = require('inherits'),
          AjaxBasedTransport = require('./lib/ajax-based'),
          XhrReceiver = require('./receiver/xhr'),
          XHRCorsObject = require('./sender/xhr-cors'),
          XHRLocalObject = require('./sender/xhr-local');

      function XhrPollingTransport(transUrl) {
        if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
          throw new Error('Transport created when disabled');
        }

        AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
      }

      inherits(XhrPollingTransport, AjaxBasedTransport);

      XhrPollingTransport.enabled = function (info) {
        if (info.nullOrigin) {
          return false;
        }

        if (XHRLocalObject.enabled && info.sameOrigin) {
          return true;
        }

        return XHRCorsObject.enabled;
      };

      XhrPollingTransport.transportName = 'xhr-polling';
      XhrPollingTransport.roundTrips = 2; // preflight, ajax

      module.exports = XhrPollingTransport;
    }, {
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xhr-cors": 35,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    42: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var inherits = require('inherits'),
            AjaxBasedTransport = require('./lib/ajax-based'),
            XhrReceiver = require('./receiver/xhr'),
            XHRCorsObject = require('./sender/xhr-cors'),
            XHRLocalObject = require('./sender/xhr-local'),
            browser = require('../utils/browser');

        function XhrStreamingTransport(transUrl) {
          if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
            throw new Error('Transport created when disabled');
          }

          AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
        }

        inherits(XhrStreamingTransport, AjaxBasedTransport);

        XhrStreamingTransport.enabled = function (info) {
          if (info.nullOrigin) {
            return false;
          } // Opera doesn't support xhr-streaming #60
          // But it might be able to #92


          if (browser.isOpera()) {
            return false;
          }

          return XHRCorsObject.enabled;
        };

        XhrStreamingTransport.transportName = 'xhr-streaming';
        XhrStreamingTransport.roundTrips = 2; // preflight, ajax
        // Safari gets confused when a streaming ajax request is started
        // before onload. This causes the load indicator to spin indefinetely.
        // Only require body when used in a browser

        XhrStreamingTransport.needBody = !!global.document;
        module.exports = XhrStreamingTransport;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../utils/browser": 44,
      "./lib/ajax-based": 24,
      "./receiver/xhr": 32,
      "./sender/xhr-cors": 35,
      "./sender/xhr-local": 37,
      "inherits": 57
    }],
    43: [function (require, module, exports) {
      (function (global) {
        'use strict';

        if (global.crypto && global.crypto.getRandomValues) {
          module.exports.randomBytes = function (length) {
            var bytes = new Uint8Array(length);
            global.crypto.getRandomValues(bytes);
            return bytes;
          };
        } else {
          module.exports.randomBytes = function (length) {
            var bytes = new Array(length);

            for (var i = 0; i < length; i++) {
              bytes[i] = Math.floor(Math.random() * 256);
            }

            return bytes;
          };
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    44: [function (require, module, exports) {
      (function (global) {
        'use strict';

        module.exports = {
          isOpera: function () {
            return global.navigator && /opera/i.test(global.navigator.userAgent);
          },
          isKonqueror: function () {
            return global.navigator && /konqueror/i.test(global.navigator.userAgent);
          } // #187 wrap document.domain in try/catch because of WP8 from file:///
          ,
          hasDomain: function () {
            // non-browser client always has a domain
            if (!global.document) {
              return true;
            }

            try {
              return !!global.document.domain;
            } catch (e) {
              return false;
            }
          }
        };
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    45: [function (require, module, exports) {
      'use strict';

      var JSON3 = require('json3'); // Some extra characters that Chrome gets wrong, and substitutes with
      // something else on the wire.
      // eslint-disable-next-line no-control-regex


      var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
          extraLookup; // This may be quite slow, so let's delay until user actually uses bad
      // characters.

      var unrollLookup = function (escapable) {
        var i;
        var unrolled = {};
        var c = [];

        for (i = 0; i < 65536; i++) {
          c.push(String.fromCharCode(i));
        }

        escapable.lastIndex = 0;
        c.join('').replace(escapable, function (a) {
          unrolled[a] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          return '';
        });
        escapable.lastIndex = 0;
        return unrolled;
      }; // Quote string, also taking care of unicode characters that browsers
      // often break. Especially, take care of unicode surrogates:
      // http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates


      module.exports = {
        quote: function (string) {
          var quoted = JSON3.stringify(string); // In most cases this should be very fast and good enough.

          extraEscapable.lastIndex = 0;

          if (!extraEscapable.test(quoted)) {
            return quoted;
          }

          if (!extraLookup) {
            extraLookup = unrollLookup(extraEscapable);
          }

          return quoted.replace(extraEscapable, function (a) {
            return extraLookup[a];
          });
        }
      };
    }, {
      "json3": 58
    }],
    46: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var random = require('./random');

        var onUnload = {},
            afterUnload = false // detect google chrome packaged apps because they don't allow the 'unload' event
        ,
            isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime;
        module.exports = {
          attachEvent: function (event, listener) {
            if (typeof global.addEventListener !== 'undefined') {
              global.addEventListener(event, listener, false);
            } else if (global.document && global.attachEvent) {
              // IE quirks.
              // According to: http://stevesouders.com/misc/test-postmessage.php
              // the message gets delivered only to 'document', not 'window'.
              global.document.attachEvent('on' + event, listener); // I get 'window' for ie8.

              global.attachEvent('on' + event, listener);
            }
          },
          detachEvent: function (event, listener) {
            if (typeof global.addEventListener !== 'undefined') {
              global.removeEventListener(event, listener, false);
            } else if (global.document && global.detachEvent) {
              global.document.detachEvent('on' + event, listener);
              global.detachEvent('on' + event, listener);
            }
          },
          unloadAdd: function (listener) {
            if (isChromePackagedApp) {
              return null;
            }

            var ref = random.string(8);
            onUnload[ref] = listener;

            if (afterUnload) {
              setTimeout(this.triggerUnloadCallbacks, 0);
            }

            return ref;
          },
          unloadDel: function (ref) {
            if (ref in onUnload) {
              delete onUnload[ref];
            }
          },
          triggerUnloadCallbacks: function () {
            for (var ref in onUnload) {
              onUnload[ref]();
              delete onUnload[ref];
            }
          }
        };

        var unloadTriggered = function () {
          if (afterUnload) {
            return;
          }

          afterUnload = true;
          module.exports.triggerUnloadCallbacks();
        }; // 'unload' alone is not reliable in opera within an iframe, but we
        // can't use `beforeunload` as IE fires it on javascript: links.


        if (!isChromePackagedApp) {
          module.exports.attachEvent('unload', unloadTriggered);
        }
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./random": 50
    }],
    47: [function (require, module, exports) {
      (function (process, global) {
        'use strict';

        var eventUtils = require('./event'),
            JSON3 = require('json3'),
            browser = require('./browser');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:utils:iframe');
        }

        module.exports = {
          WPrefix: '_jp',
          currentWindowId: null,
          polluteGlobalNamespace: function () {
            if (!(module.exports.WPrefix in global)) {
              global[module.exports.WPrefix] = {};
            }
          },
          postMessage: function (type, data) {
            if (global.parent !== global) {
              global.parent.postMessage(JSON3.stringify({
                windowId: module.exports.currentWindowId,
                type: type,
                data: data || ''
              }), '*');
            } else {
              debug('Cannot postMessage, no parent window.', type, data);
            }
          },
          createIframe: function (iframeUrl, errorCallback) {
            var iframe = global.document.createElement('iframe');
            var tref, unloadRef;

            var unattach = function () {
              debug('unattach');
              clearTimeout(tref); // Explorer had problems with that.

              try {
                iframe.onload = null;
              } catch (x) {// intentionally empty
              }

              iframe.onerror = null;
            };

            var cleanup = function () {
              debug('cleanup');

              if (iframe) {
                unattach(); // This timeout makes chrome fire onbeforeunload event
                // within iframe. Without the timeout it goes straight to
                // onunload.

                setTimeout(function () {
                  if (iframe) {
                    iframe.parentNode.removeChild(iframe);
                  }

                  iframe = null;
                }, 0);
                eventUtils.unloadDel(unloadRef);
              }
            };

            var onerror = function (err) {
              debug('onerror', err);

              if (iframe) {
                cleanup();
                errorCallback(err);
              }
            };

            var post = function (msg, origin) {
              debug('post', msg, origin);
              setTimeout(function () {
                try {
                  // When the iframe is not loaded, IE raises an exception
                  // on 'contentWindow'.
                  if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.postMessage(msg, origin);
                  }
                } catch (x) {// intentionally empty
                }
              }, 0);
            };

            iframe.src = iframeUrl;
            iframe.style.display = 'none';
            iframe.style.position = 'absolute';

            iframe.onerror = function () {
              onerror('onerror');
            };

            iframe.onload = function () {
              debug('onload'); // `onload` is triggered before scripts on the iframe are
              // executed. Give it few seconds to actually load stuff.

              clearTimeout(tref);
              tref = setTimeout(function () {
                onerror('onload timeout');
              }, 2000);
            };

            global.document.body.appendChild(iframe);
            tref = setTimeout(function () {
              onerror('timeout');
            }, 15000);
            unloadRef = eventUtils.unloadAdd(cleanup);
            return {
              post: post,
              cleanup: cleanup,
              loaded: unattach
            };
          }
          /* eslint no-undef: "off", new-cap: "off" */
          ,
          createHtmlfile: function (iframeUrl, errorCallback) {
            var axo = ['Active'].concat('Object').join('X');
            var doc = new global[axo]('htmlfile');
            var tref, unloadRef;
            var iframe;

            var unattach = function () {
              clearTimeout(tref);
              iframe.onerror = null;
            };

            var cleanup = function () {
              if (doc) {
                unattach();
                eventUtils.unloadDel(unloadRef);
                iframe.parentNode.removeChild(iframe);
                iframe = doc = null;
                CollectGarbage();
              }
            };

            var onerror = function (r) {
              debug('onerror', r);

              if (doc) {
                cleanup();
                errorCallback(r);
              }
            };

            var post = function (msg, origin) {
              try {
                // When the iframe is not loaded, IE raises an exception
                // on 'contentWindow'.
                setTimeout(function () {
                  if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.postMessage(msg, origin);
                  }
                }, 0);
              } catch (x) {// intentionally empty
              }
            };

            doc.open();
            doc.write('<html><s' + 'cript>' + 'document.domain="' + global.document.domain + '";' + '</s' + 'cript></html>');
            doc.close();
            doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
            var c = doc.createElement('div');
            doc.body.appendChild(c);
            iframe = doc.createElement('iframe');
            c.appendChild(iframe);
            iframe.src = iframeUrl;

            iframe.onerror = function () {
              onerror('onerror');
            };

            tref = setTimeout(function () {
              onerror('timeout');
            }, 15000);
            unloadRef = eventUtils.unloadAdd(cleanup);
            return {
              post: post,
              cleanup: cleanup,
              loaded: unattach
            };
          }
        };
        module.exports.iframeEnabled = false;

        if (global.document) {
          // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
          // huge delay, or not at all.
          module.exports.iframeEnabled = (typeof global.postMessage === 'function' || typeof global.postMessage === 'object') && !browser.isKonqueror();
        }
      }).call(this, {
        env: {}
      }, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "./browser": 44,
      "./event": 46,
      "debug": 55,
      "json3": 58
    }],
    48: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var logObject = {};
        ['log', 'debug', 'warn'].forEach(function (level) {
          var levelExists;

          try {
            levelExists = global.console && global.console[level] && global.console[level].apply;
          } catch (e) {// do nothing
          }

          logObject[level] = levelExists ? function () {
            return global.console[level].apply(global.console, arguments);
          } : level === 'log' ? function () {} : logObject.log;
        });
        module.exports = logObject;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    49: [function (require, module, exports) {
      'use strict';

      module.exports = {
        isObject: function (obj) {
          var type = typeof obj;
          return type === 'function' || type === 'object' && !!obj;
        },
        extend: function (obj) {
          if (!this.isObject(obj)) {
            return obj;
          }

          var source, prop;

          for (var i = 1, length = arguments.length; i < length; i++) {
            source = arguments[i];

            for (prop in source) {
              if (Object.prototype.hasOwnProperty.call(source, prop)) {
                obj[prop] = source[prop];
              }
            }
          }

          return obj;
        }
      };
    }, {}],
    50: [function (require, module, exports) {
      'use strict';
      /* global crypto:true */

      var crypto = require('crypto'); // This string has length 32, a power of 2, so the modulus doesn't introduce a
      // bias.


      var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
      module.exports = {
        string: function (length) {
          var max = _randomStringChars.length;
          var bytes = crypto.randomBytes(length);
          var ret = [];

          for (var i = 0; i < length; i++) {
            ret.push(_randomStringChars.substr(bytes[i] % max, 1));
          }

          return ret.join('');
        },
        number: function (max) {
          return Math.floor(Math.random() * max);
        },
        numberString: function (max) {
          var t = ('' + (max - 1)).length;
          var p = new Array(t + 1).join('0');
          return (p + this.number(max)).slice(-t);
        }
      };
    }, {
      "crypto": 43
    }],
    51: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:utils:transport');
        }

        module.exports = function (availableTransports) {
          return {
            filterToEnabled: function (transportsWhitelist, info) {
              var transports = {
                main: [],
                facade: []
              };

              if (!transportsWhitelist) {
                transportsWhitelist = [];
              } else if (typeof transportsWhitelist === 'string') {
                transportsWhitelist = [transportsWhitelist];
              }

              availableTransports.forEach(function (trans) {
                if (!trans) {
                  return;
                }

                if (trans.transportName === 'websocket' && info.websocket === false) {
                  debug('disabled from server', 'websocket');
                  return;
                }

                if (transportsWhitelist.length && transportsWhitelist.indexOf(trans.transportName) === -1) {
                  debug('not in whitelist', trans.transportName);
                  return;
                }

                if (trans.enabled(info)) {
                  debug('enabled', trans.transportName);
                  transports.main.push(trans);

                  if (trans.facadeTransport) {
                    transports.facade.push(trans.facadeTransport);
                  }
                } else {
                  debug('disabled', trans.transportName);
                }
              });
              return transports;
            }
          };
        };
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55
    }],
    52: [function (require, module, exports) {
      (function (process) {
        'use strict';

        var URL = require('url-parse');

        var debug = function () {};

        if (process.env.NODE_ENV !== 'production') {
          debug = require('debug')('sockjs-client:utils:url');
        }

        module.exports = {
          getOrigin: function (url) {
            if (!url) {
              return null;
            }

            var p = new URL(url);

            if (p.protocol === 'file:') {
              return null;
            }

            var port = p.port;

            if (!port) {
              port = p.protocol === 'https:' ? '443' : '80';
            }

            return p.protocol + '//' + p.hostname + ':' + port;
          },
          isOriginEqual: function (a, b) {
            var res = this.getOrigin(a) === this.getOrigin(b);
            debug('same', a, b, res);
            return res;
          },
          isSchemeEqual: function (a, b) {
            return a.split(':')[0] === b.split(':')[0];
          },
          addPath: function (url, path) {
            var qs = url.split('?');
            return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
          },
          addQuery: function (url, q) {
            return url + (url.indexOf('?') === -1 ? '?' + q : '&' + q);
          }
        };
      }).call(this, {
        env: {}
      });
    }, {
      "debug": 55,
      "url-parse": 61
    }],
    53: [function (require, module, exports) {
      module.exports = '1.4.0';
    }, {}],
    54: [function (require, module, exports) {
      /**
       * Helpers.
       */
      var s = 1000;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var w = d * 7;
      var y = d * 365.25;
      /**
       * Parse or format the given `val`.
       *
       * Options:
       *
       *  - `long` verbose formatting [false]
       *
       * @param {String|Number} val
       * @param {Object} [options]
       * @throws {Error} throw an error if val is not a non-empty string or a number
       * @return {String|Number}
       * @api public
       */

      module.exports = function (val, options) {
        options = options || {};
        var type = typeof val;

        if (type === 'string' && val.length > 0) {
          return parse(val);
        } else if (type === 'number' && isNaN(val) === false) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }

        throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
      };
      /**
       * Parse the given `str` and return milliseconds.
       *
       * @param {String} str
       * @return {Number}
       * @api private
       */


      function parse(str) {
        str = String(str);

        if (str.length > 100) {
          return;
        }

        var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

        if (!match) {
          return;
        }

        var n = parseFloat(match[1]);
        var type = (match[2] || 'ms').toLowerCase();

        switch (type) {
          case 'years':
          case 'year':
          case 'yrs':
          case 'yr':
          case 'y':
            return n * y;

          case 'weeks':
          case 'week':
          case 'w':
            return n * w;

          case 'days':
          case 'day':
          case 'd':
            return n * d;

          case 'hours':
          case 'hour':
          case 'hrs':
          case 'hr':
          case 'h':
            return n * h;

          case 'minutes':
          case 'minute':
          case 'mins':
          case 'min':
          case 'm':
            return n * m;

          case 'seconds':
          case 'second':
          case 'secs':
          case 'sec':
          case 's':
            return n * s;

          case 'milliseconds':
          case 'millisecond':
          case 'msecs':
          case 'msec':
          case 'ms':
            return n;

          default:
            return undefined;
        }
      }
      /**
       * Short format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */


      function fmtShort(ms) {
        var msAbs = Math.abs(ms);

        if (msAbs >= d) {
          return Math.round(ms / d) + 'd';
        }

        if (msAbs >= h) {
          return Math.round(ms / h) + 'h';
        }

        if (msAbs >= m) {
          return Math.round(ms / m) + 'm';
        }

        if (msAbs >= s) {
          return Math.round(ms / s) + 's';
        }

        return ms + 'ms';
      }
      /**
       * Long format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */


      function fmtLong(ms) {
        var msAbs = Math.abs(ms);

        if (msAbs >= d) {
          return plural(ms, msAbs, d, 'day');
        }

        if (msAbs >= h) {
          return plural(ms, msAbs, h, 'hour');
        }

        if (msAbs >= m) {
          return plural(ms, msAbs, m, 'minute');
        }

        if (msAbs >= s) {
          return plural(ms, msAbs, s, 'second');
        }

        return ms + ' ms';
      }
      /**
       * Pluralization helper.
       */


      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
      }
    }, {}],
    55: [function (require, module, exports) {
      (function (process) {
        "use strict";

        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }
        /* eslint-env browser */

        /**
         * This is the web browser implementation of `debug()`.
         */


        exports.log = log;
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = localstorage();
        /**
         * Colors.
         */

        exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
        /**
         * Currently only WebKit-based Web Inspectors, Firefox >= v31,
         * and the Firebug extension (any Firefox version) are known
         * to support "%c" CSS customizations.
         *
         * TODO: add a `localStorage` variable to explicitly enable/disable colors
         */
        // eslint-disable-next-line complexity

        function useColors() {
          // NB: In an Electron preload script, document will be defined but not fully
          // initialized. Since we know we're in Chrome, we'll just detect this case
          // explicitly
          if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
            return true;
          } // Internet Explorer and Edge do not support colors.


          if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          } // Is webkit? http://stackoverflow.com/a/16459606/376773
          // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


          return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
          typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
          // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
          typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        /**
         * Colorize log arguments if enabled.
         *
         * @api public
         */


        function formatArgs(args) {
          args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

          if (!this.useColors) {
            return;
          }

          var c = 'color: ' + this.color;
          args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
          // arguments passed either before or after the %c, so we need to
          // figure out the correct index to insert the CSS into

          var index = 0;
          var lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, function (match) {
            if (match === '%%') {
              return;
            }

            index++;

            if (match === '%c') {
              // We only are interested in the *last* %c
              // (the user may have provided their own)
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        /**
         * Invokes `console.log()` when available.
         * No-op when `console.log` is not a "function".
         *
         * @api public
         */


        function log() {
          var _console; // This hackery is required for IE8/9, where
          // the `console.log` function doesn't have 'apply'


          return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
        }
        /**
         * Save `namespaces`.
         *
         * @param {String} namespaces
         * @api private
         */


        function save(namespaces) {
          try {
            if (namespaces) {
              exports.storage.setItem('debug', namespaces);
            } else {
              exports.storage.removeItem('debug');
            }
          } catch (error) {// Swallow
            // XXX (@Qix-) should we be logging these?
          }
        }
        /**
         * Load `namespaces`.
         *
         * @return {String} returns the previously persisted debug modes
         * @api private
         */


        function load() {
          var r;

          try {
            r = exports.storage.getItem('debug');
          } catch (error) {} // Swallow
          // XXX (@Qix-) should we be logging these?
          // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


          if (!r && typeof process !== 'undefined' && 'env' in process) {
            r = process.env.DEBUG;
          }

          return r;
        }
        /**
         * Localstorage attempts to return the localstorage.
         *
         * This is necessary because safari throws
         * when a user disables cookies/localstorage
         * and you attempt to access it.
         *
         * @return {LocalStorage}
         * @api private
         */


        function localstorage() {
          try {
            // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
            // The Browser also has localStorage in the global context.
            return localStorage;
          } catch (error) {// Swallow
            // XXX (@Qix-) should we be logging these?
          }
        }

        module.exports = require('./common')(exports);
        var formatters = module.exports.formatters;
        /**
         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
         */

        formatters.j = function (v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return '[UnexpectedJSONParseError]: ' + error.message;
          }
        };
      }).call(this, {
        env: {}
      });
    }, {
      "./common": 56
    }],
    56: [function (require, module, exports) {
      "use strict";
      /**
       * This is the common logic for both the Node.js and web browser
       * implementations of `debug()`.
       */

      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require('ms');
        Object.keys(env).forEach(function (key) {
          createDebug[key] = env[key];
        });
        /**
        * Active `debug` instances.
        */

        createDebug.instances = [];
        /**
        * The currently active debug mode names, and names to skip.
        */

        createDebug.names = [];
        createDebug.skips = [];
        /**
        * Map of special "%n" handling functions, for the debug "format" argument.
        *
        * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
        */

        createDebug.formatters = {};
        /**
        * Selects a color for a debug namespace
        * @param {String} namespace The namespace string for the for the debug instance to be colored
        * @return {Number|String} An ANSI color code for the given namespace
        * @api private
        */

        function selectColor(namespace) {
          var hash = 0;

          for (var i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
          }

          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }

        createDebug.selectColor = selectColor;
        /**
        * Create a debugger with the given `namespace`.
        *
        * @param {String} namespace
        * @return {Function}
        * @api public
        */

        function createDebug(namespace) {
          var prevTime;

          function debug() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            } // Disabled?


            if (!debug.enabled) {
              return;
            }

            var self = debug; // Set `diff` timestamp

            var curr = Number(new Date());
            var ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);

            if (typeof args[0] !== 'string') {
              // Anything else let's inspect with %O
              args.unshift('%O');
            } // Apply any `formatters` transformations


            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
              // If we encounter an escaped % then don't increase the array index
              if (match === '%%') {
                return match;
              }

              index++;
              var formatter = createDebug.formatters[format];

              if (typeof formatter === 'function') {
                var val = args[index];
                match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

                args.splice(index, 1);
                index--;
              }

              return match;
            }); // Apply env-specific formatting (colors, etc.)

            createDebug.formatArgs.call(self, args);
            var logFn = self.log || createDebug.log;
            logFn.apply(self, args);
          }

          debug.namespace = namespace;
          debug.enabled = createDebug.enabled(namespace);
          debug.useColors = createDebug.useColors();
          debug.color = selectColor(namespace);
          debug.destroy = destroy;
          debug.extend = extend; // Debug.formatArgs = formatArgs;
          // debug.rawLog = rawLog;
          // env-specific initialization logic for debug instances

          if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
          }

          createDebug.instances.push(debug);
          return debug;
        }

        function destroy() {
          var index = createDebug.instances.indexOf(this);

          if (index !== -1) {
            createDebug.instances.splice(index, 1);
            return true;
          }

          return false;
        }

        function extend(namespace, delimiter) {
          return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        }
        /**
        * Enables a debug mode by namespaces. This can include modes
        * separated by a colon and wildcards.
        *
        * @param {String} namespaces
        * @api public
        */


        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.names = [];
          createDebug.skips = [];
          var i;
          var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
          var len = split.length;

          for (i = 0; i < len; i++) {
            if (!split[i]) {
              // ignore empty strings
              continue;
            }

            namespaces = split[i].replace(/\*/g, '.*?');

            if (namespaces[0] === '-') {
              createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
            } else {
              createDebug.names.push(new RegExp('^' + namespaces + '$'));
            }
          }

          for (i = 0; i < createDebug.instances.length; i++) {
            var instance = createDebug.instances[i];
            instance.enabled = createDebug.enabled(instance.namespace);
          }
        }
        /**
        * Disable debug output.
        *
        * @api public
        */


        function disable() {
          createDebug.enable('');
        }
        /**
        * Returns true if the given mode name is enabled, false otherwise.
        *
        * @param {String} name
        * @return {Boolean}
        * @api public
        */


        function enabled(name) {
          if (name[name.length - 1] === '*') {
            return true;
          }

          var i;
          var len;

          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }

          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }

          return false;
        }
        /**
        * Coerce `val`.
        *
        * @param {Mixed} val
        * @return {Mixed}
        * @api private
        */


        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }

          return val;
        }

        createDebug.enable(createDebug.load());
        return createDebug;
      }

      module.exports = setup;
    }, {
      "ms": 54
    }],
    57: [function (require, module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function () {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
    }, {}],
    58: [function (require, module, exports) {
      (function (global) {
        /*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
        ;
        (function () {
          // Detect the `define` function exposed by asynchronous module loaders. The
          // strict `define` check is necessary for compatibility with `r.js`.
          var isLoader = typeof define === "function" && define.amd; // A set of types used to distinguish objects from primitives.

          var objectTypes = {
            "function": true,
            "object": true
          }; // Detect the `exports` object exposed by CommonJS implementations.

          var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports; // Use the `global` object exposed by Node (including Browserify via
          // `insert-module-globals`), Narwhal, and Ringo as the default context,
          // and the `window` object in browsers. Rhino exports a `global` function
          // instead.

          var root = objectTypes[typeof window] && window || this,
              freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

          if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
            root = freeGlobal;
          } // Public: Initializes JSON 3 using the given `context` object, attaching the
          // `stringify` and `parse` functions to the specified `exports` object.


          function runInContext(context, exports) {
            context || (context = root["Object"]());
            exports || (exports = root["Object"]()); // Native constructor aliases.

            var Number = context["Number"] || root["Number"],
                String = context["String"] || root["String"],
                Object = context["Object"] || root["Object"],
                Date = context["Date"] || root["Date"],
                SyntaxError = context["SyntaxError"] || root["SyntaxError"],
                TypeError = context["TypeError"] || root["TypeError"],
                Math = context["Math"] || root["Math"],
                nativeJSON = context["JSON"] || root["JSON"]; // Delegate to the native `stringify` and `parse` implementations.

            if (typeof nativeJSON == "object" && nativeJSON) {
              exports.stringify = nativeJSON.stringify;
              exports.parse = nativeJSON.parse;
            } // Convenience aliases.


            var objectProto = Object.prototype,
                getClass = objectProto.toString,
                isProperty,
                forEach,
                undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.

            var isExtended = new Date(-3509827334573292);

            try {
              // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
              // results for certain dates in Opera >= 10.53.
              isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,
              // but clips the values returned by the date methods to the range of
              // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
              isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
            } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`
            // implementations are spec-compliant. Based on work by Ken Snyder.


            function has(name) {
              if (has[name] !== undef) {
                // Return cached feature test result.
                return has[name];
              }

              var isSupported;

              if (name == "bug-string-char-index") {
                // IE <= 7 doesn't support accessing string characters using square
                // bracket notation. IE 8 only supports this for primitives.
                isSupported = "a"[0] != "a";
              } else if (name == "json") {
                // Indicates whether both `JSON.stringify` and `JSON.parse` are
                // supported.
                isSupported = has("json-stringify") && has("json-parse");
              } else {
                var value,
                    serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

                if (name == "json-stringify") {
                  var stringify = exports.stringify,
                      stringifySupported = typeof stringify == "function" && isExtended;

                  if (stringifySupported) {
                    // A test function object with a custom `toJSON` method.
                    (value = function () {
                      return 1;
                    }).toJSON = value;

                    try {
                      stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
                      // primitives as object literals.
                      stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                      // literals.
                      stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                      // does not define a canonical JSON representation (this applies to
                      // objects with `toJSON` properties as well, *unless* they are nested
                      // within an object or array).
                      stringify(getClass) === undef && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                      // FF 3.1b3 pass this test.
                      stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                      // respectively, if the value is omitted entirely.
                      stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,
                      // string, array, object, Boolean, or `null` literal. This applies to
                      // objects with custom `toJSON` methods as well, unless they are nested
                      // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                      // methods entirely.
                      stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                      // `"[null]"`.
                      stringify([undef]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
                      stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
                      // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                      // elides non-JSON values from objects and arrays, unless they
                      // define custom `toJSON` methods.
                      stringify([undef, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                      // where character escape codes are expected (e.g., `\b` => `\u0008`).
                      stringify({
                        "a": [value, true, false, null, "\x00\b\n\f\r\t"]
                      }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                      stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                      // serialize extended years.
                      stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
                      stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                      // four-digit years instead of six-digit years. Credits: @Yaffle.
                      stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                      // values less than 1000. Credits: @Yaffle.
                      stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
                    } catch (exception) {
                      stringifySupported = false;
                    }
                  }

                  isSupported = stringifySupported;
                } // Test `JSON.parse`.


                if (name == "json-parse") {
                  var parse = exports.parse;

                  if (typeof parse == "function") {
                    try {
                      // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                      // Conforming implementations should also coerce the initial argument to
                      // a string prior to parsing.
                      if (parse("0") === 0 && !parse(false)) {
                        // Simple parsing test.
                        value = parse(serialized);
                        var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                        if (parseSupported) {
                          try {
                            // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                            parseSupported = !parse('"\t"');
                          } catch (exception) {}

                          if (parseSupported) {
                            try {
                              // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                              // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                              // certain octal literals.
                              parseSupported = parse("01") !== 1;
                            } catch (exception) {}
                          }

                          if (parseSupported) {
                            try {
                              // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                              // points. These environments, along with FF 3.1b1 and 2,
                              // also allow trailing commas in JSON objects and arrays.
                              parseSupported = parse("1.") !== 1;
                            } catch (exception) {}
                          }
                        }
                      }
                    } catch (exception) {
                      parseSupported = false;
                    }
                  }

                  isSupported = parseSupported;
                }
              }

              return has[name] = !!isSupported;
            }

            if (!has("json")) {
              // Common `[[Class]]` name aliases.
              var functionClass = "[object Function]",
                  dateClass = "[object Date]",
                  numberClass = "[object Number]",
                  stringClass = "[object String]",
                  arrayClass = "[object Array]",
                  booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

              var charIndexBuggy = has("bug-string-char-index"); // Define additional utility methods if the `Date` methods are buggy.

              if (!isExtended) {
                var floor = Math.floor; // A mapping between the months of the year and the number of days between
                // January 1st and the first of the respective month.

                var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
                // first day of the given month.

                var getDay = function (year, month) {
                  return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
                };
              } // Internal: Determines if a property is a direct property of the given
              // object. Delegates to the native `Object#hasOwnProperty` method.


              if (!(isProperty = objectProto.hasOwnProperty)) {
                isProperty = function (property) {
                  var members = {},
                      constructor;

                  if ((members.__proto__ = null, members.__proto__ = {
                    // The *proto* property cannot be set multiple times in recent
                    // versions of Firefox and SeaMonkey.
                    "toString": 1
                  }, members).toString != getClass) {
                    // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
                    // supports the mutable *proto* property.
                    isProperty = function (property) {
                      // Capture and break the object's prototype chain (see section 8.6.2
                      // of the ES 5.1 spec). The parenthesized expression prevents an
                      // unsafe transformation by the Closure Compiler.
                      var original = this.__proto__,
                          result = (property in (this.__proto__ = null, this)); // Restore the original prototype chain.

                      this.__proto__ = original;
                      return result;
                    };
                  } else {
                    // Capture a reference to the top-level `Object` constructor.
                    constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in
                    // other environments.

                    isProperty = function (property) {
                      var parent = (this.constructor || constructor).prototype;
                      return property in this && !(property in parent && this[property] === parent[property]);
                    };
                  }

                  members = null;
                  return isProperty.call(this, property);
                };
              } // Internal: Normalizes the `for...in` iteration algorithm across
              // environments. Each enumerated key is yielded to a `callback` function.


              forEach = function (object, callback) {
                var size = 0,
                    Properties,
                    members,
                    property; // Tests for bugs in the current environment's `for...in` algorithm. The
                // `valueOf` property inherits the non-enumerable flag from
                // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

                (Properties = function () {
                  this.valueOf = 0;
                }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

                members = new Properties();

                for (property in members) {
                  // Ignore all properties inherited from `Object.prototype`.
                  if (isProperty.call(members, property)) {
                    size++;
                  }
                }

                Properties = members = null; // Normalize the iteration algorithm.

                if (!size) {
                  // A list of non-enumerable properties inherited from `Object.prototype`.
                  members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
                  // properties.

                  forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        length;
                    var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;

                    for (property in object) {
                      // Gecko <= 1.0 enumerates the `prototype` property of functions under
                      // certain conditions; IE does not.
                      if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                        callback(property);
                      }
                    } // Manually invoke the callback for each non-enumerable property.


                    for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
                  };
                } else if (size == 2) {
                  // Safari <= 2.0.4 enumerates shadowed properties twice.
                  forEach = function (object, callback) {
                    // Create a set of iterated properties.
                    var members = {},
                        isFunction = getClass.call(object) == functionClass,
                        property;

                    for (property in object) {
                      // Store each property name to prevent double enumeration. The
                      // `prototype` property of functions is not enumerated due to cross-
                      // environment inconsistencies.
                      if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                        callback(property);
                      }
                    }
                  };
                } else {
                  // No bugs detected; use the standard `for...in` algorithm.
                  forEach = function (object, callback) {
                    var isFunction = getClass.call(object) == functionClass,
                        property,
                        isConstructor;

                    for (property in object) {
                      if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                        callback(property);
                      }
                    } // Manually invoke the callback for the `constructor` property due to
                    // cross-environment inconsistencies.


                    if (isConstructor || isProperty.call(object, property = "constructor")) {
                      callback(property);
                    }
                  };
                }

                return forEach(object, callback);
              }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
              // `filter` argument may specify either a function that alters how object and
              // array members are serialized, or an array of strings and numbers that
              // indicates which properties should be serialized. The optional `width`
              // argument may be either a string or number that specifies the indentation
              // level of the output.


              if (!has("json-stringify")) {
                // Internal: A map of control characters and their escaped equivalents.
                var Escapes = {
                  92: "\\\\",
                  34: '\\"',
                  8: "\\b",
                  12: "\\f",
                  10: "\\n",
                  13: "\\r",
                  9: "\\t"
                }; // Internal: Converts `value` into a zero-padded string such that its
                // length is at least equal to `width`. The `width` must be <= 6.

                var leadingZeroes = "000000";

                var toPaddedString = function (width, value) {
                  // The `|| 0` expression is necessary to work around a bug in
                  // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
                  return (leadingZeroes + (value || 0)).slice(-width);
                }; // Internal: Double-quotes a string `value`, replacing all ASCII control
                // characters (characters with code unit values between 0 and 31) with
                // their escaped equivalents. This is an implementation of the
                // `Quote(value)` operation defined in ES 5.1 section 15.12.3.


                var unicodePrefix = "\\u00";

                var quote = function (value) {
                  var result = '"',
                      index = 0,
                      length = value.length,
                      useCharIndex = !charIndexBuggy || length > 10;
                  var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

                  for (; index < length; index++) {
                    var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or
                    // shorthand escape sequence; otherwise, append the character as-is.

                    switch (charCode) {
                      case 8:
                      case 9:
                      case 10:
                      case 12:
                      case 13:
                      case 34:
                      case 92:
                        result += Escapes[charCode];
                        break;

                      default:
                        if (charCode < 32) {
                          result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                          break;
                        }

                        result += useCharIndex ? symbols[index] : value.charAt(index);
                    }
                  }

                  return result + '"';
                }; // Internal: Recursively serializes an object. Implements the
                // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


                var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
                  var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

                  try {
                    // Necessary for host object support.
                    value = object[property];
                  } catch (exception) {}

                  if (typeof value == "object" && value) {
                    className = getClass.call(value);

                    if (className == dateClass && !isProperty.call(value, "toJSON")) {
                      if (value > -1 / 0 && value < 1 / 0) {
                        // Dates are serialized according to the `Date#toJSON` method
                        // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                        // for the ISO 8601 date time string format.
                        if (getDay) {
                          // Manually compute the year, month, date, hours, minutes,
                          // seconds, and milliseconds if the `getUTC*` methods are
                          // buggy. Adapted from @Yaffle's `date-shim` project.
                          date = floor(value / 864e5);

                          for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);

                          for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);

                          date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
                          // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                          // to compute `A modulo B`, as the `%` operator does not
                          // correspond to the `modulo` operation for negative numbers.

                          time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
                          // decomposing the time within the day. See section 15.9.1.10.

                          hours = floor(time / 36e5) % 24;
                          minutes = floor(time / 6e4) % 60;
                          seconds = floor(time / 1e3) % 60;
                          milliseconds = time % 1e3;
                        } else {
                          year = value.getUTCFullYear();
                          month = value.getUTCMonth();
                          date = value.getUTCDate();
                          hours = value.getUTCHours();
                          minutes = value.getUTCMinutes();
                          seconds = value.getUTCSeconds();
                          milliseconds = value.getUTCMilliseconds();
                        } // Serialize extended years correctly.


                        value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
                        // digits; milliseconds should have three.
                        "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
                        "." + toPaddedString(3, milliseconds) + "Z";
                      } else {
                        value = null;
                      }
                    } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, "toJSON"))) {
                      // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
                      // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
                      // ignores all `toJSON` methods on these objects unless they are
                      // defined directly on an instance.
                      value = value.toJSON(property);
                    }
                  }

                  if (callback) {
                    // If a replacement function was provided, call it to obtain the value
                    // for serialization.
                    value = callback.call(object, property, value);
                  }

                  if (value === null) {
                    return "null";
                  }

                  className = getClass.call(value);

                  if (className == booleanClass) {
                    // Booleans are represented literally.
                    return "" + value;
                  } else if (className == numberClass) {
                    // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
                    // `"null"`.
                    return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
                  } else if (className == stringClass) {
                    // Strings are double-quoted and escaped.
                    return quote("" + value);
                  } // Recursively serialize objects and arrays.


                  if (typeof value == "object") {
                    // Check for cyclic structures. This is a linear search; performance
                    // is inversely proportional to the number of unique nested objects.
                    for (length = stack.length; length--;) {
                      if (stack[length] === value) {
                        // Cyclic structures cannot be serialized by `JSON.stringify`.
                        throw TypeError();
                      }
                    } // Add the object to the stack of traversed objects.


                    stack.push(value);
                    results = []; // Save the current indentation level and indent one additional level.

                    prefix = indentation;
                    indentation += whitespace;

                    if (className == arrayClass) {
                      // Recursively serialize array elements.
                      for (index = 0, length = value.length; index < length; index++) {
                        element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                        results.push(element === undef ? "null" : element);
                      }

                      result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
                    } else {
                      // Recursively serialize object members. Members are selected from
                      // either a user-specified list of property names, or the object
                      // itself.
                      forEach(properties || value, function (property) {
                        var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                        if (element !== undef) {
                          // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                          // is not the empty string, let `member` {quote(property) + ":"}
                          // be the concatenation of `member` and the `space` character."
                          // The "`space` character" refers to the literal space
                          // character, not the `space` {width} argument provided to
                          // `JSON.stringify`.
                          results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                        }
                      });
                      result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
                    } // Remove the object from the traversed object stack.


                    stack.pop();
                    return result;
                  }
                }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


                exports.stringify = function (source, filter, width) {
                  var whitespace, callback, properties, className;

                  if (objectTypes[typeof filter] && filter) {
                    if ((className = getClass.call(filter)) == functionClass) {
                      callback = filter;
                    } else if (className == arrayClass) {
                      // Convert the property names array into a makeshift set.
                      properties = {};

                      for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));
                    }
                  }

                  if (width) {
                    if ((className = getClass.call(width)) == numberClass) {
                      // Convert the `width` to an integer and create a string containing
                      // `width` number of space characters.
                      if ((width -= width % 1) > 0) {
                        for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
                      }
                    } else if (className == stringClass) {
                      whitespace = width.length <= 10 ? width : width.slice(0, 10);
                    }
                  } // Opera <= 7.54u2 discards the values associated with empty string keys
                  // (`""`) only if they are used directly within an object member list
                  // (e.g., `!("" in { "": 1})`).


                  return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
                };
              } // Public: Parses a JSON source string.


              if (!has("json-parse")) {
                var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
                // equivalents.

                var Unescapes = {
                  92: "\\",
                  34: '"',
                  47: "/",
                  98: "\b",
                  116: "\t",
                  110: "\n",
                  102: "\f",
                  114: "\r"
                }; // Internal: Stores the parser state.

                var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

                var abort = function () {
                  Index = Source = null;
                  throw SyntaxError();
                }; // Internal: Returns the next token, or `"$"` if the parser has reached
                // the end of the source string. A token may be a string, number, `null`
                // literal, or Boolean literal.


                var lex = function () {
                  var source = Source,
                      length = source.length,
                      value,
                      begin,
                      position,
                      isSigned,
                      charCode;

                  while (Index < length) {
                    charCode = source.charCodeAt(Index);

                    switch (charCode) {
                      case 9:
                      case 10:
                      case 13:
                      case 32:
                        // Skip whitespace tokens, including tabs, carriage returns, line
                        // feeds, and space characters.
                        Index++;
                        break;

                      case 123:
                      case 125:
                      case 91:
                      case 93:
                      case 58:
                      case 44:
                        // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                        // the current position.
                        value = charIndexBuggy ? source.charAt(Index) : source[Index];
                        Index++;
                        return value;

                      case 34:
                        // `"` delimits a JSON string; advance to the next character and
                        // begin parsing the string. String tokens are prefixed with the
                        // sentinel `@` character to distinguish them from punctuators and
                        // end-of-string tokens.
                        for (value = "@", Index++; Index < length;) {
                          charCode = source.charCodeAt(Index);

                          if (charCode < 32) {
                            // Unescaped ASCII control characters (those with a code unit
                            // less than the space character) are not permitted.
                            abort();
                          } else if (charCode == 92) {
                            // A reverse solidus (`\`) marks the beginning of an escaped
                            // control character (including `"`, `\`, and `/`) or Unicode
                            // escape sequence.
                            charCode = source.charCodeAt(++Index);

                            switch (charCode) {
                              case 92:
                              case 34:
                              case 47:
                              case 98:
                              case 116:
                              case 110:
                              case 102:
                              case 114:
                                // Revive escaped control characters.
                                value += Unescapes[charCode];
                                Index++;
                                break;

                              case 117:
                                // `\u` marks the beginning of a Unicode escape sequence.
                                // Advance to the first character and validate the
                                // four-digit code point.
                                begin = ++Index;

                                for (position = Index + 4; Index < position; Index++) {
                                  charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                                  // insensitive) that form a single hexadecimal value.

                                  if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                                    // Invalid Unicode escape sequence.
                                    abort();
                                  }
                                } // Revive the escaped character.


                                value += fromCharCode("0x" + source.slice(begin, Index));
                                break;

                              default:
                                // Invalid escape sequence.
                                abort();
                            }
                          } else {
                            if (charCode == 34) {
                              // An unescaped double-quote character marks the end of the
                              // string.
                              break;
                            }

                            charCode = source.charCodeAt(Index);
                            begin = Index; // Optimize for the common case where a string is valid.

                            while (charCode >= 32 && charCode != 92 && charCode != 34) {
                              charCode = source.charCodeAt(++Index);
                            } // Append the string as-is.


                            value += source.slice(begin, Index);
                          }
                        }

                        if (source.charCodeAt(Index) == 34) {
                          // Advance to the next character and return the revived string.
                          Index++;
                          return value;
                        } // Unterminated string.


                        abort();

                      default:
                        // Parse numbers and literals.
                        begin = Index; // Advance past the negative sign, if one is specified.

                        if (charCode == 45) {
                          isSigned = true;
                          charCode = source.charCodeAt(++Index);
                        } // Parse an integer or floating-point value.


                        if (charCode >= 48 && charCode <= 57) {
                          // Leading zeroes are interpreted as octal literals.
                          if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                            // Illegal octal literal.
                            abort();
                          }

                          isSigned = false; // Parse the integer component.

                          for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++); // Floats cannot contain a leading decimal point; however, this
                          // case is already accounted for by the parser.


                          if (source.charCodeAt(Index) == 46) {
                            position = ++Index; // Parse the decimal component.

                            for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);

                            if (position == Index) {
                              // Illegal trailing decimal.
                              abort();
                            }

                            Index = position;
                          } // Parse exponents. The `e` denoting the exponent is
                          // case-insensitive.


                          charCode = source.charCodeAt(Index);

                          if (charCode == 101 || charCode == 69) {
                            charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                            // specified.

                            if (charCode == 43 || charCode == 45) {
                              Index++;
                            } // Parse the exponential component.


                            for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);

                            if (position == Index) {
                              // Illegal empty exponent.
                              abort();
                            }

                            Index = position;
                          } // Coerce the parsed value to a JavaScript number.


                          return +source.slice(begin, Index);
                        } // A negative sign may only precede numbers.


                        if (isSigned) {
                          abort();
                        } // `true`, `false`, and `null` literals.


                        if (source.slice(Index, Index + 4) == "true") {
                          Index += 4;
                          return true;
                        } else if (source.slice(Index, Index + 5) == "false") {
                          Index += 5;
                          return false;
                        } else if (source.slice(Index, Index + 4) == "null") {
                          Index += 4;
                          return null;
                        } // Unrecognized token.


                        abort();
                    }
                  } // Return the sentinel `$` character if the parser has reached the end
                  // of the source string.


                  return "$";
                }; // Internal: Parses a JSON `value` token.


                var get = function (value) {
                  var results, hasMembers;

                  if (value == "$") {
                    // Unexpected end of input.
                    abort();
                  }

                  if (typeof value == "string") {
                    if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                      // Remove the sentinel `@` character.
                      return value.slice(1);
                    } // Parse object and array literals.


                    if (value == "[") {
                      // Parses a JSON array, returning a new JavaScript array.
                      results = [];

                      for (;; hasMembers || (hasMembers = true)) {
                        value = lex(); // A closing square bracket marks the end of the array literal.

                        if (value == "]") {
                          break;
                        } // If the array literal contains elements, the current token
                        // should be a comma separating the previous element from the
                        // next.


                        if (hasMembers) {
                          if (value == ",") {
                            value = lex();

                            if (value == "]") {
                              // Unexpected trailing `,` in array literal.
                              abort();
                            }
                          } else {
                            // A `,` must separate each array element.
                            abort();
                          }
                        } // Elisions and leading commas are not permitted.


                        if (value == ",") {
                          abort();
                        }

                        results.push(get(value));
                      }

                      return results;
                    } else if (value == "{") {
                      // Parses a JSON object, returning a new JavaScript object.
                      results = {};

                      for (;; hasMembers || (hasMembers = true)) {
                        value = lex(); // A closing curly brace marks the end of the object literal.

                        if (value == "}") {
                          break;
                        } // If the object literal contains members, the current token
                        // should be a comma separator.


                        if (hasMembers) {
                          if (value == ",") {
                            value = lex();

                            if (value == "}") {
                              // Unexpected trailing `,` in object literal.
                              abort();
                            }
                          } else {
                            // A `,` must separate each object member.
                            abort();
                          }
                        } // Leading commas are not permitted, object property names must be
                        // double-quoted strings, and a `:` must separate each property
                        // name and value.


                        if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                          abort();
                        }

                        results[value.slice(1)] = get(lex());
                      }

                      return results;
                    } // Unexpected token encountered.


                    abort();
                  }

                  return value;
                }; // Internal: Updates a traversed object member.


                var update = function (source, property, callback) {
                  var element = walk(source, property, callback);

                  if (element === undef) {
                    delete source[property];
                  } else {
                    source[property] = element;
                  }
                }; // Internal: Recursively traverses a parsed JSON object, invoking the
                // `callback` function for each value. This is an implementation of the
                // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


                var walk = function (source, property, callback) {
                  var value = source[property],
                      length;

                  if (typeof value == "object" && value) {
                    // `forEach` can't be used to traverse an array in Opera <= 8.54
                    // because its `Object#hasOwnProperty` implementation returns `false`
                    // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
                    if (getClass.call(value) == arrayClass) {
                      for (length = value.length; length--;) {
                        update(value, length, callback);
                      }
                    } else {
                      forEach(value, function (property) {
                        update(value, property, callback);
                      });
                    }
                  }

                  return callback.call(source, property, value);
                }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


                exports.parse = function (source, callback) {
                  var result, value;
                  Index = 0;
                  Source = "" + source;
                  result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

                  if (lex() != "$") {
                    abort();
                  } // Reset the parser state.


                  Index = Source = null;
                  return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
                };
              }
            }

            exports["runInContext"] = runInContext;
            return exports;
          }

          if (freeExports && !isLoader) {
            // Export for CommonJS environments.
            runInContext(root, freeExports);
          } else {
            // Export for web browsers and JavaScript engines.
            var nativeJSON = root.JSON,
                previousJSON = root["JSON3"],
                isRestored = false;
            var JSON3 = runInContext(root, root["JSON3"] = {
              // Public: Restores the original value of the global `JSON` object and
              // returns a reference to the `JSON3` object.
              "noConflict": function () {
                if (!isRestored) {
                  isRestored = true;
                  root.JSON = nativeJSON;
                  root["JSON3"] = previousJSON;
                  nativeJSON = previousJSON = null;
                }

                return JSON3;
              }
            });
            root.JSON = {
              "parse": JSON3.parse,
              "stringify": JSON3.stringify
            };
          } // Export for asynchronous module loaders.


          if (isLoader) {
            define(function () {
              return JSON3;
            });
          }
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    59: [function (require, module, exports) {
      'use strict';

      var has = Object.prototype.hasOwnProperty;
      /**
       * Decode a URI encoded string.
       *
       * @param {String} input The URI encoded string.
       * @returns {String} The decoded string.
       * @api private
       */

      function decode(input) {
        return decodeURIComponent(input.replace(/\+/g, ' '));
      }
      /**
       * Simple query string parser.
       *
       * @param {String} query The query string that needs to be parsed.
       * @returns {Object}
       * @api public
       */


      function querystring(query) {
        var parser = /([^=?&]+)=?([^&]*)/g,
            result = {},
            part;

        while (part = parser.exec(query)) {
          var key = decode(part[1]),
              value = decode(part[2]); //
          // Prevent overriding of existing properties. This ensures that build-in
          // methods like `toString` or __proto__ are not overriden by malicious
          // querystrings.
          //

          if (key in result) continue;
          result[key] = value;
        }

        return result;
      }
      /**
       * Transform a query string to an object.
       *
       * @param {Object} obj Object that should be transformed.
       * @param {String} prefix Optional prefix.
       * @returns {String}
       * @api public
       */


      function querystringify(obj, prefix) {
        prefix = prefix || '';
        var pairs = []; //
        // Optionally prefix with a '?' if needed
        //

        if ('string' !== typeof prefix) prefix = '?';

        for (var key in obj) {
          if (has.call(obj, key)) {
            pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));
          }
        }

        return pairs.length ? prefix + pairs.join('&') : '';
      } //
      // Expose the module.
      //


      exports.stringify = querystringify;
      exports.parse = querystring;
    }, {}],
    60: [function (require, module, exports) {
      'use strict';
      /**
       * Check if we're required to add a port number.
       *
       * @see https://url.spec.whatwg.org/#default-port
       * @param {Number|String} port Port number we need to check
       * @param {String} protocol Protocol we need to check against.
       * @returns {Boolean} Is it a default port for the given protocol
       * @api private
       */

      module.exports = function required(port, protocol) {
        protocol = protocol.split(':')[0];
        port = +port;
        if (!port) return false;

        switch (protocol) {
          case 'http':
          case 'ws':
            return port !== 80;

          case 'https':
          case 'wss':
            return port !== 443;

          case 'ftp':
            return port !== 21;

          case 'gopher':
            return port !== 70;

          case 'file':
            return false;
        }

        return port !== 0;
      };
    }, {}],
    61: [function (require, module, exports) {
      (function (global) {
        'use strict';

        var required = require('requires-port'),
            qs = require('querystringify'),
            protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,
            slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
        /**
         * These are the parse rules for the URL parser, it informs the parser
         * about:
         *
         * 0. The char it Needs to parse, if it's a string it should be done using
         *    indexOf, RegExp using exec and NaN means set as current value.
         * 1. The property we should set when parsing this value.
         * 2. Indication if it's backwards or forward parsing, when set as number it's
         *    the value of extra chars that should be split off.
         * 3. Inherit from location if non existing in the parser.
         * 4. `toLowerCase` the resulting value.
         */


        var rules = [['#', 'hash'], // Extract from the back.
        ['?', 'query'], // Extract from the back.
        function sanitize(address) {
          // Sanitize what is left of the address
          return address.replace('\\', '/');
        }, ['/', 'pathname'], // Extract from the back.
        ['@', 'auth', 1], // Extract from the front.
        [NaN, 'host', undefined, 1, 1], // Set left over value.
        [/:(\d+)$/, 'port', undefined, 1], // RegExp the back.
        [NaN, 'hostname', undefined, 1, 1] // Set left over.
        ];
        /**
         * These properties should not be copied or inherited from. This is only needed
         * for all non blob URL's as a blob URL does not include a hash, only the
         * origin.
         *
         * @type {Object}
         * @private
         */

        var ignore = {
          hash: 1,
          query: 1
        };
        /**
         * The location object differs when your code is loaded through a normal page,
         * Worker or through a worker using a blob. And with the blobble begins the
         * trouble as the location object will contain the URL of the blob, not the
         * location of the page where our code is loaded in. The actual origin is
         * encoded in the `pathname` so we can thankfully generate a good "default"
         * location from it so we can generate proper relative URL's again.
         *
         * @param {Object|String} loc Optional default location object.
         * @returns {Object} lolcation object.
         * @public
         */

        function lolcation(loc) {
          var location = global && global.location || {};
          loc = loc || location;
          var finaldestination = {},
              type = typeof loc,
              key;

          if ('blob:' === loc.protocol) {
            finaldestination = new Url(unescape(loc.pathname), {});
          } else if ('string' === type) {
            finaldestination = new Url(loc, {});

            for (key in ignore) delete finaldestination[key];
          } else if ('object' === type) {
            for (key in loc) {
              if (key in ignore) continue;
              finaldestination[key] = loc[key];
            }

            if (finaldestination.slashes === undefined) {
              finaldestination.slashes = slashes.test(loc.href);
            }
          }

          return finaldestination;
        }
        /**
         * @typedef ProtocolExtract
         * @type Object
         * @property {String} protocol Protocol matched in the URL, in lowercase.
         * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
         * @property {String} rest Rest of the URL that is not part of the protocol.
         */

        /**
         * Extract protocol information from a URL with/without double slash ("//").
         *
         * @param {String} address URL we want to extract from.
         * @return {ProtocolExtract} Extracted information.
         * @private
         */


        function extractProtocol(address) {
          var match = protocolre.exec(address);
          return {
            protocol: match[1] ? match[1].toLowerCase() : '',
            slashes: !!match[2],
            rest: match[3]
          };
        }
        /**
         * Resolve a relative URL pathname against a base URL pathname.
         *
         * @param {String} relative Pathname of the relative URL.
         * @param {String} base Pathname of the base URL.
         * @return {String} Resolved pathname.
         * @private
         */


        function resolve(relative, base) {
          var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
              i = path.length,
              last = path[i - 1],
              unshift = false,
              up = 0;

          while (i--) {
            if (path[i] === '.') {
              path.splice(i, 1);
            } else if (path[i] === '..') {
              path.splice(i, 1);
              up++;
            } else if (up) {
              if (i === 0) unshift = true;
              path.splice(i, 1);
              up--;
            }
          }

          if (unshift) path.unshift('');
          if (last === '.' || last === '..') path.push('');
          return path.join('/');
        }
        /**
         * The actual URL instance. Instead of returning an object we've opted-in to
         * create an actual constructor as it's much more memory efficient and
         * faster and it pleases my OCD.
         *
         * It is worth noting that we should not use `URL` as class name to prevent
         * clashes with the global URL instance that got introduced in browsers.
         *
         * @constructor
         * @param {String} address URL we want to parse.
         * @param {Object|String} location Location defaults for relative paths.
         * @param {Boolean|Function} parser Parser for the query string.
         * @private
         */


        function Url(address, location, parser) {
          if (!(this instanceof Url)) {
            return new Url(address, location, parser);
          }

          var relative,
              extracted,
              parse,
              instruction,
              index,
              key,
              instructions = rules.slice(),
              type = typeof location,
              url = this,
              i = 0; //
          // The following if statements allows this module two have compatibility with
          // 2 different API:
          //
          // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
          //    where the boolean indicates that the query string should also be parsed.
          //
          // 2. The `URL` interface of the browser which accepts a URL, object as
          //    arguments. The supplied object will be used as default values / fall-back
          //    for relative paths.
          //

          if ('object' !== type && 'string' !== type) {
            parser = location;
            location = null;
          }

          if (parser && 'function' !== typeof parser) parser = qs.parse;
          location = lolcation(location); //
          // Extract protocol information before running the instructions.
          //

          extracted = extractProtocol(address || '');
          relative = !extracted.protocol && !extracted.slashes;
          url.slashes = extracted.slashes || relative && location.slashes;
          url.protocol = extracted.protocol || location.protocol || '';
          address = extracted.rest; //
          // When the authority component is absent the URL starts with a path
          // component.
          //

          if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

          for (; i < instructions.length; i++) {
            instruction = instructions[i];

            if (typeof instruction === 'function') {
              address = instruction(address);
              continue;
            }

            parse = instruction[0];
            key = instruction[1];

            if (parse !== parse) {
              url[key] = address;
            } else if ('string' === typeof parse) {
              if (~(index = address.indexOf(parse))) {
                if ('number' === typeof instruction[2]) {
                  url[key] = address.slice(0, index);
                  address = address.slice(index + instruction[2]);
                } else {
                  url[key] = address.slice(index);
                  address = address.slice(0, index);
                }
              }
            } else if (index = parse.exec(address)) {
              url[key] = index[1];
              address = address.slice(0, index.index);
            }

            url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //
            // Hostname, host and protocol should be lowercased so they can be used to
            // create a proper `origin`.
            //

            if (instruction[4]) url[key] = url[key].toLowerCase();
          } //
          // Also parse the supplied query string in to an object. If we're supplied
          // with a custom parser as function use that instead of the default build-in
          // parser.
          //


          if (parser) url.query = parser(url.query); //
          // If the URL is relative, resolve the pathname against the base URL.
          //

          if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
            url.pathname = resolve(url.pathname, location.pathname);
          } //
          // We should not add port numbers if they are already the default port number
          // for a given protocol. As the host also contains the port number we're going
          // override it with the hostname which contains no port number.
          //


          if (!required(url.port, url.protocol)) {
            url.host = url.hostname;
            url.port = '';
          } //
          // Parse down the `auth` for the username and password.
          //


          url.username = url.password = '';

          if (url.auth) {
            instruction = url.auth.split(':');
            url.username = instruction[0] || '';
            url.password = instruction[1] || '';
          }

          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //
          // The href is just the compiled result.
          //

          url.href = url.toString();
        }
        /**
         * This is convenience method for changing properties in the URL instance to
         * insure that they all propagate correctly.
         *
         * @param {String} part          Property we need to adjust.
         * @param {Mixed} value          The newly assigned value.
         * @param {Boolean|Function} fn  When setting the query, it will be the function
         *                               used to parse the query.
         *                               When setting the protocol, double slash will be
         *                               removed from the final url if it is true.
         * @returns {URL} URL instance for chaining.
         * @public
         */


        function set(part, value, fn) {
          var url = this;

          switch (part) {
            case 'query':
              if ('string' === typeof value && value.length) {
                value = (fn || qs.parse)(value);
              }

              url[part] = value;
              break;

            case 'port':
              url[part] = value;

              if (!required(value, url.protocol)) {
                url.host = url.hostname;
                url[part] = '';
              } else if (value) {
                url.host = url.hostname + ':' + value;
              }

              break;

            case 'hostname':
              url[part] = value;
              if (url.port) value += ':' + url.port;
              url.host = value;
              break;

            case 'host':
              url[part] = value;

              if (/:\d+$/.test(value)) {
                value = value.split(':');
                url.port = value.pop();
                url.hostname = value.join(':');
              } else {
                url.hostname = value;
                url.port = '';
              }

              break;

            case 'protocol':
              url.protocol = value.toLowerCase();
              url.slashes = !fn;
              break;

            case 'pathname':
            case 'hash':
              if (value) {
                var char = part === 'pathname' ? '/' : '#';
                url[part] = value.charAt(0) !== char ? char + value : value;
              } else {
                url[part] = value;
              }

              break;

            default:
              url[part] = value;
          }

          for (var i = 0; i < rules.length; i++) {
            var ins = rules[i];
            if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
          }

          url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
          url.href = url.toString();
          return url;
        }
        /**
         * Transform the properties back in to a valid and full URL string.
         *
         * @param {Function} stringify Optional query stringify function.
         * @returns {String} Compiled version of the URL.
         * @public
         */


        function toString(stringify) {
          if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
          var query,
              url = this,
              protocol = url.protocol;
          if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
          var result = protocol + (url.slashes ? '//' : '');

          if (url.username) {
            result += url.username;
            if (url.password) result += ':' + url.password;
            result += '@';
          }

          result += url.host + url.pathname;
          query = 'object' === typeof url.query ? stringify(url.query) : url.query;
          if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
          if (url.hash) result += url.hash;
          return result;
        }

        Url.prototype = {
          set: set,
          toString: toString
        }; //
        // Expose the URL parser and some additional properties that might be useful for
        // others or testing.
        //

        Url.extractProtocol = extractProtocol;
        Url.location = lolcation;
        Url.qs = qs;
        module.exports = Url;
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "querystringify": 59,
      "requires-port": 60
    }]
  }, {}, [1])(1);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var punycode = __webpack_require__(/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js");

var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.


var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];

      if (simplePath[2]) {
        this.search = simplePath[2];

        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }

      return this;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    this.parseHost(); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);

      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);

    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }

  if (rest) this.pathname = rest;

  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  } //to support http.request


  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  this.href = this.format();
  return this;
}; // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift()));

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      this.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) this.hostname = host;
};

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function (arg) {
    return typeof arg === 'string';
  },
  isObject: function (arg) {
    return typeof arg === 'object' && arg !== null;
  },
  isNull: function (arg) {
    return arg === null;
  },
  isNullOrUndefined: function (arg) {
    return arg == null;
  }
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client/clients/BaseClient.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = /*#__PURE__*/function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }

  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);

  return BaseClient;
}();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!***********************************************************!*\
  !*** (webpack)-dev-server/client/clients/SockJSClient.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/sockjs-client/dist/sockjs.js");

var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/webpack-dev-server/client/clients/BaseClient.js");

module.exports = /*#__PURE__*/function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);

  function SockJSClient(url) {
    var _this;

    _classCallCheck(this, SockJSClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SockJSClient).call(this));
    _this.sock = new SockJS(url);

    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };

    return _this;
  }

  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);

  return SockJSClient;
}(BaseClient);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?http://localhost:9000":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client?http://localhost:9000 ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {
/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js");

var socket = __webpack_require__(/*! ./socket */ "./node_modules/webpack-dev-server/client/socket.js");

var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/webpack-dev-server/client/overlay.js");

var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log,
    setLogLevel = _require.setLogLevel;

var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");

var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");

var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js");

var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});

if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}

var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/webpack/hot sync ^\\.\\/log$");

    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }

    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }

    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');

    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });

    sendMessage('Warnings', strippedWarnings);

    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }

    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');

    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });

    sendMessage('Errors', strippedErrors);

    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }

    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }

    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
/* WEBPACK VAR INJECTION */}.call(this, "?http://localhost:9000"))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!**********************************************!*\
  !*** (webpack)-dev-server/client/overlay.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

var ansiHTML = __webpack_require__(/*! ansi-html */ "./node_modules/ansi-html/index.js");

var _require = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/index.js"),
    AllHtmlEntities = _require.AllHtmlEntities;

var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.


  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.


  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.


function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).


function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}

module.exports = {
  clear: clear,
  showMessage: showMessage
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!*********************************************!*\
  !*** (webpack)-dev-server/client/socket.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_dev_server_client__) {
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};

module.exports = socket;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)-dev-server/client/clients/SockJSClient.js */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js")))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!************************************************************!*\
  !*** (webpack)-dev-server/client/utils/createSocketUrl.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global self */

var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

function createSocketUrl(resourceQuery, currentLocation) {
  var urlParts;

  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    // format is like `?http://0.0.0.0:8096&sockPort=8097&sockHost=localhost`
    urlParts = url.parse(resourceQuery // strip leading `?` from query string to get a valid URL
    .substr(1) // replace first `&` with `?` to have a valid query string
    .replace('&', '?'), true);
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();
    urlParts = url.parse(scriptHost || '/', true, true);
  } // Use parameter to allow passing location in unit tests


  if (typeof currentLocation === 'string' && currentLocation !== '') {
    currentLocation = url.parse(currentLocation);
  } else {
    currentLocation = self.location;
  }

  return getSocketUrl(urlParts, currentLocation);
}
/*
 * Gets socket URL based on Script Source/Location
 * (scriptSrc: URL, location: URL) -> URL
 */


function getSocketUrl(urlParts, loc) {
  var auth = urlParts.auth,
      query = urlParts.query;
  var hostname = urlParts.hostname,
      protocol = urlParts.protocol,
      port = urlParts.port;

  if (!port || port === '0') {
    port = loc.port;
  } // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384


  if ((hostname === '0.0.0.0' || hostname === '::') && loc.hostname && loc.protocol.indexOf('http') === 0) {
    hostname = loc.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.


  if (hostname && hostname !== '127.0.0.1' && (loc.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = loc.protocol;
  } // all of these sock url params are optionally passed in through
  // resourceQuery, so we need to fall back to the default if
  // they are not provided


  var sockHost = query.sockHost || hostname;
  var sockPath = query.sockPath || '/sockjs-node';
  var sockPort = query.sockPort || port;

  if (sockPort === 'location') {
    sockPort = loc.port;
  }

  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}

module.exports = createSocketUrl;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!*******************************************************************!*\
  !*** (webpack)-dev-server/client/utils/getCurrentScriptSource.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.


  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];

  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.


  throw new Error('[WDS] Failed to get current script source.');
}

module.exports = getCurrentScriptSource;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!************************************************!*\
  !*** (webpack)-dev-server/client/utils/log.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var log = __webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');

var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);

function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;

    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}

module.exports = {
  log: log,
  setLogLevel: setLogLevel
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!******************************************************!*\
  !*** (webpack)-dev-server/client/utils/reloadApp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global WorkerGlobalScope self */

var _require = __webpack_require__(/*! ./log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log;

function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
      hot = _ref.hot,
      liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
      currentHash = _ref2.currentHash;

  if (isUnloading || !hotReload) {
    return;
  }

  if (hot) {
    log.info('[WDS] App hot update...');

    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/webpack/hot/emitter.js");

    hotEmitter.emit('webpackHotUpdate', currentHash);

    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

      var intervalId = self.setInterval(function () {
        if (rootWindow.location.protocol !== 'about:') {
          // reload immediately if protocol is valid
          applyReload(rootWindow, intervalId);
        } else {
          rootWindow = rootWindow.parent;

          if (rootWindow.parent === rootWindow) {
            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
            applyReload(rootWindow, intervalId);
          }
        }
      });
    }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

module.exports = reloadApp;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!********************************************************!*\
  !*** (webpack)-dev-server/client/utils/sendMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.

function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}

module.exports = sendMsg;

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/ansi-regex/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/strip-ansi/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();

module.exports = function (str) {
  return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");

module.exports = new EventEmitter();

/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!****************************!*\
  !*** (webpack)/hot/log.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
  var shouldLog = logLevel === "info" && level === "info" || ["info", "warning"].indexOf(logLevel) >= 0 && level === "warning" || ["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error";
  return shouldLog;
}

function logGroup(logFn) {
  return function (level, msg) {
    if (shouldLog(level)) {
      logFn(msg);
    }
  };
}

module.exports = function (level, msg) {
  if (shouldLog(level)) {
    if (level === "info") {
      console.log(msg);
    } else if (level === "warning") {
      console.warn(msg);
    } else if (level === "error") {
      console.error(msg);
    }
  }
};
/* eslint-disable node/no-unsupported-features/node-builtins */


var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);
module.exports.groupCollapsed = logGroup(groupCollapsed);
module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function (level) {
  logLevel = level;
};

module.exports.formatError = function (err) {
  var message = err.message;
  var stack = err.stack;

  if (!stack) {
    return message;
  } else if (stack.indexOf(message) < 0) {
    return message + "\n" + stack;
  } else {
    return stack;
  }
};

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: combinators, Logger, Debuggable, formatDebuggable, multi, Snippet, ok, err, fatalError, token, wrap, WS, STRING, NUMBER, SEXP, ID, EQ, NAMED, SIMPLE_PATH, SPACED_TOKENS, BLOCK, INTERPOLATE, DOT, ARG, EXPRESSION, tokens, ast, span, range, isSpan, getSpan, slice, r, a, utils, serializeRoot, serializeNode, LoggingType, CONTENT, TOP_LEVEL, read, parse, trunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _read_combinators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./read/combinators */ "./src/read/combinators.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "combinators", function() { return _read_combinators__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _read_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./read/logger */ "./src/read/logger.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return _read_logger__WEBPACK_IMPORTED_MODULE_1__["Logger"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Debuggable", function() { return _read_logger__WEBPACK_IMPORTED_MODULE_1__["Debuggable"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatDebuggable", function() { return _read_logger__WEBPACK_IMPORTED_MODULE_1__["formatDebuggable"]; });

/* harmony import */ var _read_multi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./read/multi */ "./src/read/multi.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "multi", function() { return _read_multi__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./snippet */ "./src/snippet.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Snippet", function() { return _snippet__WEBPACK_IMPORTED_MODULE_3__["Snippet"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ok", function() { return _snippet__WEBPACK_IMPORTED_MODULE_3__["ok"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "err", function() { return _snippet__WEBPACK_IMPORTED_MODULE_3__["err"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fatalError", function() { return _snippet__WEBPACK_IMPORTED_MODULE_3__["fatalError"]; });

/* harmony import */ var _read_hbs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./read/hbs */ "./src/read/hbs.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "token", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["token"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["wrap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WS", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["WS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "STRING", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["STRING"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NUMBER", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["NUMBER"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SEXP", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["SEXP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ID", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["ID"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EQ", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["EQ"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NAMED", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["NAMED"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SIMPLE_PATH", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["SIMPLE_PATH"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SPACED_TOKENS", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["SPACED_TOKENS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BLOCK", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["BLOCK"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "INTERPOLATE", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DOT", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["DOT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ARG", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["ARG"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EXPRESSION", function() { return _read_hbs__WEBPACK_IMPORTED_MODULE_4__["EXPRESSION"]; });

/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./read/tokens */ "./src/read/tokens.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "tokens", function() { return _read_tokens__WEBPACK_IMPORTED_MODULE_5__; });
/* harmony import */ var _parser_nodes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser/nodes */ "./src/parser/nodes.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "ast", function() { return _parser_nodes__WEBPACK_IMPORTED_MODULE_6__; });
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./span */ "./src/span.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "span", function() { return _span__WEBPACK_IMPORTED_MODULE_7__["span"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _span__WEBPACK_IMPORTED_MODULE_7__["range"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSpan", function() { return _span__WEBPACK_IMPORTED_MODULE_7__["isSpan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSpan", function() { return _span__WEBPACK_IMPORTED_MODULE_7__["getSpan"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return _span__WEBPACK_IMPORTED_MODULE_7__["slice"]; });

/* harmony import */ var _read_token_builder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./read/token-builder */ "./src/read/token-builder.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "r", function() { return _read_token_builder__WEBPACK_IMPORTED_MODULE_8__; });
/* harmony import */ var _parser_ast_builder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parser/ast-builder */ "./src/parser/ast-builder.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _parser_ast_builder__WEBPACK_IMPORTED_MODULE_9__; });
/* harmony import */ var _read_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./read/utils */ "./src/read/utils.ts");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "utils", function() { return _read_utils__WEBPACK_IMPORTED_MODULE_10__; });
/* harmony import */ var _read_serialize__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./read/serialize */ "./src/read/serialize.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeRoot", function() { return _read_serialize__WEBPACK_IMPORTED_MODULE_11__["serializeRoot"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeNode", function() { return _read_serialize__WEBPACK_IMPORTED_MODULE_11__["serializeNode"]; });

/* harmony import */ var _read_read__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./read/read */ "./src/read/read.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LoggingType", function() { return _read_read__WEBPACK_IMPORTED_MODULE_12__["LoggingType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CONTENT", function() { return _read_read__WEBPACK_IMPORTED_MODULE_12__["CONTENT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TOP_LEVEL", function() { return _read_read__WEBPACK_IMPORTED_MODULE_12__["TOP_LEVEL"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "read", function() { return _read_read__WEBPACK_IMPORTED_MODULE_12__["read"]; });

/* harmony import */ var _parser_parse__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parser/parse */ "./src/parser/parse.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _parser_parse__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _read_debug__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./read/debug */ "./src/read/debug.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trunc", function() { return _read_debug__WEBPACK_IMPORTED_MODULE_14__["trunc"]; });
























/***/ }),

/***/ "./src/parser/ast-builder.ts":
/*!***********************************!*\
  !*** ./src/parser/ast-builder.ts ***!
  \***********************************/
/*! exports provided: default, text, block, interpolate, call, ref, path, member, str, int, decimal, root */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AstBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "call", function() { return call; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ref", function() { return ref; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "path", function() { return path; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "member", function() { return member; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int", function() { return int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decimal", function() { return decimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _read_token_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../read/token-builder */ "./src/read/token-builder.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../span */ "./src/span.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class AstBuilder {
  constructor(pos = 0) {
    _defineProperty(this, "output", "");

    _defineProperty(this, "tokenBuilder", new _read_token_builder__WEBPACK_IMPORTED_MODULE_1__["TokenBuilder"]());

    this.pos = pos;
  }

  consume(chars) {
    this.output += chars;
    let start = this.pos;
    this.pos += chars.length;
    return {
      start,
      end: this.pos
    };
  }

  token(token) {
    this.tokenBuilder.pos = this.pos;
    this.tokenBuilder.updateOutput(this.output);
    let built = token(this.tokenBuilder);
    this.pos = this.tokenBuilder.pos;
    this.output = this.tokenBuilder.source;
    return built;
  }

  get source() {
    return this.output;
  }

}
function text(chars) {
  return builder => _nodes__WEBPACK_IMPORTED_MODULE_0__["text"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["text"](chars)));
}

function normalizeExpr(expr) {
  if (typeof expr === "string") {
    return ref(expr);
  } else {
    return expr;
  }
}

function normalizeCallPart(part) {
  if (typeof part === "string" && part.match(/^\s+$/)) {
    return {
      type: "ws",
      value: part
    };
  } else {
    return {
      type: "expr",
      value: normalizeExpr(part)
    };
  }
}

function extractCallParts(...parts) {
  let head;
  let beforeWS;
  let afterWS;
  let positional;
  let named;

  for (const part of parts) {
    if (Array.isArray(part)) {
      if (positional) {
        throw new Error("ASSERT: only pass one array (positional) to interpolate");
      } else {
        positional = curriedPositional(...part);
      }
    } else if (typeof part === "object") {
      if (named) {
        throw new Error("ASSERT: only pass one object (named) to interpolate");
      } else {
        named = curriedNamed(part);
      }
    } else if (typeof part === "function") {
      if (head) {
        throw new Error("ASSERT: only pass one head (expression or string) to interpolate");
      } else {
        head = part;
      }
    } else if (part.match(/^\s*$/)) {
      if (beforeWS && afterWS) {
        throw new Error("ASSERT: pass at most two whitespace to interpolate");
      } else if (beforeWS) {
        afterWS = _read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](part);
      } else {
        beforeWS = _read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](part);
      }
    } else {
      if (head) {
        throw new Error("ASSERT: only pass one head (expression or string) to interpolate");
      }

      head = ref(part);
    }
  }

  assert(head);
  return {
    beforeWS,
    head,
    positional,
    named,
    afterWS
  };
}

function curriedNamed(obj) {
  return builder => {
    let args = [];
    let leading = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](" "));

    for (let [key, value] of Object.entries(obj)) {
      let after = undefined;
      let name = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["id"](key));
      let expr;
      builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["eq"]);

      if (Array.isArray(value)) {
        expr = normalizeExpr(value[0])(builder);
        after = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](value[1]));
      } else {
        expr = normalizeExpr(value)(builder);
      }

      args.push(_nodes__WEBPACK_IMPORTED_MODULE_0__["namedArg"]({
        name,
        value: expr
      }, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(name, expr),
        after
      }));
    }

    return _nodes__WEBPACK_IMPORTED_MODULE_0__["namedArgs"](args, {
      span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(...args),
      before: leading
    });
  };
}

function curriedPositional(...parts) {
  return builder => {
    let args = [];
    let [first, ...rest] = parts;
    let currentWS = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](first));
    let start = builder.pos;

    for (let part of rest) {
      let result = normalizeCallPart(part);

      switch (result.type) {
        case "expr":
          {
            let node = normalizeExpr(part)(builder);

            if (currentWS) {
              node.before = currentWS;
              currentWS = undefined;
            }

            args.push(node);
            break;
          }

        case "ws":
          currentWS = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["ws"](result.value));
      }
    }

    let end = builder.pos;
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["positional"](args, {
      span: {
        start,
        end
      },
      ...(currentWS ? {
        after: currentWS
      } : {})
    });
  };
}

function block(parts) {
  let {
    head
  } = extractCallParts(...parts);
  let openBlock = callBody(...parts);
  return builder => {
    let openStart = builder.consume("{{#");
    let open = openBlock(builder);
    let openEnd = builder.consume("}}");
    let closeStart = builder.consume("{{/");
    let closeHead = head(builder);
    let closeEnd = builder.consume("}}");
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["block"]({
      open: _nodes__WEBPACK_IMPORTED_MODULE_0__["openBlock"]({ ...open
      }, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(openStart, openEnd)
      }),
      body: [],
      close: _nodes__WEBPACK_IMPORTED_MODULE_0__["closeBlock"](closeHead.span, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(closeStart, closeEnd)
      })
    }, {
      span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(openStart, closeEnd)
    });
  };
}
function interpolate(...parts) {
  return builder => {
    let start = builder.pos;
    builder.consume("{{");
    let body = callBody(...parts)(builder);
    builder.consume("}}");
    let end = builder.pos;
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["interpolate"](body, {
      span: {
        start,
        end
      }
    });
  };
}

function assert(input, cb) {
  let success = typeof cb === "function" ? cb(input) : !!input;

  if (success === false) {
    throw new Error("ASSERT");
  }
}

function call(...parts) {
  return builder => {
    let start = builder.pos;
    builder.consume("(");
    let body = callBody(...parts)(builder);
    builder.consume(")");
    let end = builder.pos;
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["call"](body, {
      span: {
        start,
        end
      }
    });
  };
}

function callBody(...parts) {
  return builder => {
    let {
      beforeWS,
      afterWS,
      head,
      positional,
      named
    } = extractCallParts(...parts);
    let before = beforeWS && builder.token(beforeWS);
    let headNode = head(builder);
    let positionalNodes = positional && positional(builder);
    let namedNode = named && named(builder);
    let after = afterWS && builder.token(afterWS);
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["callBody"]({
      head: headNode,
      positional: positionalNodes,
      named: namedNode
    }, {
      span: Object(_span__WEBPACK_IMPORTED_MODULE_2__["range"])(headNode, positionalNodes, namedNode),
      before,
      after
    });
  };
}
/**
 * This function turns a string into the appropriate token typ:
 *
 * - `this` -> ThisReferenceToken
 * - `@` ID -> ArgReferenceToken
 * - ID -> VarReferenceToken
 */


function ref(name) {
  return builder => {
    if (name === "this") {
      return _nodes__WEBPACK_IMPORTED_MODULE_0__["thisReference"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["id"]("this")));
    } else if (name.startsWith("@")) {
      return _nodes__WEBPACK_IMPORTED_MODULE_0__["argReference"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["arg"](name)));
    } else {
      return _nodes__WEBPACK_IMPORTED_MODULE_0__["varReference"](builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["id"](name)));
    }
  };
}
function path(curriedHead, ...tailParts) {
  return builder => {
    let start = builder.pos;
    let head = normalizeExpr(curriedHead)(builder);
    let splitTail = tailParts.length === 1 ? tailParts[0].split(".") : tailParts;
    let tail = splitTail.map(part => {
      return member(part)(builder);
    });
    let end = builder.pos;
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["path"]({
      head,
      tail
    }, {
      start,
      end
    });
  };
}
function member(part) {
  return builder => {
    let dot = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["dot"]);
    let span = builder.consume(part);
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["member"](dot, span);
  };
}
/**
 *
 * @param body the outer contents of the string (like `"hello"`)
 */

function str(body) {
  return builder => {
    let tok = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["str"](body));
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["string"](tok, builder.source);
  };
}
function int(body) {
  return builder => {
    let tok = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["int"](body));
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["number"](tok, builder.source);
  };
}
function decimal(body) {
  return builder => {
    let tok = builder.token(_read_token_builder__WEBPACK_IMPORTED_MODULE_1__["decimal"](body));
    return _nodes__WEBPACK_IMPORTED_MODULE_0__["number"](tok, builder.source);
  };
}
function root(...children) {
  let builder = new AstBuilder();
  let start = builder.pos;
  let out = children.map(child => child(builder));
  let end = builder.pos;
  return {
    root: _nodes__WEBPACK_IMPORTED_MODULE_0__["root"](out, Object(_span__WEBPACK_IMPORTED_MODULE_2__["span"])(start, end)),
    source: builder.source
  };
}

/***/ }),

/***/ "./src/parser/debug.ts":
/*!*****************************!*\
  !*** ./src/parser/debug.ts ***!
  \*****************************/
/*! exports provided: ParseTracer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParseTracer", function() { return ParseTracer; });
/* harmony import */ var _read_debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../read/debug */ "./src/read/debug.ts");
/* harmony import */ var _read_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../read/utils */ "./src/read/utils.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nodes */ "./src/parser/nodes.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class ParseTracer {
  constructor(token) {
    _defineProperty(this, "stack", void 0);

    this.stack = [{
      shape: {
        desc: "root"
      },
      preToken: token,
      postToken: undefined,
      result: null,
      children: []
    }];
  }

  print(tokens, source) {
    let trace = this.trace;
    new PrintTracer(trace, tokens, source).print();
  }

  get trace() {
    if (this.stack.length !== 1) {
      throw new Error("ASSERT: can only get trace when the stack is empty");
    }

    return this.stack[0];
  }

  begin() {
    let trace = {
      shape: {
        desc: "begin"
      },
      preToken: undefined,
      postToken: undefined,
      result: null,
      children: []
    };
    let last = this.last;

    if (last) {
      if (last.children) {
        last.children.push(trace);
      } else {
        throw new Error("ASSERT: Can't add children to leaf: ".concat(last.shape.desc));
      }
    }

    this.stack.push(trace);
  }

  commit() {
    let last = Object(_read_utils__WEBPACK_IMPORTED_MODULE_1__["unwrap"])(this.stack.pop());

    if (last.shape.desc !== "begin") {
      throw new Error("ASSERT: unbalanced stack: stack=".concat(last.shape.desc, ", expected=begin"));
    }
  }

  rollback() {
    let last = Object(_read_utils__WEBPACK_IMPORTED_MODULE_1__["unwrap"])(this.stack.pop());

    if (last.shape.desc !== "begin") {
      throw new Error("ASSERT: unbalanced stack: stack=".concat(last.shape.desc, ", expected=begin"));
    }

    last.failure = "rollback";
  }

  preInvoke(shape, token) {
    let trace = {
      shape,
      preToken: token,
      postToken: undefined,
      result: null,
      children: "isLeaf" in shape && shape.isLeaf === true ? undefined : []
    };
    let last = this.last;

    if (last) {
      if (last.children) {
        last.children.push(trace);
      } else {
        throw new Error("ASSERT: Can't add children to leaf: ".concat(last.shape.desc));
      }
    }

    this.stack.push(trace);
  }

  postInvoke(shape, result, token) {
    let last = Object(_read_utils__WEBPACK_IMPORTED_MODULE_1__["unwrap"])(this.stack.pop());

    if (last.shape.desc !== shape.desc) {
      throw new Error("ASSERT: unbalanced stack: stack=".concat(last.shape.desc, ", expected=").concat(shape.desc));
    }

    last.result = result;
    last.postToken = token;
  }

  postInvokeFailure(shape, reason) {
    let last = Object(_read_utils__WEBPACK_IMPORTED_MODULE_1__["unwrap"])(this.stack.pop());

    if (last.shape.desc !== shape.desc) {
      throw new Error("ASSERT: unbalanced stack: stack=".concat(last.shape.desc, ", expected=").concat(shape.desc));
    }

    last.result = undefined;
    last.postToken = undefined;
    last.failure = reason;
  }

  get last() {
    if (this.stack.length === 0) {
      return null;
    } else {
      return this.stack[this.stack.length - 1];
    }
  }

}
const SUCCESS = "color: green";
const ERROR = "color: red";
const TRANSACTION_SUCCESS = "background-color: #6a6; color: white; font-weight: bold";
const TRANSACTION_FAILURE = "background-color: #a66; color: white; font-weight: bold";
const NORMAL = "color: #333";
const DIM = "color: #999";

class PrintTracer {
  constructor(trace, tokens, source, indent = 0) {
    this.trace = trace;
    this.tokens = tokens;
    this.source = source;
    this.indent = indent;
  }

  print() {
    if (this.trace.shape.desc === undefined) {
      debugger;
    }

    console.log("%c| ".concat(this.preSlice, " | ").concat(Object(_read_debug__WEBPACK_IMPORTED_MODULE_0__["truncString"])(this.details, 60), " | ").concat(this.postSlice), NORMAL, NORMAL, this.descStyle, DIM);

    if (this.trace.children) {
      for (let child of this.trace.children) {
        if (child.failure === "ignored") {
          continue;
        }

        new PrintTracer(child, this.tokens, this.source, this.indent + 1).print();
      }
    }
  }

  get details() {
    let retval = this.trace.shape.desc === "begin" ? "" : " \uD83E\uDC2A ".concat(this.formattedResult);
    return "%c".concat(" ".repeat(this.indent), "%c").concat(this.trace.shape.desc, "%c").concat(retval);
  }

  get preSlice() {
    return this.slice(this.trace.preToken);
  }

  get postSlice() {
    return this.slice(this.trace.postToken, 25);
  }

  slice(token, length = 13) {
    if (token) {
      let span = token.span;
      return Object(_read_debug__WEBPACK_IMPORTED_MODULE_0__["truncString"])(Object(_span__WEBPACK_IMPORTED_MODULE_2__["slice"])({
        start: span.start,
        end: this.source.length
      }, this.source), length);
    } else {
      return Object(_read_debug__WEBPACK_IMPORTED_MODULE_0__["truncString"])("<eof>");
    }
  }

  get formattedResult() {
    let result = this.trace.result;

    if (isResult(result)) {
      if (result.kind === "err") {
        return "ERR reason=".concat(result.reason);
      } else {
        if (isNodeish(result.value)) {
          return Object(_nodes__WEBPACK_IMPORTED_MODULE_3__["formatAstNode"])(result.value);
        } else {
          return this.trace.result + "";
        }
      }
    } else if (isNodeish(result)) {
      return Object(_nodes__WEBPACK_IMPORTED_MODULE_3__["formatAstNode"])(result);
    } else {
      return this.trace.result + "";
    }
  }

  get descStyle() {
    let result = this.trace.result;

    if (isResult(result)) {
      if (result.kind === "ok") {
        return SUCCESS;
      } else {
        return ERROR;
      }
    } else if (this.trace.failure === "rollback") {
      return TRANSACTION_FAILURE;
    } else if (this.trace.shape.desc === "begin") {
      return TRANSACTION_SUCCESS;
    } else {
      return SUCCESS;
    }
  }

}

function isNodeish(item) {
  if (typeof item === "object" && item !== null) {
    return "type" in item && typeof item.type === "string" && typeof item.span === "object" && item.span !== null && typeof item.span.start === "number" && typeof item.span.end === "number";
  } else {
    return false;
  }
}

function isResult(item) {
  if (typeof item === "object" && item !== null) {
    return "kind" in item && item.kind === "ok" || item.kind === "err";
  } else {
    return false;
  }
}

/***/ }),

/***/ "./src/parser/nodes.ts":
/*!*****************************!*\
  !*** ./src/parser/nodes.ts ***!
  \*****************************/
/*! exports provided: AstNodeType, root, text, interpolate, blockParams, openBlock, closeBlock, block, string, number, thisReference, varReference, argReference, call, path, member, callBody, namedArg, namedArgs, positional, formatAstNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AstNodeType", function() { return AstNodeType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatAstNode", function() { return formatAstNode; });
/* harmony import */ var _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodes/top-level */ "./src/parser/nodes/top-level.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "root", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["root"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "text", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["text"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["interpolate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "blockParams", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["blockParams"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "openBlock", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["openBlock"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "closeBlock", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["closeBlock"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "block", function() { return _nodes_top_level__WEBPACK_IMPORTED_MODULE_0__["block"]; });

/* harmony import */ var _nodes_expression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nodes/expression */ "./src/parser/nodes/expression.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "string", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["string"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "number", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["number"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "thisReference", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["thisReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "varReference", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["varReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "argReference", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["argReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "call", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["call"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "path", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["path"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "member", function() { return _nodes_expression__WEBPACK_IMPORTED_MODULE_1__["member"]; });

/* harmony import */ var _nodes_call__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nodes/call */ "./src/parser/nodes/call.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "callBody", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["callBody"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "namedArg", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["namedArg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "namedArgs", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["namedArgs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "positional", function() { return _nodes_call__WEBPACK_IMPORTED_MODULE_2__["positional"]; });

let AstNodeType;

(function (AstNodeType) {
  AstNodeType["Root"] = "Root";
  AstNodeType["Text"] = "Text";
  AstNodeType["Interpolate"] = "Interpolate";
  AstNodeType["NamedArgument"] = "NamedArgument";
  AstNodeType["NamedArguments"] = "NamedArguments";
  AstNodeType["PositionalArguments"] = "PositionalArguments";
  AstNodeType["Member"] = "Member";
  AstNodeType["CallBody"] = "CallBody";
  AstNodeType["OpenBlock"] = "OpenBlock";
  AstNodeType["BlockParams"] = "BlockParams";
  AstNodeType["CloseBlock"] = "CloseBlock";
  AstNodeType["Block"] = "Block";
  AstNodeType["Call"] = "Call";
  AstNodeType["Path"] = "Path";
  AstNodeType["String"] = "String";
  AstNodeType["Number"] = "Number";
  AstNodeType["ThisReference"] = "ThisReference";
  AstNodeType["VarReference"] = "VarReference";
  AstNodeType["ArgReference"] = "ArgReference";
})(AstNodeType || (AstNodeType = {}));




function formatAstNode(node) {
  return "<".concat(node.type, ":").concat(node.span.start, "..").concat(node.span.end, ">");
}

/***/ }),

/***/ "./src/parser/nodes/call.ts":
/*!**********************************!*\
  !*** ./src/parser/nodes/call.ts ***!
  \**********************************/
/*! exports provided: callBody, namedArg, namedArgs, positional */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "callBody", function() { return callBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "namedArg", function() { return namedArg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "namedArgs", function() { return namedArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "positional", function() { return positional; });
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nodes */ "./src/parser/nodes.ts");

function callBody({
  head,
  positional = null,
  named = null
}, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].CallBody,
    ...base,
    head,
    positional,
    named
  };
}
function namedArg({
  name,
  value
}, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].NamedArgument,
    ...base,
    name: name.span,
    value
  };
}
function namedArgs(args, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].NamedArguments,
    ...base,
    args
  };
}
function positional(args, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].PositionalArguments,
    ...base,
    args
  };
}

/***/ }),

/***/ "./src/parser/nodes/expression.ts":
/*!****************************************!*\
  !*** ./src/parser/nodes/expression.ts ***!
  \****************************************/
/*! exports provided: string, number, thisReference, varReference, argReference, call, path, member */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "string", function() { return string; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "number", function() { return number; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "thisReference", function() { return thisReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "varReference", function() { return varReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argReference", function() { return argReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "call", function() { return call; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "path", function() { return path; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "member", function() { return member; });
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../span */ "./src/span.ts");
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../read/tokens */ "./src/read/tokens.ts");



function string(token, source) {
  let processed;
  let inner = Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.data, source);

  switch (token.quote) {
    case _read_tokens__WEBPACK_IMPORTED_MODULE_2__["QuoteType"].Double:
      processed = inner.replace("\\\"", "\"");
      break;

    case _read_tokens__WEBPACK_IMPORTED_MODULE_2__["QuoteType"].Single:
      processed = inner.replace("\\'", "'");
      break;
  }

  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].String,
    span: token.span,
    string: processed,
    token
  };
}
function number(token, source) {
  let wholeString = Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.head, source);
  let decimalString = token.tail ? Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.tail, source) : undefined;
  let wholeNumber = decimalString ? parseFloat("".concat(wholeString, ".").concat(decimalString)) : parseInt(wholeString, 10);
  let num = token.negative ? wholeNumber * -1 : wholeNumber;
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Number,
    span: token.span,
    number: num,
    token
  };
}
function thisReference(token) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].ThisReference,
    span: token.span
  };
}
function varReference(token) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].VarReference,
    span: token.span
  };
}
function argReference(token) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].ArgReference,
    span: token.span,
    token
  };
}
function call(body, {
  span,
  before,
  after
}) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Call,
    span,
    before,
    after,
    body
  };
}
function path({
  head,
  tail
}, span) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Path,
    span,
    head,
    tail
  };
} // TODO: Support other kinds of tails

function member(dot, span) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Member,
    dot,
    span
  };
}

/***/ }),

/***/ "./src/parser/nodes/top-level.ts":
/*!***************************************!*\
  !*** ./src/parser/nodes/top-level.ts ***!
  \***************************************/
/*! exports provided: root, text, interpolate, blockParams, openBlock, closeBlock, block */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blockParams", function() { return blockParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "openBlock", function() { return openBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeBlock", function() { return closeBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../nodes */ "./src/parser/nodes.ts");

function root(children, span) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Root,
    span,
    children
  };
}
function text(token) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Text,
    span: token.span
  };
}
function interpolate(body, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Interpolate,
    ...base,
    body
  };
}
function blockParams(params, span) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].BlockParams,
    params,
    span
  };
}
function openBlock({
  head,
  positional = null,
  named = null,
  params = null
}, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].OpenBlock,
    ...base,
    head,
    positional,
    named,
    params
  };
}
function closeBlock(name, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].CloseBlock,
    ...base,
    name
  };
}
function block({
  open,
  body,
  close
}, base) {
  return {
    type: _nodes__WEBPACK_IMPORTED_MODULE_0__["AstNodeType"].Block,
    ...base,
    open,
    body,
    close
  };
}

/***/ }),

/***/ "./src/parser/parse.ts":
/*!*****************************!*\
  !*** ./src/parser/parse.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return parse; });
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shapes_block_body__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shapes/block-body */ "./src/parser/shapes/block-body.ts");
/* harmony import */ var _tokens_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokens-iterator */ "./src/parser/tokens-iterator.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shape */ "./src/parser/shape.ts");
/* harmony import */ var _read_read__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../read/read */ "./src/read/read.ts");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./debug */ "./src/parser/debug.ts");






function parse({
  input,
  source,
  logging
}) {
  let tracer = new _debug__WEBPACK_IMPORTED_MODULE_5__["ParseTracer"](input);
  let iterator = new _tokens_iterator__WEBPACK_IMPORTED_MODULE_2__["default"](input.children, {
    source,
    tracer
  });

  try {
    let topLevel = new _shapes_block_body__WEBPACK_IMPORTED_MODULE_1__["default"]();
    let root = iterator.expandInfallible(topLevel);
    let maybeEOF = iterator.peek("eof");

    if (maybeEOF.isEOF) {
      maybeEOF.commit();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_3__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_0__["root"](root, {
        start: 0,
        end: source.length
      }));
    } else {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_3__["err"])(maybeEOF.reject(), "incomplete");
    }
  } finally {
    if (logging === _read_read__WEBPACK_IMPORTED_MODULE_4__["LoggingType"].Print) {
      tracer.print(iterator[_tokens_iterator__WEBPACK_IMPORTED_MODULE_2__["TOKENS"]], iterator.source);
    }
  }
}

/***/ }),

/***/ "./src/parser/shape.ts":
/*!*****************************!*\
  !*** ./src/parser/shape.ts ***!
  \*****************************/
/*! exports provided: EXPAND, RESULT_KIND, ok, err, fatalError, isResult, isOk, isErr, mapResult, AbstractSequence, OkSequence, ErrSequence, seq */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXPAND", function() { return EXPAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESULT_KIND", function() { return RESULT_KIND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ok", function() { return ok; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "err", function() { return err; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fatalError", function() { return fatalError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isResult", function() { return isResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOk", function() { return isOk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isErr", function() { return isErr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapResult", function() { return mapResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractSequence", function() { return AbstractSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OkSequence", function() { return OkSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrSequence", function() { return ErrSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seq", function() { return seq; });
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const EXPAND = Symbol("EXPAND");
const RESULT_KIND = Symbol("RESULT_KIND");
function ok(value) {
  return {
    [RESULT_KIND]: "ok",
    kind: "ok",
    value
  };
}
function err(token, reason) {
  return {
    [RESULT_KIND]: "err",
    kind: "err",
    token,
    reason,
    fatal: false
  };
}
function fatalError(token, reason) {
  return {
    [RESULT_KIND]: "err",
    kind: "err",
    token,
    reason,
    fatal: true
  };
}
function isResult(input) {
  if (typeof input === "object" && input !== null) {
    return RESULT_KIND in input;
  } else {
    return false;
  }
}
function isOk(input) {
  return input[RESULT_KIND] === "ok";
}
function isErr(input) {
  return input[RESULT_KIND] === "err";
}
function mapResult(result, callback) {
  if (result.kind === "err") {
    return result;
  }

  return callback(result.value);
}
class AbstractSequence {
  constructor(inner) {
    this.inner = inner;
  }

}
class OkSequence extends AbstractSequence {
  constructor(inner) {
    super(inner);

    _defineProperty(this, "kind", "ok");

    _defineProperty(this, RESULT_KIND, "ok");

    _defineProperty(this, "value", void 0);

    this.value = inner.value;
  }

  mapResult(callback) {
    let result = callback(this);
    return seq(result);
  }

  map(callback) {
    return new OkSequence(ok(callback(this.value)));
  }

  andThen(callback) {
    return seq(callback(this.value));
  }

}
class ErrSequence extends AbstractSequence {
  constructor(inner) {
    super(inner);

    _defineProperty(this, "kind", "err");

    _defineProperty(this, RESULT_KIND, "err");

    _defineProperty(this, "token", void 0);

    _defineProperty(this, "reason", void 0);

    _defineProperty(this, "fatal", void 0);

    this.token = inner.token;
    this.reason = inner.reason;
    this.fatal = inner.fatal;
  }

  mapResult(callback) {
    let result = callback(this);
    return seq(result);
  }

  map(_callback) {
    return this;
  }

  andThen(_callback) {
    return this;
  }

}
function seq(input) {
  if (input[RESULT_KIND] === "ok") {
    return new OkSequence(input);
  } else {
    return new ErrSequence(input);
  }
}

/***/ }),

/***/ "./src/parser/shapes/abstract.ts":
/*!***************************************!*\
  !*** ./src/parser/shapes/abstract.ts ***!
  \***************************************/
/*! exports provided: AbstractShape, AbstractInfallibleShape, or */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractShape", function() { return AbstractShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractInfallibleShape", function() { return AbstractInfallibleShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "or", function() { return or; });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


class AbstractShape {
  constructor() {
    _defineProperty(this, "desc", void 0);
  }

}
class AbstractInfallibleShape {}
function or(left, right) {
  return {
    desc: "".concat(left.desc, " OR ").concat(right.desc),

    [_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](iterator) {
      let leftResult = iterator.expand(left);

      if (leftResult.kind === "ok") {
        return leftResult;
      }

      return iterator.expand(right);
    }

  };
}

/***/ }),

/***/ "./src/parser/shapes/block-body.ts":
/*!*****************************************!*\
  !*** ./src/parser/shapes/block-body.ts ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BlockBodyShape; });
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _top_level__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./top-level */ "./src/parser/shapes/top-level.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




class BlockBodyShape extends _abstract__WEBPACK_IMPORTED_MODULE_0__["AbstractInfallibleShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "BlockBody");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    let out = [];

    while (true) {
      let next = iterator.expand(_top_level__WEBPACK_IMPORTED_MODULE_1__["TopLevelShape"]);

      if (next.kind === "err") {
        break;
      }

      out.push(next.value);
    }

    return out;
  }

}

/***/ }),

/***/ "./src/parser/shapes/expression.ts":
/*!*****************************************!*\
  !*** ./src/parser/shapes/expression.ts ***!
  \*****************************************/
/*! exports provided: ExpressionShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpressionShape", function() { return ExpressionShape; });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _expression_number__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./expression/number */ "./src/parser/shapes/expression/number.ts");
/* harmony import */ var _expression_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./expression/path */ "./src/parser/shapes/expression/path.ts");
/* harmony import */ var _expression_sexp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./expression/sexp */ "./src/parser/shapes/expression/sexp.ts");
/* harmony import */ var _expression_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./expression/string */ "./src/parser/shapes/expression/string.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class ExpressionShape extends _abstract__WEBPACK_IMPORTED_MODULE_1__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Expression");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](iterator) {
    let shapes = [new _expression_sexp__WEBPACK_IMPORTED_MODULE_4__["SexpShape"](), new _expression_string__WEBPACK_IMPORTED_MODULE_5__["StringShape"](), new _expression_number__WEBPACK_IMPORTED_MODULE_2__["NumberShape"](), new _expression_path__WEBPACK_IMPORTED_MODULE_3__["PathShape"]()];

    for (let shape of shapes) {
      let expand = iterator.expand(shape);

      if (expand.kind === "ok") {
        return expand;
      }
    }

    return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(iterator.peek("expression").reject(), "expression");
  }

}

/***/ }),

/***/ "./src/parser/shapes/expression/args-ref.ts":
/*!**************************************************!*\
  !*** ./src/parser/shapes/expression/args-ref.ts ***!
  \**************************************************/
/*! exports provided: ArgRefShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArgRefShape", function() { return ArgRefShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class ArgRefShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "ArgRef");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["seq"])(iterator.consume("arg ref", token => {
      if (token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Argument) {
        return _nodes__WEBPACK_IMPORTED_MODULE_1__["argReference"](token);
      }
    }));
  }

}

/***/ }),

/***/ "./src/parser/shapes/expression/number.ts":
/*!************************************************!*\
  !*** ./src/parser/shapes/expression/number.ts ***!
  \************************************************/
/*! exports provided: NumberShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberShape", function() { return NumberShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class NumberShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Number");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    return iterator.consume("number", token => {
      if (token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Number) {
        return _nodes__WEBPACK_IMPORTED_MODULE_1__["number"](token, iterator.source);
      }
    });
  }

}

/***/ }),

/***/ "./src/parser/shapes/expression/path.ts":
/*!**********************************************!*\
  !*** ./src/parser/shapes/expression/path.ts ***!
  \**********************************************/
/*! exports provided: PathShape, PathHeadShape, PathMemberShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathShape", function() { return PathShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathHeadShape", function() { return PathHeadShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathMemberShape", function() { return PathMemberShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _var_ref__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./var-ref */ "./src/parser/shapes/expression/var-ref.ts");
/* harmony import */ var _args_ref__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./args-ref */ "./src/parser/shapes/expression/args-ref.ts");
/* harmony import */ var _sexp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sexp */ "./src/parser/shapes/expression/sexp.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









class PathShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "ArgRef");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    let eof = iterator.assertNotEOF();

    if (eof.kind === "err") {
      return eof;
    }

    let head = iterator.expand(PathHeadShape);

    if (head.kind === "err") {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(iterator.peek("path head").reject(), "mismatch");
    }

    let tail = [];

    while (true) {
      let member = iterator.expand(PathMemberShape);

      if (member.kind === "err") {
        break;
      } else {
        tail.push(member.value);
      }
    }

    if (tail.length === 0) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["ok"])(head.value);
    } else {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_1__["path"]({
        head: head.value,
        tail
      }, Object(_span__WEBPACK_IMPORTED_MODULE_7__["range"])(head.value, ...tail)));
    }
  }

}
class PathHeadShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Expression");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    let shapes = [new _sexp__WEBPACK_IMPORTED_MODULE_6__["SexpShape"](), new _args_ref__WEBPACK_IMPORTED_MODULE_5__["ArgRefShape"](), new _var_ref__WEBPACK_IMPORTED_MODULE_4__["VarRefShape"]()];

    for (let shape of shapes) {
      let expand = iterator.expand(shape);

      if (expand.kind === "ok") {
        return expand;
      }
    }

    return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(iterator.peek("expression").reject(), "expression");
  }

}
class PathMemberShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "PathMember");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    let eof = iterator.assertNotEOF();

    if (eof.kind === "err") {
      return eof;
    }

    let transaction = iterator.begin();

    try {
      let maybeDot = transaction.peek("dot");

      if (maybeDot.token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Dot) {
        maybeDot.commit();
      } else {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(maybeDot.reject(), "mismatch");
      }

      let maybeID = transaction.peek("id");

      if (maybeID.token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Identifier) {
        maybeID.commit();
        transaction.commit();
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_1__["member"](maybeDot.token, maybeID.token.span));
      } else {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(maybeID.reject(), "mismatch");
      }
    } finally {
      transaction.finallyRollback();
    }
  }

}

/***/ }),

/***/ "./src/parser/shapes/expression/sexp.ts":
/*!**********************************************!*\
  !*** ./src/parser/shapes/expression/sexp.ts ***!
  \**********************************************/
/*! exports provided: SexpShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SexpShape", function() { return SexpShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _internal_call_body__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/call-body */ "./src/parser/shapes/internal/call-body.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class SexpShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Sexp");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["mapResult"])(iterator.consumeParent({
      desc: "sexp",
      isLeaf: false
    }, token => {
      if (token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Sexp) {
        return iterator.processInner(token.children, iterator => iterator.expand(_internal_call_body__WEBPACK_IMPORTED_MODULE_4__["CallBodyShape"]));
      }
    }), ({
      result,
      token
    }) => Object(_shape__WEBPACK_IMPORTED_MODULE_2__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_1__["call"](result, {
      span: token.span
    }))); // if (body.kind === "err") {
    //   return body;
    // }
    // return ok(ast.call(body.value.result, { span: body.value.token.span }));
    // let eof = iterator.assertNotEOF();
    // if (eof.kind === "err") {
    //   return eof;
    // }
    // let next = iterator.peek("sexp", { isLeaf: false });
    // let token = next.token;
    // if (token.type === TokenType.Sexp) {
    //   let body = iterator.processInner(next, token.children, iterator => {
    //     return iterator.expand(CallBodyShape);
    //   });
    //   if (body.kind === "err") {
    //     return body;
    //   }
    //   next.commit();
    //   return ok(ast.call(body.value, { span: token.span }));
    // } else {
    //   return err(next.reject(), "mismatch");
    // }
  }

}

/***/ }),

/***/ "./src/parser/shapes/expression/string.ts":
/*!************************************************!*\
  !*** ./src/parser/shapes/expression/string.ts ***!
  \************************************************/
/*! exports provided: StringShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringShape", function() { return StringShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class StringShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "String");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    return iterator.consume("string", token => {
      if (token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].String) {
        return _nodes__WEBPACK_IMPORTED_MODULE_1__["string"](token, iterator.source);
      }
    });
  }

}

/***/ }),

/***/ "./src/parser/shapes/expression/var-ref.ts":
/*!*************************************************!*\
  !*** ./src/parser/shapes/expression/var-ref.ts ***!
  \*************************************************/
/*! exports provided: VarRefShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VarRefShape", function() { return VarRefShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class VarRefShape extends _abstract__WEBPACK_IMPORTED_MODULE_4__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "VarRef");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_3__["EXPAND"]](iterator) {
    let transaction = iterator.begin();

    try {
      return transaction.consume("var ref", token => {
        if (token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Identifier) {
          return token;
        }
      }).andThen(id => {
        debugger;
        return transaction.assertNotNext("eq", token => token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Eq).map(() => id);
      }).map(id => {
        transaction.commit();

        if (Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(id.span, transaction.source) === "this") {
          return _nodes__WEBPACK_IMPORTED_MODULE_2__["thisReference"](id);
        } else {
          return _nodes__WEBPACK_IMPORTED_MODULE_2__["varReference"](id);
        }
      });
    } finally {
      transaction.finallyRollback();
    }
  }

}

/***/ }),

/***/ "./src/parser/shapes/internal/any.ts":
/*!*******************************************!*\
  !*** ./src/parser/shapes/internal/any.ts ***!
  \*******************************************/
/*! exports provided: Any */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Any", function() { return Any; });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");


class Any extends _abstract__WEBPACK_IMPORTED_MODULE_1__["AbstractShape"] {
  constructor(shapes, desc) {
    super();
    this.shapes = shapes;
    this.desc = desc;
  }

  [_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](iterator) {
    let eof = iterator.assertNotEOF();

    if (eof.kind === "err") {
      return eof;
    }

    for (let shape of this.shapes) {
      let result = iterator.expand(shape);

      if (result.kind === "ok") {
        return result;
      }
    }

    return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(iterator.peek("any").reject(), "none");
  }

}

/***/ }),

/***/ "./src/parser/shapes/internal/call-body.ts":
/*!*************************************************!*\
  !*** ./src/parser/shapes/internal/call-body.ts ***!
  \*************************************************/
/*! exports provided: CallBodyShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CallBodyShape", function() { return CallBodyShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _interpolate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interpolate */ "./src/parser/shapes/interpolate.ts");
/* harmony import */ var _ws__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ws */ "./src/parser/shapes/internal/ws.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _expression__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../expression */ "./src/parser/shapes/expression.ts");
/* harmony import */ var _maybe__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./maybe */ "./src/parser/shapes/internal/maybe.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











class PositionalShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Positional");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    return iterator.assertNotEOF().map(() => {
      return iterator.many(iterator => iterator.transaction(iterator => {
        return iterator.expand(_ws__WEBPACK_IMPORTED_MODULE_5__["WS"]).andThen(before => {
          return iterator.expand(_expression__WEBPACK_IMPORTED_MODULE_7__["ExpressionShape"]).map(expr => {
            return { ...expr,
              before
            };
          });
        });
      }));
      let out = [];

      while (true) {
        let expr = iterator.transaction(iterator => {
          return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["seq"])(iterator.expand(_ws__WEBPACK_IMPORTED_MODULE_5__["WS"])).andThen(before => {
            return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["seq"])(iterator.expand(_expression__WEBPACK_IMPORTED_MODULE_7__["ExpressionShape"])).map(expr => {
              out.push({ ...expr,
                before
              });
            });
          });
        });

        if (expr.kind === "err") {
          break;
        }
      }

      return out;
    }).andThen(out => {
      if (out.length === 0) {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(iterator.peek("positional").reject(), "empty");
      } else {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_1__["positional"](out, {
          span: Object(_span__WEBPACK_IMPORTED_MODULE_6__["range"])(...out)
        }));
      }
    });
  }

}

class NamedArgumentShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "NamedArgument");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    let eof = iterator.assertNotEOF();

    if (eof.kind === "err") {
      return eof;
    }

    let transaction = iterator.begin();

    try {
      let maybeID = transaction.peek("id");

      if (maybeID.token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Identifier) {
        maybeID.commit();
      } else {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(maybeID.reject(), "mismatch");
      }

      let id = maybeID.token;
      let eq = transaction.peek("eq");

      if (eq.token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Eq) {
        eq.commit();
      } else {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(eq.reject(), "mismatch");
      }

      let expr = transaction.expand(_expression__WEBPACK_IMPORTED_MODULE_7__["ExpressionShape"]);

      if (expr.kind === "err") {
        return expr;
      }

      let trailingWS = transaction.expandInfallible(_ws__WEBPACK_IMPORTED_MODULE_5__["MAYBE_WS"]);
      transaction.commit();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_1__["namedArg"]({
        name: id,
        value: expr.value
      }, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_6__["range"])(id, expr.value),
        after: trailingWS || undefined
      }));
    } finally {
      transaction.finallyRollback();
    }
  }

}

class NamedArgumentsShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "NamedArguments");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    let eof = iterator.assertNotEOF();

    if (eof.kind === "err") {
      return eof;
    }

    let out = [];
    let transaction = iterator.begin();

    try {
      let leadingWS = transaction.expand(_ws__WEBPACK_IMPORTED_MODULE_5__["WS"]);

      if (leadingWS.kind === "err") {
        return leadingWS;
      }

      while (true) {
        let expr = transaction.expand(NamedArgumentShape);

        if (expr.kind === "err") {
          break;
        }

        out.push(expr.value);
      }

      if (out.length === 0) {
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["err"])(transaction.peek("any args").reject(), "empty");
      } else {
        transaction.commit();
        return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_1__["namedArgs"](out, {
          span: Object(_span__WEBPACK_IMPORTED_MODULE_6__["range"])(...out),
          before: leadingWS.value
        }));
      }
    } finally {
      transaction.finallyRollback();
    }
  }

}

class CallBodyShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "CallBody");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    let before = iterator.expandInfallible(_ws__WEBPACK_IMPORTED_MODULE_5__["MAYBE_WS"]) || undefined;
    return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["seq"])(iterator.expand(_interpolate__WEBPACK_IMPORTED_MODULE_4__["HeadShape"])).map(head => {
      let positional = iterator.expandInfallible(Object(_maybe__WEBPACK_IMPORTED_MODULE_8__["maybe"])(new PositionalShape()));
      let named = iterator.expandInfallible(Object(_maybe__WEBPACK_IMPORTED_MODULE_8__["maybe"])(new NamedArgumentsShape()));
      let after = iterator.expandInfallible(_ws__WEBPACK_IMPORTED_MODULE_5__["MAYBE_WS"]) || undefined;
      return _nodes__WEBPACK_IMPORTED_MODULE_1__["callBody"]({
        head: head,
        positional,
        named
      }, {
        span: Object(_span__WEBPACK_IMPORTED_MODULE_6__["range"])(head, positional, named),
        before,
        after
      });
    });
  }

}

/***/ }),

/***/ "./src/parser/shapes/internal/maybe.ts":
/*!*********************************************!*\
  !*** ./src/parser/shapes/internal/maybe.ts ***!
  \*********************************************/
/*! exports provided: MaybeShape, maybe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaybeShape", function() { return MaybeShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maybe", function() { return maybe; });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");


class MaybeShape extends _abstract__WEBPACK_IMPORTED_MODULE_1__["AbstractInfallibleShape"] {
  constructor(inner) {
    super();
    this.inner = inner;
  }

  get desc() {
    return "maybe \u2022 ".concat(this.inner.desc);
  }

  [_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](iterator) {
    let result = iterator.expand(this.inner);

    if (result.kind === "err") {
      return null;
    }

    return result.value;
  }

}
function maybe(input) {
  return new MaybeShape(input);
}

/***/ }),

/***/ "./src/parser/shapes/internal/ws.ts":
/*!******************************************!*\
  !*** ./src/parser/shapes/internal/ws.ts ***!
  \******************************************/
/*! exports provided: MaybeWS, MAYBE_WS, Ws, WS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaybeWS", function() { return MaybeWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAYBE_WS", function() { return MAYBE_WS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ws", function() { return Ws; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WS", function() { return WS; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../abstract */ "./src/parser/shapes/abstract.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




class MaybeWS extends _abstract__WEBPACK_IMPORTED_MODULE_2__["AbstractInfallibleShape"] {
  constructor() {
    super();

    _defineProperty(this, "desc", "WS?");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_1__["EXPAND"]](iterator) {
    let next = iterator.peek("ws");

    if (next.isEOF) {
      next.optional();
      return null;
    }

    if (next.token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].WS) {
      next.commit();
      return next.token;
    }

    return next.optional();
  }

}
const MAYBE_WS = new MaybeWS();
class Ws extends _abstract__WEBPACK_IMPORTED_MODULE_2__["AbstractShape"] {
  constructor() {
    super();

    _defineProperty(this, "desc", "WS");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_1__["EXPAND"]](iterator) {
    let eof = iterator.assertNotEOF();

    if (eof.kind === "err") {
      return eof;
    }

    let next = iterator.peek("ws");

    if (next.token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].WS) {
      next.commit();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["ok"])(next.token);
    }

    return Object(_shape__WEBPACK_IMPORTED_MODULE_1__["err"])(next.reject(), "mismatch");
  }

}
const WS = new Ws();

/***/ }),

/***/ "./src/parser/shapes/interpolate.ts":
/*!******************************************!*\
  !*** ./src/parser/shapes/interpolate.ts ***!
  \******************************************/
/*! exports provided: HeadShape, InterpolateShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeadShape", function() { return HeadShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateShape", function() { return InterpolateShape; });
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _expression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./expression */ "./src/parser/shapes/expression.ts");
/* harmony import */ var _internal_call_body__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/call-body */ "./src/parser/shapes/internal/call-body.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class HeadShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Head");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    return iterator.expand(_expression__WEBPACK_IMPORTED_MODULE_4__["ExpressionShape"]);
  }

}
class InterpolateShape extends _abstract__WEBPACK_IMPORTED_MODULE_3__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Interpolate");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_2__["EXPAND"]](iterator) {
    return Object(_shape__WEBPACK_IMPORTED_MODULE_2__["seq"])(iterator.consumeParent({
      desc: "interpolate",
      isLeaf: false
    }, token => {
      if (token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Interpolate) {
        return iterator.processInner(token.children, iterator => iterator.expand(_internal_call_body__WEBPACK_IMPORTED_MODULE_5__["CallBodyShape"]));
      }
    })).map(({
      result,
      token
    }) => _nodes__WEBPACK_IMPORTED_MODULE_1__["interpolate"](result, {
      span: token.span
    }));
  }

}

/***/ }),

/***/ "./src/parser/shapes/text.ts":
/*!***********************************!*\
  !*** ./src/parser/shapes/text.ts ***!
  \***********************************/
/*! exports provided: TextShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextShape", function() { return TextShape; });
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _read_tokens__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../read/tokens */ "./src/read/tokens.ts");
/* harmony import */ var _nodes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nodes */ "./src/parser/nodes.ts");
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class TextShape extends _abstract__WEBPACK_IMPORTED_MODULE_0__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "Text");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_3__["EXPAND"]](iterator) {
    let eof = iterator.assertNotEOF();

    if (eof.kind === "err") {
      return eof;
    }

    let next = iterator.peek("text");
    let token = next.token;

    if (token.type === _read_tokens__WEBPACK_IMPORTED_MODULE_1__["TokenType"].Text) {
      next.commit();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_3__["ok"])(_nodes__WEBPACK_IMPORTED_MODULE_2__["text"](token));
    } else {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_3__["err"])(next.reject(), "mismatch");
    }
  }

}

/***/ }),

/***/ "./src/parser/shapes/top-level.ts":
/*!****************************************!*\
  !*** ./src/parser/shapes/top-level.ts ***!
  \****************************************/
/*! exports provided: TopLevelShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopLevelShape", function() { return TopLevelShape; });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shape */ "./src/parser/shape.ts");
/* harmony import */ var _abstract__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract */ "./src/parser/shapes/abstract.ts");
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text */ "./src/parser/shapes/text.ts");
/* harmony import */ var _interpolate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interpolate */ "./src/parser/shapes/interpolate.ts");
/* harmony import */ var _internal_any__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/any */ "./src/parser/shapes/internal/any.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class TopLevelShape extends _abstract__WEBPACK_IMPORTED_MODULE_1__["AbstractShape"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "desc", "TopLevel");
  }

  [_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](iterator) {
    return iterator.expand(new _internal_any__WEBPACK_IMPORTED_MODULE_4__["Any"]([new _text__WEBPACK_IMPORTED_MODULE_2__["TextShape"](), new _interpolate__WEBPACK_IMPORTED_MODULE_3__["InterpolateShape"]()], "top level"));
  }

}

/***/ }),

/***/ "./src/parser/tokens-iterator.ts":
/*!***************************************!*\
  !*** ./src/parser/tokens-iterator.ts ***!
  \***************************************/
/*! exports provided: TOKENS, PeekedToken, default, TokensIteratorTransaction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOKENS", function() { return TOKENS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PeekedToken", function() { return PeekedToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TokensIterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokensIteratorTransaction", function() { return TokensIteratorTransaction; });
/* harmony import */ var _shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shape */ "./src/parser/shape.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }


const TOKENS = Symbol("TOKENS");
class PeekedToken {
  constructor(iterator, desc, pos) {
    _committed.set(this, {
      writable: true,
      value: false
    });

    _rejected.set(this, {
      writable: true,
      value: false
    });

    _optional.set(this, {
      writable: true,
      value: false
    });

    _ignored.set(this, {
      writable: true,
      value: false
    });

    this.iterator = iterator;
    this.desc = desc;
    this.pos = pos;
  }

  get isEOF() {
    return this.iterator[TOKENS].length === this.pos;
  }

  get finished() {
    return _classPrivateFieldGet(this, _committed) || _classPrivateFieldGet(this, _rejected) || _classPrivateFieldGet(this, _optional) || _classPrivateFieldGet(this, _ignored);
  }

  get rejected() {
    return _classPrivateFieldGet(this, _rejected);
  }

  commit() {
    if (this.finished) {
      throw new Error("assert: cannot commit already committed peeked token");
    }

    _classPrivateFieldSet(this, _committed, true);

    return this.iterator.commitPeek(this.desc, this.pos);
  }

  reject() {
    if (this.finished) {
      throw new Error("assert: cannot reject already committed peeked token");
    }

    _classPrivateFieldSet(this, _rejected, true);

    this.iterator.rejectPeek(this.desc, this.pos, this);
    return this;
  }

  ignore() {
    if (this.finished) {
      throw new Error("assert: cannot mark already committed peeked token as optional");
    }

    _classPrivateFieldSet(this, _ignored, true);

    this.iterator.peekFailure(this.desc, "ignored");
    return null;
  }

  optional() {
    if (this.finished) {
      throw new Error("assert: cannot mark already committed peeked token as optional");
    }

    _classPrivateFieldSet(this, _optional, true);

    this.iterator.peekFailure(this.desc, "optional");
    return null;
  }

  get token() {
    return this.iterator[TOKENS][this.pos];
  }

}

var _committed = new WeakMap();

var _rejected = new WeakMap();

var _optional = new WeakMap();

var _ignored = new WeakMap();

class TokensIterator {
  constructor(tokens, context, pos = 0) {
    _defineProperty(this, TOKENS, void 0);

    this.context = context;
    this.pos = pos;
    this[TOKENS] = tokens;
  }

  assertNotEOF() {
    let next = this.peek("eof");

    if (next.isEOF) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(next.reject(), "eof"));
    } else {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["ok"])(next.ignore()));
    }
  }

  assertEOF() {
    let next = this.peek("eof");

    if (next.isEOF) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["ok"])(next.ignore());
    } else {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(next.reject(), "eof");
    }
  }

  consume(options, callback) {
    let eof = this.assertNotEOF();

    if (eof.kind === "err") {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(eof);
    }

    let desc = typeof options === "string" ? options : options.desc;
    let peekOptions = typeof options === "string" ? undefined : options;
    let next = this.peek(desc, peekOptions);
    let result = callback(next.token);

    if (result === undefined) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(next.reject(), "mismatch"));
    }

    next.commit();
    return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["ok"])(result));
  }

  consumeParent(options, callback) {
    let eof = this.assertNotEOF();

    if (eof.kind === "err") {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(eof);
    }

    let desc = typeof options === "string" ? options : options.desc;
    let peekOptions = typeof options === "string" ? undefined : options;
    let next = this.peek(desc, peekOptions);
    let result = callback(next.token);

    if (result === undefined) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(next.reject(), "mismatch"));
    } else if (result.kind === "err") {
      next.reject();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(result);
    }

    next.commit();
    return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["ok"])({
      result: result.value,
      token: next.token
    }));
  }

  assertNotNext(desc, callback) {
    let next = this.peek(desc);

    if (next.token !== undefined && callback(next.token)) {
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(next.reject(), "lookahead"));
    } else {
      next.ignore();
      return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(Object(_shape__WEBPACK_IMPORTED_MODULE_0__["ok"])(null));
    }
  }

  peek(desc, options = {
    isLeaf: true
  }) {
    this.context.tracer.preInvoke({
      desc,
      isLeaf: options.isLeaf
    }, this[TOKENS][this.pos]);
    return new PeekedToken(this, desc, this.pos);
  }

  expandShape(shape) {
    this.context.tracer.preInvoke(shape, this[TOKENS][this.pos]);
    let result = shape[_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](this);
    this.context.tracer.postInvoke(shape, result, this[TOKENS][this.pos]);
    return result;
  }

  expand(shapeOrClass) {
    let shape = typeof shapeOrClass === "function" ? new shapeOrClass() : shapeOrClass;
    this.context.tracer.preInvoke(shape, this[TOKENS][this.pos]);
    let result = shape[_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](this);
    this.context.tracer.postInvoke(shape, result, this[TOKENS][this.pos]);
    return Object(_shape__WEBPACK_IMPORTED_MODULE_0__["seq"])(result);
  }

  expandInfallible(shapeOrClass) {
    let shape = typeof shapeOrClass === "function" ? new shapeOrClass() : shapeOrClass;
    this.context.tracer.preInvoke(shape, this[TOKENS][this.pos]);
    let result = shape[_shape__WEBPACK_IMPORTED_MODULE_0__["EXPAND"]](this);
    this.context.tracer.postInvoke(shape, result, this[TOKENS][this.pos]);
    return result;
  }

  spanned(callback) {
    let start = this.pos;
    let cb = callback();

    if (cb.kind === "err") {
      return cb;
    }

    let end = this.pos;
    return cb.value({
      start,
      end
    });
  }

  get source() {
    return this.context.source;
  }

  child(tokens) {
    return new TokensIterator(tokens, this.context);
  }

  commitPeek(desc, pos) {
    if (this.pos !== pos) {
      throw new Error("assert: can't commit a peeked token after the iterator advanced");
    }

    this.pos++;
    this.context.tracer.postInvoke({
      desc
    }, this[TOKENS][pos], this[TOKENS][pos]);
    return this[TOKENS][this.pos - 1];
  }

  rejectPeek(desc, pos, peeked) {
    this.context.tracer.postInvoke({
      desc
    }, Object(_shape__WEBPACK_IMPORTED_MODULE_0__["err"])(peeked, "rejected"), this[TOKENS][pos]);
  }

  peekFailure(desc, reason) {
    this.context.tracer.postInvokeFailure({
      desc
    }, reason);
  }

  many(callback) {
    let out = [];

    while (true) {
      let result = callback(this);

      if (result.kind === "err") {
        break;
      } else {
        out.push(result.value);
      }
    }

    return out;
  }

  transaction(callback) {
    let transaction = this.begin();
    let result = callback(transaction);

    if (result.kind === "ok") {
      transaction.commit();
    } else {
      transaction.rollback();
    }

    return result;
  }

  begin() {
    this.context.tracer.begin();
    return new TokensIteratorTransaction(this[TOKENS], this.context, this.pos, this);
  }

  commitTransaction(pos) {
    if (this.pos > pos) {
      throw new Error("assert: can't commit a transaction if it rewinds the position");
    }

    this.context.tracer.commit();
    this.pos = pos;
  }

  rollbackTransaction(pos) {
    if (this.pos > pos) {
      throw new Error("assert: transaction's position is in the past");
    }

    this.context.tracer.rollback();
  }

  processInner(tokens, callback) {
    let child = this.child(tokens);
    let result = callback(child);

    if (result.kind === "err") {
      // parent.reject();
      return result;
    }

    let eof = child.assertEOF();

    if (eof.kind === "err") {
      // parent.reject();
      return eof;
    }

    return result;
  }

}
class TokensIteratorTransaction extends TokensIterator {
  constructor(tokens, context, pos = 0, transactionParent) {
    super(tokens, context, pos);

    _committed2.set(this, {
      writable: true,
      value: false
    });

    _rolledBack.set(this, {
      writable: true,
      value: false
    });

    this.transactionParent = transactionParent;
  }

  commit() {
    if (_classPrivateFieldGet(this, _committed2)) {
      throw new Error("ASSERT: can only commit a transaction once");
    }

    _classPrivateFieldSet(this, _committed2, true);

    this.transactionParent.commitTransaction(this.pos);
  }

  rollback() {
    if (_classPrivateFieldGet(this, _committed2)) {
      throw new Error("ASSERT: can only commit a transaction once");
    }

    _classPrivateFieldSet(this, _rolledBack, true);

    this.transactionParent.rollbackTransaction(this.pos);
  }

  finallyRollback() {
    if (!_classPrivateFieldGet(this, _committed2)) {
      this.rollback();
    }
  }

}

var _committed2 = new WeakMap();

var _rolledBack = new WeakMap();

/***/ }),

/***/ "./src/read/combinator.ts":
/*!********************************!*\
  !*** ./src/read/combinator.ts ***!
  \********************************/
/*! exports provided: combinator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combinator", function() { return combinator; });
function combinator(func) {
  return {
    name: "wrapper",
    kind: "transparent",

    invoke(input) {
      return input.invoke(func());
    }

  };
}

/***/ }),

/***/ "./src/read/combinators.ts":
/*!*********************************!*\
  !*** ./src/read/combinators.ts ***!
  \*********************************/
/*! exports provided: tag, pattern, takeUntil, takeWhile, seq, any, pick, maybe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tag", function() { return tag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pattern", function() { return pattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeUntil", function() { return takeUntil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeWhile", function() { return takeWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seq", function() { return seq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "any", function() { return any; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pick", function() { return pick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maybe", function() { return maybe; });
/* harmony import */ var _combinators_any__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combinators/any */ "./src/read/combinators/any.ts");
/* harmony import */ var _combinators_pattern__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./combinators/pattern */ "./src/read/combinators/pattern.ts");
/* harmony import */ var _combinators_seq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinators/seq */ "./src/read/combinators/seq.ts");
/* harmony import */ var _combinators_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators/tag */ "./src/read/combinators/tag.ts");
/* harmony import */ var _combinators_take_until__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./combinators/take-until */ "./src/read/combinators/take-until.ts");
/* harmony import */ var _combinators_take_while__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./combinators/take-while */ "./src/read/combinators/take-while.ts");
/* harmony import */ var _combinators_pick__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./combinators/pick */ "./src/read/combinators/pick.ts");
/* harmony import */ var _combinators_maybe__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./combinators/maybe */ "./src/read/combinators/maybe.ts");








const tag = source => new _combinators_tag__WEBPACK_IMPORTED_MODULE_3__["default"](source);
const pattern = (pat, name) => new _combinators_pattern__WEBPACK_IMPORTED_MODULE_1__["default"](name, pat);
const takeUntil = pat => new _combinators_take_until__WEBPACK_IMPORTED_MODULE_4__["default"](pat);
const takeWhile = pat => new _combinators_take_while__WEBPACK_IMPORTED_MODULE_5__["default"](pat);
const seq = (desc, ...combinators) => new _combinators_seq__WEBPACK_IMPORTED_MODULE_2__["default"](desc, combinators); // tslint:disable-next-line:variable-name

const any = (desc, ...combinators) => new _combinators_any__WEBPACK_IMPORTED_MODULE_0__["default"](desc, combinators);
const pick = (combinators, callbacks) => new _combinators_pick__WEBPACK_IMPORTED_MODULE_6__["default"](combinators, callbacks);
const maybe = c => new _combinators_maybe__WEBPACK_IMPORTED_MODULE_7__["default"](c);

/***/ }),

/***/ "./src/read/combinators/any.ts":
/*!*************************************!*\
  !*** ./src/read/combinators/any.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Any; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");


class Any extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(desc, combinators) {
    super();
    this.desc = desc;
    this.combinators = combinators;
  }

  get name() {
    return "any \u2022 ".concat(this.desc);
  }

  invoke(input) {
    let current = input;

    for (let item of this.combinators) {
      let result = current.invoke(item);

      if (result.kind === "ok") {
        return result;
      } // if there was a fatal error, don't try other variants


      if (result.kind === "err" && result.fatal) {
        return result;
      }
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "any");
  }

}

/***/ }),

/***/ "./src/read/combinators/base.ts":
/*!**************************************!*\
  !*** ./src/read/combinators/base.ts ***!
  \**************************************/
/*! exports provided: AbstractCombinator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractCombinator", function() { return AbstractCombinator; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/read/utils.ts");

class AbstractCombinator {
  map(mapper) {
    return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(this, mapper);
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/block.ts":
/*!*******************************************!*\
  !*** ./src/read/combinators/hbs/block.ts ***!
  \*******************************************/
/*! exports provided: default, OpenBlock, CloseBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenBlock", function() { return OpenBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloseBlock", function() { return CloseBlock; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _multi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../multi */ "./src/read/multi.ts");
/* harmony import */ var _read__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../read */ "./src/read/read.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _spaced_tokens__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./spaced-tokens */ "./src/read/combinators/hbs/spaced-tokens.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }










class Block extends _base__WEBPACK_IMPORTED_MODULE_7__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "BLOCK");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("BLOCK", OPEN_BLOCK, Object(_multi__WEBPACK_IMPORTED_MODULE_4__["many"])(_read__WEBPACK_IMPORTED_MODULE_5__["TOP_LEVEL"]), CLOSE_BLOCK).map(([open, body, close]) => {
      if (!Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["equalPath"])(open.name, close.name, input.source)) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["fatalError"])(input.forSpan(Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...close.name)), "mismatch");
      }

      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["block"])({
        open,
        body,
        close
      }));
    }));
  }

}
const BLOCK_SPACED_TOKENS = new _spaced_tokens__WEBPACK_IMPORTED_MODULE_8__["default"](["as"]); // tslint:disable-next-line:max-classes-per-file

class OpenBlock extends _base__WEBPACK_IMPORTED_MODULE_7__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "OPEN_BLOCK");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("OPEN_BLOCK", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("{{#"), _hbs__WEBPACK_IMPORTED_MODULE_3__["SIMPLE_PATH"], BLOCK_SPACED_TOKENS, Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(BLOCK_PARAMS), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(_hbs__WEBPACK_IMPORTED_MODULE_3__["WS"]), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("}}")).map(([open, path, head, params, ws, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["openBlock"])({
      name: path,
      head: [...head, ...(params ? [params] : []), ...(ws ? [ws] : [])]
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}
const OPEN_BLOCK = new OpenBlock(); // tslint:disable-next-line:max-classes-per-file

class BlockParams extends _base__WEBPACK_IMPORTED_MODULE_7__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "BLOCK_PARAMS");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("BLOCK_PARAMS", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("as |"), Object(_multi__WEBPACK_IMPORTED_MODULE_4__["many"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["any"])("block param", _hbs__WEBPACK_IMPORTED_MODULE_3__["ID"], _hbs__WEBPACK_IMPORTED_MODULE_3__["WS"])), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("|")).map(([open, params, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["blockParams"])(params, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}

const BLOCK_PARAMS = new BlockParams(); // tslint:disable-next-line:max-classes-per-file

class CloseBlock extends _base__WEBPACK_IMPORTED_MODULE_7__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "CLOSE_BLOCK");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("CLOSE_BLOCK", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("{{/"), _hbs__WEBPACK_IMPORTED_MODULE_3__["SIMPLE_PATH"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("}}")).map(([open, path, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["closeBlock"])(path, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}
const CLOSE_BLOCK = new CloseBlock();

/***/ }),

/***/ "./src/read/combinators/hbs/head.ts":
/*!******************************************!*\
  !*** ./src/read/combinators/hbs/head.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Head; });
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./id */ "./src/read/combinators/hbs/id.ts");
/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./token */ "./src/read/combinators/hbs/token.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class Head extends _base__WEBPACK_IMPORTED_MODULE_3__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();

    _defineProperty(this, "id", void 0);

    this.disallowedKeywords = disallowedKeywords;
    this.id = new _token__WEBPACK_IMPORTED_MODULE_5__["default"](new _id__WEBPACK_IMPORTED_MODULE_4__["default"](disallowedKeywords), _tokens__WEBPACK_IMPORTED_MODULE_2__["TokenType"].Identifier);
  }

  get name() {
    if (this.disallowedKeywords) {
      return "HEAD \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "HEAD";
    }
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_0__["any"])("HEAD", _hbs__WEBPACK_IMPORTED_MODULE_1__["ARG"], this.id));
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/id.ts":
/*!****************************************!*\
  !*** ./src/read/combinators/hbs/id.ts ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Id; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");



class Id extends _base__WEBPACK_IMPORTED_MODULE_2__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();
    this.disallowedKeywords = disallowedKeywords;
  }

  get name() {
    if (this.disallowedKeywords) {
      return "ID \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "ID";
    }
  }

  invoke(input) {
    const disallowedKeywords = this.disallowedKeywords;

    if (disallowedKeywords) {
      return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["pattern"])(/^[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE4}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F45}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11003}-\u{11037}\u{11083}-\u{110AF}\u{110D0}-\u{110E8}\u{11103}-\u{11126}\u{11144}\u{11147}\u{11150}-\u{11172}\u{11176}\u{11183}-\u{111B2}\u{111C1}-\u{111C4}\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{1122B}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112DE}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}\u{11350}\u{1135D}-\u{11361}\u{11400}-\u{11434}\u{11447}-\u{1144A}\u{1145F}-\u{11461}\u{11480}-\u{114AF}\u{114C4}\u{114C5}\u{114C7}\u{11580}-\u{115AE}\u{115D8}-\u{115DB}\u{11600}-\u{1162F}\u{11644}\u{11680}-\u{116AA}\u{116B8}\u{11700}-\u{1171A}\u{11800}-\u{1182B}\u{118A0}-\u{118DF}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{1192F}\u{1193F}\u{11941}\u{119A0}-\u{119A7}\u{119AA}-\u{119D0}\u{119E1}\u{119E3}\u{11A00}\u{11A0B}-\u{11A32}\u{11A3A}\u{11A50}\u{11A5C}-\u{11A89}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2E}\u{11C40}\u{11C72}-\u{11C8F}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D89}\u{11D98}\u{11EE0}-\u{11EF2}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16AD0}-\u{16AED}\u{16B00}-\u{16B2F}\u{16B40}-\u{16B43}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F50}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E14E}\u{1E2C0}-\u{1E2EB}\u{1E800}-\u{1E8C4}\u{1E900}-\u{1E943}\u{1E94B}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}][\x2D0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D27}\u{10D30}-\u{10D39}\u{10E80}-\u{10EA9}\u{10EAB}\u{10EAC}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F50}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11000}-\u{11046}\u{11066}-\u{1106F}\u{1107F}-\u{110BA}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{1113F}\u{11144}-\u{11147}\u{11150}-\u{11173}\u{11176}\u{11180}-\u{111C4}\u{111C9}-\u{111CC}\u{111CE}-\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{11237}\u{1123E}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1144A}\u{11450}-\u{11459}\u{1145E}-\u{11461}\u{11480}-\u{114C5}\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115C0}\u{115D8}-\u{115DD}\u{11600}-\u{11640}\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116B8}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{11739}\u{11800}-\u{1183A}\u{118A0}-\u{118E9}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11943}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E1}\u{119E3}\u{119E4}\u{11A00}-\u{11A3E}\u{11A47}\u{11A50}-\u{11A99}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C40}\u{11C50}-\u{11C59}\u{11C72}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF6}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF4}\u{16B00}-\u{16B36}\u{16B40}-\u{16B43}\u{16B50}-\u{16B59}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9D}\u{1BC9E}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E2C0}-\u{1E2F9}\u{1E800}-\u{1E8C4}\u{1E8D0}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{E0100}-\u{E01EF}]*/u, "ID_SNIPPET").map(snippet => {
        let frag = snippet.fragment;

        if (disallowedKeywords.some(k => frag === k)) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(snippet, "disallowed keyword");
        } else {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(snippet);
        }
      }));
    } else {
      return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["pattern"])(/^[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE4}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F45}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11003}-\u{11037}\u{11083}-\u{110AF}\u{110D0}-\u{110E8}\u{11103}-\u{11126}\u{11144}\u{11147}\u{11150}-\u{11172}\u{11176}\u{11183}-\u{111B2}\u{111C1}-\u{111C4}\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{1122B}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112DE}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}\u{11350}\u{1135D}-\u{11361}\u{11400}-\u{11434}\u{11447}-\u{1144A}\u{1145F}-\u{11461}\u{11480}-\u{114AF}\u{114C4}\u{114C5}\u{114C7}\u{11580}-\u{115AE}\u{115D8}-\u{115DB}\u{11600}-\u{1162F}\u{11644}\u{11680}-\u{116AA}\u{116B8}\u{11700}-\u{1171A}\u{11800}-\u{1182B}\u{118A0}-\u{118DF}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{1192F}\u{1193F}\u{11941}\u{119A0}-\u{119A7}\u{119AA}-\u{119D0}\u{119E1}\u{119E3}\u{11A00}\u{11A0B}-\u{11A32}\u{11A3A}\u{11A50}\u{11A5C}-\u{11A89}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2E}\u{11C40}\u{11C72}-\u{11C8F}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D89}\u{11D98}\u{11EE0}-\u{11EF2}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16AD0}-\u{16AED}\u{16B00}-\u{16B2F}\u{16B40}-\u{16B43}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F50}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E14E}\u{1E2C0}-\u{1E2EB}\u{1E800}-\u{1E8C4}\u{1E900}-\u{1E943}\u{1E94B}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}][\x2D0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10140}-\u{10174}\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}\u{10300}-\u{1031F}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{103A0}-\u{103C3}\u{103C8}-\u{103CF}\u{103D1}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10860}-\u{10876}\u{10880}-\u{1089E}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{10900}-\u{10915}\u{10920}-\u{10939}\u{10980}-\u{109B7}\u{109BE}\u{109BF}\u{10A00}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}\u{10A60}-\u{10A7C}\u{10A80}-\u{10A9C}\u{10AC0}-\u{10AC7}\u{10AC9}-\u{10AE6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B60}-\u{10B72}\u{10B80}-\u{10B91}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10D00}-\u{10D27}\u{10D30}-\u{10D39}\u{10E80}-\u{10EA9}\u{10EAB}\u{10EAC}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F1C}\u{10F27}\u{10F30}-\u{10F50}\u{10FB0}-\u{10FC4}\u{10FE0}-\u{10FF6}\u{11000}-\u{11046}\u{11066}-\u{1106F}\u{1107F}-\u{110BA}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{1113F}\u{11144}-\u{11147}\u{11150}-\u{11173}\u{11176}\u{11180}-\u{111C4}\u{111C9}-\u{111CC}\u{111CE}-\u{111DA}\u{111DC}\u{11200}-\u{11211}\u{11213}-\u{11237}\u{1123E}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A8}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1144A}\u{11450}-\u{11459}\u{1145E}-\u{11461}\u{11480}-\u{114C5}\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115C0}\u{115D8}-\u{115DD}\u{11600}-\u{11640}\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116B8}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{11739}\u{11800}-\u{1183A}\u{118A0}-\u{118E9}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11943}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E1}\u{119E3}\u{119E4}\u{11A00}-\u{11A3E}\u{11A47}\u{11A50}-\u{11A99}\u{11A9D}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C40}\u{11C50}-\u{11C59}\u{11C72}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF6}\u{11FB0}\u{12000}-\u{12399}\u{12400}-\u{1246E}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF4}\u{16B00}-\u{16B36}\u{16B40}-\u{16B43}\u{16B50}-\u{16B59}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E7F}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9D}\u{1BC9E}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6C0}\u{1D6C2}-\u{1D6DA}\u{1D6DC}-\u{1D6FA}\u{1D6FC}-\u{1D714}\u{1D716}-\u{1D734}\u{1D736}-\u{1D74E}\u{1D750}-\u{1D76E}\u{1D770}-\u{1D788}\u{1D78A}-\u{1D7A8}\u{1D7AA}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E2C0}-\u{1E2F9}\u{1E800}-\u{1E8C4}\u{1E8D0}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{E0100}-\u{E01EF}]*/u, "ID_SNIPPET"));
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/interpolate.ts":
/*!*************************************************!*\
  !*** ./src/read/combinators/hbs/interpolate.ts ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Interpolate; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class Interpolate extends _base__WEBPACK_IMPORTED_MODULE_5__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "INTERPOLATE");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("INTERPOLATE", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("{{"), _hbs__WEBPACK_IMPORTED_MODULE_3__["SPACED_TOKENS"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("}}")).map(([open, path, close]) => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_4__["interpolate"])(path, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)));
    }));
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/number.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/hbs/number.ts ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SomeNumber; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class SomeNumber extends _base__WEBPACK_IMPORTED_MODULE_4__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "NUMBER");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("NUMBER", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("-")), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^[0-9]+/, "digits"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("decimal", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("."), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^[0-9]+/, "digits")).map(([, tail]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(tail)))).map(([negative, head, tail]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["numberToken"])({
      head: head.span,
      tail: tail ? tail.span : null,
      negative: negative ? negative.span : null
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(negative, head, tail ? tail : null)))));
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/sexp.ts":
/*!******************************************!*\
  !*** ./src/read/combinators/hbs/sexp.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Sexp; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







class Sexp extends _base__WEBPACK_IMPORTED_MODULE_5__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "SEXP");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("SEXP", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("("), _hbs__WEBPACK_IMPORTED_MODULE_3__["SPACED_TOKENS"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])(")")).map(([open, path, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_4__["sexp"])({
      children: path,
      inner: Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...path)
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close)))));
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/simple-path.ts":
/*!*************************************************!*\
  !*** ./src/read/combinators/hbs/simple-path.ts ***!
  \*************************************************/
/*! exports provided: MEMBER, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MEMBER", function() { return MEMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SimplePath; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./head */ "./src/read/combinators/hbs/head.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





 // export const SIMPLE_HEAD = combinator(() => any("HEAD", ARG, ID));
// TODO: Allow `[]` or string members

const MEMBER = Object(_combinator__WEBPACK_IMPORTED_MODULE_1__["combinator"])(() => _hbs__WEBPACK_IMPORTED_MODULE_2__["ID"]);
class SimplePath extends _base__WEBPACK_IMPORTED_MODULE_3__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();

    _defineProperty(this, "head", void 0);

    this.disallowedKeywords = disallowedKeywords;
    this.head = new _head__WEBPACK_IMPORTED_MODULE_4__["default"](disallowedKeywords);
  }

  get name() {
    if (this.disallowedKeywords) {
      return "SIMPLE_PATH \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "SIMPLE_PATH";
    }
  }

  invoke(input) {
    let result = input.invoke(this.head);

    if (result.kind === "err") {
      return result;
    }

    let [current, head] = result.value;
    let out = [head];

    while (true) {
      if (current.isEOF()) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current, out]);
      }

      let resultDot = current.invoke(_hbs__WEBPACK_IMPORTED_MODULE_2__["DOT"], {
        optional: true
      });

      if (resultDot.kind === "err") {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current, out]);
      }

      current = resultDot.value[0];
      let nextDot = resultDot.value[1];
      let resultMember = current.invoke(MEMBER);

      if (resultMember.kind === "err") {
        return resultMember;
      }

      current = resultMember.value[0];
      let nextMember = resultMember.value[1];
      out.push(nextDot, nextMember);
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/spaced-tokens.ts":
/*!***************************************************!*\
  !*** ./src/read/combinators/hbs/spaced-tokens.ts ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SpacedTokens; });
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _simple_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simple-path */ "./src/read/combinators/hbs/simple-path.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class SpacedTokens extends _base__WEBPACK_IMPORTED_MODULE_2__["AbstractCombinator"] {
  constructor(disallowedKeywords) {
    super();

    _defineProperty(this, "path", void 0);

    this.disallowedKeywords = disallowedKeywords;
    this.path = new _simple_path__WEBPACK_IMPORTED_MODULE_4__["default"](disallowedKeywords);
  }

  get name() {
    if (this.disallowedKeywords) {
      return "SPACED_TOKENS \u2022 not ".concat(JSON.stringify(this.disallowedKeywords));
    } else {
      return "SPACED_TOKENS";
    }
  }

  invoke(input) {
    let out = [];
    let tk = Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["any"])("token", Object(_hbs__WEBPACK_IMPORTED_MODULE_0__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["SEXP"]), Object(_hbs__WEBPACK_IMPORTED_MODULE_0__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["STRING"]), Object(_hbs__WEBPACK_IMPORTED_MODULE_0__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["NUMBER"]), _hbs__WEBPACK_IMPORTED_MODULE_0__["NAMED"], this.path, Object(_hbs__WEBPACK_IMPORTED_MODULE_0__["wrap"])(_hbs__WEBPACK_IMPORTED_MODULE_0__["WS"]));
    let current = input;

    while (true) {
      if (current.isEOF()) {
        break;
      }

      let result = current.invoke(tk);

      if (result.kind === "err") {
        break;
      }

      let [next, tokens] = result.value;

      for (let tok of tokens) {
        if (Array.isArray(tok)) {
          out.push(...tok);
        } else {
          out.push(tok);
        }
      }

      current = next;
    }

    if (out.length === 0) {
      return {
        kind: "err",
        reason: "present",
        snippet: input
      };
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_3__["ok"])([current, out]);
  }

}

/***/ }),

/***/ "./src/read/combinators/hbs/string.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/hbs/string.ts ***!
  \********************************************/
/*! exports provided: default, SINGLE_QUOTED, DOUBLE_QUOTED */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SomeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_QUOTED", function() { return SINGLE_QUOTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOUBLE_QUOTED", function() { return DOUBLE_QUOTED; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






class SomeString extends _base__WEBPACK_IMPORTED_MODULE_4__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "STRING");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["any"])("QUOTED_STRING", SINGLE_QUOTED, DOUBLE_QUOTED));
  }

}
const SINGLE_QUOTED = Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("SINGLE_QUOTED", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("'"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^(\\'|[^'])*/u, "single quote body"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("'")).map(([open, body, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["stringToken"])({
  data: body.span,
  quote: _tokens__WEBPACK_IMPORTED_MODULE_3__["QuoteType"].Single
}, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close))));
const DOUBLE_QUOTED = Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("DOUBLE_QUOTED", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("\""), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^(\\"|[^"])*/u, "double quote body"), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("\"")).map(([open, body, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["stringToken"])({
  data: body.span,
  quote: _tokens__WEBPACK_IMPORTED_MODULE_3__["QuoteType"].Double
}, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close))));

/***/ }),

/***/ "./src/read/combinators/hbs/token.ts":
/*!*******************************************!*\
  !*** ./src/read/combinators/hbs/token.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SomeToken; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");



class SomeToken extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(combinator, type) {
    super();
    this.combinator = combinator;
    this.type = type;
  }

  get name() {
    return "token \u2022 ".concat(Object(_utils__WEBPACK_IMPORTED_MODULE_2__["combinatorName"])(this.combinator));
  }

  invoke(input) {
    let result = input.invoke(this.combinator, {
      forceTransparent: true
    });

    if (result.kind === "err") {
      return result;
    } else {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([result.value[0], {
        type: this.type,
        span: result.value[1].span
      }]);
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/html/attribute.ts":
/*!************************************************!*\
  !*** ./src/read/combinators/html/attribute.ts ***!
  \************************************************/
/*! exports provided: default, ATTRIBUTE, ATTRIBUTE_NAME, ARG_NAME, ANY_ATTR_NAME, DQ_STRING_INTERPOLATE, SQ_STRING_INTERPOLATE, StringInterpolation, ATTRIBUTE_VALUE, ATTRIBUTES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE", function() { return ATTRIBUTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE_NAME", function() { return ATTRIBUTE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARG_NAME", function() { return ARG_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANY_ATTR_NAME", function() { return ANY_ATTR_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DQ_STRING_INTERPOLATE", function() { return DQ_STRING_INTERPOLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SQ_STRING_INTERPOLATE", function() { return SQ_STRING_INTERPOLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringInterpolation", function() { return StringInterpolation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE_VALUE", function() { return ATTRIBUTE_VALUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTES", function() { return ATTRIBUTES; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _multi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../multi */ "./src/read/multi.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }










class HTMLAttribute extends _base__WEBPACK_IMPORTED_MODULE_8__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "TEXT");
  }

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pick"])({
      valued: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("valued attribute", ANY_ATTR_NAME, _hbs__WEBPACK_IMPORTED_MODULE_4__["EQ"], ATTRIBUTE_VALUE),
      bare: ATTRIBUTE_NAME
    }, {
      valued: ([name,, value]) => {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["valuedAttr"])({
          name,
          value
        }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(name, value)));
      },
      bare: value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrName"])(value.span))
    }));
  }

}
const ATTRIBUTE = new HTMLAttribute(); // https://www.w3.org/TR/2011/WD-html5-20110113/tokenization.html#before-attribute-name-state

const ATTRIBUTE_NAME = Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^\u0009\u000A\u000C\u0020/>\u0000"'<=].*?(?=[\u0009\u000A\u000C\u0020/=>\u0000"'<])/u, "ATTRIBUTE_NAME").map(name => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrName"])(name.span)));
const ARG_NAME = Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("ARG_NAME", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("@"), ATTRIBUTE_NAME).map(([at, attr]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["argName"])(attr.span, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(at.span, attr.span))));
const ANY_ATTR_NAME = Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("ANY_ATTR_NAME", ARG_NAME, ATTRIBUTE_NAME);
const DQ_STRING_INTERPOLATE = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("DQ_STRING_INTERPOLATE", _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"], Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^"]+/, "dq text").map(value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["text"])(value.span)))));
const SQ_STRING_INTERPOLATE = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("SQ_STRING_INTERPOLATE", _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"], Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^']+/, "sq text").map(value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["text"])(value.span))))); // tslint:disable-next-line:max-classes-per-file

class StringInterpolation extends _base__WEBPACK_IMPORTED_MODULE_8__["AbstractCombinator"] {
  constructor(combinator) {
    super();

    _defineProperty(this, "name", "STRING_INTERPOLATION");

    this.combinator = combinator;
  }

  invoke(input) {
    return input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["map"])(Object(_multi__WEBPACK_IMPORTED_MODULE_5__["many"])(this.combinator), value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["stringInterpolation"])(value, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...value)))));
  }

}
const ATTRIBUTE_VALUE = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pick"])({
  interpolate: _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"],
  dq: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("dq", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("\""), new StringInterpolation(DQ_STRING_INTERPOLATE), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("\"")),
  sq: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("sq", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("'"), new StringInterpolation(SQ_STRING_INTERPOLATE), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("'")),
  unquoted: Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[^\u0009\u000A\u000C\u0020>\0"'<=`]+/u, "unquoted contents")
}, {
  interpolate: interpolate => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].Interpolate,
    value: interpolate
  }, interpolate.span)),
  dq: ([open, value, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].DoubleQuoted,
    value
  }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close))),
  sq: ([open, value, close]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].SingleQuoted,
    value
  }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close))),
  unquoted: value => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["attrValue"])({
    type: _tokens__WEBPACK_IMPORTED_MODULE_6__["AttributeValueType"].Unquoted,
    value: Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["stringInterpolation"])([Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["text"])(value.span)], value.span)
  }, value.span))
}));
const ATTRIBUTES = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_utils__WEBPACK_IMPORTED_MODULE_7__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("ATTRIBUTES", _hbs__WEBPACK_IMPORTED_MODULE_4__["WS"], Object(_multi__WEBPACK_IMPORTED_MODULE_5__["many"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("spaced attribute", _hbs__WEBPACK_IMPORTED_MODULE_4__["WS"], _hbs__WEBPACK_IMPORTED_MODULE_4__["INTERPOLATE"], ATTRIBUTE))), ([ws, attrs]) => {
  return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([ws, ...attrs]);
}));

/***/ }),

/***/ "./src/read/combinators/html/end-tag.ts":
/*!**********************************************!*\
  !*** ./src/read/combinators/html/end-tag.ts ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLEndTag; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _tag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tag */ "./src/read/combinators/html/tag.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









class HTMLEndTag extends _base__WEBPACK_IMPORTED_MODULE_6__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "END_TAG");
  }

  invoke(input) {
    return input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_5__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("END_TAG", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("</"), _tag__WEBPACK_IMPORTED_MODULE_7__["TAG_OR_COMPONENT_NAME"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(_hbs__WEBPACK_IMPORTED_MODULE_3__["WS"]), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])(">")), ([start, name, trailing, end]) => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_4__["endTag"])({
        name,
        trailing
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end)));
    }));
  }

}

/***/ }),

/***/ "./src/read/combinators/html/start-tag.ts":
/*!************************************************!*\
  !*** ./src/read/combinators/html/start-tag.ts ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLStartTag; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../span */ "./src/span.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
/* harmony import */ var _attribute__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./attribute */ "./src/read/combinators/html/attribute.ts");
/* harmony import */ var _tag__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tag */ "./src/read/combinators/html/tag.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









class HTMLStartTag extends _base__WEBPACK_IMPORTED_MODULE_5__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "START_TAG");
  }

  invoke(input) {
    return input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_4__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["seq"])("START_TAG", Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("<"), _tag__WEBPACK_IMPORTED_MODULE_7__["TAG_OR_COMPONENT_NAME"], Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(_attribute__WEBPACK_IMPORTED_MODULE_6__["ATTRIBUTES"]), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["maybe"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])("/")), Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["tag"])(">")), ([start, name, attrs, selfClosing, end]) => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_3__["startTag"])({
        name,
        attrs: attrs || undefined,
        selfClosing: selfClosing ? true : undefined
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end)));
    }));
  }

}

/***/ }),

/***/ "./src/read/combinators/html/tag.ts":
/*!******************************************!*\
  !*** ./src/read/combinators/html/tag.ts ***!
  \******************************************/
/*! exports provided: TAG_NAME, TAG_NAME_TOKEN, TAG_OR_COMPONENT_NAME */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAG_NAME", function() { return TAG_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAG_NAME_TOKEN", function() { return TAG_NAME_TOKEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAG_OR_COMPONENT_NAME", function() { return TAG_OR_COMPONENT_NAME; });
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../combinator */ "./src/read/combinator.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils */ "./src/read/utils.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hbs */ "./src/read/hbs.ts");





 // https://www.w3.org/TR/2011/WD-html5-20110113/tokenization.html#tag-name-state

const TAG_NAME = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["pattern"])(/^[A-Za-z][^/>\0\s]+/u, "TAG_NAME"));
const TAG_NAME_TOKEN = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_utils__WEBPACK_IMPORTED_MODULE_3__["map"])(TAG_NAME, snippet => Object(_snippet__WEBPACK_IMPORTED_MODULE_4__["ok"])([Object(_tokens__WEBPACK_IMPORTED_MODULE_1__["id"])(snippet.span)])));
const TAG_OR_COMPONENT_NAME = Object(_combinator__WEBPACK_IMPORTED_MODULE_0__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_2__["any"])("tag or component name", _hbs__WEBPACK_IMPORTED_MODULE_5__["SIMPLE_PATH"], TAG_NAME_TOKEN));

/***/ }),

/***/ "./src/read/combinators/html/text.ts":
/*!*******************************************!*\
  !*** ./src/read/combinators/html/text.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HTMLText; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../snippet */ "./src/snippet.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../combinators */ "./src/read/combinators.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tokens */ "./src/read/tokens.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





class HTMLText extends _base__WEBPACK_IMPORTED_MODULE_3__["AbstractCombinator"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", "TEXT");
  }

  invoke(input) {
    let result = input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_1__["pattern"])(/^[\s\S]*?(?=[{<}]|$)/u, "TEXT"));

    if (result.kind === "err") {
      return result;
    }

    let [next, value] = result.value;
    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([next, Object(_tokens__WEBPACK_IMPORTED_MODULE_2__["text"])(value.span)]);
  }

}

/***/ }),

/***/ "./src/read/combinators/maybe.ts":
/*!***************************************!*\
  !*** ./src/read/combinators/maybe.ts ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Maybe; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Maybe extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(combinator) {
    super();
    this.combinator = combinator;
  }

  get name() {
    return "maybe ".concat(this.combinator.name);
  }

  invoke(input) {
    let result = input.invoke(this.combinator);

    if (result.kind === "err") {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([input, null]);
    } else {
      return result;
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/pattern.ts":
/*!*****************************************!*\
  !*** ./src/read/combinators/pattern.ts ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Pattern; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Pattern extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(desc, pattern) {
    super();
    this.desc = desc;
    this.pattern = pattern;
  }

  get name() {
    return "pattern[".concat(this.desc, "]");
  }

  invoke(input) {
    let rest = input.sliceRest;
    let match = rest.match(this.pattern);

    if (match) {
      let matched = match[0];
      let next = input.slice(matched.length);
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
    } else {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["err"])(input, "pattern");
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/pick.ts":
/*!**************************************!*\
  !*** ./src/read/combinators/pick.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Pick; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



class Pick extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(combinators, callbacks) {
    super();

    _defineProperty(this, "name", "pick");

    this.combinators = combinators;
    this.callbacks = callbacks;
  }

  invoke(input) {
    let current = input;

    for (let [name, item] of Object.entries(this.combinators)) {
      let firstResult = current.invoke(item, {
        context: name
      });

      if (firstResult.kind === "ok") {
        let [next, value] = firstResult.value;
        let result = this.callbacks[name](value);

        if (result.kind === "ok") {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([next, result.value]);
        } else {
          return result;
        }
      }
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "any");
  }

}

/***/ }),

/***/ "./src/read/combinators/seq.ts":
/*!*************************************!*\
  !*** ./src/read/combinators/seq.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Seq; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");


class Seq extends _base__WEBPACK_IMPORTED_MODULE_1__["AbstractCombinator"] {
  constructor(name, combinators) {
    super();
    this.name = name;
    this.combinators = combinators;
  }

  invoke(input) {
    let out = [];
    let current = input;

    for (let item of this.combinators) {
      let result = current.invoke(item);

      if (result.kind === "ok") {
        let [next, value] = result.value;
        out.push(value);
        current = next.rest;
      } else {
        return result;
      }
    }

    return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current.rest, out]);
  }

}

/***/ }),

/***/ "./src/read/combinators/tag.ts":
/*!*************************************!*\
  !*** ./src/read/combinators/tag.ts ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Tag; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Tag extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(source) {
    super();
    this.source = source;
  }

  get name() {
    return JSON.stringify(this.source);
  }

  invoke(input) {
    let next = input.slice(this.source.length);

    if (next.fragment === this.source) {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
    } else {
      return {
        kind: "err",
        snippet: input,
        reason: "tag"
      };
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/take-until.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/take-until.ts ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TakeUntil; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



class TakeUntil extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(pattern) {
    super();

    _defineProperty(this, "name", "takeUntil");

    this.pattern = pattern;
  }

  invoke(input) {
    let next = input;

    while (true) {
      if (next.isEOF() || next.isMatch(this.pattern)) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
      } else {
        next = next.extend(1);
      }
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/take-while.ts":
/*!********************************************!*\
  !*** ./src/read/combinators/take-while.ts ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TakeWhile; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



class TakeWhile extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(pattern) {
    super();

    _defineProperty(this, "name", "takeWhile");

    this.pattern = pattern;
  }

  invoke(input) {
    let next = input;

    while (true) {
      if (next.isEOF()) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
      } else if (next.isMatch(this.pattern)) {
        next = next.extend(this.pattern.length);
      } else if (next.length === 0) {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["err"])(input, "takeWhile");
      } else {
        return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([next.rest, next]);
      }
    }
  }

}

/***/ }),

/***/ "./src/read/combinators/wrap.ts":
/*!**************************************!*\
  !*** ./src/read/combinators/wrap.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Wrap; });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "./src/read/combinators/base.ts");
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../snippet */ "./src/snippet.ts");


class Wrap extends _base__WEBPACK_IMPORTED_MODULE_0__["AbstractCombinator"] {
  constructor(combinator) {
    super();
    this.combinator = combinator;
  }

  get name() {
    return "wrap \u2022 ".concat(this.combinator.name);
  }

  invoke(input) {
    let result = input.invoke(this.combinator);

    if (result.kind === "err") {
      return result;
    } else {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_1__["ok"])([result.value[0], [result.value[1]]]);
    }
  }

}

/***/ }),

/***/ "./src/read/debug.ts":
/*!***************************!*\
  !*** ./src/read/debug.ts ***!
  \***************************/
/*! exports provided: preInvoke, postInvoke, outputStyle, outputString, afterSnippet, trunc, truncString, getTrace, printTrace, indent, outdent, indentWS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preInvoke", function() { return preInvoke; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "postInvoke", function() { return postInvoke; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outputStyle", function() { return outputStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outputString", function() { return outputString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterSnippet", function() { return afterSnippet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trunc", function() { return trunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "truncString", function() { return truncString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTrace", function() { return getTrace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printTrace", function() { return printTrace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indent", function() { return indent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "outdent", function() { return outdent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indentWS", function() { return indentWS; });
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ "./src/read/logger.ts");

const ERROR = "color: red";
const SUCCESS = "color: green";
const NORMAL = "color: #333";
const OPTIONAL = "color: #999";
let childStack = [];
let root;
function preInvoke({
  combinator,
  snippet,
  optional
}) {
  let child = {
    combinator,
    preSnippet: snippet,
    optional,
    children: []
  };

  if (childStack.length !== 0) {
    let last = childStack[childStack.length - 1];
    last.children.push(child);
  }

  childStack.push(child);
}
function postInvoke(result) {
  let last = childStack[childStack.length - 1];
  last.output = result;
  let row = childStack.pop();

  if (childStack.length === 0) {
    root = row;
  }
}
function outputStyle({
  output,
  optional
}, weight) {
  if (output === undefined) {
    throw new Error("assert: unexpected undefined output (should be a result)");
  }

  switch (output.kind) {
    case "ok":
      return "".concat(SUCCESS, ";").concat(weight);

    case "err":
      {
        if (optional) {
          return OPTIONAL;
        } else {
          return "".concat(ERROR, ";").concat(weight);
        }
      }
  }
}
function outputString(output) {
  if (output === undefined) {
    throw new Error("assert: unexpected undefined output (should be a result)");
  }

  switch (output.kind) {
    case "ok":
      return "".concat(Object(_logger__WEBPACK_IMPORTED_MODULE_0__["formatDebuggable"])(output.value[1]), "%c");

    case "err":
      return "".concat(output.fatal ? "fatal " : "", "error: ").concat(output.reason, " %c@ ").concat(output.snippet.fmt());
  }
}
function afterSnippet(output) {
  if (output === undefined) {
    throw new Error("assert: unexpected undefined output (should be a result)");
  }

  switch (output.kind) {
    case "ok":
      return output.value[0];

    case "err":
      return output.snippet;
  }
}
function trunc(snippet) {
  let rest = snippet.sliceRest;

  if (rest.length > 13) {
    return "".concat(rest.slice(0, 10), "...");
  } else {
    return rest.padEnd(13);
  }
}
function truncString(snippet, length = 13) {
  if (snippet.length > length) {
    return "".concat(snippet.slice(0, length - 3), "...");
  } else {
    return snippet.padEnd(length);
  }
}
function getTrace() {
  let current = root;

  if (current === undefined) {
    throw new Error("attempting to get the trace, but none was recorded");
  }

  root = undefined;
  return current;
}
function printTrace(indent = 0, nestedError = 0, parentStatus, row = getTrace()) {
  if (row === undefined) {
    // tslint:disable-next-line:no-console
    console.log("%cassert: unexpected undefined row", ERROR);
    return;
  }

  let context = row.combinator.name;
  let afterPad = Math.max(60 - indent - context.length - nestedError, 0);
  let inErrorHere = row.output && row.output.kind === "err" && row.children.length > 0 && indent !== 0;
  let currentStatus;

  if (row.output && row.output.kind === "err") {
    if (row.optional) {
      currentStatus = "optional";
    } else {
      currentStatus = "error";
    }
  } else {
    currentStatus = "success";
  }

  let weight = parentStatus === currentStatus ? "font-weight: normal" : "font-weight: bold";

  if (inErrorHere) {
    // tslint:disable-next-line:no-console
    console.groupCollapsed("".concat(String(indent).padEnd(3), "%c").concat(" ".repeat(indent), "%c").concat(context, "%c").concat(" ".repeat(afterPad), "| ").concat(trunc(row.preSnippet), " | ").concat(trunc(afterSnippet(row.output)), " | %c").concat(outputString(row.output)), NORMAL, outputStyle(row, weight), NORMAL, outputStyle(row, weight), NORMAL);
    nestedError += 2;
  } else {
    // tslint:disable-next-line:no-console
    console.log("".concat(String(indent).padEnd(3), "%c").concat(" ".repeat(indent), "%c").concat(context, "%c").concat(" ".repeat(afterPad), "| ").concat(trunc(row.preSnippet), " | ").concat(trunc(afterSnippet(row.output)), " | %c").concat(outputString(row.output)), NORMAL, outputStyle(row, weight), NORMAL, outputStyle(row, weight), NORMAL);
  }

  for (let child of row.children) {
    printTrace(indent + 1, nestedError, currentStatus, child);
  }

  if (inErrorHere) {
    console.groupEnd();
  }
}
let TAB = 0;
function indent() {
  TAB += 1;
}
function outdent() {
  TAB -= 1;
}
function indentWS() {
  return " ".repeat(TAB);
}

/***/ }),

/***/ "./src/read/hbs.ts":
/*!*************************!*\
  !*** ./src/read/hbs.ts ***!
  \*************************/
/*! exports provided: token, wrap, WS, STRING, NUMBER, SEXP, ID, EQ, NAMED, SIMPLE_PATH, SPACED_TOKENS, BLOCK, INTERPOLATE, DOT, ARG, EXPRESSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "token", function() { return token; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return wrap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WS", function() { return WS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STRING", function() { return STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMBER", function() { return NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SEXP", function() { return SEXP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ID", function() { return ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EQ", function() { return EQ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAMED", function() { return NAMED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIMPLE_PATH", function() { return SIMPLE_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPACED_TOKENS", function() { return SPACED_TOKENS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLOCK", function() { return BLOCK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INTERPOLATE", function() { return INTERPOLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOT", function() { return DOT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARG", function() { return ARG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXPRESSION", function() { return EXPRESSION; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators */ "./src/read/combinators.ts");
/* harmony import */ var _combinators_hbs_block__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./combinators/hbs/block */ "./src/read/combinators/hbs/block.ts");
/* harmony import */ var _combinators_hbs_interpolate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./combinators/hbs/interpolate */ "./src/read/combinators/hbs/interpolate.ts");
/* harmony import */ var _combinators_hbs_number__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./combinators/hbs/number */ "./src/read/combinators/hbs/number.ts");
/* harmony import */ var _combinators_hbs_sexp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./combinators/hbs/sexp */ "./src/read/combinators/hbs/sexp.ts");
/* harmony import */ var _combinators_hbs_simple_path__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./combinators/hbs/simple-path */ "./src/read/combinators/hbs/simple-path.ts");
/* harmony import */ var _combinators_hbs_spaced_tokens__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./combinators/hbs/spaced-tokens */ "./src/read/combinators/hbs/spaced-tokens.ts");
/* harmony import */ var _combinators_hbs_string__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./combinators/hbs/string */ "./src/read/combinators/hbs/string.ts");
/* harmony import */ var _combinators_hbs_token__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./combinators/hbs/token */ "./src/read/combinators/hbs/token.ts");
/* harmony import */ var _combinators_wrap__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./combinators/wrap */ "./src/read/combinators/wrap.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");
/* harmony import */ var _combinators_hbs_id__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./combinators/hbs/id */ "./src/read/combinators/hbs/id.ts");
















const token = (c, type) => new _combinators_hbs_token__WEBPACK_IMPORTED_MODULE_11__["default"](c, type);
const wrap = c => new _combinators_wrap__WEBPACK_IMPORTED_MODULE_12__["default"](c);
const WS = token(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^[\u0009\u000A\u000C\u0020]+/u, "WS"), _tokens__WEBPACK_IMPORTED_MODULE_13__["TokenType"].WS);
const STRING = new _combinators_hbs_string__WEBPACK_IMPORTED_MODULE_10__["default"]();
const NUMBER = new _combinators_hbs_number__WEBPACK_IMPORTED_MODULE_6__["default"]();
const SEXP = new _combinators_hbs_sexp__WEBPACK_IMPORTED_MODULE_7__["default"]();
const ID_SNIPPET = new _combinators_hbs_id__WEBPACK_IMPORTED_MODULE_15__["default"]();
const ID = token(ID_SNIPPET, _tokens__WEBPACK_IMPORTED_MODULE_13__["TokenType"].Identifier);
const EQ = token(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("="), _tokens__WEBPACK_IMPORTED_MODULE_13__["TokenType"].Eq); // eslint-disable-next-line @typescript-eslint/no-use-before-define

const NAMED = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("NAMED", ID, EQ, EXPRESSION));
const SIMPLE_PATH = new _combinators_hbs_simple_path__WEBPACK_IMPORTED_MODULE_8__["default"]();
const SPACED_TOKENS = new _combinators_hbs_spaced_tokens__WEBPACK_IMPORTED_MODULE_9__["default"]();
const BLOCK = new _combinators_hbs_block__WEBPACK_IMPORTED_MODULE_4__["default"]();
const INTERPOLATE = new _combinators_hbs_interpolate__WEBPACK_IMPORTED_MODULE_5__["default"]();
const DOT = token(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("."), _tokens__WEBPACK_IMPORTED_MODULE_13__["TokenType"].Dot);
const ARG = Object(_utils__WEBPACK_IMPORTED_MODULE_14__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("@id", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("@"), ID_SNIPPET), ([at, id]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_13__["arg"])(Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(at, id))));
const EXPRESSION = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("EXPRESSION", SEXP, SIMPLE_PATH, STRING, NUMBER));

/***/ }),

/***/ "./src/read/html.ts":
/*!**************************!*\
  !*** ./src/read/html.ts ***!
  \**************************/
/*! exports provided: TEXT, START_TAG, END_TAG, COMMENT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXT", function() { return TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "START_TAG", function() { return START_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END_TAG", function() { return END_TAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMENT", function() { return COMMENT; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators */ "./src/read/combinators.ts");
/* harmony import */ var _combinators_html_start_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./combinators/html/start-tag */ "./src/read/combinators/html/start-tag.ts");
/* harmony import */ var _combinators_html_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./combinators/html/text */ "./src/read/combinators/html/text.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");
/* harmony import */ var _combinators_html_end_tag__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./combinators/html/end-tag */ "./src/read/combinators/html/end-tag.ts");









const TEXT = new _combinators_html_text__WEBPACK_IMPORTED_MODULE_5__["default"]();
const START_TAG = new _combinators_html_start_tag__WEBPACK_IMPORTED_MODULE_4__["default"]();
const END_TAG = new _combinators_html_end_tag__WEBPACK_IMPORTED_MODULE_8__["default"]();
const COMMENT = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_utils__WEBPACK_IMPORTED_MODULE_7__["map"])(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["seq"])("COMMENT", Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("<!--"), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["pattern"])(/^.*(?=[-][-][>])/u, "comment body"), Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["tag"])("-->")), ([start, data, end]) => {
  return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_6__["comment"])(data.span, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end)));
}));

/***/ }),

/***/ "./src/read/logger.ts":
/*!****************************!*\
  !*** ./src/read/logger.ts ***!
  \****************************/
/*! exports provided: Logger, combinatorDebugType, isTransparent, formatDebuggable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combinatorDebugType", function() { return combinatorDebugType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTransparent", function() { return isTransparent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDebuggable", function() { return formatDebuggable; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */ "./src/read/debug.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");



class Logger {
  constructor(enableLogging) {
    this.enableLogging = enableLogging;
  }

  invoke(c, input, {
    forceTransparent,
    optional
  } = {}) {
    let logged = this.enableLogging && !isTransparent(c) && !forceTransparent;

    if (logged) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_1__["preInvoke"])({
        combinator: c,
        snippet: input,
        optional: !!optional
      });
      Object(_debug__WEBPACK_IMPORTED_MODULE_1__["indent"])();
    }

    let result = c.invoke(input);

    if (logged) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_1__["outdent"])();
      Object(_debug__WEBPACK_IMPORTED_MODULE_1__["postInvoke"])(result);
    }

    return result;
  }

}
function combinatorDebugType(c) {
  if (typeof c === "function") {
    return "normal";
  } else {
    return c.kind || "normal";
  }
}
function isTransparent(c) {
  if (typeof c === "function") {
    return false;
  } else {
    return c.kind === "transparent";
  }
}
function formatDebuggable(debuggable) {
  if (typeof debuggable === "string") {
    return debuggable;
  } else if (debuggable === null) {
    return "null";
  } else if (Array.isArray(debuggable)) {
    if (debuggable.length <= 2) {
      return "[".concat(debuggable.map(formatDebuggable).join(", "), "]");
    } else {
      return "[".concat(formatDebuggable(debuggable[0]), ", ").concat(formatDebuggable(debuggable[1]), ", ").concat(formatDebuggable(debuggable[2]), ", ...]");
    }
  } else if (debuggable instanceof _snippet__WEBPACK_IMPORTED_MODULE_0__["Snippet"]) {
    return debuggable.fmt();
  } else {
    return Object(_tokens__WEBPACK_IMPORTED_MODULE_2__["debugFormatToken"])(debuggable);
  }
}

/***/ }),

/***/ "./src/read/multi.ts":
/*!***************************!*\
  !*** ./src/read/multi.ts ***!
  \***************************/
/*! exports provided: many */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "many", function() { return many; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");


function many(source) {
  return {
    name: "many \u2022 ".concat(Object(_utils__WEBPACK_IMPORTED_MODULE_1__["combinatorName"])(source)),

    invoke(input) {
      let current = input;
      let out = [];
      let count = 0;

      while (true) {
        if (count++ > 1000) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "likely infinite loop");
        }

        if (current.isEOF()) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current.rest, out]);
        }

        let iterate = current.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_1__["present"])(source));

        if (iterate.kind === "err") {
          // if we encountered a fatal error, the entire `many`
          // is an error
          if (iterate.fatal) {
            return iterate;
          } else {
            return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([current.rest, out]);
          }
        } else {
          let [next, match] = iterate.value;
          out.push(match);
          current = next;
        }
      }
    }

  };
}

/***/ }),

/***/ "./src/read/read.ts":
/*!**************************!*\
  !*** ./src/read/read.ts ***!
  \**************************/
/*! exports provided: LoggingType, CONTENT, TOP_LEVEL, read */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoggingType", function() { return LoggingType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTENT", function() { return CONTENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_LEVEL", function() { return TOP_LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "read", function() { return read; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _combinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./combinator */ "./src/read/combinator.ts");
/* harmony import */ var _combinators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./combinators */ "./src/read/combinators.ts");
/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logger */ "./src/read/logger.ts");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./debug */ "./src/read/debug.ts");
/* harmony import */ var _html__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./html */ "./src/read/html.ts");
/* harmony import */ var _multi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./multi */ "./src/read/multi.ts");
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");
/* harmony import */ var _hbs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hbs */ "./src/read/hbs.ts");











let LoggingType;

(function (LoggingType) {
  LoggingType["Return"] = "Return";
  LoggingType["Print"] = "Print";
  LoggingType["None"] = "Off";
})(LoggingType || (LoggingType = {}));

const CONTENT = Object(_combinator__WEBPACK_IMPORTED_MODULE_2__["combinator"])(() => Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("CONTENT", _html__WEBPACK_IMPORTED_MODULE_6__["COMMENT"], _html__WEBPACK_IMPORTED_MODULE_6__["END_TAG"], _html__WEBPACK_IMPORTED_MODULE_6__["START_TAG"], _html__WEBPACK_IMPORTED_MODULE_6__["TEXT"]));
const TOP_LEVEL = {
  name: "TOP_LEVEL",

  invoke(input) {
    return input.invoke(Object(_combinators__WEBPACK_IMPORTED_MODULE_3__["any"])("top level", _hbs__WEBPACK_IMPORTED_MODULE_10__["BLOCK"], _hbs__WEBPACK_IMPORTED_MODULE_10__["INTERPOLATE"], CONTENT));
  }

};
function read(source, {
  logging
} = {}) {
  try {
    let input = _snippet__WEBPACK_IMPORTED_MODULE_0__["Snippet"].input(source, new _logger__WEBPACK_IMPORTED_MODULE_4__["Logger"](logging === LoggingType.Return || logging === LoggingType.Print));
    let result = input.invoke(Object(_utils__WEBPACK_IMPORTED_MODULE_9__["complete"])(Object(_utils__WEBPACK_IMPORTED_MODULE_9__["map"])(Object(_multi__WEBPACK_IMPORTED_MODULE_7__["many"])(TOP_LEVEL), tokens => {
      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(Object(_tokens__WEBPACK_IMPORTED_MODULE_8__["root"])(tokens, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...tokens)));
    })));

    if (logging === LoggingType.Return) {
      return {
        root: Object(_utils__WEBPACK_IMPORTED_MODULE_9__["mapResult"])(result, ([, token]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(token)),
        trace: Object(_debug__WEBPACK_IMPORTED_MODULE_5__["getTrace"])()
      };
    } else {
      return {
        root: Object(_utils__WEBPACK_IMPORTED_MODULE_9__["mapResult"])(result, ([, token]) => Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(token))
      };
    }
  } finally {
    if (logging === LoggingType.Print) {
      Object(_debug__WEBPACK_IMPORTED_MODULE_5__["printTrace"])();
    }
  }
}

/***/ }),

/***/ "./src/read/serialize.ts":
/*!*******************************!*\
  !*** ./src/read/serialize.ts ***!
  \*******************************/
/*! exports provided: serializeRoot, serializeNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeRoot", function() { return serializeRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeNode", function() { return serializeNode; });
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");



function serializeRoot(root, source) {
  let out = [];

  for (let token of root.children) {
    out.push(...serializeNode(token, source));
  }

  return out.join("");
}
function serializeNode(token, source) {
  if (token === null) {
    return [""];
  }

  switch (token.type) {
    // leaf tokens
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Dot:
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Eq:
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Identifier:
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].WS:
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Text:
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].AttributeName:
      return [Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.span, source)];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].String:
      {
        let quote = token.quote === _tokens__WEBPACK_IMPORTED_MODULE_0__["QuoteType"].Single ? "'" : "\"";
        return [quote, Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.data, source), quote];
      }

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Number:
      {
        let out = [];

        if (token.negative) {
          out.push(Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.negative, source));
        }

        out.push(Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.head, source));

        if (token.tail) {
          out.push(".", Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.tail, source));
        }

        return out;
      }

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].ArgName:
      return ["@", Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.name, source)];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].AttributeValue:
      return serializeAttributeValue(token, source);

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Argument:
      return ["@", Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.name, source)];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Sexp:
      return ["(", ...serializeList(token.children, source), ")"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Interpolate:
      return ["{{", ...serializeList(token.children, source), "}}"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].TrustedInterpolate:
      return ["{{{", ...serializeList(token.children, source), "}}}"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Block:
      return [...serializeNode(token.open, source), ...serializeList(token.body, source), ...serializeNode(token.close, source)];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].OpenBlock:
      return ["{{#", ...serializeList(token.name, source), ...serializeList(token.head, source), "}}"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].BlockParams:
      return ["as |", ...serializeList(token.params, source), "|"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].CloseBlock:
      return ["{{/", ...serializeList(token.name, source), "}}"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].Comment:
      return ["<!--", Object(_span__WEBPACK_IMPORTED_MODULE_1__["slice"])(token.data, source), "-->"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].StartTag:
      return ["<", ...serializeList(token.name, source), ...serializeList(token.attributes, source), ">"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].EndTag:
      return ["</", ...serializeList(token.name, source), ...serializeNode(token.trailing, source), ">"];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].ValuedAttribute:
      return [...serializeNode(token.name, source), "=", ...serializeNode(token.value, source)];

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["TokenType"].StringInterpolation:
      return serializeList(token.parts, source);

    default:
      return Object(_utils__WEBPACK_IMPORTED_MODULE_2__["unreachable"])(token);
  }
}

function serializeAttributeValue(token, source) {
  if (Object(_tokens__WEBPACK_IMPORTED_MODULE_0__["isInterpolateAttribute"])(token)) {
    return serializeNode(token.value, source);
  }

  return [serializeQuote(token), ...serializeNode(token.value, source), serializeQuote(token)];
}

function serializeQuote(token) {
  switch (token.valueType) {
    case _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].SingleQuoted:
      return "'";

    case _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].DoubleQuoted:
      return "\"";

    default:
      return "";
  }
}

function serializeList(tokens, source) {
  if (tokens === null) {
    return [];
  }

  return [...tokens.flatMap(child => serializeNode(child, source))];
}

/***/ }),

/***/ "./src/read/token-builder.ts":
/*!***********************************!*\
  !*** ./src/read/token-builder.ts ***!
  \***********************************/
/*! exports provided: buildPresentTokens, str, int, decimal, id, arg, dot, eq, sp, ws, block, as, interpolate, stringInterpolate, attrInterpolate, sexp, text, comment, startTag, endTag, argName, attr, TokenBuilder, root */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildPresentTokens", function() { return buildPresentTokens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int", function() { return int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decimal", function() { return decimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "id", function() { return id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arg", function() { return arg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sp", function() { return sp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ws", function() { return ws; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "as", function() { return as; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringInterpolate", function() { return stringInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attrInterpolate", function() { return attrInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sexp", function() { return sexp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comment", function() { return comment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTag", function() { return startTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endTag", function() { return endTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argName", function() { return argName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attr", function() { return attr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenBuilder", function() { return TokenBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokens */ "./src/read/tokens.ts");
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../span */ "./src/span.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/read/utils.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




function buildPresentTokens(tok, builder) {
  return tok.map(token => token(builder));
}
function str(name) {
  return builder => {
    let start = builder.consume(name[0]);
    let data = builder.consume(name.slice(1, -1));
    let end = builder.consume(name.slice(-1));
    let quote = name[0] === "'" ? _tokens__WEBPACK_IMPORTED_MODULE_0__["QuoteType"].Single : _tokens__WEBPACK_IMPORTED_MODULE_0__["QuoteType"].Double;
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["stringToken"]({
      data,
      quote
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}
function int(num) {
  if (num[0] === "-") {
    return builder => {
      let negative = builder.consume("-");
      let head = builder.consume(num.slice(1));
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["numberToken"]({
        head,
        tail: null,
        negative
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(negative, head));
    };
  } else {
    return builder => {
      let head = builder.consume(num);
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["numberToken"]({
        head,
        tail: null,
        negative: null
      }, head);
    };
  }
}
function decimal(num) {
  let [, negative, head, tail] = Object(_utils__WEBPACK_IMPORTED_MODULE_2__["unwrap"])(num.match(/^(-?)([0-9]+)\.([0-9]+)$/));
  return builder => {
    let negativeSpan = negative ? builder.consume("-") : null;
    let headSpan = builder.consume(head);
    let tailSpan = null;

    if (tail) {
      builder.consume(".");
      tailSpan = builder.consume(tail);
    }

    return _tokens__WEBPACK_IMPORTED_MODULE_0__["numberToken"]({
      head: headSpan,
      tail: tailSpan,
      negative: negativeSpan
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(negativeSpan, headSpan, tailSpan));
  };
}
function id(name) {
  return builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["id"](builder.consume(name));
}
function arg(name) {
  return builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["arg"](builder.consume(name));
}
const dot = builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["dot"](builder.consume("."));
const eq = builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["eq"](builder.consume("="));
const sp = builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["ws"](builder.consume(" "));
function ws(space) {
  return builder => _tokens__WEBPACK_IMPORTED_MODULE_0__["ws"](builder.consume(space));
}
function block(name, head, ...body) {
  let curriedName = typeof name === "string" ? [id(name)] : name;
  return builder => {
    let openToken = builder.consume("{{#");
    let nameTokens = buildTokens(curriedName, builder);
    let headTokens = buildTokens(head, builder);
    let endOpen = builder.consume("}}");
    let bodyTokens = body.map(tok => tok(builder));
    let close = builder.consume("{{/");
    let closeName = buildTokens(curriedName, builder);
    let endClose = builder.consume("}}");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["block"]({
      open: _tokens__WEBPACK_IMPORTED_MODULE_0__["openBlock"]({
        name: nameTokens,
        head: headTokens
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(openToken, endOpen)),
      body: bodyTokens,
      close: _tokens__WEBPACK_IMPORTED_MODULE_0__["closeBlock"](closeName, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(close, endClose))
    });
  };
}
function as(...params) {
  return builder => {
    let start = builder.consume("as |");
    let head = params.slice(0, -1);
    let tail = params.slice(-1)[0];
    let tokenList = head.flatMap(param => typeof param === "function" ? [param(builder)] : [id(param)(builder), sp(builder)]);
    tokenList.push(id(tail)(builder));
    let end = builder.consume("|");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["blockParams"](tokenList, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}

function buildTokens(input, builder) {
  return input.map(tok => tok(builder));
}

function interpolate(...children) {
  return builder => {
    let open = builder.consume("{{");
    let out = children.map(child => child(builder));
    let close = builder.consume("}}");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["interpolate"](out, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close));
  };
}
function stringInterpolate(children, quote) {
  return builder => {
    let open = builder.consume(quote);
    let out = children.map(child => child(builder));
    let close = builder.consume(quote);
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
      type: quoteType(quote),
      value: _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"](out, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(...out))
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close));
  };
}
function attrInterpolate(...tokenList) {
  return builder => {
    let value = interpolate(...tokenList)(builder);
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
      type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].Interpolate,
      value
    }, value.span);
  };
}
function sexp(children) {
  return builder => {
    let open = builder.consume("(");
    let innerStart = builder.pos;
    let out = children.map(child => child(builder));
    let innerEnd = builder.pos;
    let close = builder.consume(")");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["sexp"]({
      children: out,
      inner: Object(_span__WEBPACK_IMPORTED_MODULE_1__["span"])(innerStart, innerEnd)
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(open, close));
  };
}
function text(chars) {
  return builder => {
    let out = builder.consume(chars);
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["text"](out);
  };
}
function comment(chars) {
  return builder => {
    let start = builder.consume("<!--");
    let data = builder.consume(chars);
    let end = builder.consume("-->");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["comment"](data, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}

function isTagName(input) {
  return typeof input === "string" || Array.isArray(input) || typeof input === "function";
}

function buildTagName(name) {
  if (Array.isArray(name)) {
    let toks = [];

    for (let part of name) {
      if (typeof part === "function") {
        toks.push(part);
      } else {
        switch (part[0]) {
          case "@":
            toks.push(arg(part));
            break;

          default:
            toks.push(id(part));
        }
      }
    }

    return toks;
  } else {
    if (typeof name === "function") {
      return [name];
    } else {
      switch (name[0]) {
        case "@":
          return [arg(name)];

        default:
          return [id(name)];
      }
    }
  }
}

function startTag(options) {
  if (isTagName(options)) {
    return builder => {
      let start = builder.consume("<");
      let nameTokens = buildPresentTokens(buildTagName(options), builder);
      let end = builder.consume(">");
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["startTag"]({
        name: nameTokens
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
    };
  } else {
    return builder => {
      let {
        name,
        attrs,
        selfClosing
      } = options;
      let start = builder.consume("<");
      let nameTokens = buildPresentTokens(buildTagName(name), builder);
      let children = attrs.map(a => a(builder));

      if (selfClosing) {
        builder.consume("/");
      }

      let end = builder.consume(">");
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["startTag"]({
        name: nameTokens,
        attrs: children,
        selfClosing
      }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
    };
  }
}
function endTag(options) {
  let tagName = isTagName(options) ? options : options.name;
  let trailing = isTagName(options) ? undefined : options.trailing;
  return builder => {
    let start = builder.consume("</");
    let tagTokens = buildPresentTokens(buildTagName(tagName), builder);
    let trailingToken = trailing ? ws(trailing)(builder) : undefined;
    let end = builder.consume(">");
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["endTag"]({
      name: tagTokens,
      trailing: trailingToken
    }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(start, end));
  };
}
function argName(name) {
  return builder => {
    let startSpan = builder.consume(name[0]);
    let nameSpan = builder.consume(name.slice(1));
    return _tokens__WEBPACK_IMPORTED_MODULE_0__["argName"](nameSpan, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(startSpan, nameSpan));
  };
}
function attr(options) {
  if (typeof options === "string") {
    return builder => {
      let nameSpan = builder.consume(options);
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["attrName"](nameSpan);
    };
  } else if (typeof options === "function") {
    return options;
  } else {
    return builder => {
      let {
        name,
        value: rawValue
      } = options;
      let start = builder.pos;
      let nameToken = typeof name === "string" ? _tokens__WEBPACK_IMPORTED_MODULE_0__["attrName"](builder.consume(name)) : name(builder);
      builder.consume("=");
      let valueToken;

      if (typeof rawValue === "string") {
        switch (rawValue[0]) {
          case "\"":
            {
              let quoteStart = builder.consume("\"");
              let valueSpan = builder.consume(rawValue.slice(1, -1));
              let quoteEnd = builder.consume("\"");
              let interpolation = _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"]([_tokens__WEBPACK_IMPORTED_MODULE_0__["text"](valueSpan)], valueSpan);
              valueToken = _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
                type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].DoubleQuoted,
                value: interpolation
              }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(quoteStart, quoteEnd));
              break;
            }

          case "'":
            {
              let quoteStart = builder.consume("'");
              let valueSpan = builder.consume(rawValue.slice(1, -1));
              let quoteEnd = builder.consume("'");
              let interpolation = _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"]([_tokens__WEBPACK_IMPORTED_MODULE_0__["text"](valueSpan)], valueSpan);
              valueToken = _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
                type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].SingleQuoted,
                value: interpolation
              }, Object(_span__WEBPACK_IMPORTED_MODULE_1__["range"])(quoteStart, quoteEnd));
              break;
            }

          default:
            {
              let valueSpan = builder.consume(rawValue);
              let interpolation = _tokens__WEBPACK_IMPORTED_MODULE_0__["stringInterpolation"]([_tokens__WEBPACK_IMPORTED_MODULE_0__["text"](valueSpan)], valueSpan);
              valueToken = _tokens__WEBPACK_IMPORTED_MODULE_0__["attrValue"]({
                type: _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].Unquoted,
                value: interpolation
              }, valueSpan);
            }
        }
      } else {
        valueToken = rawValue(builder);
      }

      let end = builder.pos;
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["valuedAttr"]({
        name: nameToken,
        value: valueToken
      }, {
        start,
        end
      });
    };
  }
}

function quoteType(quote) {
  switch (quote) {
    case "\"":
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].DoubleQuoted;

    case "'":
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].SingleQuoted;

    default:
      return _tokens__WEBPACK_IMPORTED_MODULE_0__["AttributeValueType"].Unquoted;
  }
}

class TokenBuilder {
  constructor(pos = 0) {
    _defineProperty(this, "output", "");

    this.pos = pos;
  }

  consume(chars) {
    this.output += chars;
    let start = this.pos;
    this.pos += chars.length;
    return {
      start,
      end: this.pos
    };
  }
  /**
   * This method is used by the AstBuilder to share an output
   */


  updateOutput(output) {
    this.output = output;
  }

  get source() {
    return this.output;
  }

}
function root(...children) {
  let builder = new TokenBuilder();
  let start = builder.pos;
  let out = children.map(child => child(builder));
  let end = builder.pos;
  return {
    root: _tokens__WEBPACK_IMPORTED_MODULE_0__["root"](out, Object(_span__WEBPACK_IMPORTED_MODULE_1__["span"])(start, end)),
    source: builder.source
  };
}

/***/ }),

/***/ "./src/read/tokens.ts":
/*!****************************!*\
  !*** ./src/read/tokens.ts ***!
  \****************************/
/*! exports provided: TokenType, leaf, id, dot, eq, ws, text, attrName, QuoteType, stringToken, numberToken, comment, arg, equalPath, blockParams, block, openBlock, closeBlock, AttributeValueType, argName, stringInterpolation, isInterpolateAttribute, attrValue, valuedAttr, startTag, endTag, sexp, interpolate, trustedInterpolate, root, debugFormatToken */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenType", function() { return TokenType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "leaf", function() { return leaf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "id", function() { return id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function() { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ws", function() { return ws; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attrName", function() { return attrName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuoteType", function() { return QuoteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringToken", function() { return stringToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numberToken", function() { return numberToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comment", function() { return comment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arg", function() { return arg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equalPath", function() { return equalPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blockParams", function() { return blockParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "block", function() { return block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "openBlock", function() { return openBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeBlock", function() { return closeBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AttributeValueType", function() { return AttributeValueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "argName", function() { return argName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringInterpolation", function() { return stringInterpolation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInterpolateAttribute", function() { return isInterpolateAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attrValue", function() { return attrValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valuedAttr", function() { return valuedAttr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startTag", function() { return startTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endTag", function() { return endTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sexp", function() { return sexp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trustedInterpolate", function() { return trustedInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "root", function() { return root; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debugFormatToken", function() { return debugFormatToken; });
/* harmony import */ var _span__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../span */ "./src/span.ts");

/**
 * Steps for creating a new token type:
 *
 * 1. add a variant to TokenType
 * 2. create an interface {Name}Token
 * 3. add the new token to LeafTokenMap or TokenMap
 * 4. update serializeNode to serialize the new token
 * 5. add a function to construct the new token (unless it's always nested
 *    inside another token like `BlockParams`)
 * 6. update token-builder.ts to support building the new token
 */

let TokenType;

(function (TokenType) {
  TokenType["Root"] = "Root";
  TokenType["Interpolate"] = "Interpolate";
  TokenType["TrustedInterpolate"] = "TrustedInterpolate";
  TokenType["Block"] = "Block";
  TokenType["BlockParams"] = "BlockParams";
  TokenType["OpenBlock"] = "OpenBlock";
  TokenType["CloseBlock"] = "CloseBlock";
  TokenType["Sexp"] = "Sexp";
  TokenType["Identifier"] = "Identifier";
  TokenType["Argument"] = "Argument";
  TokenType["Dot"] = "Dot";
  TokenType["Eq"] = "Eq";
  TokenType["WS"] = "WS";
  TokenType["String"] = "String";
  TokenType["Number"] = "Number";
  TokenType["Text"] = "Text";
  TokenType["Comment"] = "Comment";
  TokenType["StartTag"] = "StartTag";
  TokenType["EndTag"] = "EndTag";
  TokenType["ArgName"] = "ArgName";
  TokenType["AttributeName"] = "AttributeName";
  TokenType["AttributeValue"] = "AttributeValue";
  TokenType["ValuedAttribute"] = "ValuedAttribute";
  TokenType["StringInterpolation"] = "StringInterpolation";
})(TokenType || (TokenType = {}));

function leaf(type) {
  return span => ({
    type,
    span
  });
}
const id = leaf(TokenType.Identifier);
const dot = leaf(TokenType.Dot);
const eq = leaf(TokenType.Eq);
const ws = leaf(TokenType.WS);
const text = leaf(TokenType.Text);
const attrName = leaf(TokenType.AttributeName);
let QuoteType;

(function (QuoteType) {
  QuoteType[QuoteType["Single"] = 0] = "Single";
  QuoteType[QuoteType["Double"] = 1] = "Double";
})(QuoteType || (QuoteType = {}));

function stringToken({
  data,
  quote
}, span) {
  return {
    type: TokenType.String,
    span,
    data,
    quote
  };
}
function numberToken({
  head,
  tail,
  negative
}, span) {
  return {
    type: TokenType.Number,
    span,
    negative,
    head,
    tail
  };
}
function comment(data, span) {
  return {
    type: TokenType.Comment,
    data,
    span
  };
}
function arg(span) {
  return {
    type: TokenType.Argument,
    name: {
      start: span.start + 1,
      end: span.end
    },
    span
  };
}
function equalPath(leftTokens, rightTokens, source) {
  if (leftTokens.length !== rightTokens.length) {
    return false;
  }

  return leftTokens.every((left, index) => {
    let right = rightTokens[index];

    if (left.type !== right.type) {
      return false;
    }

    switch (left.type) {
      case TokenType.ArgName:
        return Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(left.name, source) === Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(right.name, source);

      case TokenType.Identifier:
        return Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(left.span, source) === Object(_span__WEBPACK_IMPORTED_MODULE_0__["slice"])(right.span, source);

      case TokenType.Dot:
        return true;

      default:
        throw new Error("assert: unexpected token type ".concat(left.type));
    }
  });
}
function blockParams(params, span) {
  return {
    type: TokenType.BlockParams,
    span,
    params
  };
}
function block({
  open,
  body,
  close
}) {
  return {
    type: TokenType.Block,
    span: Object(_span__WEBPACK_IMPORTED_MODULE_0__["range"])(open.span, close.span),
    open,
    body,
    close
  };
}
function openBlock({
  name,
  head
}, span) {
  return {
    type: TokenType.OpenBlock,
    span,
    name,
    head
  };
}
function closeBlock(name, span) {
  return {
    type: TokenType.CloseBlock,
    span,
    name
  };
}
let AttributeValueType;

(function (AttributeValueType) {
  AttributeValueType["Interpolate"] = "Interpolate";
  AttributeValueType["Unquoted"] = "Unquoted";
  AttributeValueType["SingleQuoted"] = "SingleQuoted";
  AttributeValueType["DoubleQuoted"] = "DoubleQuoted";
})(AttributeValueType || (AttributeValueType = {}));

function argName(name, span) {
  return {
    type: TokenType.ArgName,
    name,
    span
  };
}
function stringInterpolation(parts, span) {
  return {
    type: TokenType.StringInterpolation,
    span,
    parts
  };
}
function isInterpolateAttribute(input) {
  return input.valueType === AttributeValueType.Interpolate;
}
function attrValue({
  type,
  value
}, span) {
  return {
    type: TokenType.AttributeValue,
    span,
    valueType: type,
    value
  };
}
function valuedAttr({
  name,
  value
}, span) {
  return {
    type: TokenType.ValuedAttribute,
    span,
    name,
    value
  };
}
function startTag({
  name,
  attrs,
  selfClosing
}, span) {
  return {
    type: TokenType.StartTag,
    span,
    name,
    attributes: attrs || [],
    selfClosing
  };
}
function endTag({
  name,
  trailing
}, span) {
  return {
    type: TokenType.EndTag,
    span,
    trailing: trailing ? trailing : null,
    name
  };
}
function sexp({
  children,
  inner
}, span) {
  return {
    type: TokenType.Sexp,
    span,
    inner,
    children
  };
}
function interpolate(children, span) {
  return {
    type: TokenType.Interpolate,
    span,
    children
  };
}
function trustedInterpolate(children, span) {
  return {
    type: TokenType.TrustedInterpolate,
    span,
    children
  };
}
function root(children, span) {
  return {
    type: TokenType.Root,
    span,
    children
  };
}
function debugFormatToken(token) {
  return "<token:".concat(token.type, ">");
}

/***/ }),

/***/ "./src/read/utils.ts":
/*!***************************!*\
  !*** ./src/read/utils.ts ***!
  \***************************/
/*! exports provided: mapResult, map, complete, present, combinatorName, unreachable, join, unwrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapResult", function() { return mapResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "complete", function() { return complete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "present", function() { return present; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combinatorName", function() { return combinatorName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unreachable", function() { return unreachable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "join", function() { return join; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return unwrap; });
/* harmony import */ var _snippet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../snippet */ "./src/snippet.ts");

function mapResult(result, callback) {
  if (result.kind === "err") {
    return result;
  }

  return callback(result.value);
}
function map(combinator, mapper) {
  return {
    name: combinatorName(combinator),

    invoke(input) {
      let first = input.invoke(combinator, {
        forceTransparent: true
      });

      if (first.kind === "err") {
        return first;
      }

      let [next, value] = first.value;
      let result = mapper(value, next);

      if (result.kind === "err") {
        return result;
      }

      return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])([next, result.value]);
    }

  };
}
function complete(source) {
  return {
    name: "complete",

    invoke(input) {
      return input.invoke(map(source, (value, next) => {
        if (next.restLength !== 0) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "incomplete");
        } else {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["ok"])(value);
        }
      }));
    }

  };
}
function present(source) {
  return {
    name: "present",
    kind: "transparent",

    invoke(input) {
      let result = input.invoke(source);

      if (result.kind === "ok") {
        let [next] = result.value;

        if (input.eq(next)) {
          return Object(_snippet__WEBPACK_IMPORTED_MODULE_0__["err"])(input, "empty");
        } else {
          return result;
        }
      } else {
        return result;
      }
    }

  };
}
function combinatorName(c) {
  if (c.name) {
    return c.name;
  } else {
    console.error(c);
    throw new Error("assert: expected combinator name");
  }
}
function unreachable(value) {
  console.error("unreachable value", value);
  throw new Error("unreachable code reached");
}
function join(...items) {
  return items.filter(i => i === null || i === undefined);
}
function unwrap(v) {
  if (v === null || v === undefined) {
    throw new Error("ASSERT: Expected non-null");
  }

  return v;
}

/***/ }),

/***/ "./src/snippet.ts":
/*!************************!*\
  !*** ./src/snippet.ts ***!
  \************************/
/*! exports provided: Snippet, ok, err, fatalError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Snippet", function() { return Snippet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ok", function() { return ok; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "err", function() { return err; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fatalError", function() { return fatalError; });
class Snippet {
  static input(source, logger) {
    return new Snippet(source, 0, 0, logger);
  }

  constructor(source, offset, length, logger) {
    this.source = source;
    this.offset = offset;
    this.length = length;
    this.logger = logger;
  }

  invoke(combinator, options = {}) {
    return this.logger.invoke(combinator, this, options);
  }

  eq(other) {
    return this.source === other.source && this.offset === other.offset && this.length === other.length;
  }

  forSpan(span) {
    return new Snippet(this.source, span.start, span.end - span.start, this.logger);
  }

  fmt() {
    return "<offset:".concat(this.offset, " length:").concat(this.length, ">");
  }

  debugRest() {
    if (this.isEOF()) {
      return "(eof)";
    } else {
      return "".concat(this.source.slice(this.offset + this.length));
    }
  }

  slice(chars) {
    return new Snippet(this.source, this.offset + this.length, chars, this.logger);
  }

  get sliceRest() {
    return this.source.slice(this.offset + this.length);
  }

  get rest() {
    return new Snippet(this.source, this.offset + this.length, 0, this.logger);
  }

  isEOF() {
    return this.offset + this.length === this.source.length;
  }

  isMatch(chars) {
    let slice = this.source.slice(this.offset + this.length, this.offset + this.length + chars.length);
    return slice === chars;
  }

  extend(count = 1) {
    return new Snippet(this.source, this.offset, this.length + count, this.logger);
  }

  get span() {
    return {
      start: this.offset,
      end: this.offset + this.length
    };
  }

  get fragment() {
    return this.source.slice(this.offset, this.offset + this.length);
  }

  get restLength() {
    return this.source.length - this.offset - this.length;
  }

}
function ok(value) {
  return {
    kind: "ok",
    value
  };
}
function err(snippet, reason) {
  return {
    kind: "err",
    snippet,
    reason
  };
}
function fatalError(snippet, reason) {
  return {
    kind: "err",
    snippet,
    reason,
    fatal: true
  };
}

/***/ }),

/***/ "./src/span.ts":
/*!*********************!*\
  !*** ./src/span.ts ***!
  \*********************/
/*! exports provided: span, range, isSpan, getSpan, slice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "span", function() { return span; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function() { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSpan", function() { return isSpan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSpan", function() { return getSpan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice", function() { return slice; });
function span(start, end) {
  return {
    start,
    end
  };
}
function range(...rawSpans) {
  let spans = rawSpans.filter(s => s !== null && s !== undefined);

  if (spans.length === 0) {
    return span(0, 0);
  }

  let first = spans[0];
  let last = first;

  for (let s of spans) {
    last = s;
  }

  return {
    start: getSpan(first).start,
    end: getSpan(last).end
  };
}
function isSpan(item) {
  return typeof item.start === "number" && typeof item.end === "number";
}
function getSpan(item) {
  if (isSpan(item)) {
    return item;
  } else {
    return item.span;
  }
}
function slice(s, source) {
  return source.slice(s.start, s.end);
}

/***/ }),

/***/ 2:
/*!*******************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://localhost:9000 ./docs/index.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\Users\Yehuda\Code\hbs-parser-next\node_modules\webpack-dev-server\client\index.js?http://localhost:9000 */"./node_modules/webpack-dev-server/client/index.js?http://localhost:9000");
module.exports = __webpack_require__(/*! ./docs/index.ts */"./docs/index.ts");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,